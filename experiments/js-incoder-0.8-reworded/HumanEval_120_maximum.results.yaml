language: js
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(!k || k\
    \ > arr.length){\n        return arr;\n    }\n    \n    arr.sort(function(a, b){\n\
    \        return b - a;\n    });\n    \n    var sortedArr = arr.slice(0);\n   \
    \ var max = [];\n    \n    for(var i = 0; i < (arr.length - k); i++){\n      \
    \  max.push(sortedArr[i]);\n    }\n    \n    return max;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpo_lnkxak.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo_lnkxak.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tvar result =\
    \ [];\n\t\n\tfor (var i = 0; i < k; i++){\n\t\tresult.push(arr[i]);\n\t}\n\t\n\
    \tresult.sort(function(a, b){\n\t\treturn b-a;\n\t});\n\t\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpppbmh098.js:35:10)\n    at Object.<anonymous> (/tmp/tmpppbmh098.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    // base\
    \ case\n    if (k < 1) return [];\n    \n    // middle case\n    if (k > arr.length\
    \ - 1) return [];\n\n    // general case for merging k sorted arrays\n    var\
    \ result = [];\n    for (var i = k - 1, j = 0; i >= 0; i--, j++) {\n        if\
    \ (j < arr.length - 1 && arr[i] > arr[j]) {\n            result.push(arr[i]);\n\
    \        } else {\n            result.push(arr[j]);\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp0ciihblb.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0ciihblb.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    return quickSort(arr,\
    \ k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3,\
    \ 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphrooc112.js:17\n    return quickSort(arr, k);\n    ^\n\nReferenceError:\
    \ quickSort is not defined\n    at maximum (/tmp/tmphrooc112.js:17:5)\n    at\
    \ test (/tmp/tmphrooc112.js:25:20)\n    at Object.<anonymous> (/tmp/tmphrooc112.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    //Your\
    \ code here\n    \n    let sortedArr = []\n    \n    for( let i=0; i<arr.length;\
    \ i++){\n        let curr = arr[i]\n        let index = i\n        while( index\
    \ >= 0 && curr >arr[index] ){\n            index--\n        }\n        sortedArr.push(curr)\n\
    \    }\n    \n    sortedArr.sort((a,b)=>a-b)\n    \n    let max = []\n    for(let\
    \ i=0; i<k; i++){\n        max.push(sortedArr[i])\n    }\n    \n    return max\n\
    \    \n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmpzxfuqtbe.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzxfuqtbe.js:61:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = [];\n\
    \    for (let i = 0; i < k; i++){\n        max[i] = -Infinity;\n    }\n    max.push(...arr);\n\
    \    let index = 0;\n    let maxIndex = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if (arr[i] > max[index]){\n            max[index] = arr[i];\n\
    \            maxIndex = i;\n        }\n        index++;\n    }\n    return max.slice(0,\
    \ k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3,\
    \ 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpbja22ev7.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbja22ev7.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    arr = sort(arr);\n\
    \    let result = [];\n    for(let i =0; i < k; i++){\n        let maxIndex =\
    \ 0;\n        for(let j = 0 ; j < arr.length; j++){\n            if(arr[j] > arr[maxIndex]){\n\
    \                maxIndex = j;\n            }\n        }\n        result.push(arr[maxIndex]);\n\
    \        arr.splice(maxIndex, 1);\n    }\n    return result.concat(arr);\n}\n\
    </code>\n<|/ a tags=algorithm,sorting,arrays,javascript |>\n<| a tags=algorithm,sorting,arrays,javascript\
    \ |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5mawwnaz.js:31\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let maximum =\
    \ 0;\n  \n  for (let i = 0; i < arr.length; i++){\n    if(arr[i] > maximum){\n\
    \      maximum = arr[i];\n    }\n  }\n\n  return arr.slice(0,k).concat(arr.slice(-1));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at\
    \ test (/tmp/tmp5gddsf4o.js:33:10)\n    at Object.<anonymous> (/tmp/tmp5gddsf4o.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  return quickSelect(arr,\
    \ k, arr.length);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2r9rkxk6.js:17\n  return quickSelect(arr, k, arr.length);\n  ^\n\
    \nReferenceError: quickSelect is not defined\n    at maximum (/tmp/tmp2r9rkxk6.js:17:3)\n\
    \    at test (/tmp/tmp2r9rkxk6.js:25:20)\n    at Object.<anonymous> (/tmp/tmp2r9rkxk6.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if (k < 1){\n\
    \        return [];\n    }\n    if (k > arr.length){\n        return arr;\n  \
    \  }\n    \n    var maximum = arr[0];\n    \n    for(var i = 1; i < arr.length;\
    \ i++){\n        if (arr[i] > maximum){\n            maximum = arr[i];\n     \
    \   }\n    }\n    \n    var maximumArr = arr.slice(0);\n    maximumArr.splice(k,\
    \ 0, maximum);\n    return maximumArr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at\
    \ test (/tmp/tmpcajbfcvp.js:42:10)\n    at Object.<anonymous> (/tmp/tmpcajbfcvp.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    let len\
    \ = arr.length;\n    let max = [];\n    \n    for(let i = 0; i < len; i++){\n\
    \        let sum = 0;\n        let temp = arr[i];\n        for(let j = 0; j <\
    \ len; j++){\n            sum += temp;\n            if(sum > arr[j]){\n      \
    \          temp = arr[j];\n            }\n        }\n        max.push(temp);\n\
    \    }\n    \n    for(let i = 0; i < k; i++){\n        max = max[0];\n    }\n\
    \    \n    return max;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpatoqlk1h.js:34\n        max = max[0];\n                 ^\n\nTypeError:\
    \ Cannot read properties of undefined (reading '0')\n    at maximum (/tmp/tmpatoqlk1h.js:34:18)\n\
    \    at test (/tmp/tmpatoqlk1h.js:46:20)\n    at Object.<anonymous> (/tmp/tmpatoqlk1h.js:59:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let count =\
    \ 0;\n    let temp = 0;\n    let arrCopy = arr.slice();\n    let maxArray = [];\n\
    \    for(let i = 0; i < k; i++){\n        for(let j = 0; j < arrCopy.length; j++){\n\
    \            if(arrCopy[j] > temp){\n                temp = arrCopy[j];\n    \
    \            arrCopy.splice(j, 1);\n                count++;\n            }\n\
    \        }\n        if(count === k){\n            maxArray.push(temp);\n     \
    \       temp = 0;\n            count = 0;\n        }\n    }\n    return maxArray;\n\
    };\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpuckfb2nx.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuckfb2nx.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tvar max = [];\n\
    \tfor (var i = 0; i < k; i++){\n\t\tvar x = arr[i];\n\t\tif (x > max[max.length-1]){\n\
    \t\t\tmax.push(x);\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpecnqq2ug.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpecnqq2ug.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k > arr.length)\
    \ return [];\n  let n = Math.min(k, arr.length);\n  let maximums = arr.slice(0,\
    \ n).sort((a,b) => a - b);\n  return maximums.concat (maximum(arr.slice(n), k\
    \ - n));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6t7jqkba.js:18\n  let n = Math.min(k, arr.length);\n          \
    \     ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n\
    \    at maximum (/tmp/tmp6t7jqkba.js:18:16)\n    at maximum (/tmp/tmp6t7jqkba.js:20:27)\n\
    \    at maximum (/tmp/tmp6t7jqkba.js:20:27)\n    at maximum (/tmp/tmp6t7jqkba.js:20:27)\n\
    \    at maximum (/tmp/tmp6t7jqkba.js:20:27)\n    at maximum (/tmp/tmp6t7jqkba.js:20:27)\n\
    \    at maximum (/tmp/tmp6t7jqkba.js:20:27)\n    at maximum (/tmp/tmp6t7jqkba.js:20:27)\n\
    \    at maximum (/tmp/tmp6t7jqkba.js:20:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    \n    for(let i = 0; i < k; i++){\n        if(!arr[i]){\n       \
    \     return result;\n        }\n        result.push(arr[i]);\n        for(let\
    \ j = i+1; j < k; j++){\n            if(arr[i] > arr[j]){\n                let\
    \ temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -3,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpa_sh6221.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa_sh6221.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -3,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    var result\
    \ = [];\n    \n    for(let i = 0; i < k; i++){\n        let cur = Number.POSITIVE_INFINITY;\n\
    \        for(let j = 0; j < arr.length; j++){\n            if(arr[j] > cur){\n\
    \                cur = arr[j];\n            }\n        }\n        result.push(cur);\n\
    \    }\n\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  Infinity,\n  Infinity\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n\
    \  5\n]\n    at test (/tmp/tmpq0ahwznc.js:38:10)\n    at Object.<anonymous> (/tmp/tmpq0ahwznc.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ Infinity, Infinity ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    if (\
    \ k >= arr.length )\n        return arr;\n    \n    var maxArray = arr.slice(0,\
    \ k);\n    \n    for( var i = 1; k < arr.length; k++){\n        if( arr[ k ] >\
    \ arr[ k - 1 ] ){\n            maxArray[ k - 1 ] = arr[ k ];\n        }else{\n\
    \            maxArray[ k - 1 ] = arr[ k - 1 ];\n        }\n    }\n    \n    return\
    \ maxArray;\n    \n    \n}\n</cell>\n<cell>\ntestArr = [-2,-1];\ntestArr\n</cell>\n\
    <cell>\nmaximum( testArr, 1 )\n</cell>\n<cell>\ntestArr = [ 2, 3, 4, 5];\ntestArr\n\
    </cell>\n<cell>\nmaximum( testArr, 1 )\n</cell>\n<cell>\ntestArr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\ntestArr\n</cell>\n<cell>\nmaximum( testArr, 1 )\n</cell>\n<cell>\n\
    testArr = [-4, -4, -4];\ntestArr\n</cell>\n<cell>\nmaximum( testArr, 1 )\n</cell>\n\
    <cell>\ntestArr = [4,-4,4];\ntestArr\n</cell>\n<cell>\nmaximum( testArr, 1 )\n\
    </cell>\n<cell>\ntestArr = [-3,2,1,-2,-1,2,1];\ntestArr\n</cell>\n<cell>\nmaximum(\
    \ testArr, 1 )\n</cell>\n<text>\n\uC8FC\uC5B4\uC9C4 \uB9AC\uC2A4\uD2B8\uC758 \uAC12\
    \uB4E4\uC774 \uB098\uC62C \uC218 \uC788\uB294 \uACBD\uC6B0\uB97C \uBC18\uD658\uD558\
    \uB294 \uD568\uC218\uB97C \uB9CC\uB4ED\uB2C8\uB2E4.\n\n\n</text>\n<cell>\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpik6eiwr3.js:35\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    arr = arr.slice();\n\
    \    arr.sort(function(a, b){\n        return a-b;\n    });\n\n    var result\
    \ = new Array(k);\n    for (var i = 0; i < k; i++){\n        result[i] = arr[i];\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmph_bdureo.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmph_bdureo.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxArr\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        maxArr.push(arr[i]);\n\
    \        if(maxArr.length >= k){\n            return maxArr;\n        }\n    }\n\
    \    return maxArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp6vsvi6_j.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6vsvi6_j.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // write your\
    \ code in JavaScript (Node.js 8.9.4)\n    if (k >  arr.length){\n        console.log(\"\
    Invalid k\")\n        return arr\n    }\n    else if (k < 0){\n        console.log(\"\
    Invalid k\")\n        return arr\n    }\n    else if (arr.length == 1){\n    \
    \    console.log(\"Invalid k\")\n        return arr\n    }\n    else if (arr.length\
    \ > 1){\n        var max = 0\n        var temp = []\n        for (var i = 1; i\
    \ < arr.length; i++){\n            if (arr[i] > arr[max]){\n                max\
    \ = i\n            }\n        }\n        temp = arr.slice(0,max)\n        arr.splice(0,\
    \ max)\n        arr = arr.concat(temp)\n    }\n    return arr\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp9lr2fkxt.js:50:10)\n    at Object.<anonymous> (/tmp/tmp9lr2fkxt.js:63:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    \n  \
    \  let nums = arr.sort((a,b)=>a-b);\n    let len = nums.length;\n    let res =\
    \ [];\n    \n    let maxCount = 0;\n    let currentCount = 0;\n    \n    \n  \
    \  for(let i = 0; i < len; i++){\n        currentCount = Math.max(nums[i], currentCount);\n\
    \        if(nums[i] === currentCount){\n            if(maxCount < currentCount){\n\
    \                maxCount = currentCount;\n                res.push(nums[i]);\n\
    \            }\n        }\n    }\n    return res;\n    \n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpvzu0oa94.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvzu0oa94.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if (k > arr.length)\
    \ return []\n    \n    let max_element = arr[0]\n    let max_element_index = 0\n\
    \    \n    for (let i = 1; i < arr.length; i++){\n        if (arr[i] > max_element){\n\
    \            max_element = arr[i]\n            max_element_index = i\n       \
    \ }\n    }\n    \n    let result = [max_element]\n    \n    for (let i = arr.length\
    \ - 1; i >= 0; i--){\n        if (arr[i] > arr[i + k - 1])\n            result.push(arr[i\
    \ + max_element_index])\n    }\n    \n    return result\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpyv2_pycy.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyv2_pycy.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if (k <= 0 ||\
    \ k > arr.length) return [];\n  let max = [arr[0]];\n  for (let i = 1; i < k;\
    \ i++){\n    if (arr[i] > max[0]){\n      max = [arr[i]];\n    }\n    if (arr[i]\
    \ > max[1]){\n      max = [arr[i]];\n    }\n  }\n  return max;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpeeyu5jm6.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeeyu5jm6.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tif(!Array.isArray(arr)){\n\
    \t\tthrow new TypeError(\"The argument should be an array.\");\n\t}\n\tif(!isInteger(k)){\n\
    \t\tthrow new TypeError(\"The argument should be a positive integer.\");\n\t}\n\
    \tif(k > arr.length){\n\t\tthrow new RangeError(\"The argument should be less\
    \ than the length of the array.\");\n\t}\n\t\n\tvar res = [];\n\tvar start = 0;\n\
    \tvar end = arr.length-1;\n\t\n\twhile(start <= end){\n\t\twhile(start <= end\
    \ && arr[start] < arr[end]){\n\t\t\tstart++;\n\t\t}\n\t\twhile(start <= end &&\
    \ arr[start] > arr[end]){\n\t\t\tend--;\n\t\t}\n\t\t\n\t\tif(start <= end){\n\t\
    \t\tres.push(arr[start++]);\n\t\t}\n\t}\n\t\n\tres.sort((a, b) => a - b);\n\t\n\
    \tif(k === 1){\n\t\treturn res[0];\n\t}\n\t\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < k; i++){\n\t\tif(i > res.length){\n\t\t\tbreak;\n\t\t}\n\t\tresult.push(res[i]);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplkytxb7d.js:20\n\tif(!isInteger(k)){\n\t^\n\nReferenceError: isInteger\
    \ is not defined\n    at maximum (/tmp/tmplkytxb7d.js:20:2)\n    at test (/tmp/tmplkytxb7d.js:65:20)\n\
    \    at Object.<anonymous> (/tmp/tmplkytxb7d.js:78:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tlet result =\
    \ [];\n\t\n\twhile(arr.length > k){\n\t\tlet max = Math.max(...arr);\n\t\tlet\
    \ index = arr.indexOf(max);\n\t\t\n\t\tif(arr.length > k){\n\t\t\tresult.push(max);\n\
    \t\t\t\n\t\t\tarr.splice(index, 1);\n\t\t\t\n\t\t} else {\n\t\t\tresult.push(arr.shift());\n\
    \t\t}\n\t}\n\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmptxwjradv.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmptxwjradv.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k < 0 ||\
    \ k > arr.length) return [];\n    var arr2 = [];\n    var length = arr.length;\n\
    \    for(var i = 0; i < length; i++){\n        arr2.push(arr[i]);\n    }\n   \
    \ arr2.sort((a, b) => a-b);\n    arr2.length = k;\n    return arr2;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmp8cbsmpp9.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8cbsmpp9.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        let index = arr.indexOf(-Infinity);\n\
    \        if (index != -1) {\n            result.push(arr[index]);\n          \
    \  arr.splice(index, 1);\n        }\n    }\n    return result.concat(arr);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpnionk9kd.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnionk9kd.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  var results =\
    \ [];\n  var temp = [];\n  var largest = arr[0];\n  var index = arr[0];\n  \n\
    \  //Find max element\n  for(var i = 1; i < arr.length; i++){\n    if(arr[i] >\
    \ largest){\n      index = i;\n      largest = arr[i];\n    }\n  }\n  \n  //Push\
    \ largest element to temp array\n  temp.push(largest);\n  \n  //Push rest of the\
    \ elements to results with index as index\n  for(var i = index + 1; i < arr.length;\
    \ i++){\n    temp.push(arr[i]);\n  }\n  \n  //return result\n  return temp;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpsa5ik8rw.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsa5ik8rw.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    var sorted\
    \ = [...arr];\n    \n    for(var i=1;i<sorted.length;i+=k){\n        for(var j=i;j<sorted.length;j+=k){\n\
    \            if(sorted[j] > sorted[j-1]){\n                sorted[j] = sorted[j-1];\n\
    \            }\n        }\n    }\n    \n    return sorted;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmprgv6qpxe.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmprgv6qpxe.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let arrSorted\
    \ = arr.sort((a,b) => a - b)\n    let maxIndexes = arrSorted.filter(x => x >=\
    \ 0).slice(0, k) \n    return arrSorted.filter(x => x >= 0).slice(0, k).concat(maxIndexes)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpalxa8fck.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpalxa8fck.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    var result\
    \ = [],\n        max;\n\n    for(var i = 0; i < arr.length; i++){\n        max\
    \ = Math.max.apply(null, arr);\n        result.push(max);\n\n        arr = arr.reduce(function(res,\
    \ current){\n            return Math.max(res, current);\n        }, max);\n  \
    \  }\n\n    if(k > result.length){\n        k = result.length;\n    }\n\n    result.length\
    \ = k;\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp2uzlffih.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2uzlffih.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    arr = arr.sort((a,b)=>a-b);\n\
    \    var max = arr[k-1];\n    var arr2 = arr.slice(0,k).sort((a,b)=>a-b);\n  \
    \  return arr2.slice(0,max);\n}\n</code>\n<|/ a tags=sorting,arrays,arraylist,javascript,algorithm\
    \ dscore=1 |>\n<| c |>\ncan you please explain the solution for the above problem?\n\
    <|/ c |>\n<| c |>\nHey, I added explanation, please check.\n<|/ c |>\n<| c |>\n\
    `sort` sorts array by values. If `a` and `b` are equal, `a` comes before `b` in\
    \ alphabetical order. Here, I am sorting it by their difference `a-b`, so in case\
    \ when `a` is greater than `b`, its difference will come first. Similarly, when\
    \ `a` is less than `b`, its difference will come last\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpm6yp_09d.js:22\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if (k <= 0\
    \ || !k){\n        return [];\n    }\n    if (k <= arr.length){\n        return\
    \ arr.slice(0, k);\n    }\n    if (k > arr.length){\n        return arr.slice(0,\
    \ arr.length - 1);\n    }\n    const m = Math.ceil(arr.length / k);\n    const\
    \ max = new Array(k);\n    for (let i = 0; i < k; i++){\n        max[i] = -Infinity;\n\
    \    }\n    for (let i = 0; i < m; i++){\n        for (let j = 0; j < k; j++){\n\
    \            if (arr[i * k + j] > max[j]){\n                max[j] = arr[i * k\
    \ + j];\n            }\n        }\n    }\n    return max;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpaos2n9x8.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaos2n9x8.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const sorted\
    \ = arr\n    .sort((a,b)=> a-b)\n    .slice(0, k);\n  return sorted;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmp3ii4b8f3.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3ii4b8f3.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    let max\
    \ = -Infinity;\n    let res = [];\n    \n    for(let i=0;i<arr.length;i++){\n\
    \        \n        if(arr[i] > max){\n            max = arr[i];\n        }\n \
    \   }\n    \n    for(let i=0;i<arr.length;i++){\n        if(arr[i] === max &&\
    \ i!==k){\n            res.push(max);\n        }\n    }\n    \n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp4ff2wqdr.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4ff2wqdr.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    var result\
    \ = [];\n    var len = arr.length;\n    \n    for(let i = 0; i <= len; i++){\n\
    \        var max = arr[0];\n        for(let j = 1; j < len; j++){\n          \
    \  if(max < arr[j]){\n                max = arr[j];\n            }\n        }\n\
    \        result.push(max);\n    }\n    \n    result.sort(function(a, b){\n   \
    \     return a - b;\n    });\n    \n    return result.slice(0, k);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpc_7bigqa.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc_7bigqa.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k > arr.length){\n\
    \        console.log(`k is bigger than the length of arr, try again with k less\
    \ than or equal to  ${arr.length}`)\n        return [];\n    }\n    var max =\
    \ []\n    for(var i = 0;i<arr.length;i++){\n        if(arr[i]>max[i]){\n     \
    \       max = arr[i];\n        }\n    }\n    return max;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfkc9o3nd.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfkc9o3nd.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  return arr.sort((a,b)=>{return\
    \ b-a}).slice(0,k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp008528y4.js:25:10)\n    at Object.<anonymous> (/tmp/tmp008528y4.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    //write your\
    \ code here\n    \n    arr = arr.slice()\n    var largest = []\n    \n    for(var\
    \ i = 0 ; i< arr.length; i++){\n        if(arr[i] > arr[i+1]){\n            largest.push(arr[i])\n\
    \        }else{\n            largest.push(arr[i+1])\n        }\n    }\n    return\
    \ largest.slice(-k)\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  5,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at\
    \ test (/tmp/tmpjccnn8f4.js:37:10)\n    at Object.<anonymous> (/tmp/tmpjccnn8f4.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, 5, undefined\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  \n  if(k <= 0)\
    \ \n    return arr;\n  \n  var maxArr = [];\n  var len = arr.length;\n  var currK\
    \ = arr[0];\n  \n  for(var i=1; i<len; i++){\n    if(arr[i] > currK){\n      maxArr.push(currK);\n\
    \      currK = arr[i];\n    }else{\n      currK = currK > arr[i] ? currK : arr[i];\n\
    \    }\n  }\n  \n  maxArr.push(currK);\n  \n  return maxArr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpg7hxvran.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg7hxvran.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, 5 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    k = Math.ceil(k);\n\
    \    var resultArray = [],\n        len = arr.length,\n        i;\n    for (i\
    \ = 0; i < k; i++){\n        resultArray.push(Math.max.apply(Math, arr));\n  \
    \  }\n    for (i = k; i < len; i++){\n        resultArray.push(Math.max.apply(Math,\
    \ arr));\n    }\n    return resultArray;\n}\n</code>\n<|/ a tags=arrays,algorithm,javascript,sorting\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjeq_u_rv.js:29\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let result =\
    \ [];\n  let i = 0;\n  while (i < k) {\n    if (arr[i] > arr[i - 1]) result.push(arr[i\
    \ - 1]);\n    if (arr[i] > arr[i + 1]) result.push(arr[i + 1]);\n    i++;\n  }\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  -4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfqoze7gf.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfqoze7gf.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, -4 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    k = Math.min(k,\
    \ arr.length);\n    arr = arr.slice();\n    arr.sort(function(a, b){\n       \
    \ return a > b ? 1 : -1;\n    });\n    return arr.splice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmpsi8xzvku.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsi8xzvku.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let temp =\
    \ [];\n    for (let i = 0; i<arr.length; i++){\n        let currentMax = -1;\n\
    \        for (let j = 0; j<arr.length; j++){\n            if (arr[j] > currentMax){\n\
    \                currentMax = arr[j];\n            }\n        }\n        temp.push(currentMax);\n\
    \    }\n    return temp.slice(0,k);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp2x1sosu2.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2x1sosu2.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    var result\
    \ = new Array(k);\n    var min = -1000;\n    var max = -1000;\n    for(var i =\
    \ 0, len = arr.length; i < len; i++){\n        if(arr[i] < min){\n           \
    \ min = arr[i];\n        } else if(arr[i] > max){\n            max = arr[i];\n\
    \        }\n    }\n    \n    for(var i = 0, len = arr.length; i < len; i++){\n\
    \        var x = arr[i];\n        result[result.length] = x;\n        if(x > max){\n\
    \            result[result.length] = x;\n        }\n    }\n    \n    result.sort(function(a,\
    \ b){return a - b});\n    \n    for(var i = 0, len = result.length; i < len; i++){\n\
    \        result[i] = result[result.length] - min;\n    }\n    \n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n \
    \ -3,\n  5\n]\n    at test (/tmp/tmpklfrylql.js:50:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpklfrylql.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, NaN, NaN, NaN ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tvar result =\
    \ [];\n\twhile(arr.length > 0){\n\t\tresult.push(Math.max(...arr.splice(0, k)));\n\
    \t}\n\treturn result;\n}\n</code></pre>\n        </article>\n    </section>\n\n\
    \n\n\n</div>\n\n<nav>\n    <h2><a href=\"index.html\">Home</a></h2><h3>Global</h3><ul><li><a\
    \ href=\"global.html#array\">array</a></li><li><a href=\"global.html#bigInt\"\
    >bigInt</a></li><li><a href=\"global.html#bigIntBitwise\">bigIntBitwise</a></li><li><a\
    \ href=\"global.html#bigIntBitwise\">bigIntBitwise</a></li><li><a href=\"global.html#bitwiseNOT\"\
    >bitwiseNOT</a></li><li><a href=\"global.html#bitwiseOR\">bitwiseOR</a></li><li><a\
    \ href=\"global.html#bitwiseXOR\">bitwiseXOR</a></li><li><a href=\"global.html#bitwiseAND\"\
    >bitwiseAND</a></li><li><a href=\"global.html#chunk\">chunk</a></li><li><a href=\"\
    global.html#concat\">concat</a></li><li><a href=\"global.html#deepFlatten\">deepFlatten</a></li><li><a\
    \ href=\"global.html#endsWith\">endsWith</a></li><li><a href=\"global.html#fill\"\
    >fill</a></li><li><a href=\"global.html#findIndex\">findIndex</a></li><li><a href=\"\
    global.html#findLastIndex\">findLastIndex</a></li><li><a href=\"global.html#flatten\"\
    >flatten</a></li><li><a href=\"global.html#flattenDeep\">flattenDeep</a></li><li><a\
    \ href=\"global.html#fromEnding\">fromEnding</a></li><li><a href=\"global.html#generateString\"\
    >generateString</a></li><li><a href=\"global.html#generateUUID\">generateUUID</a></li><li><a\
    \ href=\"global.html#includes\">includes</a></li><li><a href=\"global.html#indexOf\"\
    >indexOf</a></li><li><a href=\"global.html#isBigInt\">isBigInt</a></li><li><a\
    \ href=\"global.html#isBigUint\">isBigUint</a></li><li><a href=\"global.html#isString\"\
    >isString</a></li><li><a href=\"global.html#isUint8\">isUint8</a></li><li><a href=\"\
    global.html#isUint8\">isUint8</a></li><li><a href=\"global.html#isUint8Clamped\"\
    >isUint8Clamped</a></li><li><a href=\"global.html#isUint16\">isUint16</a></li><li><a\
    \ href=\"global.html#isUint32\">isUint32</a></li><li><a href=\"global.html#isUint64\"\
    >isUint64</a></li><li><a href=\"global.html#isUint8Array\">isUint8Array</a></li><li><a\
    \ href=\"global.html#isWeakMap\">isWeakMap</a></li><li><a href=\"global.html#isWeakSet\"\
    >isWeakSet</a></li><li><a href=\"global.html#ltrim\">ltrim</a></li><li><a href=\"\
    global.html#merge\">merge</a></li><li><a href=\"global.html#omit\">omit</a></li><li><a\
    \ href=\"global.html#padEnd\">padEnd</a></li><li><a href=\"global.html#padStart\"\
    >padStart</a></li><li><a href=\"global.html#parseBigInt\">parseBigInt</a></li><li><a\
    \ href=\"global.html#parseBigUint\">parseBigUint</a></li><li><a href=\"global.html#partial\"\
    >partial</a></li><li><a href=\"global.html#partition\">partition</a></li><li><a\
    \ href=\"global.html#prepend\">prepend</a></li><li><a href=\"global.html#range\"\
    >range</a></li><li><a href=\"global.html#regex\">regex</a></li><li><a href=\"\
    global.html#replace\">replace</a></li><li><a href=\"global.html#\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_pj985v0.js:23\n</code></pre>\n^\n\nSyntaxError: Unexpected token\
    \ '<'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if (k < 1)\
    \ return [];\n    else if (k === 1) return [arr[0]];\n    else if (k === arr.length)\
    \ return arr.slice();\n    let i = 0;\n    let maxArr = [];\n    let currentMax\
    \ = 0;\n    while (i < arr.length){\n        currentMax = Math.max(currentMax,\
    \ arr[i]);\n        if (currentMax < arr[i]){\n            maxArr.push(currentMax);\n\
    \        }\n        i++;\n    }\n    return maxArr.concat(maximum(arr.slice(1),\
    \ k - 1));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmprd04fyly.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmprd04fyly.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if (arr.length\
    \ < 1){\n    return [];\n  }\n  else if (arr.length < k){\n    return arr;\n \
    \ }\n  else if (k > arr.length){\n    return arr;\n  }\n  else{\n    var maximum\
    \ = []\n    for(var i = 0; i < k; i++){\n      for(var j = i; j < (arr.length\
    \ + k); j++){\n        if (arr[j] > arr[i]){\n          arr[i] = arr[j];\n   \
    \       maximum.push(arr[i])\n        }\n      }\n    }\n    return maximum;\n\
    \  }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3,\
    \ 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmplxjwej_i.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmplxjwej_i.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let arrMax\
    \ = [...arr];\n    for(let i = 0; i <= k; i++){\n        arrMax = arrMax.sort((a,\
    \ b) => b - a);\n    }\n    return arrMax;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpwpcp28ij.js:29:10)\n    at Object.<anonymous> (/tmp/tmpwpcp28ij.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if ( k >= arr.length\
    \ || k <= 0 )\n        return null;\n    \n    var maxArr = [];\n    \n    var\
    \ currMax = arr[0];\n    \n    for (var i = 1; i < arr.length; i++) {\n      \
    \  if (arr[i] > currMax) {\n            currMax = arr[i];\n        } else if (arr[i]\
    \ == currMax) {\n            if (currMax + 1 > arr[i]) {\n                currMax\
    \ = arr[i];\n            }\n        }\n    }\n    \n    var count = 0;\n    var\
    \ newArr = [];\n    \n    for(var i = 0; i < arr.length; i++){\n        if (arr[i]\
    \ == currMax){\n            newArr.push(arr[i]);\n            count++;\n     \
    \   } else {\n            if (newArr.length != 0) {\n                newArr.push(currMax);\n\
    \                count++;\n                maxArr.push(newArr);\n            \
    \    newArr = [];\n            }\n        }\n    }\n    \n    var mergedArr =\
    \ mergeSort(maxArr);\n    \n    if (k == 1){\n        return mergedArr[0];\n \
    \   } else {\n        return mergedArr.slice(mergedArr.length-k-1, mergedArr.length);\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nnull\n\nshould\
    \ loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp8apqw2z8.js:65:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8apqw2z8.js:78:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: null,\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    let res\
    \ = [];\n\n    let sortedArr = arr.sort((a,b)=>a-b);\n\n    for(let i = 0; i <\
    \ sortedArr.length; i++){\n        for(let j = 0; j < k; j++){\n            if(sortedArr[j]\
    \ > res[j]){\n                res[j] = sortedArr[j]\n            }\n        }\n\
    \    }\n\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp7ct80dqq.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7ct80dqq.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let maxArr =\
    \ []\n  let arrLen = arr.length\n  let maxNum = arr[0]\n  for (let i = 0; i <\
    \ arrLen; i++){\n    if (arr[i] > maxNum){\n      maxNum = arr[i]\n    }\n  }\n\
    \  \n  for (let i = 0; i < k; i++){\n    let curNum = Math.ceil((maxNum + arrLen)\
    \ / 2)\n    let curMax = arr[ curNum - 1]\n    let curMin = arr[ curNum]\n   \
    \ maxArr.push(curMax)\n    maxArr.push(curMin)\n  }\n  return maxArr\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpigk9ipja.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpigk9ipja.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined, undefined, undefined, undefined, undefined ],\n  expected: [ -4,\
    \ -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  \n  // code here\n\
    }\n</cell>\n<cell>\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<cell>\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 2)\n</cell>\n<cell>\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 3)\n</cell>\n<text>\nGiven an array  of integers  and a  positive integer k,\
    \ return the sum of the largest k elements in that array.\n\n</text>\n<cell>\n\
    # Given an array arr of integers and a positive integer k, return the sum of the\
    \ largest k elements in that array.\n# Example 1:\n# >>> sumOfMaximums([1, -4,\
    \ 3, 8, 2, -6, 5, 9], 1)\n# 9\n# >>> sumOfMaximums([1, -4, 3, 8, 2, -6, 5, 9],\
    \ 2)\n# 15\n# >>> sumOfMaximums([1, -4, 3, 8, 2, -6, 5, 9], 3)\n# 19\n# Example\
    \ 2:\n# >>> sumOfMaximums([1, 2, 3, 4, 5, 6, 7, 8], 2)\n# 22\n# Example 3:\n#\
    \ >>> sumOfMaximums([1, 2, 3, 4, 5, 6, 7, 8], 3)\n# 25\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpls7n18t5.js:20\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\t\n\tif (k < 1\
    \ || k > arr.length)\n\t\treturn [];\n\tif (k == 1){\n\t\treturn [arr[0]];\n\t\
    }\n\tlet max = [];\n\t\n\tlet maxIndex = 0;\n\t\n\tlet maxValue = arr[0];\n\t\n\
    \tfor (let i = 1; i < arr.length; i++){\n\t\tif (arr[i] > maxValue){\n\t\t\tmaxValue\
    \ = arr[i];\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\t\n\tlet maxArray = [];\n\t\n\t\
    for (let i = 0; i < k; i++){\n\t\tmaxArray.push(arr[maxIndex]);\n\t\tmaxIndex--;\n\
    \t}\n\t\n\tmax.push(maxValue);\n\t\n\treturn max;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpomd6naw6.js:54:10)\n\
    \    at Object.<anonymous> (/tmp/tmpomd6naw6.js:67:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxElem\
    \ = -Infinity;\n    let result = [];\n\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let ele = arr[i];\n\n        if (ele > maxElem) {\n            maxElem\
    \ = ele;\n        }\n        if (maxElem === -Infinity) {\n            result.push(ele);\n\
    \        } else {\n            result.push(maxElem);\n        }\n    }\n\n   \
    \ if (result.length > k) {\n        result = result.slice(0, k);\n    }\n\n  \
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -3,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpcvmaiwef.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcvmaiwef.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -3,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let temp = [];\n    arr.forEach((el)=>{\n        if(temp.length<k)\n\
    \        temp.push(el);\n        else{\n            if(temp.length==k){\n    \
    \            if(el>temp[temp.length-1]){\n                    temp.push(el);\n\
    \                }\n            }\n            else{\n                let max_index\
    \ = temp.length-1;\n                for(let j=0;j<k;j++){\n                  \
    \  if(temp[j]<temp[max_index]){\n                        max_index = j;\n    \
    \                }\n                }\n                if(el>temp[max_index]){\n\
    \                    temp.push(el);\n                }\n            }\n      \
    \  }\n    })\n    console.log(temp);\n    result.push(...temp);\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpwz82duo9.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwz82duo9.js:64:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ -3, -4, 5 ]

    '
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let max = []\n\
    \  for(let i = 0; i < k; i++){\n    max[i] = arr[i]\n  }\n  for (let i = 0; i\
    \ < k; i++){\n    for (let j = i + 1; j < k; j++){\n      if (arr[i] > arr[j]){\n\
    \        max[j] = arr[j]\n      }\n    }\n  }\n  return max\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpjod5jlxm.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjod5jlxm.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k <= 0 ||\
    \ k > arr.length){\n    throw new Error('\u8F93\u5165\u7684\u53C2\u6570\u9519\u8BEF\
    ');\n  }\n  let arrCopy = [...arr];\n  let maxArr = [];\n  for(let i = 0; i <\
    \ k; i++){\n    let maxNum = arrCopy[0];\n    for(let j = 0; j < arrCopy.length;\
    \ j++){\n      if(arrCopy[j] > maxNum){\n        maxNum = arrCopy[j];\n      }\n\
    \    }\n    maxArr.push(maxNum);\n  }\n  return maxArr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp5y43kski.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5y43kski.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maximum\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(maximum < arr[i]){\n\
    \            maximum = arr[i];\n        }\n    }\n    let result = new Array(k);\n\
    \    for(let i = 0; i < k; i++){\n        result[i] = maximum;\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp7w_5_tri.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7w_5_tri.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    arr = arr.sort((a,\
    \ b) => b - a);\n    let result = [];\n    for(let i =0; i < k; i++){\n      \
    \  result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp9w_vgr1x.js:30:10)\n    at Object.<anonymous> (/tmp/tmp9w_vgr1x.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // write code\
    \ here\n    let max = [];\n    let maxCount = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        \n        if(maxCount < k){\n            if(arr[i] > max[0]){\n\
    \                max = [arr[i]];\n            }\n            maxCount++;\n   \
    \     }else if(arr[i] > max[0]){\n            max.push(arr[i]);\n            maxCount\
    \ = 1;\n        }else{\n            if(arr[i] > max[1]){\n                max\
    \ = [arr[i]];\n            }\n            maxCount = 1;\n        }\n    }\n  \
    \  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpsi9ftclq.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsi9ftclq.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // write your\
    \ code here\n    arr = arr.reduce((a,b) => [...a, ...b].sort((a,b) => b-a));\n\
    \    let len = 1;\n    let i = 1;\n    while(len < k){\n        while(i < arr.length\
    \ && arr[len] < arr[i]){\n            i++;\n        }\n        len++;\n    }\n\
    \    while(i < arr.length){\n        arr.splice(i, 0, arr[i]);\n        i++;\n\
    \    }\n    return arr;\n}\nlet arr = [-3, 2, 1, 2, -1, -2, 1];\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpeupicm6r.js:18\n    arr = arr.reduce((a,b) => [...a, ...b].sort((a,b)\
    \ => b-a));\n                                  ^\n\nTypeError: a is not iterable\n\
    \    at /tmp/tmpeupicm6r.js:18:35\n    at Array.reduce (<anonymous>)\n    at maximum\
    \ (/tmp/tmpeupicm6r.js:18:15)\n    at test (/tmp/tmpeupicm6r.js:39:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpeupicm6r.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    \n  \
    \  var sorted_arr = new Array();\n    var max = new Array();\n    \n    for(var\
    \ i = 0; i< arr.length; i++){\n        if(i==0){\n            sorted_arr.push(arr[i])\n\
    \        }else if(i == arr.length-1){\n            sorted_arr.push(arr[i]);\n\
    \            max.push(arr[i])\n        }else{\n            \n            \n  \
    \          \n            \n            \n            \n            if(arr[i]>sorted_arr[i-1]\
    \ && arr[i]>sorted_arr[i]){\n                sorted_arr.push(arr[i]);\n      \
    \          \n                \n            }else if(arr[i]>sorted_arr[i-1] &&\
    \ arr[i]<sorted_arr[i+1]){\n                sorted_arr.push(arr[i]);\n       \
    \         \n            }else if(arr[i]<sorted_arr[i-1] && arr[i]>sorted_arr[i+1]){\n\
    \                \n                \n                sorted_arr.push(arr[i]);\n\
    \                max.push(arr[i])\n            }else if(arr[i]<sorted_arr[i-1]\
    \ && arr[i]<sorted_arr[i+1]){\n                \n                sorted_arr.push(arr[i]);\n\
    \                \n            }else if(arr[i]>sorted_arr[i+1]){\n           \
    \     \n                \n                \n                \n               \
    \ \n                \n                \n                \n                \n \
    \               \n                \n                \n                \n     \
    \           \n                \n                \n                \n         \
    \       \n                \n                \n                \n             \
    \   \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7ynv9frx.js:224\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(!Array.isArray(arr)\
    \ || !Number.isInteger(k)){\n        throw new TypeError(\"Invalid Arguments:\
    \ arr must be a Array and k must be an integer.\");\n    }\n\n    var arrCopy\
    \ = arr.slice(0);\n    var sortedArr = arrCopy.sort(function(a, b){\n        return\
    \ b - a;\n    });\n    var maxArray = sortedArr.slice(0, k);\n    return maxArray;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp8gz22fy_.js:34:10)\n    at Object.<anonymous> (/tmp/tmp8gz22fy_.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    // Get\
    \ the max number index\n    let max = arr.reduce((a, b) => a < b ? a : b);\n \
    \   \n    // Initialize the result array\n    let result = new Array(k);\n\n \
    \   for(let i = 0; i < k; i++){\n        result[i] = max;\n    }\n\n    // Sort\
    \ array in descending order\n    result.sort((a, b) => b - a);\n    \n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  -4,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp5kq8de3y.js:39:10)\n    at Object.<anonymous> (/tmp/tmp5kq8de3y.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, -4,\
    \ -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if ( k > arr.length\
    \  || k < 0 ) {\n        return [];\n    }\n    \n    let output = [];\n    let\
    \ maxCount = 0;\n    arr.forEach((el)=>{\n        if ( el > 0 ) {\n          \
    \  if ( maxCount < k ) {\n                maxCount = k;\n            }\n     \
    \       output.push(el);\n        }\n    });\n    \n    return output;\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpc0diobjd.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc0diobjd.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k > 0 &&\
    \ k <= arr.length){\n        arr.sort(function(a, b){\n            return a-b;\n\
    \        });\n        arr = [];\n        var maxVal = arr[0];\n        for(var\
    \ i=0; i<arr.length; i++){\n            if(arr[i] === maxVal){\n             \
    \   arr.splice(i, 1);\n            }\n        }\n        arr.push.apply(arr, arr.slice(0,\
    \ k));\n        return arr;\n    }\n    return [];\n};\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis is a good solution. But it takes O(nlogn) time.\n<|/ c |>\n<| a dscore=3\
    \ tags=algorithm,arrays,sorting |>\nI haven't tried this but this seems reasonable:\n\
    <code>\ndef max_k(nums, k):\n    heap = k\n    largest = nums[0]\n    for i in\
    \ range(1, k):\n        heap = heap - nums[heap]\n        largest = max(largest,\
    \ nums[heap])\n        heap = heap + nums[heap]\n    return largest\n</code>\n\
    <|/ a |>\n<| c |>\nThis code is pretty neat, and I was going to suggest using\
    \ a heap as well, since this is an interesting problem.  But I'm not sure this\
    \ works -- you probably should swap `largest` and `nums[heap]` inside the loop,\
    \ so as to update the max with each iteration.  As it stands, it will return the\
    \ largest of the top k values, rather than the top k values sorted.  But it's\
    \ definitely a good approach.\n<|/ c |>\n<| c |>\nOh wow, I guess I was right\
    \ to go ahead and delete my first answer. Thanks, guys!\n<|/ c |>\n<| a dscore=3\
    \ |>\nI guess this is what you are looking for: \n<code>\ndef findMaxLength(a,\
    \ n):\n    length = 0\n    for i in a:\n        if i > length: \n            length\
    \ = length\n        else:\n            length = length + 1 \n    return length\n\
    </code>\n<|/ a tags=algorithm,arrays,sorting |>\n<| c |>\nThis code does not return\
    \ the length of the longest sequence (sequences are defined by \"maximum length\
    \ sequence\" = max of lengths).\n<|/ c |>\n<| c |>\nOh, I read this as `findMaxLength`\
    \ was the algorithm to find the length of the longest sequence in the array. My\
    \ bad.\n<|/ c |>\n<| a dscore=2 tags=algorithm,arrays,sorting |>\nHere's another\
    \ solution. I've added some comments for clarity, but please feel free to ask\
    \ if there's anything I didn't explain.\n<code>\ndef longestIncreasingSubsequence(\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdp4hzr5g.js:33\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    var tempMax\
    \ = -Infinity;\n    arr.forEach(function(v){\n        if(v > tempMax){\n     \
    \       tempMax = v;\n        }\n    });\n    var maxArray = [];\n    for(var\
    \ i = 0; i < (k-1); i++){\n        maxArray.push(arr[i]);\n    }\n    maxArray.push(tempMax);\n\
    \    return maxArray;\n}\nexports.maximum = maximum;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpq79j4mvj.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq79j4mvj.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(!k || k >\
    \  arr.length){\n    console.log('Please enter a positive integer number larger\
    \ than the length of array');\n    return undefined;\n  }\n  \n  var maxArray\
    \ = [];\n  var maxLength = 0;\n  for(var i=0; i<k; i++){\n    var curMax = arr[i];\n\
    \    var curLength = 0;\n    for(var j=0; j<i; j++){\n      if(arr[j] > curMax){\n\
    \        curMax = arr[j];\n        curLength = 1;\n      }else{\n        curLength++;\n\
    \      }\n    }\n    maxArray.push(curMax);\n    maxLength = curLength;\n  }\n\
    \  return maxArray;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -3,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpuboz_kmx.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuboz_kmx.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -3,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    arr = arr.slice();\n\
    \    arr.sort(function(a,b){return a-b;});\n    var result = [];\n    var len\
    \ = arr.length;\n    var tmp;\n    var flag = false;\n    while(k < len && flag){\n\
    \        if(k === len){\n            flag = true;\n            result.push(arr[len-1]);\n\
    \        }\n        else{\n            if(arr[k] < arr[len-1]){\n            \
    \    flag = true;\n                result.push(arr[k]);\n                k++;\n\
    \            }\n            else{\n                tmp = Math.max(arr[k], arr[len-1]);\n\
    \                flag = false;\n                k++;\n                result.push(tmp);\n\
    \            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpbhlye_ee.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbhlye_ee.js:63:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    k = k + 1;\n\
    \    var arr2 = arr.slice().sort();\n    var arr3 = [];\n    var arr4 = [];\n\
    \    var max;\n    var j;\n    for(j = 0; j < arr2.length; j++){\n        max\
    \ = arr2[j];\n        arr4.push( arr2[j] );\n        while(j != k){\n        \
    \    if(arr2[j] > max){\n                max = arr2[j];\n            }\n     \
    \       j++;\n        }\n        arr3.push( arr4[j-1] );\n    }\n    return arr3;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease edit your answer to explain how\
    \ and why this code works.\n<|/ c |>\n<| a tags=javascript,algorithm |>\nHere\
    \ is a more efficient solution that avoids creating a new array. \n<code>\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8j5j_0xt.js:36\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let result =\
    \ [];\n  let maxValues = [];\n  let maxIndex = k;\n  \n  while (k > 0) {\n   \
    \ if (maxIndex < arr.length){\n      maxValues.push(arr[k]);\n      maxIndex++;\n\
    \    }\n    k--;\n  }\n  while (maxIndex < arr.length){\n    maxValues.push(arr[k]);\n\
    \    maxIndex++;\n  }\n  while (maxIndex < arr.length){\n    result.push(maxValues.pop());\n\
    \    maxIndex++;\n  }\n  \n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpndcdja27.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpndcdja27.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k > arr.length){\n\
    \    return [];\n  }\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n\
    \    for(let j = 0; j < arr.length - k; j++){\n      if(arr[j] > arr[j + 1]){\n\
    \        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1]\
    \ = temp;\n      }\n    }\n    if(result.length === 0){\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp7i9chsli.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7i9chsli.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let result =\
    \ [];\n  if(k <= 0 || k > arr.length){\n    return result;\n  }\n  let minElement\
    \ = arr[0];\n  for(let i=1;i<arr.length;i++){\n    if(arr[i] < minElement){\n\
    \      minElement = arr[i];\n    }\n  }\n  if(arr.length > k){\n    result.push(minElement);\n\
    \    for(let i = k; i < arr.length;i++){\n      if(arr[i] > minElement){\n   \
    \     result.push(arr[i]);\n      }\n    }\n  }else{\n    for(let i=0;i<arr.length;i++){\n\
    \      if(arr[i] > minElement){\n        result.push(arr[i]);\n      }\n    }\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmphz69w2fb.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmphz69w2fb.js:62:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, 5 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tlet newArray\
    \ = [];\n\tlet newArraySize = 0;\n\tfor(let i = 0; i < arr.length; i++){\n\t\t\
    let num = arr[i];\n\t\tif(newArraySize < k){\n\t\t\tif(num > arr[newArraySize]){\n\
    \t\t\t\tnewArray[newArraySize] = num;\n\t\t\t\tnewArraySize++;\n\t\t\t}\n\t\t\
    }else{\n\t\t\twhile(newArraySize > k){\n\t\t\t\tnewArray.pop();\n\t\t\t\tnewArraySize--;\n\
    \t\t\t}\n\t\t\tnewArray.push(num);\n\t\t}\n\t}\n\treturn newArray;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp0zco3btg.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0zco3btg.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    var result\
    \ = []\n    var cur = arr[0]\n    for(var i = 0, len = arr.length; i < len; i++){\n\
    \        if(arr[i] > cur){\n            result.unshift(cur)\n            cur =\
    \ arr[i]\n        }else{\n            result.push(cur)\n            cur = arr[i]\n\
    \        }\n    }\n    if(k >= len) return result\n    for(var i = k; i < len;\
    \ i++) result.unshift(arr[i])\n    return result\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  -3,\n\
    \  -3\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpgnrfu3oe.js:38:10)\n    at Object.<anonymous> (/tmp/tmpgnrfu3oe.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, -3,\
    \ -3 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(arr.length\
    \ <= k) return arr;\n  \n  let result = [];\n  let maxNum = arr[0];\n  let maxPos\
    \ = 0;\n  \n  for (let i = 1; i < k; i++){\n    if (arr[i] > maxNum){\n      maxNum\
    \ = arr[i];\n      maxPos = i;\n    }\n  }\n  \n  for(let i = maxPos; i < k; i++){\n\
    \    result.push(arr[i]);\n  }\n  \n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpq2dzvh_z.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq2dzvh_z.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    while(arr.length\
    \ > k){\n        arr.sort((a, b) => b-a);\n    }\n    \n    return arr;\n    \n\
    \    \n}\n</code>\n<|/ a |>\n<| a |>\nThis is my version. Hope it helps. I hope\
    \ it helps someone.\n<code>\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpuurmobkc.js:26\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    // \u5982\
    \u679Carr\u548Ck\u7684\u957F\u5EA6\u5927\u4E8E\u7B49\u4E8E0\uFF0C\u5219arr\u4E3A\
    \u4E00\u4E2A\u6709\u5E8F\u7684\u6570\u7EC4\n    if(arr.length > 0 && k > 0){\n\
    \    \n        // \u5C06arr\u6570\u7EC4\u4ECE\u5927\u5230\u5C0F\u8FDB\u884C\u6392\
    \u5E8F\n        quickSort(arr, 0, arr.length - 1);\n        \n        // arr\u6700\
    \u5927\u7684\u957F\u5EA6\u5C31\u662Fk\n        var maxLength = k;\n        \n\
    \        // arr\u6700\u5927\u7684\u5143\u7D20\u4E5F\u662Farr[k-1]\n        var\
    \ maxElement = arr[k - 1];\n        \n        // \u518D\u904D\u5386arr\u6570\u7EC4\
    \uFF0C\u627E\u5230\u6700\u5927\u7684k\u4E2A\u6570\n        for(var i = 0; i <\
    \ arr.length; i++){\n            \n            // \u5982\u679C\u5F53\u524D\u6700\
    \u5927\u5143\u7D20\u6BD4\u5F53\u524D\u6570\u7EC4\u7684\u5F53\u524D\u5143\u7D20\
    \u5927\uFF0C\u5219\u66F4\u65B0maxLength\n            if(maxLength < arr[i].length){\n\
    \                maxLength = arr[i].length;\n                maxElement = arr[i];\n\
    \            }\n        }\n        \n        // \u8FD4\u56DE\u6392\u5E8F\u540E\
    \u7684\u6570\u7EC4\n        return maxElement;\n    }\n    \n    // \u5982\u679C\
    arr\u548Ck\u7684\u957F\u5EA6\u90FD\u7B49\u4E8E0\uFF0C\u8FD4\u56DE\u7A7A\u6570\u7EC4\
    \n    return [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxlv3_veu.js:22\n        quickSort(arr, 0, arr.length - 1);\n  \
    \      ^\n\nReferenceError: quickSort is not defined\n    at maximum (/tmp/tmpxlv3_veu.js:22:9)\n\
    \    at test (/tmp/tmpxlv3_veu.js:53:20)\n    at Object.<anonymous> (/tmp/tmpxlv3_veu.js:66:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr.sort(function(a,\
    \ b) {\n    return a-b;\n  });\n  var temp = [];\n  for(var i=0;i<k;i++){\n  \
    \  temp[i] = arr[i];\n  }\n  return temp;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmpapehsnud.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpapehsnud.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n   var resultArr\
    \ = new Array(k);\n   var maxValue = Number.NEGATIVE_INFINITY;\n   for(var i =\
    \ 0; i < k; i++){\n     if(resultArr[i] === null || resultArr[i] > maxValue){\n\
    \       resultArr[i] = arr[i];\n       maxValue = arr[i];\n     }\n   }\n   return\
    \ resultArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <3 empty\
    \ items>\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpac_ehio3.js:33:10)\n    at Object.<anonymous> (/tmp/tmpac_ehio3.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <3 empty\
    \ items> ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  return k > 0\
    \ ? maximum(arr, k - 1) : arr.reduce((a, b) => Math.max(a, b));\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpxmwn0ca8.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxmwn0ca8.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if (k > arr.length){\n\
    \        return arr;\n    }\n    if (k === 0){\n        return [...arr];\n   \
    \ }\n    let newArr = [];\n    for (let i = 0; i < k; i++){\n        let maxIndex\
    \ = -1;\n        let maxElement = arr[0];\n        for (let j = 0; j < arr.length;\
    \ j++){\n            if (arr[j] > maxElement){\n                maxIndex = j;\n\
    \                maxElement = arr[j];\n            }\n        }\n        newArr.push(maxElement);\n\
    \        if (arr[i] > maxElement){\n            newArr[newArr.length-1] = arr[i];\n\
    \        }\n    }\n    return newArr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp9is_66nj.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9is_66nj.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxArray\
    \ = [];\n    for(let i = 0; i < k; i++){\n        maxArray[i] = -Infinity;\n \
    \   }\n    for(let i = 0; i < arr.length; i++){\n        maxArray[i] = Math.max(arr[i],\
    \ maxArray[i]);\n    }\n    return maxArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpn5d_gog6.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn5d_gog6.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    return mergeSort(arr,\
    \ k, 0, arr.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmimjnckj.js:17\n    return mergeSort(arr, k, 0, arr.length-1);\n\
    \    ^\n\nReferenceError: mergeSort is not defined\n    at maximum (/tmp/tmpmimjnckj.js:17:5)\n\
    \    at test (/tmp/tmpmimjnckj.js:25:20)\n    at Object.<anonymous> (/tmp/tmpmimjnckj.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let newArr\
    \ = [];\n    for(let i = 0; i < k; i++){\n        if(newArr.length < arr.length){\n\
    \            newArr.push(arr[i]);\n        }\n        else{\n            let currentMax\
    \ = arr[i];\n            for(let j = (newArr.length-1); j >= 0; j--){\n      \
    \          if(arr[j] > currentMax){\n                    currentMax = arr[j];\n\
    \                }\n            }\n            newArr.push(currentMax);\n    \
    \    }\n    }\n    return newArr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpe3hm0afb.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe3hm0afb.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if (!k) {\n\
    \        return arr;\n    }\n    let arr = arr.sort((a,b) => a-b);\n    \n   \
    \ let max = -Infinity;\n    let max_index = 0;\n    \n    for (let i = 0; i <\
    \ k; i++){\n        if (arr[i] > max) {\n            max = arr[i];\n         \
    \   max_index = i;\n        }\n    }\n    return arr.slice(max_index, k);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpl60jpmre.js:20\n    let arr = arr.sort((a,b) => a-b);\n       \
    \ ^\n\nSyntaxError: Identifier 'arr' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    //Write\
    \ your code here\n    var max = arr[0];\n    for(var i=1;i<arr.length;i++){\n\
    \        if(arr[i]>max){\n            max = arr[i];\n        }\n    }\n    var\
    \ newArray = [];\n    for(var i=0;i<k;i++){\n        newArray.push(max);\n   \
    \ }\n    return newArray;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp7vwmhy5t.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7vwmhy5t.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k >= arr.length){\n\
    \    console.log('k should be less or equal than arr.length');\n  }\n  var maxArr\
    \ = arr.slice();\n  var count = 0;\n  while(maxArr.length > 0 && count < k){\n\
    \    maxArr.sort(function(a, b){\n      return b-a;\n    });\n    count++;\n \
    \ }\n  return maxArr.slice(k);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpklk271kd.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpklk271kd.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'k should be less or equal than arr.length

    '
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    let result\
    \ = []\n    let maxArr = [arr[0]]\n    \n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] > arr[0]){\n            result.push(arr[i])\n            maxArr.push(arr[i])\n\
    \        }\n        else{\n            for(let j = 0; j < maxArr.length; j++){\n\
    \                if(maxArr[j] > arr[i]){\n                    maxArr[j] = arr[i]\n\
    \                }\n            }\n        }\n    }\n    \n    for(let i = 0;\
    \ i < k; i++){\n        result.push(maxArr[i])\n    }\n    \n    return result\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -4,\n\
    \  5,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n\
    \    at test (/tmp/tmpwknt9_rt.js:46:10)\n    at Object.<anonymous> (/tmp/tmpwknt9_rt.js:59:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -4, 5,\
    \ undefined ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    let sortedArr\
    \ = [...arr];\n    \n    if(sortedArr.length < k){\n        sortedArr = sortedArr.concat(sortedArr.slice(-k));\n\
    \    }\n    \n    sortedArr.sort((a,b) => a - b);\n    \n    return sortedArr.slice(0,\
    \ k);\n    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmpc08dgfpb.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc08dgfpb.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const result\
    \ = [];\n  let curMax = Number.NEGATIVE_INFINITY;\n\n  for(const ele of arr){\n\
    \    if (ele > curMax){\n      result.push(curMax);\n      curMax = ele;\n   \
    \ } else {\n      curMax = ele;\n    }\n  }\n\n  result.push(curMax);\n\n  if\
    \ (k <= result.length){\n    return result.slice(0, k);\n  } else {\n    return\
    \ result.slice(0, result.length-1);\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -Infinity,\n\
    \  -4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at\
    \ test (/tmp/tmpomtpo5eb.js:43:10)\n    at Object.<anonymous> (/tmp/tmpomtpo5eb.js:56:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -Infinity,\
    \ -4, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // write your\
    \ code here\n    return arr.sort((a,b)=>{\n        return a-b;\n    })[k-1];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpv8k900h_.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv8k900h_.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let maxArr =\
    \ arr.slice(0, k);\n  let maxIndex = 0;\n\n  for (let i = 0; i < arr.length; i++){\n\
    \    let value = arr[i];\n    for (let j = 0; j < k; j++){\n      if (value <=\
    \ maxArr[j]){\n        maxArr[j] = value;\n        maxIndex = j;\n      }\n  \
    \  }\n  }\n\n  return maxArr.slice(maxIndex, maxIndex+k);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpr63zxmtd.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr63zxmtd.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if (k > arr.length){\n\
    \        throw new Error('k must be less than or equal to arr.length');\n    }\n\
    \    let max_value = -Infinity;\n    let result = [];\n    for (let i = 0; i <\
    \ k; i++){\n        let current_value = arr[i];\n        let max_index = i;\n\
    \        for (let j = i; j < arr.length; j++){\n            if (arr[j] > current_value){\n\
    \                current_value = arr[j];\n                max_index = j;\n   \
    \         }\n        }\n        result.push(current_value);\n        arr[max_index]\
    \ = arr[arr.length-1];\n        arr.pop();\n        if (current_value > max_value){\n\
    \            max_value = current_value;\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -4,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at\
    \ test (/tmp/tmpz7jecdzb.js:46:10)\n    at Object.<anonymous> (/tmp/tmpz7jecdzb.js:59:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -4, undefined\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr = arr.slice()\
    \ //clone\n  k = k || arr[0].length //default k is arr.length\n  \n  if(k >= arr.length)\
    \ return arr //if k is bigger that arr.length\n  \n  var biggest = []\n  \n  for(var\
    \ i=0;i<k;i++){\n    biggest.push(arr[i]) //push the i-th element to biggest\n\
    \  }\n  \n  for(var j=k-1;j>=0;j--){\n    var curr = biggest[j]\n    for(var i=j+1;i<arr.length;i++){\n\
    \      if(arr[i] > curr){\n        biggest[j] = arr[i]\n      }\n    }\n  }\n\
    \  \n  return biggest\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpg4j_btw3.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg4j_btw3.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k<0){\n  \
    \  throw new Error('k must be non-negative');\n  }\n  let max = [];\n  if(k>arr.length){\n\
    \    throw new Error('k must be less than or equal to the length of the array');\n\
    \  }\n  for(let i=0;i<k;i++){\n    let j = arr.length-1;\n    let temp;\n    while(j>i){\n\
    \      if(arr[j]>arr[j+1]){\n        temp=arr[j];\n        arr[j]=arr[j+1];\n\
    \        arr[j+1]=temp;\n        j--;\n      }else{\n        break;\n      }\n\
    \    }\n    max = max.concat(arr);\n  }\n  return max;\n};\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5,\n  -3,\n  -4,\n  5,\n  -3,\n  -4,\n  5\n]\n\nshould loosely deep-equal\n\
    \n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpwxyy7_m1.js:47:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwxyy7_m1.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -3,\
    \ -4,  5, -3, -4,\n     5, -3, -4,  5\n  ],\n  expected: [ -4, -3, 5 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // Write your\
    \ code here\n    arr = arr.sort(function(a,b){\n        return a-b;\n    });\n\
    \    for(var i=0;i<k;i++){\n        arr.pop();\n    }\n    return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp2v06n64f.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2v06n64f.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(arr.length\
    \ <= k){\n        return arr;\n    }\n    let arrMax = [arr[0]];\n    for(let\
    \ i = 1; i < k; i++){\n        if(arr[i] > arrMax[0]){\n            arrMax[0]\
    \ = arr[i];\n        }\n        else if(arr[i] > arrMax[1]){\n            arrMax[1]\
    \ = arr[i];\n        }\n    }\n    return arrMax;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpnxotylqq.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnxotylqq.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k > arr.length){\n\
    \    throw Error(\"The value of k must less than or equal to the length of array\"\
    );\n  }\n  if(k === 0){\n    return [];\n  }\n  var index1 = 0, index2 = arr.length\
    \ - 1;\n  var max1 = arr[index1];\n  var max2 = arr[index2];\n\n  while(index2\
    \ < k){\n    if(max2 < max1){\n      index1++;\n      max1 = arr[index1];\n  \
    \  }\n    else if(max2 > max1){\n      index2--;\n      max2 = arr[index2];\n\
    \    }\n    else break;\n  }\n  return arr.slice(index1, index2 + 1);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmptn1zviti.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmptn1zviti.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    var result\
    \ = [];\n    var max = 1;\n    for(var i=0; i<k; i++){\n        max = Math.max(max,\
    \ arr[i]);\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp5ur_sto4.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ur_sto4.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    arr =\
    \  [...arr];\n    var max = arr[0];\n    \n    for(var i = 1 ; i < arr.length\
    \ ; i++){\n        if(arr[i] > max){\n            max = arr[i];\n        }\n \
    \   }\n    \n    var result = [];\n    \n    for(var i = 0; i < k ; i++){\n  \
    \      result.push(max);\n    }\n    \n    result.sort(function(a, b){\n     \
    \   return a - b;\n    });\n    \n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpb7cj2q4j.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb7cj2q4j.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Write your\
    \ code here.\n  if(k<0){\n    k=0;\n  }\n  if(arr.length<k){\n    return arr;\n\
    \  }\n  else{\n    while(arr.length>k){\n      arr.pop();\n    }\n    return arr;\n\
    \  }\n}\n</code>\n<|/ a |>\n<| c |>\nI think you mean the opposite of the [accepted\
    \ answer](https://stackoverflow.com/a/48503304/4987285).\n<|/ c |>\n<| c |>\n\
    This is not the accepted answer. This doesn't work when k is 0 or less. This is\
    \ the maximum function with that behaviour.\n<|/ c |>\n<| c |>\nI fixed the example\
    \ code. It was `k` instead of `k-1`.\n<|/ c |>\n<| c |>\nThis does not return\
    \ sorted array, it returns the maximum k elements in an unsorted array.\n<|/ c\
    \ |>\n<| a |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjva5o_aw.js:31\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(arr.length\
    \ > k){\n    return maximum(arr.slice(0,k), k);\n  }\n  \n  if(arr.length == k){\n\
    \    return arr;\n  }\n  \n  let max = [];\n  let index = 0;\n  \n  for(let i\
    \ = 0; i < arr.length; i++){\n    if(arr[i] > max[index]){\n      max[index] =\
    \ arr[i];\n      index++;\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpyp6v8l11.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyp6v8l11.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    // Your\
    \ code here!\n    arr = arr.sort((a,b) => b-a)\n    \n    return arr.slice(0,k)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpbhu921a7.js:29:10)\n    at Object.<anonymous> (/tmp/tmpbhu921a7.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxArr\
    \ = []\n    for(let i = 0; i < arr.length; i++){\n        if(arr.indexOf(i) >=\
    \ k){\n            maxArr.push(arr[i])\n        }\n    }\n    return maxArr\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmppp9h46wl.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmppp9h46wl.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  \n  if(k <= 0\
    \ || k >= arr.length)\n    return []\n  \n  let sortedArray = arr.sort((a,b) =>\
    \ b - a)\n  \n  let maxArr = []\n  \n  for(let i = 0; i <= k-1; i++){\n    let\
    \ index = sortedArray.indexOf(Math.max(...sortedArray))\n    if(index != -1){\n\
    \      maxArr.push(sortedArray[index])\n      sortedArray.splice(index, 1)\n \
    \   }\n  }\n  \n  return maxArr\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmprcp0uud8.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmprcp0uud8.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArray\
    \ = [];\n    let sortedArrayLength = 0;\n    for(let i = 0; i < k; i++){\n   \
    \     sortedArray.push(arr[i]);\n    }\n    sortedArrayLength = k;\n    for(let\
    \ j = 0; j < arr.length; j++){\n        if(sortedArrayLength <= j){\n        \
    \    sortedArray.push(arr[j]);\n            sortedArrayLength++;\n        }\n\
    \        else if(sortedArray[j] > arr[j]){\n            sortedArray[j] = arr[j];\n\
    \            sortedArrayLength++;\n        }\n        else{\n            sortedArray.push(arr[j]);\n\
    \            sortedArrayLength--;\n        }\n    }\n    \n    return sortedArray;\n\
    }\nmodule.exports = {\n    maximum\n};\n\n},{}],4:[function(require,module,exports){\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpryokbvu3.js:44\n},{}],4:[function(require,module,exports){\n^\n\
    \nSyntaxError: Unexpected token '}'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let n = arr.length\n\
    \    let maximums = [];\n    let maximums_lengths = []\n    for(let i = 0; i <\
    \ k; i++){\n        let max_element = arr[i]\n        for(let j = 0; j < n; j++){\n\
    \            if(max_element > arr[j]){\n                max_element = arr[j]\n\
    \            }\n        }\n        maximums.push(max_element)\n        maximums_lengths.push(max_element)\n\
    \    }\n    return maximums.concat(maximums_lengths);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  -4,\n\
    \  -4,\n  -4,\n  -4,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n\
    \  5\n]\n    at test (/tmp/tmpfenzlg9y.js:37:10)\n    at Object.<anonymous> (/tmp/tmpfenzlg9y.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, -4,\
    \ -4, -4, -4, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    \n    if (arr.length <= k) return arr;\n    \n    for (let i = 0;\
    \ i <= arr.length-k; i++){\n        let current = arr[i];\n        \n        for\
    \ (let j = i; j <= i+k; j++){\n            if (arr[j] > current){\n          \
    \      current = arr[j];\n            }\n        }\n        \n        result.push(current);\n\
    \    }\n    \n    return result.sort((a,b) => a-b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpa5ltx88_.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa5ltx88_.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    var i, result;\n\
    \    if (k > arr.length){\n        return null;\n    }\n    result = [];\n   \
    \ for (i = 0; i < k; i++){\n        result.push(Math.max.apply(null, arr));\n\
    \    }\n    return result.sort(function(a, b){\n        return b - a;\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpmh3tysi7.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmh3tysi7.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    k = k % arr.length;\n\
    \    arr = arr.slice(-k);\n    arr.push(...arr.slice(-k));\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5,\n  -3,\n  -4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n\
    \  5\n]\n    at test (/tmp/tmpwzwb2bau.js:28:10)\n    at Object.<anonymous> (/tmp/tmpwzwb2bau.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5, -3, -4, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = [];\n\
    \    let max = Math.max(...arr);\n    for (let i = arr.length - 1; i >= 0; i--)\
    \ {\n        if (arr[i] === max) {\n            arr.splice(i, 1);\n          \
    \  max = Math.max(...arr);\n        }\n    }\n    k = k % arr.length;\n    if\
    \ (k >= arr.length) {\n        return arr;\n    } else {\n        let kk = k %\
    \ arr.length;\n        return arr.slice(kk).concat(arr.slice(0, kk));\n    }\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpaxvlmvag.js:18\n    let max = Math.max(...arr);\n        ^\n\n\
    SyntaxError: Identifier 'max' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr\
    \ = arr;\n    let maxArr = [];\n    while(sortedArr.length > k){\n        maxArr.push(sortedArr.pop());\n\
    \    }\n    return maxArr;\n}\nvar maximum1 = maximum([-3, -4, 5], 3);\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpalas02lr.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpalas02lr.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k > arr.length){\n\
    \        return arr;\n    }\n    \n    let arr = arr.slice();\n    let maxArr\
    \ = [];\n    for(let i = 0; i <= k; i++){\n        let maxInd = arr.indexOf(Math.max(...arr));\n\
    \        maxArr.push(arr[maxInd]);\n        arr.splice(maxInd, 1);\n    }\n  \
    \  return maxArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpme6saypd.js:21\n    let arr = arr.slice();\n        ^\n\nSyntaxError:\
    \ Identifier 'arr' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let arr = sortArray(arr);\n\
    \    let res = arr[k-1];\n    let len = 0;\n    arr.forEach(e =>{\n        if(e>\
    \ res) len = k;\n        if(e <= res) len = len+1;\n    });\n    len = len - k;\n\
    \    let i = 0;\n    let j = 0;\n    let k = 0;\n    while(j < len){\n       \
    \ i = j + k;\n        while((i >= 0) && (arr[i] > res)){\n            arr[i] =\
    \ arr[i]-1;\n            i = i-1;\n        }\n        j = j+k;\n        k++;\n\
    \    }\n    while(j < k){\n        arr[j] = arr[j+1];\n        j = j+1;\n    }\n\
    \    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp022quxyn.js:17\n    let arr = sortArray(arr);\n        ^\n\nSyntaxError:\
    \ Identifier 'arr' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  \n  if(arr.length\
    \ === 0) return arr;\n  \n  var largest = arr[0];\n  \n  for(var i = 1; i < k;\
    \ i++){\n    \n    if(arr[i] > largest) largest = arr[i];\n  }\n  \n  return largest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpq2b9wix5.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq2b9wix5.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: -1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k == 0)\
    \ return arr;\n    var result = [];\n    var max_num = Math.max.apply(null, arr);\n\
    \    while(arr.length >= k){\n        if(arr[k] > max_num){\n            var num\
    \ = arr.pop();\n            arr.unshift(num);\n            result.unshift(num);\n\
    \        }else{\n            k --;\n        }\n    }\n    return maximum(result,k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976941
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k > arr.length){\n\
    \    return [];\n  }\n  \n  if(k === 0){\n    return arr;\n  }\n  \n  const max\
    \ = [];\n  let i = 0;\n  \n  while(i + 1 < arr.length && arr[i] < arr[i + 1]){\n\
    \    i++;\n  }\n  \n  while(i + 1 < arr.length && arr[i] > arr[i + 1]){\n    max.push(arr[i]);\n\
    \    i++;\n  }\n  \n  max.push(...arr.slice(i));\n  return max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpwxsrd9hq.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwxsrd9hq.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k > arr.length)\
    \ return [];\n  let result = [];\n  for(let i = 0; i < k; i++){\n    result.push(Math.max(...arr));\n\
    \    arr.splice(-1, 1);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -3\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpk02y9gcn.js:31:10)\n    at Object.<anonymous> (/tmp/tmpk02y9gcn.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -3\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // write your\
    \ code here\n    let result = [];\n    for(let i=0; i< arr.length; i++){\n   \
    \     if(k === result.length){\n            result.push(arr[i]);\n        }else\
    \ if(arr[i] > result[k-1]){\n            result[k-1] = arr[i];\n        }\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpura8qwir.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpura8qwir.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  return arr.sort((a,b)\
    \ => b-a)\n  .slice(-k)\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp2siphyiq.js:26:10)\n    at Object.<anonymous> (/tmp/tmp2siphyiq.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k >= arr.length)\
    \ return arr;\n    \n    let result = [];\n    let temp = [];\n    let flag =\
    \ false;\n    for(let i = 0; i < arr.length; i++){\n        let currentValue =\
    \ arr[i];\n        let maxPos = i;\n        \n        //Find max element position\
    \ in arr\n        for(let j = i + 1; j < arr.length; j++){\n            if(arr[j]\
    \ > currentValue){\n                maxPos = j;\n                currentValue\
    \ = arr[j];\n            }\n        }\n        \n        if(!flag){\n        \
    \    //Find the new max element in temp and arr\n            if(maxPos !== i){\n\
    \                temp.push(arr[i]);\n                temp.push(arr[maxPos]);\n\
    \            }else{\n                temp.push(arr[i]);\n            }\n     \
    \       \n        }else{\n            //If flag is true, find the max element\
    \ in temp and arr\n            temp.push(arr[i]);\n            if(maxPos !== i){\n\
    \                temp.push(arr[maxPos]);\n            }\n        }\n        flag\
    \ = !flag;\n        result.push(temp);\n        temp = [];\n    }\n    \n    return\
    \ result.map(item => item.sort((a, b) => b - a)); \n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpico1f5c4.js:63:10)\n\
    \    at Object.<anonymous> (/tmp/tmpico1f5c4.js:76:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  var result =\
    \ [];\n  \n  // Write your code here\n  for(var i = 0; i < k; i++) {\n    if(arr.length\
    \ == 0){\n      result.push(0);\n      break;\n    }\n    result.push(Math.max(arr[0],\
    \ arr[1]));\n    arr.shift();\n  }\n  \n  if(arr.length > 0) {\n    for(var i\
    \ = 0; i < k; i++) {\n      result.push(Math.max(arr[0], arr[1]));\n      arr.shift();\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  5,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpwjic723s.js:43:10)\n    at Object.<anonymous> (/tmp/tmpwjic723s.js:56:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, 5, NaN\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  arr = arr.sort((a,\
    \ b) => b-a);\n  return arr.slice(0,k);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpnihwd9mu.js:26:10)\n    at Object.<anonymous> (/tmp/tmpnihwd9mu.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let index = 0;\n    let max = Number.NEGATIVE_INFINITY;\n    for(let\
    \ i = 0; i <= arr.length-k; i++){\n        for(let j = i; j < k; j++){\n     \
    \       max = Math.max(max, arr[j]);\n        }\n        result.push(max);\n \
    \       max = 0;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpxs42gt1l.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxs42gt1l.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  var sorted =\
    \ arr.slice();\n  sorted.sort(function(a, b){\n    return a - b;\n  });\n  return\
    \ sorted.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmpjo05f4j2.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjo05f4j2.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxArr\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let tempArr = [];\n        for(let\
    \ j = 0; j < arr.length; j++){\n            if(arr[j] > maxArr[j]){\n        \
    \        tempArr = [...tempArr, arr[j]];\n            }\n        }\n        maxArr\
    \ = [...maxArr, ...tempArr];\n    }\n    console.log(maxArr);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpw79qk8hp.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw79qk8hp.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[]

    '
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    var res = [];\n\
    \    for(let i = 1 ; i < k ; i++){\n        let max = -Infinity;\n        for(let\
    \ j = 0 ; j < arr.length ; j++){\n            if (arr[j] > max){\n           \
    \     max = arr[j]\n            }\n        }\n        res.push(max);\n    }\n\
    \    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpgq15yxfi.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgq15yxfi.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if (k < 1 ||\
    \ k > arr.length){\n        throw 'k must in [0, arr.length) range';\n    }\n\
    \    var result = [], max = 0, min = Number.MAX_VALUE, i;\n    for(i = 0; i <\
    \ k; i++){\n        //Find the max and min number in current k range\n       \
    \ if (arr[i] > max){\n            max = arr[i];\n        }\n        if (arr[i]\
    \ < min){\n            min = arr[i];\n        }\n    }\n    for (i = 0; i < k;\
    \ i++){\n        //Put the max number in result array\n        if (arr[i] > max){\n\
    \            result.push(max);\n            max = arr[i];\n        }\n       \
    \ //Put the min number in result array\n        else if (arr[i] < min){\n    \
    \        result.push(min);\n            min = arr[i];\n        }\n        //Put\
    \ the number in result array\n        else {\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\nmodule.exports = {\n    maximum: maximum,\n\
    \    minimum: minimum,\n    average: average\n}\n},{}],5:[function(require,module,exports){\n\
    'use strict'\nconst sum = require('./sum.js')\nconst difference = require('./difference.js')\n\
    const product = require('./product.js')\nconst division = require('./division.js')\n\
    const mod = require('./mod.js')\nconst remainder = require('./remainder.js')\n\
    const absolute = require('./absolute.js')\nconst abs = require('./abs.js')\nconst\
    \ sign = require('./sign.js')\nconst sqrt = require('./sqrt.js')\nconst sqrToSQR\
    \ = sqrt ** 2\nconst sqrtToSQR = sqrt(2)\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppkw2uba4.js:53\n},{}],5:[function(require,module,exports){\n^\n\
    \nSyntaxError: Unexpected token '}'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = []\n    \n    for(let i = 0; i < arr.length; i++){\n        let sum = 0\n\
    \        let index = arr.length-1\n\n        while(index >= 0){\n            sum\
    \ += arr[index]\n            if(sum > k){\n                result.splice(0, index+1)\n\
    \                break\n            }\n            index--\n        }\n    }\n\
    \    return result\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpjc4kc_1h.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjc4kc_1h.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k > arr.length){\n\
    \    return arr\n  }\n  return arr.slice(0, k).sort(function(a, b){\n    return\
    \ b - a\n  }).concat(arr.slice(k)).slice(0, k)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpd8dgrl9t.js:30:10)\n    at Object.<anonymous> (/tmp/tmpd8dgrl9t.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tvar res = [];\n\
    \tif(k === 0 || k > arr.length){\n\t\treturn res;\n\t}\n\tfor(var i = 0, len =\
    \ arr.length; i < k; i++){\n\t\tres.push(arr[i]);\n\t}\n\t\n\treturn res.sort(function(a,\
    \ b){\n\t\treturn b - a;\n\t});\n};\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp9x1wj97_.js:35:10)\n    at Object.<anonymous> (/tmp/tmp9x1wj97_.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tlet max = []\n\
    \tlet len = 0\n\tlet i = -1\n\tlet leng = arr.length\n\n\twhile (len <= k) {\n\
    \t\ti++\n\t\tlen++\n\t\tmax.push(arr[i])\n\t}\n\twhile(i < leng) {\n\t\tif (max[len-1]\
    \ < arr[i]) {\n\t\t\tmax[len-1] = arr[i]\n\t\t}\n\t\ti++\n\t\tlen++\n\t}\n\n\t\
    while (len > k) {\n\t\tmax.pop()\n\t\tlen--\n\t}\n\treturn max\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpr2x_6xc9.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr2x_6xc9.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    arr = arr ||\
    \ [];\n    k = k || 0;\n    \n    if(arr.length === 0){\n        return [];\n\
    \    }\n\n    if(k < 1){\n        k = 1;\n    }\n    \n    if(k > arr.length){\n\
    \        k = arr.length;\n    }\n\n    var result = [];\n    var max;\n    \n\
    \    for(var i = 0; i < k; ++i){\n        max = -Infinity;\n        \n       \
    \ for(var j = 0; j < arr.length; ++j){\n            if(arr[j] > max){\n      \
    \          max = arr[j];\n            }\n        }\n        result.push(max);\n\
    \    }\n    \n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpb8bgay0i.js:54:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb8bgay0i.js:67:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    var largest\
    \ = arr[0];\n    var new_arr = [];\n    for(var i = 0; i < k; i++){\n        var\
    \ val = arr[i];\n        for(var j = 0; j < k; j++){\n            if(val > largest){\n\
    \                largest = val;\n            }\n        }\n        new_arr.push(largest);\n\
    \        largest = -Number.MAX_VALUE;\n    }\n    return new_arr.concat().sort();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpve3z96r7.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpve3z96r7.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let maxArr =\
    \ []\n  for (let i = 0; i < arr.length; i ++){\n    if (arr[i] > maxArr[i]){\n\
    \      maxArr = arr\n    }\n  }\n  return maxArr\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmplido6yv5.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmplido6yv5.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // 1. k <=\
    \ len(arr), if 0 return arr\n    // 2. k not equal len(arr)\n    if(k > arr.length)\
    \ return arr\n    let result = []\n    let count = 1\n    for(let i = 0; i < k;\
    \ i++){\n        // count > arr[k] \n        // count < arr[k], if count > arr[k]\
    \ \n        // add arr[k] to result\n        // break the loop if arr[k] > arr[k+1]\n\
    \        while(count < arr.length && !isLessThan(arr[k], arr[k + 1], count)) count++\n\
    \        result.push(arr[k])\n    }\n    return result\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpps9oafb0.js:27\n        while(count < arr.length && !isLessThan(arr[k],\
    \ arr[k + 1], count)) count++\n                    ^\n\nReferenceError: isLessThan\
    \ is not defined\n    at maximum (/tmp/tmpps9oafb0.js:27:21)\n    at test (/tmp/tmpps9oafb0.js:38:20)\n\
    \    at Object.<anonymous> (/tmp/tmpps9oafb0.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n   var res = [];\n\
    \   k = Math.min(k, arr.length);\n   var i;\n   for (i=0;i<k;i++){\n       var\
    \ curr = arr[i];\n       var idx = -1;\n       for (var j=i;j<arr.length;j++){\n\
    \           if(Math.abs(arr[j]-curr) < Math.abs(arr[i]-curr)){\n             \
    \  curr = arr[j];\n               idx = j;\n           }\n       }\n       res.push(curr);\n\
    \       arr.splice(idx, 1);\n   }\n   return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at\
    \ test (/tmp/tmpd1zbj9vg.js:40:10)\n    at Object.<anonymous> (/tmp/tmpd1zbj9vg.js:53:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ undefined ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let len = arr.length;\n\
    \  //return len <= k\n  if(len <= k) return [];\n  if(k === 1) return arr;\n \
    \ let smaller, larger;\n  if(k < 1){\n    smaller = arr;\n    larger = arr.slice();\n\
    \    larger.pop();\n    larger.reverse();\n    larger.unshift(-arr[0]);\n  } else\
    \ {\n    larger = arr.slice();\n    smaller = arr.slice();\n    smaller.pop();\n\
    \    smaller.reverse();\n    smaller.unshift(arr[0]);\n  }\n  let ans = [], i;\n\
    \  for(i = 0; i < k; i++){\n    ans[i] = larger[i];\n  }\n  for(; i < len; i++){\n\
    \    ans[i] = smaller[i];\n  }\n  return ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmplr4550d_.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmplr4550d_.js:63:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let result =\
    \ [];\n  \n  for(let i = 0; i < (k-1); i++){\n    for(let j = 0; j < arr.length;\
    \ j++){\n      if (arr[j] > arr[j + 1]){\n        arr[j] = arr[j];\n      }else{\n\
    \        arr[j] = arr[j + 1];\n      }\n    }\n    result.push(arr[j])\n  }\n\
    \  if(arr.length < k){\n    for(let j = 0; j < k-1; j++){\n      result.push(arr[j])\n\
    \    }\n  }\n  \n  return result\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpeixjtp2a.js:27\n    result.push(arr[j])\n                    ^\n\
    \nReferenceError: j is not defined\n    at maximum (/tmp/tmpeixjtp2a.js:27:21)\n\
    \    at test (/tmp/tmpeixjtp2a.js:43:20)\n    at Object.<anonymous> (/tmp/tmpeixjtp2a.js:56:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n};\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpa4i53xtz.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa4i53xtz.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // write your\
    \ code here\n    \n    var max = [];\n    var count = 0;\n    \n    for(var i\
    \ = 0, len = arr.length; i < len; i++){\n        if(count < k)\n            count++;\n\
    \        if(arr[i] > arr[arr.length - count])\n            max.push(arr[arr.length\
    \ - count])\n        else\n            max.push(arr[i]);\n    }\n    return max;\n\
    }\nvar arr = maximum([-3, -4, 5], 3)\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  -3\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmprpfo5qf9.js:38:10)\n    at Object.<anonymous> (/tmp/tmprpfo5qf9.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ -3 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    arr.sort(function(a,\
    \ b){\n        return a-b;\n    })\n    if(k === 0){\n        return arr;\n  \
    \  }\n    if(k > arr.length){\n        k = arr.length;\n    }\n    return arr.slice(0,\
    \ k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3,\
    \ 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmpgi6665jk.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgi6665jk.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tlet res = [];\n\
    \tfor (let i = 0; i < k; i++){\n\t\tlet max = Math.max(...arr.slice(i, i + 1));\n\
    \t\tres.push(max);\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp4pj6eead.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4pj6eead.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if ( k <= 0\
    \ || arr == null ) throw new RangeError(\"Invalid arguments: arr and k\");\n \
    \   \n    if ( k == 0 )\n        return [];\n    \n    let max = [];\n    \n \
    \   for( let i=0; i<arr.length; i++ )\n        for( let j=0; j<k; j++ )\n    \
    \        if ( arr[i] >= arr[j] )\n                max.push( arr[i] );\n      \
    \          \n    return max;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -3,\n\
    \  -4,\n  5,\n  5,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n \
    \ 5\n]\n    at test (/tmp/tmp41ccm7n6.js:37:10)\n    at Object.<anonymous> (/tmp/tmp41ccm7n6.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -3,\
    \ -4, 5, 5, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    if (arr.length\
    \ < k){\n        return [];\n    }\n    if (k == 1){\n        return arr;\n  \
    \  }\n    \n    let max = Math.max(arr[0], arr[1]);\n    let tmp = [arr[0]];\n\
    \    \n    for (let i = 2; i < arr.length; i++){\n        if (arr[i] > max){\n\
    \            max = arr[i];\n            tmp.push(max);\n        } else {\n   \
    \         tmp[tmp.length-1] = arr[i];\n        }\n    }\n    return tmp;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpvxu1z_pk.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvxu1z_pk.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, 5 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let arrMax =\
    \ []\n  for (let i=0; i<k; i++){\n    arrMax.push(Math.max(arr[i]))\n  }\n  return\
    \ arrMax\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp2msm64ux.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2msm64ux.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let result =\
    \ []\n  \n  // Using a for loop to find the max\n  for(let i=0; i<arr.length;\
    \ i++){\n    let j = -1\n    let max = 0\n    for(let j=0; j<k; j++){\n      if(arr[i]<max){\n\
    \        max = arr[i]\n      }\n    }\n    result.push(max)\n  }\n  \n  // return\
    \ the new sorted array\n  return result\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmph9sl9203.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmph9sl9203.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 0 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let ans = [];\n\
    \    for(let i = 0; i < k; i++){\n        ans.push(Math.max(...arr));\n      \
    \  arr = arr.slice(-arr.pop())\n    }\n    return ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -Infinity\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at\
    \ test (/tmp/tmp2vt6k9dq.js:30:10)\n    at Object.<anonymous> (/tmp/tmp2vt6k9dq.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -Infinity\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    k = k || arr.length;\n\
    \    \n    arr = arr.slice().sort();\n\n    for(var i = 0; i < k; i++){\n    \
    \    arr.push(arr.pop());\n    }\n\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp5jopj_bf.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5jopj_bf.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    var a = [];\n\
    \    var i = 0;\n    var l = arr.length;\n    var m = arr[0]\n    \n    for(;i<l;i++){\n\
    \        if(arr[i] > m){\n            a.push(m);\n            m = arr[i];\n  \
    \      }\n        else{\n            a.push(arr[i]);\n        }\n    }\n    \n\
    \    if(a.length > k){\n        a.splice(k, a.length-k);\n    }\n    return a;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  -3\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpbd_v534h.js:43:10)\n    at Object.<anonymous> (/tmp/tmpbd_v534h.js:56:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ -3 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  var arr = arr.sort((a,b)=>{\n\
    \    return a-b;\n  });\n  var result = [];\n  for(var i = 0;i<k;i++){\n    if(arr[i]>result[i]){\n\
    \      result[i] = arr[i];\n    }\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp1998g1mn.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1998g1mn.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    var result\
    \ = [];\n    if(k <= arr.length){\n        result = (k > 0) ? arr.sort() : arr;\n\
    \        for(var i = k; i < result.length; i++){\n            if(result[i] > result[k]){\n\
    \                result.splice(k, 0, result[i])\n                k--\n       \
    \     }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmplk0a60k3.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmplk0a60k3.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  return k > 0\
    \ ? arr.reduce((max,x)=>Math.max(max, x)) : arr.reduce((max,x)=>Math.max(max,\
    \ x))\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3,\
    \ 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp7pm9_2qb.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7pm9_2qb.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  var maximum =\
    \ arr[0]\n  var result = []\n  for (var i = 0; i < k; i++){\n    if (arr[i] >\
    \ maximum){\n      maximum = arr[i]\n    }\n  }\n  for (var i = 0; i < k; i++){\n\
    \    if (arr[i] > maximum){\n      result.push(arr[i])\n    }\n  }\n  return result\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpg8uovhtt.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg8uovhtt.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = [];\n\
    \    for(let i=0; i<k; i++){\n        max.push(arr[i]);\n    }\n    for(let j=0;\
    \ j<arr.length; j++){\n        if(arr[j] > max[k]){\n            max[k] = arr[j];\n\
    \        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpzduzh1gv.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzduzh1gv.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    //Create\
    \ an empty array to store the sorted array\n    let maxArr = [];\n    //Create\
    \ an empty variable to store the current index \n    let maxIndex = 0;\n    \n\
    \    //Loop from index 1 to k - 1\n    for(let i = 1; i <=k; i++){\n        //Loop\
    \ from current index to k - 1\n        for(let j = i; j <=k-1; j++){\n       \
    \     //Compare current number arr[j] to maxArr[j] and if the current number is\
    \ larger, \n            // replace it with the current maxArr[j] \n          \
    \  if(arr[j] > maxArr[j]){\n                maxArr[j] = arr[j];\n            \
    \    maxIndex = j;\n            }\n        }\n    }\n    \n    //Return the sorted\
    \ array and the index of maximum number in arr\n    return [maxArr, maxIndex];\n\
    }\n</code>\n<|/ a tags=arrays,max,javascript,sorting,algorithm |>\n<| a dscore=0\
    \ |>\nThe most efficient way is to use Array.reduceRight() on the array with a\
    \ callback that will compare the two highest items of arr and return the first\
    \ value that does not equal the other two.\n<code>\nlet arr = [-3,-4,5];\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmy8eucep.js:39\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  var arrCopy =\
    \ arr.slice(0); // clone the array\n  var res = [];\n  \n  for(var i = k; i <\
    \ arrCopy.length; i++){\n    if(arrCopy[i] > arrCopy[i - 1]){\n      res.push(arrCopy[i]);\n\
    \      arrCopy.splice(i, 1);\n    }\n  }\n  \n  return res.concat(arrCopy);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpffh_a9bv.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpffh_a9bv.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let arr = arr.slice();\
    \ \n    for(let i=0; i<k; i++)\n        arr.push(Math.max(...arr));\n    return\
    \ arr;\n}\n</cell>\n<cell>\narr = [1, 4, -10, -9, -2, -3];\nmaximum (arr, 4);\n\
    </cell>\n<cell>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9la8oz3v.js:17\n    let arr = arr.slice(); \n        ^\n\nSyntaxError:\
    \ Identifier 'arr' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if (arr.length\
    \ === 0)\n    return arr;\n  let retArr = [];\n  let min = arr[0];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] > min) {\n      min = arr[i];\n\
    \    }\n  }\n  for (let i = 0; i < k; i++) {\n    retArr.push(min);\n  }\n  for\
    \ (let i = k; i < arr.length; i++) {\n    let temp = arr[i];\n    for (let j =\
    \ i - 1; j >= 0 && arr[j] > temp; j--) {\n      arr[j + 1] = arr[j];\n    }\n\
    \    arr[j + 1] = temp;\n  }\n  return retArr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmptwp_rljb.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmptwp_rljb.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    let maxLength\
    \ = 0;\n    let maxArray = [];\n    for (let i=0; i<arr.length; i++){\n      \
    \  if (maxLength < arr[i].length){\n            maxLength = arr[i].length;\n \
    \           maxArray = [];\n        }\n        if (maxLength == arr[i].length){\n\
    \            maxArray.push(arr[i]);\n        }\n    }\n    \n    for (let i=0;\
    \ i<k; i++){\n        maxArray.push(0);\n    }\n    return maxArray;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpgzj9bgbf.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgzj9bgbf.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tlet arr = new\
    \ Array(k);\n\t\n\tfor(let i = 0; i < k; i++){\n\t\tarr[i] = -Infinity;\n\t}\n\
    \n\tfor(let i = 0; i < arr.length; i++){\n\t\tfor(let j = 0; j < arr.length; j++){\n\
    \t\t\tif(arr[j] > arr[i]){\n\t\t\t\tarr[i] = arr[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\
    \treturn arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppyn7iyel.js:17\n\tlet arr = new Array(k);\n\t    ^\n\nSyntaxError:\
    \ Identifier 'arr' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxArray\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        maxArray.push(arr[i]);\n\
    \    }\n    let maxValue = arr[0];\n    for(let i = 0; i < maxArray.length; i++){\n\
    \        if(maxValue < maxArray[i]){\n            maxValue = maxArray[i];\n  \
    \      }\n    }\n    let currentIndex = -1;\n    let finalArray = [];\n    let\
    \ finalIndex = 0;\n    for(let i = 0; i < maxArray.length; i++){\n        if(maxArray[i]\
    \ === maxValue){\n            currentIndex = i;\n        }\n    }\n    while(currentIndex\
    \ < maxArray.length){\n        finalArray.push(maxArray[currentIndex]);\n    \
    \    currentIndex++;\n    }\n    while(currentIndex < arr.length){\n        finalArray.push(arr[currentIndex]);\n\
    \        currentIndex++;\n    }\n    for(let i = 0; i < finalArray.length; i++){\n\
    \        if(finalArray[i] < 0){\n            finalArray[i] *= -1;\n        }\n\
    \    }\n    return finalArray;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpenqbzmaq.js:56:10)\n\
    \    at Object.<anonymous> (/tmp/tmpenqbzmaq.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if ( k > arr.length\
    \ || k < 0 )\n        return null;\n\n    var maxArray = [];\n    var maxIndex\
    \ = 0;\n\n    // get the k largest numbers\n    for (var i = 0; i < k; i++){\n\
    \        maxArray.push(arr[i]);\n    }\n\n    // sort the array in descending\
    \ order\n    arr.sort(function(a,b){\n        return b-a;\n    });\n\n    // loop\
    \ through the k largest numbers\n    for (var i = 0; i < k; i++){\n        if\
    \ (arr[i] > maxArray[i]){\n            maxArray[i] = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n\n    // return a sorted array of length k with the\
    \ k largest numbers\n    return maxArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpwbol_fhb.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwbol_fhb.js:63:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    let result\
    \ = arr.slice(0, k).sort((a,b)=>a-b);\n    while (result.length < k) {\n     \
    \   result.push(Math.max(...result));\n    }\n    \n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmpuncearg7.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuncearg7.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let result =\
    \ [];\n  \n  for (let i=0; i<k; i++){\n    let max = -Infinity;\n    let index\
    \ = 0;\n    \n    for (let j=0; j<arr.length; j++){\n      if (max < arr[j]){\n\
    \        max = arr[j];\n        index = j;\n      }\n    }\n    \n    result.push(max);\n\
    \  }\n  \n  return result;\n}\n\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpff8uokos.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpff8uokos.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(arr.length\
    \ === 0) return arr;\n  if(k < 0 || k > arr.length) return arr;\n  \n  var maxArr\
    \ = [];\n  var maxVal = -Infinity;\n  \n  for(var i = 0; i < arr.length; i++){\n\
    \    var val = arr[i];\n    if(val > maxVal){\n      maxVal = val;\n      maxArr\
    \ = [];\n      maxArr[0] = val;\n    }else{\n      maxArr.push(val);\n    }\n\
    \  }\n  \n  return maxArr;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpot18uuzl.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpot18uuzl.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    if(k >= 0 && k < arr.length){\n        for(let i = 0; i < arr.length;\
    \ i++){\n            for(let j = i + 1; j < arr.length; j++){\n              \
    \  let val = Math.max(arr[i], arr[j]);\n                if(val > result.length){\n\
    \                    result = result.concat([val]);\n                }else if(val\
    \ == result.length){\n                    result = result.concat([val]).concat(arr[i]);\n\
    \                }else{\n                    result = result.concat([val]).concat(arr[j]);\n\
    \                }\n            }\n        }\n    }else if(k == arr.length){\n\
    \        for(let i = 0; i < arr.length; i++){\n            let val = Math.max(arr[i]);\n\
    \            if(val > result.length){\n                result = result.concat([val]);\n\
    \            }else if(val == result.length){\n                result = result.concat([val]);\n\
    \            }else{\n                result = result.concat([val]);\n        \
    \    }\n        }\n    }\n    for(let i = 0; i < result.length; i++){\n      \
    \  result[i] = result[i] * -1;\n    }\n    console.log(result);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpuk74cu3h.js:54:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuk74cu3h.js:67:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 3, 4, -5 ]

    '
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  var result =\
    \ [];\n  var maximum = arr[0];\n  var restArr = arr.slice(1, arr.length);\n  for\
    \ (var i = 0; i < k; i++){\n    if (restArr.length === 0) {\n      break;\n  \
    \  }\n    result.push(restArr[0]);\n    restArr = restArr.slice(1, restArr.length);\n\
    \    maximum = Math.max(maximum, restArr.shift());\n  }\n  result.push(maximum);\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpk7djggru.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk7djggru.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 5 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tlet arr2 = arr.slice();\n\
    \tlet arr3 = [];\n\tfor(let i=0; i<arr2.length; i++){\n\t\tif(k === 1){\n\t\t\t\
    break;\n\t\t}\n\t\tfor(let j=0; j<k-1; j++){\n\t\t\tif(arr2[i]>arr2[j+1]){\n\t\
    \t\t\tlet temp = arr2[i];\n\t\t\t\tarr2[i] = arr2[j+1];\n\t\t\t\tarr2[j+1] = temp;\n\
    \t\t\t}\n\t\t}\n\t\tarr3.push(arr2[i]);\n\t}\n\treturn arr3;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  -3,\n\
    \  -3\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmp56du52q8.js:40:10)\n    at Object.<anonymous> (/tmp/tmp56du52q8.js:53:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, -3,\
    \ -3 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    \n  \
    \  // \u601D\u8DEF\u662F\u9009\u62E9k\u7EC4\u6700\u5927\u7684\u6570\uFF0C\u53D6\
    \u51FA\u5176\u4E2D\u4E00\u4E2A\uFF0C\u7136\u540E\u79FB\u9664\u6700\u5927\u6570\
    \u3002\n    \n    let max = -Number.MAX_VALUE\n    \n    let maxIndex = -1\n \
    \   \n    for (let i = 0, len = arr.length; i < len; i++){\n        \n       \
    \ if (arr[i] > max){\n            \n            // \u5982\u679Carr[i]\u5927\u4E8E\
    max\uFF0C\u90A3\u4E48\u9009\u62E9max\uFF0C\u5E76\u5C06max\u6539\u53D8\n      \
    \      \n            max = arr[i]\n            maxIndex = i\n            \n  \
    \      } else if (arr[i] === max){\n            \n            // \u5982\u679C\
    arr[i]\u7B49\u4E8Emax\uFF0C\u90A3\u4E48\u5C06max\u6539\u53D8\n            \n \
    \           if (i - maxIndex > k){\n                \n                // \u5982\
    \u679Ci-maxIndex>k\uFF0C\u90A3\u4E48k\u7EC4\u6700\u5927\u7684\u6570\u5C31\u4E0D\
    \u9700\u8981\u79FB\u9664\n                \n                break\n          \
    \  }\n        }\n    }\n    \n    if (maxIndex === -1){\n        \n        //\
    \ \u5982\u679C\u627E\u4E0D\u5230max\uFF0C\u5219\u65B0\u5EFA\u4E00\u4E2A\u6570\uFF0C\
    \u5E76\u5C06max\u6539\u53D8\n        \n        let newMax = -Number.MAX_VALUE\n\
    \        \n        for(let i = 1; i < k; i++){\n            newMax = Math.max(newMax,\
    \ max * i)\n        }\n        \n        return [newMax, max]\n    }\n    \n \
    \   // \u627E\u5230\u4E86max\n    \n    let resultArr = [max]\n    \n    let arrLen\
    \ = arr.length\n    \n    for(let i = maxIndex + 1; i < arrLen; i++){\n      \
    \  let cur = arr[i]\n        \n        resultArr.push(cur)\n        \n       \
    \ if (i - maxIndex >= k){\n            break\n        }\n    }\n    \n    return\
    \ resultArr\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmprbj4yg9d.js:84:10)\n\
    \    at Object.<anonymous> (/tmp/tmprbj4yg9d.js:97:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let arr1 =\
    \ []\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > arr1[0]){\n\
    \            arr1 = [arr[i]]\n        }\n        else if(arr[i] < arr1[0]){\n\
    \            arr1.push(arr[i])\n        }\n    }\n    return arr1.slice(0, k)\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpqv1kw1fg.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqv1kw1fg.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Your code\
    \ goes here\n  if(arr.length == 0) return arr;\n  if(arr.length == 1) return arr;\n\
    \  var maxArr = [];\n  var maxArrLen = arr.length\n  \n  while(maxArrLen < k){\n\
    \    maxArrLen++\n    maxArr.push(arr[0]);\n    arr.shift()\n  }\n  while(maxArrLen\
    \ > k){\n    arr.push(arr[0]);\n    maxArr.shift()\n  }\n  return maxArr;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmppjozg7po.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmppjozg7po.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let result =\
    \ [];\n  for(let i = 0; i < arr.length; i++){\n    let sum = 0;\n    for(let j\
    \ = 0; j < k; j++){\n      sum += arr[i];\n    }\n    if(sum > result[k]){\n \
    \     result[k] = sum;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpszk6lj10.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpszk6lj10.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if (k > arr.length){\n\
    \    return [];\n  }\n  \n  return _maximum(arr, arr.length, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprgspiaef.js:21\n  return _maximum(arr, arr.length, k);\n  ^\n\n\
    ReferenceError: _maximum is not defined\n    at maximum (/tmp/tmprgspiaef.js:21:3)\n\
    \    at test (/tmp/tmprgspiaef.js:29:20)\n    at Object.<anonymous> (/tmp/tmprgspiaef.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // write your\
    \ code here\n    return arr.reduce(function (memo, num){\n        if (memo.length\
    \ < k || num > memo[memo.length - k]){\n            memo.push(num);\n        }\n\
    \        return memo;\n    }, []);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpuz_jm1ah.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuz_jm1ah.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k > arr.length){\n\
    \        return [];\n    }\n    \n    for(let i=0; i<k; i++){\n        let max\
    \ = -Infinity;\n        for(let j=0; j<k; j++){\n            if(arr[j] > max){\n\
    \                max = arr[j];\n            }\n        }\n        arr.push(max);\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5,\n  5,\n  5,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n\
    ]\n    at test (/tmp/tmpfh5drr53.js:38:10)\n    at Object.<anonymous> (/tmp/tmpfh5drr53.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5, 5, 5, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if (arr.length\
    \ < 1 || k < 1) {\n        throw new Error('The length of arr must be more than\
    \ 1 and k must be more than 1')\n    }\n    let arr = arr.sort((a,b)=>a-b).reverse()\n\
    \    let result = []\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i])\n\
    \    }\n    return result\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvxdzbmx3.js:20\n    let arr = arr.sort((a,b)=>a-b).reverse()\n\
    \        ^\n\nSyntaxError: Identifier 'arr' has already been declared\n    at\
    \ Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  var arrSort =\
    \ arr.sort(function(a, b){return a - b});\n  return arr.slice(0,k).concat(arrSort.slice(0,k));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  -3,\n\
    \  5,\n  -4,\n  -3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n\
    \  5\n]\n    at test (/tmp/tmp555xjs3v.js:26:10)\n    at Object.<anonymous> (/tmp/tmp555xjs3v.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, -3,\
    \ 5, -4, -3, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  \n  var result\
    \ = [];\n  \n  for(var i = 0; i<arr.length; i++){\n    result.push(Math.max(arr[i],\
    \ k));\n  }\n  \n  return result.sort(function(a, b){\n    return b - a;\n  });\n\
    }\n</cell>\n<cell>\narr = [-3, 2, 1, 2, -1, -2, 1];\nk = 3;\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpurfuoppo.js:28\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if (k > arr.length)\n\
    \        throw new RangeError('k is out of range');\n    \n    // \u7528\u4E24\
    \u4E2A\u6570\u7EC4\u6765\u5B9E\u73B0 \u5206\u522B\u8BB0\u5F55 \u6700\u5927\u7684\
    k\u4E2A\u6570\n    // \u548C\u6700\u5927\u7684k\u4E2A\u6570\u7684\u4E0A\u9650\n\
    \    let max_values = [];\n    let max_size = 0;\n    \n    // \u7528\u4E24\u4E2A\
    \u6570\u7EC4\u6765\u5B9E\u73B0 \u5206\u522B\u8BB0\u5F55 \u6700\u5927\u7684k\u4E2A\
    \u6570\n    // \u548C\u6700\u5927\u7684k\u4E2A\u6570\u7684\u4E0A\u9650\n    let\
    \ min_values = [];\n    let min_size = 0;\n    \n    for (let i = 0; i < arr.length;\
    \ i++) {\n        const value = arr[i];\n        \n        // \u8BB0\u5F55\u6700\
    \u5927\u7684k\u4E2A\u6570\n        // \u548C\u6700\u5927\u7684k\u4E2A\u6570\u7684\
    \u4E0A\u9650\n        if ((max_size < k) && (value >= arr[max_size]))\n      \
    \      max_values.push(value);\n        \n        if ((min_size < k) && (value\
    \ < arr[min_size]))\n            min_values.push(value);\n    }\n    \n    //\
    \ \u8FD4\u56DE \u5206\u522B\u8BB0\u5F55 \u6700\u5927\u7684k\u4E2A\u6570\n    //\
    \ \u548C\u6700\u5927\u7684k\u4E2A\u6570\u7684\u4E0A\u9650\n    return [max_values,\
    \ max_size];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    -3,\n\
    \    5\n  ],\n  0\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n\
    \    at test (/tmp/tmpvp1mz9le.js:52:10)\n    at Object.<anonymous> (/tmp/tmpvp1mz9le.js:65:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ -3, 5\
    \ ], 0 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let max = [];\n\
    \  \n  for(let i = 0; i < arr.length; i++){\n    max.push(Math.max(...arr.slice(0,i)));\n\
    \  }\n\n  if(k === arr.length) return max;\n  if(k < arr.length) return arr.slice(0,\
    \ k).concat(arr.slice(k+1, arr.length));\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -Infinity,\n\
    \  -3,\n  -3\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at\
    \ test (/tmp/tmppl7lvvjl.js:33:10)\n    at Object.<anonymous> (/tmp/tmppl7lvvjl.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -Infinity,\
    \ -3, -3 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let max = arr[0]\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max\
    \ = arr[i]\n    }\n  }\n  let newArr = []\n  for (let i = 1; i <= k; i++) {\n\
    \    if (i > max) {\n      break\n    }\n    newArr.push(max)\n  }\n  return newArr\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpkdfje6gc.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkdfje6gc.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 5\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    for(var i=0,\
    \ maxi=-1000; i<k; i++){\n        if(arr[i]>maxi){\n            maxi=arr[i];\n\
    \        }\n    }\n    return arr.slice(0,k).concat([maxi]);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at\
    \ test (/tmp/tmpx7anby0m.js:30:10)\n    at Object.<anonymous> (/tmp/tmpx7anby0m.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tlet nums = arr.sort((a,\
    \ b) => b-a);\n\tlet max = [];\n\t\n\tif(k < nums.length){\n\t\tfor(let i = 0;\
    \ i < k; i++){\n\t\t\tlet index = nums.length - k + i;\n\t\t\tmax.push(nums[index]);\n\
    \t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp_4tdilyq.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_4tdilyq.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    return arr.sort(function\
    \ (a, b){\n        return b - a;\n    }).slice(0, k);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpi7n0zr83.js:27:10)\n    at Object.<anonymous> (/tmp/tmpi7n0zr83.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  var result =\
    \ [], len = arr.length;\n  if(k <= 0 || k > len) return [];\n  for(var i = len\
    \ - 1; i >= k; i--){\n    result.push(arr[i])\n  }\n  return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp_64kpmaf.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_64kpmaf.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tlet max = arr[0];\n\
    \tlet i = 0;\n\twhile(i < k){\n\t\tif(arr[i] > max){\n\t\t\tmax = arr[i];\n\t\t\
    }\n\t\ti++;\n\t}\n\treturn arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpea8fy_ln.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpea8fy_ln.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if((k > arr.length)\
    \ || (k < 1))\n    return null;\n  \n  var result = [];\n  var count = [];\n \
    \ var max = -1;\n  \n  for(var i = 0; i < arr.length; i++){\n    var num = arr[i];\n\
    \    \n    if(num >= 0){\n      if(num > max){\n        max = num;\n      }\n\
    \      \n      count.push(num);\n    }\n    \n    else{\n      if(count.length\
    \ == k)\n      {\n        result = num;\n        count = num;\n      }\n    }\n\
    \  }\n  \n  return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp3pq_an7q.js:52:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3pq_an7q.js:65:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxArr\
    \ = [];\n    let maxLength = 0;\n    for(let i=0; i<arr.length; i++){\n      \
    \  if(k > maxLength){\n            maxLength++;\n            maxArr = [];\n  \
    \      }\n        if(arr[i] > maxArr[k]){\n            if(!isEmpty(maxArr)){\n\
    \                maxArr = [arr[i]];\n            }else{\n                maxArr.push(arr[i]);\n\
    \            }\n        }\n    }\n    if(!isEmpty(maxArr)){\n        maxArr =\
    \ [...new Set(maxArr)];\n        maxArr.reverse();\n        maxArr.splice(0, k);\n\
    \    }\n    return maxArr;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpy_ir9bsl.js:32\n    if(!isEmpty(maxArr)){\n    ^\n\nReferenceError:\
    \ isEmpty is not defined\n    at maximum (/tmp/tmpy_ir9bsl.js:32:5)\n    at test\
    \ (/tmp/tmpy_ir9bsl.js:45:20)\n    at Object.<anonymous> (/tmp/tmpy_ir9bsl.js:58:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if (k >= arr.length)\
    \ return arr;\n    let max = [].concat(arr).sort((a,b)=>a-b);\n    return arr.slice(0,k).concat(max);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmphdqhfjxh.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmphdqhfjxh.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let sorted =\
    \ arr.slice(0);\n  if (k <= 0 || k > sorted.length){\n    return sorted;\n  }\n\
    \  \n  // Find max k elements\n  sorted.sort(function(a, b){\n    return a - b;\n\
    \  });\n  return sorted.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmpz6zr5c7w.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz6zr5c7w.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n\
    \  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    \n    // Your\
    \ code here\n    var maxArray = [];\n    for(i = 0; i < k; i++){\n        maxArray[i]\
    \ = arr[i];\n    }\n    \n    for(i = 0; i < (arr.length-1);i++){\n        var\
    \ minIndex = 0;\n        for(var j = 0;j < maxArray.length;j++){\n           \
    \ if(arr[j] < maxArray[j]){\n                minIndex = j;\n                break;\n\
    \            }\n        }\n        maxArray.splice(minIndex,1);\n    }\n    return\
    \ maxArray;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -4\n]\n\n\
    should loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmphbsfpwe0.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmphbsfpwe0.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -4 ],\n\
    \  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  var res = new\
    \ Array(k);\n  res.fill(Infinity);\n  \n  var i = 0;\n  var j = 0;\n  \n  for(var\
    \ len = arr.length; i<len; ++i){\n    if(res[j] > arr[i]){\n      res[j] = arr[i];\n\
    \      ++j;\n    }else{\n      i++;\n      j = 0;\n    }\n  }\n  \n  return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpnek126gc.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnek126gc.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // Write your\
    \ code here\n    if(k > arr.length)\n        return [];\n    if(k <= 0)\n    \
    \    return arr;\n    let max = [];\n    let count = 0;\n    for(let i = 0 ; i\
    \ < arr.length && count < k ; i++){\n        let cur = arr[i];\n        if(cur\
    \ > max[0]){\n            count++;\n            max = cur.concat([max]);\n   \
    \     } else {\n            max = cur.concat([max]);\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpunx_spy6.js:30\n            max = cur.concat([max]);\n        \
    \              ^\n\nTypeError: cur.concat is not a function\n    at maximum (/tmp/tmpunx_spy6.js:30:23)\n\
    \    at test (/tmp/tmpunx_spy6.js:41:20)\n    at Object.<anonymous> (/tmp/tmpunx_spy6.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  return arr.sort((a,b)=>{\n\
    \    if(a>b) return -1\n    if(a<b) return 1\n    return 0;\n  }).slice(0,k)\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n\
    \  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmphpxh1r9t.js:28:10)\n    at Object.<anonymous> (/tmp/tmphpxh1r9t.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4\
    \ ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n\tif(!k) k = 1;\n\
    \tif(!arr || !arr.length || arr[0] < -1000 || arr[0] > 1000) return arr;\n\tvar\
    \ max = [], len = 0,\n\t\tmax = arr.slice(0);\n\tlen = arr.length;\n\tfor(var\
    \ i = 0, len = arr.length; i < len; i++){\n\t\tif(max.length >= k){\n\t\t\tif(max[k\
    \ - 1] < arr[i]){\n\t\t\t\tmax[k] = arr[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t}else{\n\
    \t\t\tmax = [arr[i]];\n\t\t\tk = 1;\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpppr9oa_a.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpppr9oa_a.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4,\
    \ 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // write your\
    \ code here\n    for(var i=1;i<=k;i++){\n        arr[i]=Math.max(arr[i],arr[i-k])\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  NaN,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n  \
    \  at test (/tmp/tmpnopl0pcs.js:29:10)\n    at Object.<anonymous> (/tmp/tmpnopl0pcs.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, NaN,\
    \ NaN, NaN ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if ( k > arr.length\
    \ ){\n    return [];\n  }\n  let result = []\n  for( let i = 0; i < arr.length;\
    \ i++ ){\n    result.push( Math.max( arr[i], arr[ i + ( k - 1 ) ] ) )\n  }\n \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  NaN,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test\
    \ (/tmp/tmpjviz8vh4.js:32:10)\n    at Object.<anonymous> (/tmp/tmpjviz8vh4.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, NaN,\
    \ NaN ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976936
