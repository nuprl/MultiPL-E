name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["  let max = 0;\n  let result = [];\n  for (let i = 0; i < arr.length;\
    \ i++){\n    if (arr[i] > arr[max]){\n      max = i;\n    }\n  }\n  let min =\
    \ arr[0];\n  for(let i = 1; i < arr.length; i++){\n    if (arr[i] < arr[i]){\n\
    \      min = i;\n    }\n  }\n  result.push(arr[max], max - min + 1);\n  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  return result;\n}", "    arr = new Set(arr);\n\
    \    var min = []\n    var minIndex = 0;\n    arr.forEach(function(value, i){\n\
    \        if(value.valueOf() < min[0]){\n            min[0] = value.valueOf();\n\
    \            minIndex = i;\n        }\n    })\n    return [min[0], minIndex]\n\
    }\n\n", "    let evenArr = arr.filter((n) => {return n % 2 === 0;})\n    let smalest\
    \ = evenArr[0];\n    let smallestIndex = 0;\n    for(let i = 0; i < evenArr.length;\
    \ i++){\n        if (evenArr[i] < smalest){\n            smalest = evenArr[i];\n\
    \            smallestIndex = i;\n        }\n    }\n    return [smalest, smallestIndex];\n\
    }\n", "  let evenNodes=[];\n  for (let i=0;i<arr.length;i++){\n    if (arr[i]%2===0){\n\
    \      evenNodes.push(arr[i]);\n    }\n  }\n  let smallestEven=evenNodes.sort((a,b)=>a-b)[0];\n\
    \  let min=evenNodes.indexOf(smallestEven);\n  if (min===0){\n    return [smallestEven,\
    \ 0]\n  }\n  else {\n    return [smallestEven, evenNodes[min-1]-1];\n  }\n}\n\
    </cell>\n<cell>\n%timeit pluck([4,2,3])\n</cell>\n<cell>\n%timeit pluck([1,2,3])\n\
    </cell>\n<cell>\n%timeit pluck([])\n</cell>\n<cell>\n%timeit pluck([5,0,3,0,4,2])\n\
    </cell>\n<text>\nGreat Job!\n\n</text>\n<text>\nQuestions\n\n</text>\n<text>\n\
    How many nodes does the tree have? What is the largest node? What is the smallest\
    \ node? What is the height of the tree? What is the depth?\nA node in a binary\
    \ tree will have either two children, or two parents. What is the relationship\
    \ between height and depth?\nThe lowest node is the root of the tree. Is this\
    \ true for all trees?\n\n\n</text>\n<text>\nI really want to thank Prof. Andreas\
    \ Mueller\n\n\n</text>\n<text>\n\n</text>\n<text>\nHer website:\n\n\n</text>\n\
    <text>\nBonus Questions\n\n</text>\n<text>\nWhat is the average height and average\
    \ depth of the tree?\nWhat is the smallest node that has the smallest value?\n\
    Which nodes have the largest values? Pick two.\nWhich nodes are the furthest away\
    \ from the root?\nIn the previous problem, we were asked to pick a random node.\
    \ What if there were multiple nodes with the same value? Which node should we\
    \ pick? Pick one of them.\n\n\n</text>\n<text>\nHer website:\n\n\n</text>\n<text>\n\
    Exercise - Binary Search\n\n</text>\n<text>\nWrite a binary search to search for\
    \ an element in a sorted array, and return -1 if it is not found.\n\nYou may assume\
    \ that the array is sorted in ascending order.\n\n\n</text>\n<cell>\ndef binarySearch(arr,\
    \ item):\n    # write your code here\n    low=0;\n    high=len(arr)-1;\n    while\
    \ low<high:\n        mid=low+(high-low)//2;\n        if arr[mid]==item:\n    \
    \        return mid;\n        elif arr[mid]>item:\n            high=mid-1;\n \
    \       else:\n            low=mid+1;\n    return -1;\n\narr", "  let min = Infinity;\n\
    \  let minIndex;\n  let found = false;\n\n  for(let i = 0; i < arr.length; i++)\
    \ {\n    if(found && arr[i] >= min) {\n      return [min, minIndex];\n    } else\
    \ if(found && !arr[i] && min != Infinity) {\n      return [min, i];\n    }\n\n\
    \    if(arr[i] < min) {\n      found = true;\n      min = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n\n  return [];\n}\n", "    let minV = Number.MAX_VALUE;\n\
    \    let minIdx = -1;\n    for (let i=0; i<arr.length; i++){\n        if (arr[i]\
    \ < minV){\n            minV = arr[i];\n            minIdx = i;\n        }\n \
    \   }\n    if (minIdx == -1) return [];\n    let evenArr = arr.filter(v=> v &\
    \ 1);\n    let result = [minV, minIdx];\n    for (let i=0; i<evenArr.length; i++){\n\
    \        let nidx = i+minIdx;\n        if (nidx < evenArr.length) result[1] =\
    \ nidx;\n        if (nidx > evenArr.length) break;\n        result[0] = (result[0]\
    \ & 1) == 0 ? (result[0]|evenArr[i]) : result[0];\n    }\n    return result;\n\
    }\n", "    if (arr.length === 0) return [];\n    var odd = arr.filter(function(x)\
    \ { return x % 2 === 0; });\n    var odd_val = odd.sort().reverse()[0];\n    var\
    \ smallest = 0;\n    for (var i = 0; i < arr.length; i++){\n        if (arr[i]\
    \ % 2 === 0){\n            if (arr[i] < odd_val){\n                smallest =\
    \ i;\n            } else if (arr[i] > odd_val){\n                smallest++;\n\
    \            }\n        }\n    }\n    return [ odd_val, smallest ];\n}\n", " \
    \   let min = Number.MAX_VALUE;\n    for(let i = 0; i < arr.length; i++){\n  \
    \      if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n    \
    \    }\n    }\n    return arr.filter(a => a % 2 === 0 && a < min);\n}\n", "  const\
    \ even = arr.filter(node => node.value % 2 === 0).sort((a, b) => b.value - a.value);\n\
    \  if (even.length > 0) {\n    return [ even[0].value, even.indexOf(even[0]) ]\n\
    \  }\n  return [];\n}\n", "    var res = [];\n    var minIndex;\n    for(var i\
    \ = 0; i < arr.length; i++){\n        if(i % 2 === 0){\n            if((minIndex\
    \ === undefined || arr[minIndex] >= arr[i]) ){\n                minIndex = i;\n\
    \            }\n        }\n        res.push(arr[minIndex]);\n    }\n    return\
    \ res;\n}", "  var nodes = {}, node;\n  for(var i = 0; i < arr.length; i++){\n\
    \    node = {value: arr[i], index: i};\n    nodes[arr[i]] = node\n  }\n  var result\
    \ = Object.keys(nodes).reduce(function(acc, key){\n    var node = nodes[key];\n\
    \    node.even = !(node.value & 1);\n    if(node.even){\n      acc = [node.value,\
    \ node.index];\n    }\n    return acc;\n  }, []);\n  return result.length > 0\
    \ ? result : [undefined];\n};\n", "    let largestEvenIndex = 0;\n    let largestEvenValue\
    \ = arr[0];\n    for(let i = 0; i<arr.length; i++){\n        if(arr[i] % 2 ===\
    \ 0){\n            if(arr[i]<largestEvenValue){\n                largestEvenIndex\
    \ = i;\n                largestEvenValue = arr[i];\n            }\n        }\n\
    \    }\n    return largestEvenIndex==0 ? [] : [largestEvenValue, largestEvenIndex];\n\
    }\n</cell>\n<text>\nQ14. Given an array of positive integers, arr, and an integer\
    \ k, pick arr[k] items from the array and return them as an array.\nExample 1:\n\
    arr = [1, 4, 3, 5, 2], k = 3\nOutput: [4, 5, 3]\nExplanation: Pick 3 items from\
    \ the array and return the array.\nExample 2:\narr = [1, 2, 3, 4], k = 3\nOutput:\
    \ []\nExplanation: We can't pick 3 items from arr because there's no such k item.\n\
    Example 3:\narr = [1, 2, 3, 4], k = 4\nOutput: [1, 2]\nExplanation: Pick 4 items\
    \ from the array and return the array.\nExample 4:\narr = [1, 2, 3, 4], k = -1\n\
    Output: []\nExplanation: Can't pick any items from arr because arr has only positive\
    \ integers.\nConstraints:\n1 <= k <= arr.length\n1 <= arr[i] <= 100\nTest case\
    \ :\narr = [1, 4, 3, 5, 2], k = 3\nOutput: [4, 5, 3]\n\n\n</text>\n<cell>", " \
    \   arr = arr.sort((a,b) => a - b);\n    \n    if(!arr.length){\n        return\
    \ [];\n    }\n    \n    let result = [];\n    \n    for(let i = arr.length; i--;\
    \ ){\n        \n        if((arr[i] % 2 === 0) && (i !== 0)){\n            result.push(arr[i-1]);\n\
    \            break;\n        }\n        \n        result.push(arr[i-1]);\n   \
    \     \n    }\n    \n    if(result.length >= 2){\n        return result;\n   \
    \ }\n    \n    return result;\n}\n", "    let index = arr.sort((a, b) => a - b).findIndex(n\
    \ => n % 2 === 0);\n    if (index === -1){\n        return [];\n    }\n    return\
    \ [ arr[index], index ];\n}", "    \n    let arrIndex = arr.map( n => n)\n   \
    \ arrIndex.sort((a,b) => a-b)\n    const min = arrIndex[0]\n    let minIndex =\
    \ 0\n    arrIndex.forEach((index, i) => {\n        if (index === min) {\n    \
    \        minIndex = i\n        }\n    })\n    \n    return [arr[min], minIndex];\n\
    }\n", "    arr.sort(function(a, b){\n        return a - b\n    })\n    var min\
    \ = arr[0];\n    var minIndex = 0;\n    arr.forEach(function(value, index){\n\
    \        if(value % 2 === 0){\n            if(value < min){\n                min\
    \ = value\n                minIndex = index\n            }\n        }\n    })\n\
    \    return [min, minIndex]\n}\n", "    arr = arr.sort((a, b) => a - b);\n   \
    \ let res = [];\n    for(let i = 0; i<arr.length; i++){\n        let minI = -1;\n\
    \        let minVal = arr[i];\n        for(let j = 0; j<arr.length; j++){\n  \
    \          if(arr[j] === minVal && j!== i){\n                minI = j;\n     \
    \           minVal = arr[j];\n            }\n        }\n        if(minI > -1){\n\
    \            res = [minVal, minI];\n            break;\n        }\n    }\n   \
    \ if(res.length === 0){\n        return [];\n    }\n    return res;\n};\n", " \
    \ if(arr.length === 0 || arr.length === 1){\n    return [];\n  }\n  for(let i\
    \ = 0; i < arr.length; i++){\n    let current = arr[i];\n    let evenCount = arr[Math.floor(i/2)].countEven();\n\
    \    if(!evenCount){\n      continue;\n    }\n    for(let j = i; j < arr.length;\
    \ j++){\n      if(arr[j].countEven() >= evenCount){\n        current = arr[j];\n\
    \      }\n    }\n    if(current.countEven() % 2 === 0){\n      return [ current.value,\
    \ current.index ];\n    }\n  }\n}\n", "    if(!arr.length) return [];\n    let\
    \ minVal = Number.MIN_SAFE_INTEGER;\n    let minIndex = -1;\n    for(let i = 0;\
    \ i <= arr.length; i++){\n        if(arr[i] % 2 == 0){\n            if(minVal\
    \ > arr[i]){\n                minVal = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n    }\n    return [minVal, minIndex];\n}", "\tvar arr2\
    \ = arr.sort(function(a,b){\n\t\treturn a%b\n\t});\n\tvar len = arr2.length;\n\
    \tif(len === 0) return [];\n\tvar nodes = [];\n\tfor(var i=0; i<len; i++){\n\t\
    \tnodes.push([arr2[i], i]);\n\t}\n\tvar minInd = 1;\n\tfor(var j=1; j<len; j++){\n\
    \t\tif(nodes[j][1]%2 === 0 && nodes[j][0] !== minInd){\n\t\t\tminInd = nodes[j][0];\n\
    \t\t}\n\t}\n\tvar returnArr = nodes.filter(function(d){\n\t\treturn d[0] === minInd;\n\
    \t});\n\tif(returnArr.length == 0){\n\t\treturn [];\n\t}\n\treturn returnArr;\n\
    }\n", "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell to test your\
    \ solution\nfrom nose.tools import assert_equal\n\nclass TestPluck(object):\n\
    \    def setup(self):\n        self.nums = [4, 2, 3]\n        \n    def test_solution(self):\n\
    \        assert_equal(pluck(self.nums), [2, 1])\n        assert_equal(pluck([]),\
    \ [])\n        assert_equal(pluck([5, 0, 3, 0, 4, 2]), [0, 1])\n\nassert_equals(TestPluck().test_solution(),\
    \ None)\n</cell>\n<text>\nYour Turn\nIn this cell, you're going to write a helper\
    \ function that will take in a list of numbers and calculate the sum of all even\
    \ values.\n\nThe expected result of this helper function is 50. Think carefully\
    \ about how to do this without loops.\n\n\n</text>\n<cell>\n# UNQ_C4\n# GRADED\
    \ FUNCTION\ndef compute_sum_even_number(nums):\n    \"\"\"\n    Helper function\
    \ that takes list of numbers and returns the sum of all even values\n    \n  \
    \  Arguments:\n        nums -- list of numbers that will be summed \n    \n  \
    \  Returns:\n        sum -- sum of all even values in nums\n    \"\"\"\n    #\
    \ Your code here\n    sum = 0\n    \n    return sum\n</cell>\n<cell>\n# Run this\
    \ cell to test your function\nfrom nose.tools import assert_equal\n\nclass TestComputeSumEvenNumber(object):\n\
    \    def setup(self):\n        self.nums = [4, 2, 3]\n        \n    def test_function(self):\n\
    \        assert_equal(compute_sum_even_number(self.nums), 5)\n        \nassert_equals(TestComputeSumEvenNumber().test_function(),\
    \ None)\n</cell>\n<text>\nFunctional Programming Part 1: Map\nIn this section,\
    \ you will write a function that uses map() to create a new list. map() takes\
    \ two parameters, a function and an iterable. The function inputs the element\
    \ from the iterable and outputs a new value. In our case, you will be mapping\
    \ the function add_one to each element of the list. Try writing your own function,\
    \ and see if you can do it with map(). Remember, you can look at the Python documentation\
    \ to see what parameters map() takes and what it returns. You'll also see how\
    \ Python uses whitespace.\n\nTo test your function, run the cell below:\n\n\n\
    </text>\n<cell>\n# Define a function that adds one to each element in a list\n\
    def add_one(numbers):\n    ### TODO: Write a function that adds one to each element\
    \ in a list\n    \n    return numbers\n\nnumbers = [1, 2, 3, 4]\n# TODO: Call\
    \ the function add_one with numbers as an argument\nresult = add_one(numbers)\n\
    \n# Print the result of the function\nprint(result)\n</cell>\n<cell>\n# Run this\
    \ cell to test your function\nfrom nose.tools import assert_equal\n\nclass TestAddOne(object):\n\
    \    def setup", "    var temp=[];\n    for(var i=0;i<arr.length;i++){\n     \
    \   if(arr[i]%2==0){\n            temp.push(arr[i]);\n        }\n    }\n    for(var\
    \ i=0;i<temp.length;i++){\n        if(temp[i]>arr[0]){\n            return temp;\n\
    \        }\n    }\n    return temp;\n}\n", "  if (arr.length===0) return [];\n\
    \  if (arr.length===1) return [arr[0], 0];\n  const vals=[]\n  arr.map((v,i) =>\
    \ {\n    if (vals.some(x => x === v) && v%2===0) vals.push(v);\n    else if (vals.some(x\
    \ => x === v)) vals[vals.indexOf(v)]=i;\n  });\n  return [vals[Math.min.apply(null,\
    \ vals.map(x => x))], Math.min(...vals.map(x => x))]\n}\n", "  let newArr = [];\n\
    \  arr.map( (item, index) => {\n    newArr.push([item, index]);\n  });\n  \n \
    \ let smallestEven = arr.reduce((acc, cur, i) => {\n    if(i % 2 === 0){\n   \
    \   return Math.min(acc, cur);\n    }else{\n      return acc;\n    }\n  }, arr[0]);\n\
    \  \n  newArr = newArr.filter((item) => {\n    return item[0] !== smallestEven;\n\
    \  });\n  \n  newArr.map((item) => {\n    newArr.indexOf(item);\n  });\n  return\
    \ newArr;\n}\n", "    if (arr.length === 0) return [];\n    \n    var min = Infinity;\n\
    \    var smalest_value = arr[0];\n    \n    var index = 0;\n    for (var i = 0;\
    \ i <= arr.length; i++){\n        if (arr[i] < min){\n            smalest_value\
    \ = arr[i];\n            index = i;\n            min = min > arr[i] ? min : arr[i];\n\
    \        }\n    }\n    \n    return [smalest_value, index];\n}\n", "    let min\
    \ = Math.min(...arr), //get the minimum value\n        index = arr.indexOf(min);\
    \ //get the index of that minimum value\n    return [min, index]; //return the\
    \ two values\n}\n", "\tlet res = [];\n\tlet smalest_value = 0;\n\tlet smalest_index\
    \ = 0;\n\tfor(let node of arr){\n\t\tif(node.value % 2 === 0){\n\t\t\tsmalest_value\
    \ = node.value;\n\t\t\tsmalest_index = arr.indexOf(node);\n\t\t}\n\t}\n\tif(smalest_index\
    \ > smalest_value){\n\t\tres.push([smalest_value, smalest_index]);\n\t}\n\tif(smalest_index\
    \ === smalest_value){\n\t\tlet smallest_index = arr.indexOf(smalest_value);\n\t\
    \tres.push([smalest_value, smallest_index]);\n\t}\n\treturn res;\n}\n", "    let\
    \ nodes=[];\n    for (let i=0;i<arr.length;i++){\n        if (arr[i]%2==0){\n\
    \            nodes.push(arr[i]);\n        }\n    }\n    return nodes;\n}\n", "\t\
    let nodes=arr.sort((a,b)=>a-b);\n\tlet minIndex=-1;\n\tlet smallest=nodes[0];\n\
    \tfor (let i=1;i<nodes.length;i++){\n\t\tif (smallest>nodes[i]){\n\t\t\tsmallest=nodes[i];\n\
    \t\t\tminIndex=i;\n\t\t}\n\t}\n\tif (minIndex>-1){\n\t\treturn [smallest,minIndex];\n\
    \t}\n\treturn [];\n}\n", "    let sorted = arr.sort((a,b) => b-a).filter(x =>\
    \ x%2 === 0);\n    return sorted.length>0 ? sorted[0] : null;\n}\n", "    arr.sort((a,\
    \ b) => {\n        if (a%2 == 0 && b%2 == 0)\n            return 1;\n        else\
    \ if (a%2 != 0 && b%2 != 0)\n            return -1;\n        else if (a%2 == 0\
    \ && b%2 != 0)\n            return -1;\n        return 0;\n    })\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if (arr[i] % 2 ===\
    \ 0){\n            result.push([arr[i], i]);\n        }\n    }\n    return result.length\
    \ ? result : [];\n};\n", "    var res = [];\n    arr.forEach(function(val, ind){\n\
    \        if(val%2 == 0) res.push(val); \n    });\n    return res;\n}\n", "   \
    \ return arr.filter(x => x % 2 === 0)\n            .map((x, i) => [x, i]);\n}\n",
  "    let smaller = []\n    let values = [];\n    let index;\n    for(let i of arr){\n\
    \        index = values.indexOf(Math.min(i,smaller.length));\n        if(index\
    \ < 0){\n            smaller.push(i);\n            values.push(i);\n        }\
    \ else if(index >= smaller.length){\n            smaller.push(i);\n          \
    \  values.push(i);\n        } else {\n            smaller[index] += i;\n     \
    \       smaller[index] = Math.max(smaller[index], i)\n        }\n    }\n    if(smaller.length\
    \ == 1){\n        return [smaller[0], values.indexOf(smaller[0])];\n    }\n  \
    \  let smallest = Math.min(...smaller)\n    return [smallest, values.indexOf(smallest)];\n\
    }\n", "  return arr.reduce(function(prev, current){\n    if(prev.length > 0){\n\
    \      var smallestValue = prev[0].value;\n      var smallestIndex = -1;\n   \
    \   for(var i=0;i<prev.length;i++){\n        if(prev[i].value == smallestValue){\n\
    \          smallestIndex = i;\n        }\n      }\n      if(smallestIndex > 0){\n\
    \        prev.splice(smallestIndex, 1);\n        prev.push(current);\n      }else{\n\
    \        prev.push(current);\n      }\n      return prev;\n    }else{\n      prev.push(current);\n\
    \      return prev;\n    }\n  }, []);\n}\n", "    if(arr.length === 0){\n    \
    \    return [];\n    }\n    const arrSorted = arr.sort((a,b) => a%b - b%a);\n\
    \    let smallest = arrSorted[0];\n    let index = 0;\n    for(let i = 1; i <\
    \ arrSorted.length; i++){\n        const value = arrSorted[i];\n        if(value\
    \ % 2 === 0){\n            smallest = value;\n        }else if((value < smallest\
    \ && value < arrSorted[i-1]) || smallest%2 === 0){\n            smallest = arrSorted[i];\n\
    \            index = i;\n        }\n    }\n    return [smallest, index];\n}\n",
  "\tvar minIndex = 0;\n\tvar minVal = arr[0];\n\tfor(var i = 1; i < arr.length; i++){\n\
    \t\tif(arr[i] < minVal && arr[i]%2 == 0){\n\t\t\tminIndex = i;\n\t\t\tminVal =\
    \ arr[i];\n\t\t}\n\t}\n\treturn [minVal, minIndex];\n}", "    arr.sort()\n   \
    \ var smallest\n    var smallestIndex\n\n    for(var i=0;i<arr.length;i++){\n\
    \        smallest = arr[i]\n        smallestIndex = i\n        for(var j=i;j<arr.length;j++){\n\
    \            if(arr[j]%2 === 0){\n                if(smallest > arr[j]){\n   \
    \                 smallest = arr[j]\n                    smallestIndex = j\n \
    \               }\n            }\n        }\n        arr.splice(smallestIndex,1)\n\
    \    }\n    return arr\n}", "    let min;\n    let minIndex;\n    let index;\n\
    \    \n    let minValue = Infinity;\n    let minIndex = 0;\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    min = minValue;\n\
    \    index = minIndex;\n    let values = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] === min){\n            values.push(i);\n        }\n\
    \    }\n    return values;\n}\n</cell>\n<cell>", "\tvar len = arr.length, arr2\
    \ = [], min = 0, mid = 0;\n\twhile(len--){\n\t\tarr2[len] = [].concat(arr2[len],\
    \ arr[len]);\n\t}\n\twhile(min = arr2.length * arr2.length){\n\t\tmid = ~~(min\
    \ / 2) | 0;\n\t\tif(arr2[mid][0] % 2 == 0) arr2.splice(mid, 1);\n\t\telse min++;\n\
    \t}\n\treturn arr2.map(function(x){ return x[0]; });\n}\n</cell>\n<cell>", " \
    \ return arr.sort((a,b)=>{\n      if(a % 2 == 0){\n        return -1\n      }\n\
    \      if(b % 2 == 0){\n        return 1\n      }\n      return 0\n    }).reduce((arr,curr,index)=>{\n\
    \      if(curr % 2 == 0){\n        if(index == 0){\n          return [curr,index-1]\n\
    \        }\n        return [curr, index]\n      }\n      return arr\n    },[])\n\
    }\n", "  let hash = {};\n  arr.forEach(function(item){\n    if(hash[item] ===\
    \ undefined){\n      hash[item] = 0;\n    }\n    hash[item]++;\n  });\n  let result\
    \ = [];\n  for(let key in hash){\n    let val = hash[key];\n    if(val % 2 ===\
    \ 0){\n      result.push([key, val]);\n    }\n  }\n  if(result.length === 0){\n\
    \      return [];\n  }\n  return result.sort((a, b) => a[1] - b[1])[0];\n}\n",
  "    let min=Number.MAX_SAFE_INTEGER;\n    let result=[];\n    for(let i=0;i<arr.length;i++){\n\
    \        if(arr[i]%2===0 && arr[i]<min){\n            min=arr[i];\n          \
    \  result=[arr[i],i];\n        }\n    }\n    return result\n}\n", "  const nodes\
    \ = new Map();\n  let smallest;\n  let smallestIndex;\n  let result;\n  arr.forEach((e,\
    \ i) => {\n    if (!nodes.get(e)) {\n      nodes.set(e, [e, i]);\n    }\n    else\
    \ {\n      const arr = nodes.get(e);\n      if (arr[0] % 2 !== 0) {\n        if\
    \ (arr[1] < smallest) {\n          smallest = arr[1];\n          smallestIndex\
    \ = arr[1];\n        } else if (arr[1] === smallest) {\n          smallestIndex\
    \ = arr[1];\n        }\n      }\n    }\n  });\n  if (smallest === undefined) {\n\
    \    return [];\n  }\n  else {\n    return [smallest, smallestIndex];\n  }\n}\n",
  "    for(var i=0; i<arr.length; i++) {\n        if(arr[i].valueOf() % 2 == 0) {\n\
    \            return arr[i];\n        }\n    }\n    return [];\n}\n", "  let evenNumberCount\
    \ = 0;\n  let minIndex = 0;\n  let minEvenValue = arr[0];\n  let arr2 = arr.slice(1);\n\
    \n  for(let i = 0; i < arr2.length; i++){\n    if(arr2[i] % 2 === 0){\n      evenNumberCount++;\n\
    \    }\n    else if(evenNumberCount > 1){\n      minIndex = i;\n      minEvenValue\
    \ = arr2[i];\n      evenNumberCount--;\n      break;\n    }\n  }\n  return [minEvenValue,\
    \ minIndex];\n}\n</cell>\n<text>\nPractice\nPractice using the pluck method. Write\
    \ a test for the pluck method. Use the pluck method on the following arrays:\n\
    \n[4, 2, 3]\n[1, 2, 3]\n[]\n\nUse the pluck method on the following arrays:\n\n\
    [4, 2, 3]\n[0, 2, 3]\n[2, 2]\n[]\n[6, 5, 4, 3, 2, 1]\n[0, 3, 0, 1]\n[1, 2, 3,\
    \ 4, 5]\n[0, 3, 4, 5]\n[1, 1, 3]\n[1, 1, 3, 3]\n[1, 1, 3, 3, 3]\n[1, 3, 1, 2,\
    \ 3, 4, 3, 1]\n[4, 3, 3, 3]\n[4, 3, 3, 3, 4, 3, 3, 3]\n[3, 3, 3, 3, 3]\n[1, 0,\
    \ 3, 4, 3, 2]\n[4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3]\n[1, 1, 3, 3, 3, 1, 2, 3,\
    \ 4, 3, 1, 1, 0]\n[1, 2, 3, 3, 1, 1, 0, 3, 4, 3, 2, 1, 2, 1]\n[0, 1, 2, 3, 4,\
    \ 4, 3, 2, 1, 2, 1, 3]\n[0, 4, 3, 2, 1, 2, 1, 3, 3, 3, 1, 1, 3, 4]\n[1, 1, 3,\
    \ 3, 3, 1, 1, 0, 1, 2, 3, 4, 4, 3]\n[4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n\n\
    </text>\n<cell>", "    let smallest_value_index = 0;\n    let smallest_value =\
    \ arr[0];\n    let results = [];\n    for(let i = 0; i < arr.length; i++){\n \
    \       if(arr[i] % 2 === 0){\n            if(smallest_value >= arr[i]){\n   \
    \             results.push(smallest_value);\n                smallest_value =\
    \ arr[i];\n                smallest_value_index = i;\n            }\n        \
    \    else if(smallest_value_index > i){\n                smallest_value = arr[i];\n\
    \                smallest_value_index = i;\n            }\n        }\n    }\n\
    \    return results;\n}\n", "    arr.sort();\n    var len = arr.length;\n    var\
    \ even = [];\n    for(var i = 0; i < len; i++){\n        if (arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n        }\n    }\n    var smallest = 0;\n   \
    \ var smallestIndex = 0;\n    for(var j = 0; j < even.length; j++){\n        if(smallest\
    \ === 0 || even[j] < even[smallest]){\n            smallest = even[j];\n     \
    \       smallestIndex = j;\n        }\n    }\n    return [smallest, smallestIndex];\n\
    }\n", "    if(arr.length === 0){\n        return [];\n    }\n\n    var evenValues\
    \ = arr.filter(function(e){\n        return e % 2 === 0;\n    });\n\n    var minIndex\
    \ = arr.indexOf( Math.min.apply(Math, evenValues) );\n    var minValue= arr[minIndex];\n\
    \n    var indexes = [];\n\n    for(var i=0; i<arr.length; i++){\n        if(arr[i]\
    \ === minValue){\n            indexes[indexes.length] = i;\n        }\n    }\n\
    \n    if(indexes.length === 0){\n        return [];\n    }\n\n    return [ minValue,\
    \ minIndex ];\n}", "    arr.sort();\n    var min_val = arr[0], index = 0, counter\
    \ = 0;\n    for(var i = 1; i < arr.length; i++){\n        if(arr[i] < min_val){\n\
    \            min_val = arr[i];\n            index = counter;\n        }\n    \
    \    counter++;\n    }\n    if(arr.length > 0){\n        return [min_val, index];\n\
    \    }\n    return [];\n}\n", "    let smallest;\n    let index = 0;\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n      \
    \      smallest = arr[i];\n            index = i;\n        }\n    }\n    return\
    \ [smallest, index];\n}\n", "  let evens = [];\n  for (let i = 0; i < arr.length;\
    \ i++){\n    if (arr[i] % 2 === 0){\n      evens.push(arr[i]);\n    }\n  }\n \
    \ let min = evens.shift();\n  let minIndex = evens.indexOf(min);\n  return evens[minIndex];\n\
    }\n", "\tvar smallest;\n\tvar smallestIndex;\n\tarr.forEach(function(val,index){\n\
    \t\tif (val%2===0) smallest=val;\n\t\tif (index===arr.length-1 && val%2===0) smallestIndex=index;\n\
    \t});\n\tif (smallest===undefined) return [];\n\treturn [smallest,smallestIndex];\n\
    }\n", "    return arr.reduce((acc, val, i) => {\n        if((val % 2) === 0 &&\
    \ acc.indexOf(val) === -1){\n            acc.push(val);\n        }\n        return\
    \ acc;\n    }, []);\n}\n", "    const result = [];\n    let largest = arr[0];\n\
    \    let index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < largest) {\n            index++;\n            if (arr[i] % 2 == 0) {\n   \
    \             largest = arr[i];\n            }\n        } else {\n           \
    \ result.push([largest, index]);\n            index++;\n            largest =\
    \ arr[i];\n        }\n    }\n    result.push([largest, index]);\n    return result;\n\
    }\n", "  const map = new Map();\n  for (let i = 0; i < arr.length; i++){\n   \
    \ if (map.has(arr[i])){\n      map.set(arr[i], map.get(arr[i]) + 1);\n    } else\
    \ {\n      map.set(arr[i], 1);\n    }\n  }\n  const ret = [];\n  for (let [key,\
    \ val] of map){\n    if (val === 2){\n      ret.push(key);\n    }\n  }\n  return\
    \ ret;\n}", "    let even = arr;\n    let index = [];\n    for(let i=0; i<arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0) even.splice(even.indexOf(arr[i]), 1);\n\
    \        else {\n            let temp = Math.min(even.filter(value => value %\
    \ 2 === 0), arr[i]);\n            index.push([temp, even.indexOf(temp)]);\n  \
    \      }\n    }\n    \n    if(even.length === 0) return [];\n    \n    even =\
    \ even.filter(value => value % 2 === 0);\n    index.sort((a, b) => a[0] - b[0]);\n\
    \    return [even[Math.floor(index.length/2)], index[Math.floor(index.length/2)][0]]\n\
    }\n", "\tvar min_idx = 0;\n\tvar min_val = 0;\n\tfor(var i = 1; i < arr.length;\
    \ i++){\n\t\tif(arr[i] % 2 == 0 && (min_idx == 0 || arr[i] < min_val)){\n\t\t\t\
    min_val = arr[i];\n\t\t\tmin_idx = i;\n\t\t}\n\t}\n\tif(min_idx == 0 && arr.length\
    \ == 0)\n\t\treturn [];\n\telse if(min_idx == 0)\n\t\treturn [min_val];\n\telse\
    \ \n\t\treturn [min_val, min_idx];\n}", "    // sort in ascending order and pluck\
    \ index\n    return arr.sort((a,b) => a-b)[0];\n}\nconst result = pluck(arr);",
  "  arr.sort(function(a,b){return a-b}) // sort the array in increasing order\n \
    \ var even=[], odd=[], small, index, smallest;\n  for (var i=0;i<arr.length;i++)\
    \ {\n    if (arr[i]%2==0) even.push(arr[i]); else odd.push(arr[i]);\n  }\n  \n\
    \  if (even.length==0) {\n    return [];\n  }\n  \n  for (var j=0;j<even.length;j++)\
    \ {\n    small=even[j];\n    smallest=j;\n    for (var k=j+1;k<even.length;k++)\
    \ {\n      if (even[k]<small) small=even[k];\n    }\n    if (even[smallest]==small)\
    \ {\n      smallest=even[smallest];\n      index = j;\n    }\n  }\n  \n  return\
    \ [small,index];\n}\n</cell>\n<text>\nWe have implemented our own version of pluck\
    \ above but there are other ways to solve this problem.\n\nThis solution uses\
    \ our own implementation of pluck.\nAs an added bonus, this solution is also more\
    \ compact than the one above.\n\nThe idea is to sort the array in increasing order,\
    \ and then keep track of both the smallest value and the index at which that value\
    \ was found.\n\nIf there is a tie, we can choose the index at which the value\
    \ at that index was located, that is, the index that had the smallest even value.\n\
    \nWhen we detect a tie, we simply take the smaller of the two indices as our answer.\n\
    \nGiven an array representing a branch of a tree that has non-negative integer\
    \ nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node\
    \ should be the node with the smallest even value.\nIf multiple nodes with the\
    \ same smallest even value are found return the node that has smallest index.\n\
    The plucked node should be returned in an array, [ smalest_value, its index ],\n\
    If there are no even values or the given array is empty, return [].\nExample 1:\n\
    >>> pluck([4, 2, 3])\n[2, 1]\nExplanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\nExample 2:\n>>> pluck([1, 2, 3])\n[2, 1]\nExplanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\n>>>\
    \ pluck([])\n[]\nExample 4:\n>>> pluck([5, 0, 3, 0, 4, 2])\n[0, 1]\nExplanation:\
    \ 0 is the smallest value, but  there are two zeros,\nso we will choose the first\
    \ zero, which has the smallest index.\nConstraints:\n1<= nodes.length <= 10000\n\
    0 <= node.value\n\n\n</text>\n<cell>\n%run ../scripts/ch3/pluck_solution.py\n\
    </cell>\n<text>\nFind the node ", "  let min_even = arr[0];\n  let min_even_index\
    \ = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 &&\
    \ arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index = i;\n\
    \    }\n  }\n  if (min_even_index === -1) //if there is no even values or the\
    \ given array is empty return empty array\n    return [];\n  else {\n    let even_index\
    \ = arr[0].index;\n    let new_arr = [];\n    for (let i = 1; i < arr.length;\
    \ i++) {\n      if (arr[i] % 2 === 0) {\n        even_index++;\n        new_arr.push([arr[i],\
    \ even_index]);\n      }\n    }\n    return new_arr;\n  }\n}\n", "    if (!arr\
    \ || arr.length === 0) return [];\n    \n    let nodeIndex = 0;\n    let nodeSmallestEvenValue\
    \ = 0;\n    \n    for ( let i = 0; i < arr.length; i++) {\n        const node\
    \ = arr[i];\n        // node with smallest even value\n        if (node % 2 ===\
    \ 0) {\n            if (nodeSmallestEvenValue > node) nodeSmallestEvenValue =\
    \ node;\n        } else if (nodeSmallestEvenValue === node) nodeIndex += 1;\n\
    \    }\n    // return smallest node\n    return [nodeSmallestEvenValue, nodeIndex];\n\
    }\n", "\tvar min = Number.MAX_VALUE,\n\t\tmin_index = -1;\n\t\n\tarr.forEach(function(val,\
    \ i){\n\t\tif(val >= 0){\n\t\t\tif(val < min){\n\t\t\t\tmin = val;\n\t\t\t\tmin_index\
    \ = i;\n\t\t\t}\n\t\t}\n\t});\n\treturn min !== Number.MAX_VALUE && arr.indexOf(min)\
    \ === min_index ? [min, min_index] : [-1, -1];\n}\n\n", "    let smalest_value;\n\
    \    let smalest_index;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 == 0 && (smalest_value === undefined || smalest_value < arr[i])){\n    \
    \        smalest_value = arr[i];\n            smalest_index = i;\n        }\n\
    \    }\n    return [smalest_value, smalest_index];\n}\n", "    let smallestEvenValue\
    \ = null;\n    let smallestIndex = null;\n    for(let i=0;i<arr.length;i++){\n\
    \        if(arr[i].even===true && smallestEvenValue === null){\n            smallestEvenValue\
    \ = arr[i].value;\n            smallestIndex = i;\n        }else if(arr[i].even===true\
    \ && smallestEvenValue !== null){\n            if(arr[i].value < smallestEvenValue){\n\
    \                smallestEvenValue = arr[i].value;\n                smallestIndex\
    \ = i;\n            }\n        }\n    }\n    return [smallestEvenValue,smallestIndex];\n\
    }\n", "    let evens=[];\n    let index=0;\n    let max=Math.max(...arr);\n  \
    \  for (let i=0;i<arr.length;i++){\n        if (arr[i]%2==0){\n            evens.push(arr[i]);\n\
    \        }\n        if (arr[i]===max && arr[i]%2==0){\n            index = i;\n\
    \        }\n    }\n    if (evens.length===0){\n        return [];\n    }\n   \
    \ let min = Math.min(...evens);\n    return evens.map(e=>e===min?index:e)\n}\n",
  "\tvar l = arr.length;\n\tvar smalest_value;\n\tvar smalest_index;\n\tvar min_index;\n\
    \n\tfor(var i=0; i<l; i++){\n\t\tvar current = arr[i];\n\t\tvar odd_value = current%2\
    \ == 0?true:false;\n\n\t\tif(min_index == null || odd_value == true && smalest_value\
    \ == null){\n\t\t\tsmalest_value = current;\n\t\t\tsmalest_index = i;\n\t\t\t\
    min_index = i;\n\t\t\tcontinue;\n\t\t}\n\t\tif(odd_value == true && smalest_value\
    \ != null){\n\t\t\tif((smalest_value > current) && (smalest_value < current)){\n\
    \t\t\t\tsmalest_value = current;\n\t\t\t\tsmalest_index = i;\n\t\t\t\tmin_index\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [smalest_value, smalest_index];\n}\n",
  "    let evenArr = arr.filter((val) => {\n        return val % 2 === 0;\n    });\n\
    \    evenArr = evenArr.reduce((prev, curr, index, arr) => {\n        if(index\
    \ === 0) return [curr, index];\n        if(prev[0] < curr) return [curr, index];\n\
    \        return [prev[0], index];\n    });\n    if(evenArr.length === 0) return\
    \ [];\n    return evenArr.map((val, index) => {\n        return [val, index];\n\
    \    });\n}\n</code>\n<|/ a dscore=0 tags=javascript,arrays |>\n<| a tags=javascript,arrays\
    \ |>\n<code>\nconst smallestEvenIndex = (arr) => {\n  const evenArr = arr.filter((value,\
    \ index) => value % 2 === 0);\n  if (evenArr.length <= 0) return [];\n  return\
    \ evenArr.reduce((acc, curr, index, arr) => {\n    if (index === 0) {\n      acc.push([curr,\
    \ index]);\n    }\n    if (index > 0 && arr[index - 1] % 2 === 0) {\n      acc.push([curr,\
    \ index]);\n    }\n    return acc;\n  }, []);\n};\n", "    const minV = arr.reduce((a,b)=>{return\
    \ a > b ? a : b});\n    return arr.filter((v) => {\n        return v % 2 === 0\n\
    \    }).map((v, i) => {\n        return [ v, i ].find(v=>v === minV);\n    });\n\
    }\n</cell>\n<text>\nGiven an array of words, return a new array of words that\
    \ are unique but the same across all input words.\n\nIn other words, words that\
    \ only appear once should be kept. No two words should be repeated.\n\nExample\
    \ 1:\nInput: [\"hello\", \"he\", \"he\", \"world\"]\nOutput: [\"hello\"]\nExplanation:\
    \ \"he\" and \"he\" only appear once.\n\nExample 2:\nInput: [\"hello\", \"he\"\
    , \"he\", \"hello\"]\nOutput: [\"hello\", \"he\"]\nExplanation: \"he\" and \"\
    he\" only appear once.\n\nExample 3:\nInput: [\"miss\", \"match\", \"match\"]\n\
    Output: [\"miss\"]\n\nExample 4:\nInput: [\"miss\", \"miss\", \"match\"]\nOutput:\
    \ []\nExplanation: \"miss\" and \"match\" are not unique, so \"miss\" and \"match\"\
    \ are not kept.\n\n</text>\n<cell>", "    var n = arr.length,\n        pick =\
    \ arr[0];\n    for(var i = 1; i < n; i++){\n        if(arr[i] % 2 === 0 && arr[i]\
    \ < pick){\n            pick = arr[i];\n        }\n    }\n    return [pick, n\
    \ - 1];\n}\n", "    let low = 0;\n    let high = arr.length - 1;\n    while(low\
    \ <= high){\n        let mid = low + (high - low) / 2;\n        if(arr[mid].value\
    \ % 2 === 0){\n            high = mid - 1;\n        }\n        else{\n       \
    \     low = mid + 1;\n        }\n    }\n    return [arr[low].value, low];\n}\n",
  "    if(arr.length===0){\n        return [];\n    }\n    let minE=Infinity;\n  \
    \  let minI=0;\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]%2===0){\n\
    \            if(arr[i]<minE){\n                minE=arr[i];\n                minI=i;\n\
    \            }\n        }\n    }\n    return [minE,minI];\n}\n", "    let smallest_even_value\
    \ = Math.abs(arr[0]);\n    let smallest_even_index = 0;\n    for (let i = 0; i\
    \ < arr.length; i++){\n        if (Math.abs(arr[i]) <= smallest_even_value){\n\
    \            smallest_even_value = Math.abs(arr[i]);\n            smallest_even_index\
    \ = i;\n        }\n    }\n    return [arr[smallest_even_index], smallest_even_index];\n\
    }", "\tvar smallest = [], index;\n\tfor(var i = 0, len = arr.length; i < len;\
    \ i++){\n\t\tvar val = arr[i], index = i;\n\t\tsmallest.push(val == 0 ? 0 : val);\n\
    \t\tif(smallest.length > 2){\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(smallest.length ==\
    \ 0){\n\t\treturn [];\n\t}\n\treturn smallest;\n}", "    let minIndex = arr.findIndex(e\
    \ => e%2 === 0);\n    if(minIndex === -1){\n        return [];\n    }\n    let\
    \ minValue = arr[minIndex];\n    let index = arr.findIndex(e => e%2 === minValue%2);\n\
    \    if(index === -1){\n        return [minValue, minIndex];\n    }else{\n   \
    \     return [minValue, minIndex];\n    }\n}\n", "  var n = arr.length;\n  var\
    \ res = [];\n  var index = 0;\n  var cur, value;\n  \n  while (n--){\n    cur\
    \ = arr[n];\n    value = Math.floor(cur/2);\n    while (value){\n      if (cur\
    \ % 2 !== 0){\n      res[index] = cur;\n      cur = arr[n];\n      value = Math.floor(cur/2);\n\
    \      }\n      index++;\n    }\n  }\n  \n  return res;\n}\n", "    let min =\
    \ Infinity;\n    let result = new Array();\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if (arr[i] < min){\n            min = arr[i];\n            result\
    \ = i;\n        }\n    }\n    return result;\n}\n", "\tlet smalest_value;\n\t\
    let index;\n\tfor (let i = 0; i < arr.length; i++){\n\t\tlet curr = arr[i];\n\t\
    \tsmalest_value = i;\n\t\tindex = i;\n\t\tif (i === 0){\n\t\t\tcontinue;\n\t\t\
    }\n\t\tif (curr % 2 === 0){\n\t\t\tsmalest_value = curr - 1;\n\t\t}\n\t\tif (smalest_value\
    \ < arr[i-1]){\n\t\t\tindex = i - 1;\n\t\t}\n\t\tif (curr === arr[arr.length-1]){\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn [smalest_value,index];\n}", "    let res\
    \ = [];\n    let index = 0;\n    for(let value of arr){\n        res.push([value,\
    \ index]);\n        index++;\n        if(value%2 === 0){\n            break;\n\
    \        }\n    }\n    if(index === 0){\n        return [];\n    }\n    if(index\
    \ > 0){\n        let min_value = arr[0];\n        let min_value_count = 0;\n \
    \       for(let value of arr){\n            if(value % 2 === 0){\n           \
    \     if(value < min_value){\n                    min_value = value;\n       \
    \             min_value_count = 1;\n                }else if(value === min_value){\n\
    \                    min_value_count++;\n                }\n            }else{\n\
    \                if(min_value_count > 1){\n                    return [min_value,\
    \ index];\n                }\n            }\n        }\n    }\n    return res;\n\
    }\n", "    let min = Math.min.apply(null, arr);\n    let even = arr.filter(item\
    \ => item.value % 2 === 0).sort((a, b) => a - b);\n    let indexOfMinValue = even.indexOf(min);\n\
    \    return even[indexOfMinValue];\n}\n", "    \n    if(arr === undefined){\n\
    \        console.log(\"no array was passed to function\");\n        return;\n\
    \    }\n    if(arr.length === 0){\n        console.log(\"array was empty\");\n\
    \        return [];\n    }\n\n    var smallest = 0;\n    var index;\n\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            index = i;\n\
    \            break;\n        }\n    }\n\n    if(index === undefined){\n      \
    \  console.log(\"array was empty\");\n        return [];\n    }\n\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] === 0 && smallest !== 0){\n\
    \            if(arr[i] > arr[index]){\n                smallest = arr[i];\n  \
    \          }\n        }\n    }\n\n    return [smallest, index];\n}\n", "  const\
    \ map = new Map();\n  for (let i = 0; i < arr.length; i++){\n    if(!map.has(arr[i])){\n\
    \      map.set(arr[i], i);\n    }\n  }\n  arr.sort((a,b) => a - b);\n  let result\
    \ = [];\n  let minValue = arr[0];\n  let minIndex = 0;\n  map.forEach((value,\
    \ index) => {\n    if (value !== minValue){\n      minValue = value;\n      minIndex\
    \ = index;\n    }\n  });\n  result.push(minValue);\n  result.push(minIndex);\n\
    \  return result;\n}\n", "  var evens = [];\n  for (var i = 0; i < arr.length;\
    \ i++){\n    if (arr[i] % 2 === 0){\n      evens.push(arr[i])\n    }\n  }\n  var\
    \ smalest_value = Math.min.apply(null, evens);\n  var smalest_index = evens.indexOf(smalest_value);\n\
    \  if (smalest_index === -1){\n    return [];\n  }\n  return [smalest_value, smalest_index];\n\
    }", "    if(arr.length <= 0){\n        return [];\n    }\n    if(arr.length ===\
    \ 1){\n        return [arr[0], 0];\n    }\n    let min = arr[0];\n    let minIndex\
    \ = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < min){\n\
    \            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [min, minIndex];\n}\n", "    var len = arr.length;\n    var smalest_val = Number.MAX_VALUE;\n\
    \    var smalest_idx = -1;\n    var smallest;\n    for (var i = 0; i < len; i++){\n\
    \        if (arr[i] === 0){\n            continue;\n        }\n        if (arr[i]\
    \ < 0){\n            return [];\n        }\n        if (arr[i] > smalest_val){\n\
    \            smalest_val = arr[i];\n            smalest_idx = i;\n        }\n\
    \    }\n    if (len === 1){\n        return [smalest_val, smalest_idx];\n    }\n\
    \    smallest = arr.splice(0, smalest_idx);\n    smallest.sort();\n    return\
    \ [smallest[0], smallest.length-1];\n}\n", "    if(!arr || arr.length === 0){\n\
    \        return [];\n    }\n    var result = [];\n    var len = arr.length;\n\
    \    var minIndex, minValue = 0;\n    var i;\n\n    for (i = 0; i < len; i++)\
    \ {\n        if(arr[i] % 2 === 0 && minValue < arr[i]) {\n            minIndex\
    \ = i;\n            minValue = arr[i];\n        }\n    }\n\n    result.push([minValue,\
    \ minIndex]);\n\n    return result;\n}", "    const min = Math.min.apply(Math,\
    \ arr);\n    const index = arr.indexOf(min);\n    return arr.map( (item, index)\
    \ => item === min ? (index===arr.length-1? item : min) : item);\n}\n", "    let\
    \ min = 0;\n    let minIndex = 0;\n    let odd_index = [];\n    for(let i = 0;i<arr.length;i++){\n\
    \        if(arr[i]%2 === 0){\n            if(odd_index.length <= 0){\n       \
    \         min = arr[i];\n                minIndex = i;\n            } else {\n\
    \                if(arr[i]>min){\n                    min = arr[i];\n        \
    \            minIndex = i;\n                }\n            }\n        } else {\n\
    \            odd_index.push(i);\n        }\n    }\n    if(odd_index.length <=\
    \ 0){\n        return [];\n    } else {\n        let odd_value = arr[odd_index[0]];\n\
    \        return [ odd_value, minIndex ];\n    }\n}\n", "  var arrSorted = arr.sort(function(a,\
    \ b){return a - b;});\n  return arrSorted.reduce(function(res, val, i){\n    var\
    \ smalest_val = arrSorted[i];\n    var smallest_ind = i;\n    var index = 0;\n\
    \    for(var j = 0; j < arr.length; j++){\n      if(val === smalest_val){\n  \
    \      smallest_ind = j;\n        break;\n      } else if(smalest_val < arr[j]){\n\
    \        smalest_val = arrSorted[j];\n        smallest_ind = j;\n        index++;\n\
    \      }\n    }\n    res[index] = val;\n    return res;\n  }, []);\n}\n", "  \
    \  let len = arr.length;\n    let min = arr[0];\n    let min = index;\n    for(let\
    \ i = 1; i < len; i++){\n        if(arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    return [min, index];\n}", "  if\
    \ (arr.length ===0){\n    return [];\n  }\n  const n = arr.length;\n  const a\
    \ = new Array(n);\n  for (let i=0;i<n;i++){\n    a[i] = arr[i];\n  }\n  let min\
    \ = a.reduce((p,c)=>Math.min(p,c))%2;\n  let m=0;\n  let r = [];\n  for (let i=0;i<n;i++){\n\
    \    if (a[i]%2 === min){\n      r.push(a[m]);\n      m++;\n      min = (a[m-1]+a[i])%2;\n\
    \    }\n  }\n  if (r.length){\n    return [r[r.length-1],r.length-1];\n  }\n \
    \ return [];\n};\n", "    const [smallest, smallest_index, even_values] = arr.sort((a,\
    \ b) => a - b);\n    if(arr.length === 0 || smallest === 0 || smallest === smallest\
    \ - 1){\n        return [];\n    }\n    return [ even_values[smallest - 1], smallest_index\
    \ ];\n}\n", "    let evens = [];\n    arr.forEach(node => node.value % 2 === 0\
    \ && evens.push(node.value));\n    let result = evens.reduce((acc, val) => {\n\
    \        let minIndex = evens.indexOf(val);\n        acc[val] = (acc[val] || []).concat(minIndex);\n\
    \        return acc;\n    }, {});\n    let minVals = Object.values(result).reduce((acc,\
    \ val) => acc.indexOf(Math.min(...val)) < 0 ? [...acc, val[0]] : acc, []);\n \
    \   return minVals.length === 0 ? [] : minVals;\n}\n", "  if(!arr.length) return\
    \ [];\n  let i = 0;\n  let j = 0;\n  let temp = [arr[0]];\n  for(let j = 1; j\
    \ < arr.length; j++){\n    if(arr[j] % 2 === 0){\n      temp.push(arr[j]);\n \
    \     i++;\n    }else{\n      if(temp.length !== 0){\n        let temp2 = temp[temp.length\
    \ - 1];\n        if(temp2 > arr[j]){\n          temp.length = temp.length + 1;\n\
    \          temp.push(arr[j]);\n          i++;\n        }\n      }else{\n     \
    \   i++;\n        temp = [arr[j]];\n      }\n    }\n  }\n  return temp;\n}\n",
  "\tlet arr2=[];\n\t\n\tfor (let i=0;i<arr.length;i++){\n\t\tlet index=0;\n\t\tlet\
    \ evenVal = false;\n\t\t\n\t\tfor (let j=0;j<arr.length;j++){\n\t\t\tif (arr[j]\
    \ % 2 === 0 && arr[j] > 0){\n\t\t\t\tevenVal = true;\n\t\t\t\tindex = j;\n\t\t\
    \t}\n\t\t}\n\t\t\n\t\tif (!evenVal){\n\t\t\tarr2.push(arr[index]);\n\t\t}\n\t\
    }\n\t\n\treturn arr2;\n}\n", "    let nodes = new Array(arr.length).fill(-1);\n\
    \    let smallest = arr[0];\n    let index = smallest;\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] === smallest) nodes[i] = arr[i];\n    \
    \    else if((nodes[i] === arr[i] && nodes[i] === smallest) || smallest < arr[i]){\n\
    \            smallest = arr[i];\n            index = smallest;\n        }\n  \
    \  }\n    if(smallest < arr[index]) nodes[index] = arr[index];\n    return nodes;\n\
    }\n</cell>\n<text>\nPractice Test\nFor this test you must create an array of integers\
    \ between 0 and 10000 inclusive.\nThe array should include all numbers from 1\
    \ to 10000, but should also include 0 at the start.\nYour task is to find the\
    \ smallest and largest elements of the given array.\nThe elements should be stored\
    \ to their own variable within the function, so that they do not get garbage collected\
    \ (even if a garbage collection occurs, the element will still be accessible from\
    \ within the function).\nThe function should return both the smallest and the\
    \ largest elements of the given array.\nThe expected result for the smallest elements\
    \ is [0, 998].\nThe expected result for the largest elements is [10000, 0]\n\n\
    </text>\n<cell>", "    let min = Infinity;\n    let min = arr[0];\n    let index\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < min){\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    return\
    \ [ min, index ];\n}\n", "  let minValue = Number.MAX_SAFE_INTEGER;\n  let minIndex\
    \ = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 == 0 &&\
    \ (arr[i] < minValue || minIndex == -1)) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  if (minIndex == -1){\n    return [];\n  } else {\n    return\
    \ [minValue, minIndex];\n  }\n}\n", "    let min_value = arr[0];\n    let min_value_index\
    \ = -1;\n    for(let index = 1; index < arr.length; index++){\n        if(arr[index]\
    \ < min_value){\n            min_value = arr[index];\n            min_value_index\
    \ = index;\n        }\n    }\n    return [min_value, min_value_index];\n}\n",
  "    var result = [], minVal, minIndex;\n    arr.sort((a,b) => a - b);\n    for\
    \ (var i=0; i< arr.length; i++){\n        if (arr[i] % 2 == 0){\n            if\
    \ (minVal === undefined){\n                minVal = arr[i];\n                minIndex\
    \ = i;\n            }else if (arr[i] < minVal){\n                minVal = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    if (minIndex\
    \ !== undefined){\n        result.push([minVal, minIndex]);\n    }\n    return\
    \ result;\n};\n", "    \n    let min = []\n    let result = []\n\n    for(let\
    \ i = 0; i < arr.length; i++) {\n        for(let j = 1; j < arr.length; j++) {\n\
    \            if(arr[i] < arr[j]) {\n                if(min.length < j){\n    \
    \                min = []\n                    min.push(arr[i])\n            \
    \        min.push(j)\n                } else if(min.length >= j && min[1] < j){\n\
    \                    min.shift()\n                    min.push(arr[j])\n     \
    \           }\n            }\n        }\n    }\n    if(min.length == 0) return\
    \ []\n    else if(min.length > 0) result.push(min[1])\n    else result.push(min[0])\n\
    \    return result\n}\n</cell>\n<cell>", "    // sort\n    arr = arr.sort((a,b)=>a-b);\n\
    \    \n    // find the first even value\n    let smalest_value = arr[0];\n   \
    \ for(let i=1; i<arr.length;i++){\n        if(arr[i] % 2 == 0 && (arr[i] - arr[i-1])\
    \ < smalest_value){\n            smalest_value = arr[i];\n        }\n    }\n \
    \   \n    // find the index\n    for(let i=1; i<arr.length;i++){\n        if(arr[i]\
    \ % 2 == 0 && (arr[i] - arr[i-1]) < smalest_value){\n            return [smalest_value,\
    \ i];\n        }\n    }\n    \n    // no even value exists\n    return [];\n \
    \   \n}\n</cell>\n<cell>\n# Your code here\n</cell>\n<cell>\n# Your code here\n\
    </cell>\n<cell>\n# Your code here\n</cell>\n<text>\nIntersection\n\n</text>\n\
    <text>\nYou are given two arrays of positive integers arr1 and arr2. Find all\
    \ elements from arr1 that are in arr2\n\nExample 1:\nInput: arr1 = [4, 3, 6, 7],\
    \ arr2 = [3, 6, 2, 7]\nOutput: [4, 7]\nExplanation: arr1 contains 4 elements that\
    \ are in arr2\n \nExample 2:\nInput: arr1 = [1, 5], arr2 = [1, 5, 6]\nOutput:\
    \ [1, 5, 6]\nExplanation: arr1 contains 1 elements that are in arr2\n\n</text>\n\
    <cell>\n# Your code here\n</cell>\n<cell>\n# Your code here\n</cell>\n<cell>\n\
    # Your code here\n</cell>\n<text>\nIntersection of Two Arrays\nGiven two arrays\
    \ arr1 and arr2, find the intersection of the two. Return an array containing\
    \ all the elements in arr1 that are in arr2.\n\nExample 1:\nInput: arr1 = [2,\
    \ 4], arr2 = [3, 5, 7]\nOutput: [2, 4]\nExplanation: arr1 contains 2 elements\
    \ that are in arr2\n \nExample 2:\nInput: arr1 = [3, 4], arr2 = [8, 9]\nOutput:\
    \ [3, 8]\n\n</text>\n<cell>\n# Your code here\n</cell>\n<cell>\n# Your code here\n\
    </cell>\n<cell>\n# Your code here\n</cell>\n<text>\nMinimum Swap\n\n</text>\n\
    <text>\nYou are given two arrays of positive integers arr1 and arr2. You have\
    \ to swap the elements of arr1 with the elements of arr2, where the first element\
    \ of arr2 becomes the first element of arr1, and the last element of arr2 becomes\
    \ the last element of arr", "    if (arr.length === 0 || arr.length === 1 || arr.some(val\
    \ => isNaN(val))) {\n        return [];\n    }\n    \n    let minIndex = 0;\n\
    \    let smalest_value = arr[0];\n    \n    for (let i = 1; i < arr.length; i++)\
    \ {\n        if (arr[i] === smalest_value) {\n            minIndex += 1;\n   \
    \         \n            if (minIndex >= arr.length / 2) {\n                return\
    \ [smalest_value, minIndex];\n            }\n        } else {\n            smalest_value\
    \ = arr[i];\n            minIndex = 0;\n        }\n    }\n    \n    return [smalest_value,\
    \ minIndex];\n}\n\nmodule.exports = {\n    pick,\n    pluck\n};\n\n},{}],33:[function(require,module,exports){",
  "    // init\n    var result = [];\n    var minIndex = 0;\n    var minValue;\n \
    \   // process\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].value\
    \ % 2 == 0){\n            minValue = arr[i].value;\n            minIndex = i;\n\
    \        }\n    }\n    return [minValue, minIndex];\n}\n", "  if (arr === [] ||\
    \ !arr.length) return [];\n  var evenValues = arr.filter(v => v % 2 === 0);\n\
    \  var minimumIndex =0;\n  var smalestValue = 0;\n  var smallestValue;\n  for\
    \ (var i=0;i<evenValues.length;i++){\n    if (smallestValue === undefined) {\n\
    \      smallestValue = evenValues[i];\n      minimumIndex = i;\n    }\n    else\
    \ if (evenValues[i] < smallestValue){\n      smallestValue = evenValues[i];\n\
    \      minimumIndex = i;\n    }\n  }\n  return [smallestValue,minimumIndex];\n\
    }\n", "    // sort ascending\n    arr.sort(function(a, b){return a-b});\n    \n\
    \    // filter even nodes\n    var even = arr.filter(function(val){return val%2==0;});\n\
    \    \n    // sort smallest even nodes first\n    even.sort(function(a,b){return\
    \ a-b});\n    \n    // return only first node\n    return even[0];\n}\n", "  var\
    \ curr, index;\n  var smallest_even_value = arr[0];\n  var smallest_even_index\
    \ = 0;\n  for(var i = 1; i < arr.length; i++){\n    curr = arr[i];\n    if (curr\
    \ === smallest_even_value){\n      smallest_even_index = i;\n    } else if (curr\
    \ < smallest_even_value) {\n      smallest_even_value = curr;\n      smallest_even_index\
    \ = i;\n    }\n  }\n  return [smallest_even_value, smallest_even_index];\n}\n\
    </cell>\n<cell>", "    var smallest;\n    var index;\n    var count = 0;\n   \
    \ var length = arr.length;\n    for(var i = 0, len = arr.length; i < len; i++){\n\
    \        if(arr[i] % 2 === 0 && arr[i] < smallest || smallest === undefined &&\
    \ count !== 0){\n            smallest = arr[i];\n            index = i;\n    \
    \        count++;\n        }\n    }\n    return [ smallest, index ];\n}\n", " \
    \   if(arr.length === 0){\n        return [];\n    }\n    let smallest = null;\n\
    \    let smallestIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n      \
    \  if(smallest === null || smallest.value < arr[i]){\n            smallest = arr[i];\n\
    \            smallestIndex = i;\n        }\n    }\n    return [smallest, smallestIndex];\n\
    }\n", "    var min=Number.MAX_SAFE_INTEGER, min_index, i=0, j=0;\n    while(i\
    \ < arr.length){\n        if (arr[i] % 2 === 0){\n            if (arr[i] < min){\n\
    \                min = arr[i];\n                min_index = j;\n            }\n\
    \            i++;\n        } else if (arr[i] === min){\n            min_index\
    \ = j;\n        }\n        j++;\n    }\n    return [min, min_index];\n}\n", " \
    \   arr = arr.sort();\n    var res = [];\n    var min = arr[0];\n    var minI\
    \ = 0;\n    var pos = 0;\n    for(var i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ != min && arr[i] % 2 === 0){\n            min = arr[i];\n            minI =\
    \ pos;\n        }\n        if(arr[i] === min){\n            res.push([arr[i],\
    \ i]);\n        }\n        if(arr[i] === min){\n            pos += 1;\n      \
    \  }\n    }\n    return res;\n}\n", "  let min = Math.min.apply(null, arr);\n\
    \  let index = arr.indexOf(min);\n  let result = [min, index];\n  if(index ===\
    \ arr.length - 1) result = arr.concat([min]);\n  if(arr.length === 0 || arr.filter(x\
    \ => x % 2 === 0).length < arr.length) result = [];\n  return result;\n}", " \
    \   let evenNodes = [...arr].filter(node => node % 2 === 0);\n    if(arr.length\
    \ === 0 || evenNodes.length === 0){\n        return [];\n    }\n    let index\
    \ = 0;\n    let smallestEvenNode = evenNodes[0];\n    for(let node of evenNodes){\n\
    \        if(smallestEvenNode < node){\n            smallestEvenNode = node;\n\
    \            index = evenNodes.indexOf(node);\n        }\n    }\n    return [smallestEvenNode,\
    \ index];\n}\n", "    let minEven = arr.findIndex( (n)=>{\n        return ((n%2)===0);\n\
    \    }),\n        minIndex = arr.findIndex( (n)=>{\n            return ((n%2)===0);\n\
    \        }),\n        minValue = arr[minIndex];\n\n    let evenNums = arr.filter(\
    \ (n)=>{\n        return ((n%2)===0);\n    });\n\n    if (minEven>=0){\n     \
    \   return evenNums[minEven];\n    }else{\n        if (minIndex<0){\n        \
    \    return minValue;\n        }else{\n            return minValue;\n        }\n\
    \    }\n}", "    let result = [];\n    for(let i of arr){\n        if(!result.length\
    \ || result[0] > i){\n            result = [i, 0];\n        }\n        if(result[0]\
    \ === i){\n            result[1] += 1;\n        }\n    }\n    return result.length\
    \ ? result : [];\n}\n", "    if (arr.length===0) return [];\n    var evenNodes=[];\n\
    \    var minIndex=0;\n    arr.forEach(function(v){\n        if (v%2==0){\n   \
    \         evenNodes.push(v);\n            var index=evenNodes.indexOf(v);\n  \
    \          if (index==-1) minIndex=evenNodes.length-1;\n            else minIndex=index;\n\
    \        }\n    });\n    if (minIndex>evenNodes.length)\n        return [minIndex,\
    \ evenNodes.length];\n    return evenNodes;\n};", "    if (!Array.isArray(arr)\
    \ || !arr.length)\n        return []\n    let evenNodes = arr\n        .sort((a,b)\
    \ => a-b)\n        .filter(node => (node%2) === 0)\n    return evenNodes.reduce((res,\
    \ e, i) => {\n        let val = e\n        if (res.indexOf(val) < 0) {\n     \
    \       res.push(val)\n        }\n        return res\n    }, [])\n}", "    var\
    \ smalest_value = Math.min(...arr.filter(n => n % 2 == 0));\n    return arr.filter(n\
    \ => n % 2 == 0 && n >= smalest_value).map(node => node == smalest_value ? smalest_value\
    \ : node).map(node => [node,arr.indexOf(node)]);\n}\n<|/ file dstars=1 |>\n<|\
    \ c |>\nIf someone answers your question correctly, you should accept that answer\n\
    <|/ c |>\n<| c |>\nYes, sorry I haven't been on Stack Overflow in a while.\n<|/\
    \ c |>\n<| c |>\nNo problem. Don't forget to come back and accept your answer\
    \ once you're able to!\n<|/ c |>\n<| a dscore=1 tags=javascript |>\nHere is another\
    \ solution which doesn't mutate the array but builds a new one.\n\n<code>", " \
    \   \n    let nodes = [], len = arr.length, node, minVal, minIndex;\n    \n  \
    \  if(!len)\n        return [];\n    \n    while(len = arr.shift()){\n       \
    \ node = arr.find(e => e % 2 == 0);\n        if(!node)\n            node = arr.find(e\
    \ => e < 0);\n        if(!node)\n            break;\n        \n        minVal\
    \ = node.value;\n        minIndex = node.index;\n        nodes.push({\n      \
    \      value: minVal,\n            index: minIndex\n        });\n    }\n    return\
    \ nodes;\n}\n", "    const sorted_arr = [...arr];\n    let min_value;\n    for(let\
    \ i = 1; i < sorted_arr.length; i++){\n        if(sorted_arr[i] === sorted_arr[i-1]\
    \ && sorted_arr[i-1]%2 === 0){\n            min_value = sorted_arr[i-1];\n   \
    \         break;\n        }\n    }\n    return [min_value, arr.indexOf(min_value)];\n\
    }\n\nconst nums = [2,3,5,8,6,7,9];", "    if(arr === null || arr.length === 0)\n\
    \        return [];\n\n    // find smallest even value\n    var minIndex = 0;\n\
    \    var minVal = arr[0];\n    var len = arr.length;\n\n    for(let i = 1; i <\
    \ len; ++i){\n        if(arr[i] % 2 === 0) {\n            minIndex = i;\n    \
    \        minVal = arr[i];\n        }\n    }\n\n    // if there are multiple nodes\
    \ with the same smallest even value then return the node that has smallest index\n\
    \    if(minIndex === 0)\n        return arr[minIndex];\n\n    // otherwise, return\
    \ the smallest index node\n    return arr;\n}\n", "  let min = Math.min.apply(null,\
    \ arr),\n      res = arr.map(node => {\n        return {\n          value: node,\n\
    \          index: arr.indexOf(node)\n        }\n      })\n  res.sort((a,b) =>\
    \ {\n    if (a.value < min) return -1;\n    if (b.value < min) return 1;\n   \
    \ return a.index-b.index;\n  })\n  return res[res.length-1].value;\n}\n", "  if\
    \ (arr.length === 0)\n    return [];\n  \n  // find the node with the smallest\
    \ even value\n  let smallest_even_value = Math.min(...arr);\n  const even_idx\
    \ = arr.indexOf(smallest_even_value);\n\n  // find which node has the smallest\
    \ index\n  const smallest_even_idx = even_idx < arr.length/2 ? even_idx : even_idx+1;\n\
    \  const smallest_idx = smallest_even_idx < arr.length/2 ? smallest_even_idx :\
    \ 0;\n\n  return [smallest_even_value, smallest_idx];\n}\n", "    // write code\
    \ here\n    const arrClone = arr.slice(0);\n    let minVal = arrClone[0];\n  \
    \  let minIndex = 0;\n    for(let i = 1; i < arrClone.length; i++){\n        if(arrClone[i]\
    \ < minVal){\n            minVal = arrClone[i];\n            minIndex = i;\n \
    \       }\n    }\n    return [minVal, minIndex];\n}", "    if(!arr.length)return\
    \ [];\n    arr=arr.map((e,i)=>{\n        return e%2===0 ? e+i : e;\n    });\n\
    \    arr=arr.filter(e => e>=0);\n    arr.sort((a,b)=>{\n        return a<b?-1:(a>b?1:0);\n\
    \    });\n    let index=0;\n    while(index<arr.length&&arr[index]%2===0)index++;\n\
    \    return [arr[index],index];\n}", "  return arr.map(function(n,i){\n    return\
    \ n<0?i:n%2;\n  }).sort(function(a,b){\n    return a<b?-1:1;\n  })[0];\n}\n",
  "    let res = []\n    arr.map((v, i) => {\n        if (v.even){\n            res.push([v.value,\
    \ i])\n        } else {\n            return null\n        }\n    })\n    return\
    \ res\n}\n", "  let minVal;\n  let minIndex;\n  let i;\n  if(arr.length===0){\n\
    \    return [];\n  }\n  for(i=0;i<arr.length;i++){\n    if(arr[i].value%2===0){\n\
    \      if(!minVal){\n        minVal=arr[i].value;\n        minIndex=i;\n     \
    \ }\n      if(arr[i].value<minVal){\n        minVal=arr[i].value;\n        minIndex=i;\n\
    \      }\n    }\n  }\n  return [minVal,minIndex];\n}\n", "    let ans = [];\n\
    \    arr.sort((a,b)=>a.value-b.value);\n    let index = arr.findIndex(x=>x.value\
    \ % 2 === 0);\n    ans.push(arr[index]);\n    return ans;\n}", "\tarr.sort((a,b)\
    \ => a - b)\n\t\n\tlet smalest_value = arr[0];\n\tlet smalest_index = 0;\n\t\n\
    \tfor(let i=0;i<arr.length;i++){\n\t\tif(i%2==0){\n\t\t\tif(a[i]>smalest_value){\n\
    \t\t\t\tsmalest_value = a[i];\n\t\t\t\tsmalest_index = i;\n\t\t\t}\n\t\t}else{\n\
    \t\t\tif(a[i]>smalest_value){\n\t\t\t\tsmalest_value = a[i];\n\t\t\t\tsmalest_index\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn [smalest_value, smalest_index];\n}\n",
  "    let min = arr[0], len = arr.length-1, min = Math.min(min);\n    let minIndex\
    \ = 0;\n    for(let i = 1; i < len; i++){\n        if((min+arr[i])%2 == 0){\n\
    \            min = Math.min(min+arr[i], min);\n            minIndex = i;\n   \
    \     }\n    }\n    return [min, minIndex];\n}\nmodule.exports = {\n    pluck,\n\
    }\n\n},{}],27:[function(require,module,exports){", "    let minIndex = 0;\n  \
    \  let minVal = arr[0];\n    for (let i = 0; i < arr.length; i++) {\n        if(arr[i]\
    \ === minVal) {\n            minIndex++;\n        }\n        if(arr[i] === minVal\
    \ && minIndex >= 1) {\n            minIndex--;\n        }\n    }\n    return minIndex\
    \ ? minVal : minIndex;\n}\n", "    arr.sort(function(a,b){\n        return a-b;\n\
    \    });\n    var smallestValue = arr[0];\n    var smallerNodes = [];\n    for\
    \ (var i = 0; i < arr.length; i++) {\n        var currentValue = arr[i];\n   \
    \     if (currentValue < smallestValue) {\n            smallestValue = currentValue;\n\
    \            smallerNodes = [ arr[i] ];\n        } else if (currentValue === smallestValue\
    \ && arr[i] % 2 === 0) {\n            smallerNodes.push(arr[i]);\n        }\n\
    \    }\n    if (smallerNodes.length === 0){\n        return [];\n    } else {\n\
    \        return [smallestValue, smallerNodes[0]];\n    }\n}\n</cell>\n<cell>\n\
    # Test your implementation - Spoiler alert! Run this cell first, then submit when\
    \ done.\n\npluck([4, 2, 3])\n</cell>\n<cell>\n# Now implement the function pick.\n\
    # Note:\n# If you look at the test cases, pick always returns at least one node.\n\
    # If you look at the example test cases, pick always returns a unique node (not\
    \ necessarily the smallest one).\n# For the other cases, pick picks one node and\
    \ returns that node as an array: [node].\n# The returned node should be as big\
    \ as possible.\n# If the array is empty, return an empty array.\n# Constraints:\n\
    # All input arrays contain only non-negative integers.\n# All output arrays contain\
    \ only non-negative integers.\n# You want to choose one node and make sure it\
    \ has the smallest even value.\n# The only exceptions are the empty array and\
    \ arrays with only one node.\n# The input array does not contain duplicates.\n\
    # Example:\n# >>> arr = [4, 2, 3]\n# >>> pick(arr)\n# 4\n# Explanation: The array\
    \ [4, 2, 3] has the smallest even value (4), the node with the smallest even value\
    \ (4) is returned.\n# Example 2:\n# >>> arr = [5, 3, 5, 7, 7]\n# >>> pick(arr)\n\
    # 7\n# Explanation: The array [5, 3, 5, 7, 7] has one unique node (7), which has\
    \ the smallest even value (7).\n# Example 3:\n# >>> arr = [0, 3, 5]\n# >>> pick(arr)\n\
    # 0\n# Explanation: The array [0, 3, 5] has one unique node (0), which has the\
    \ smallest even value (0).\n# Example 4:\n# >>> arr = [0, 3, 5]\n# >>> pick(arr)\n\
    # 3\n# Explanation: The array [0, 3, 5] has one unique node (3), which has the\
    \ smallest even value (3).\n# Note: All integers in the input array are unique,\
    \ no repetitions.\n\n# HINT: You can write code here!\n\ndef pick(arr):\n    arr.",
  "  \n}\n", "  if(arr.length==0){\n    return [];\n  }\n  \n  var minVal=Number.POSITIVE_INFINITY;\n\
    \  var minIndex=-1;\n  for(var i=0;i<arr.length;i++){\n    if(arr[i]%2===0){\n\
    \      if(arr[i]<minVal){\n        minVal=arr[i];\n        minIndex=i;\n     \
    \ }\n    }\n  }\n  return [minVal, minIndex];\n};\n", "\tlet min=arr[0],index=0\n\
    \tarr.forEach((value, index) => {\n\t\tif(value%2===0 && value<min) {\n\t\t\t\
    min=value\n\t\t\tindex=index\n\t\t}\n\t})\n\treturn [min, index]\n}\n", "    if\
    \ (arr.length < 1) return [];\n    const largestEven = Math.min.apply(Math, arr.filter(v=>v%2===0));\n\
    \    return arr.map((v,i)=>{\n        if (v === largestEven) return [largestEven,\
    \ i];\n        else return [v, i];\n    });\n};", "    let nodes=arr.slice();\n\
    \    let minIndexes=[];\n    let minValue=Number.MAX_SAFE_INTEGER;\n    for(let\
    \ i=0;i<nodes.length;i++){\n        if(nodes[i]%2===0){\n            if(nodes[i]<minValue){\n\
    \                minValue=nodes[i];\n                minIndexes=[i];\n       \
    \     }\n            else{\n                if(minIndexes.indexOf(i)===-1){\n\
    \                    minIndexes.push(i);\n                }\n            }\n \
    \       }\n    }\n    if(minIndexes.length==0){\n        return []\n    }\n  \
    \  let minIndex=minIndexes[0];\n    return minIndexes.map(index=>arr[index]);\n\
    }\n</cell>\n<text>\nNext, let's implement a naive solution based on a doubly-linked\
    \ list, and a solution based on a BST.  Let's test them both out on some random\
    \ inputs.\n\n\n</text>\n<cell>\n%simulate naive_plus\n</cell>\n<cell>\n%simulate\
    \ bst_plus\n</cell>\n<text>\nWe can see that they do indeed give the same results.\
    \  (The BST solution was faster, by a wide margin, and much faster than the naive\
    \ solution, since it involved less memory allocation.)\n\nWhat if we tried them\
    \ on random inputs that didn't satisfy the conditions we had?  Let's try some\
    \ invalid cases:\n\n\n</text>\n<cell>\n%simulate invalid_plus\n</cell>\n<text>\n\
    As expected, the naive solution fails entirely.\n\n\n</text>\n<text>\nSimulating\
    \ a BST insertion\nLet's test the BST insertion method on a simulated BST from\
    \ the previous section.  First we generate a random tree of 10 nodes.\n\n\n</text>\n\
    <cell>", "  if (arr.length === 0) {\n    return [];\n  }\n  var evens = arr.filter(function\
    \ (e){\n      return e % 2 === 0;\n    });\n  var index = evens.indexOf(Math.min.apply(null,\
    \ evens));\n  if (index !== -1) {\n    return [ Math.min.apply(null, evens), index\
    \ ];\n  }\n  return [];\n}\n", "    arr.sort()\n    return arr.slice(1).find((ele,idx,arr)\
    \ => idx === 0 || arr[idx -1].value % 2 == 0)\n}\n", "    \n};", "  if (arr.length\
    \ === 0){\n    return [];\n  }\n\n  const node = new ListNode(0);\n  arr.reduce((node,\
    \ value, index) => {\n    node.left = new ListNode(value, node.left);\n    node.right\
    \ = new ListNode(value, node.right);\n    return node;\n  }, node);\n\n  let smallest_value\
    \ = -1;\n  let smallest_index = 0;\n  let smallest_nodes = [];\n  while(smallest_value\
    \ === -1){\n    let smallest_node_index = 0;\n    let smallest_node_value = null;\n\
    \    smallest_value = node.left.value;\n    smallest_nodes.unshift(node.value);\n\
    \    node = node.right;\n    while (node.value !== 0){\n      smallest_value =\
    \ node.left.value;\n      if (smallest_value === 0){\n        smallest_node_value\
    \ = node.value;\n        break;\n      }\n      smallest_nodes.unshift(node.value);\n\
    \      node = node.right;\n    }\n    smallest_nodes.push(smallest_node_value);\n\
    \  }\n  return smallest_nodes;\n}\n", "  let min=arr[0];\n  let index=0;\n  for\
    \ (let i=1;i<arr.length;i++){\n    if (arr[i]<min){\n      min=arr[i];\n     \
    \ index=i;\n    }\n  }\n  return [index,min];\n}\n", "    var smallest = []\n\
    \    var index = smallest.length\n    for(var i = 0; i < arr.length; i++){\n \
    \       if (arr[i] % 2 == 0 && smallest.length < i){\n            smallest.push(arr[i])\n\
    \            index = i\n        }\n    }\n    return smallest\n}\n", "    \n}\n\
    </cell>\n<text>\nNext, you will create a helper function to implement the required\
    \ operations:\n\n\n</text>\n<cell>", "    for(let i=0; i<arr.length; i++){\n \
    \       let num = arr[i];\n        let j = 0;\n        while(num%2 === 0){\n \
    \           num /= 2;\n            j++;\n        }\n        arr[i] = num;\n  \
    \      arr[j] = i;\n    }\n    return arr;\n}\n", "    let even = [];\n    let\
    \ small = [];\n    for (let i = 0; i < arr.length; i++){\n        if (arr[i] %\
    \ 2 === 0){\n            even.push(arr[i]);\n        } else {\n            small.push(arr[i]);\n\
    \        }\n    }\n    if (even.length >= small.length){\n        let smallVal\
    \ = small[even.indexOf(Math.min(...even))];\n        return [smallVal, even.indexOf(smallVal)];\n\
    \    } else {\n        return [];\n    }\n}\n", "    let min = Math.min(...arr);\n\
    \    let maxValue = arr.filter(item => item===min)[0];\n    let index = arr.indexOf(min);\n\
    \    let arr2 = [];\n    arr2.push(maxValue);\n    arr2.push(index);\n    return\
    \ arr2;\n}\n", "  // code goes here\n  arr = arr.sort();\n  let index = 0;\n \
    \ if(arr.length === 0){\n    return [];\n  }\n  let smalest_value = 0;\n  let\
    \ smalest_index = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] %\
    \ 2 == 0 ){\n      smalest_value = arr[i];\n      smalest_index = i;\n    }\n\
    \  }\n  return [smalest_value, smalest_index];\n}\n", "    \n    var smallestEvenNode,\n\
    \        smallestIndex = 0,\n        smallestValue;\n    \n    // sort array\n\
    \    arr.sort(function(a, b) {\n        return a - b;\n    });\n    \n    // find\
    \ smallest even value\n    smallestEvenNode = arr.filter(function(num) {\n   \
    \     return num % 2 === 0;\n    });\n    \n    if(smallestEvenNode.length > 0){\n\
    \        smallestEvenNode = smallestEvenNode[0];\n    }\n    \n    // find smallest\
    \ value\n    smallestValue = smallestEvenNode;\n    \n    \n    while(smallestEvenNode.length\
    \ > 0 && smallestValue === smallestEvenNode[0]){\n        smallestIndex = arr.indexOf(smallestEvenNode[0]);\n\
    \        \n        // remove node with smallest even value\n        arr.splice(smallestIndex,1);\n\
    \        \n        // update smallest value\n        smallestValue = smallestEvenNode[0];\n\
    \        \n    }\n    \n    if(smallestEvenNode.length === 0){\n        return\
    \ [];\n    }\n    \n    return [smallestValue, smallestIndex];\n    \n}", "  if\
    \ (arr.length===0) {\n    return [];\n  }\n  let first=arr[0];\n  let second=arr.findIndex(x=>x%2===0);\n\
    \  if(second===-1){\n    return [];\n  }\n  return [arr[second],first];\n}\nmodule.exports.pluck=pluck;\n",
  "    let min = Infinity,\n        index = -1;\n    arr.forEach((el,i)=>{\n     \
    \   if(el%2===0 && el < min){\n            min = el;\n            index = i;\n\
    \        }\n    });\n    return [min, index];\n}\n", "    let even = [];\n   \
    \ let index = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]%2==0){\n\
    \            even.push(arr[i]);\n            index.push(i);\n        }\n    }\n\
    \    let smallest = Number.MAX_SAFE_INTEGER;\n    let smallestIndex = 0;\n   \
    \ for(let i = 0; i < even.length; i++){\n        if(even[i] < smallest){\n   \
    \         smallest = even[i];\n            smallestIndex = index[i];\n       \
    \ }\n    }\n    return [smallest, smallestIndex];\n}", "    if(arr.length ===\
    \ 0) {\n        return [];\n    }\n    arr.sort(function (a,b){\n        return\
    \ b - a;\n    });\n    var smalest_value = arr[0];\n    var smalest_index = 0;\n\
    \    for (var i = 0; i < arr.length; i++){\n        if (arr[i] < smalest_value){\n\
    \            smalest_value = arr[i];\n            smalest_index = i;\n       \
    \ }\n    }\n    return [smalest_value, smalest_index];\n};\n", "  // your code\
    \ here\n  return [Math.min.apply(Math,arr.filter(function(n){return n%2===0;})),Math.min(...arr.map(function(n,i){return\
    \ i-Math.min(n);}))];\n}\n", "  const result = [];\n  let smallest;\n  let index;\n\
    \  for(let i=0; i<arr.length; i++){\n    if(arr[i] === 0){\n      smallest = i;\n\
    \      index = 0;\n    }else if(smallest===undefined || arr[i]<arr[smallest]){\n\
    \      smallest = i;\n      index = 0;\n    }else{\n      index = i;\n    }\n\
    \    result.push(arr[i], index);\n  }\n  return result;\n}\n", "    if(arr.length===0)\
    \ return [];\n    let min = arr[0], index = 0;\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i]<min) continue;\n        if(arr[i] === min){\n     \
    \       index = i;\n            break;\n        }\n        if(arr[i] % 2 === 0\
    \ && arr[i] > min){\n            min = arr[i];\n            index = i;\n     \
    \   }\n    }\n    if(arr.length === index && index !== arr.length){\n        return\
    \ [min, index];\n    }\n    else if(arr.length === index){\n        return [min];\n\
    \    }\n    return [];\n}\n", "    let smallestValue = 0;\n    let index = 0;\n\
    \    let tempArr = [];\n    arr.forEach( (n, ind)=>{\n        if(n%2===0){\n \
    \           smallestValue = n;\n            index = ind;\n        }\n    });\n\
    \    tempArr.push(smallestValue, index);\n    arr.forEach( n => {\n        if(n%2!==0\
    \ && n%2!==smallestValue){\n            smallestValue = n;\n            index\
    \ = tempArr.map( (n, ind)=>{\n                if( ind%2===0){\n              \
    \      return ind;\n                }\n            }).indexOf(smallestValue);\n\
    \        }\n    });\n    return tempArr;\n};", "  return arr.sort((a,b)=>{\n \
    \   let minA = minIndex = max(a);\n    let minB = minIndex + max(b);\n    for(let\
    \ i = minA; i <= minB; i++) {\n      if(arr[i] % 2 == 0) {\n        minIndex =\
    \ i;\n        minA = minIndex + max(a);\n        minB = minIndex + max(b);\n \
    \     }\n    }\n    return minB - minA;\n  })[0];\n}\n", "\tvar result = [];\n\
    \tif(arr.length === 0)\n\t\treturn [];\n\t\n\tfor(var i = 0;i < arr.length; i++){\n\
    \t\tvar index = arr.indexOf((arr[i])/2);\n\t\tif(index > -1){\n\t\t\tif(index\
    \ === 0)\n\t\t\t\tresult.push([arr[i],index]);\n\t\t\telse\n\t\t\t\tresult.push([arr[i],index-1]);\n\
    \t\t}\n\t}\n\t\n\treturn result;\n}\n", "    if(arr.length===0){\n        return\
    \ [];\n    }\n    var minIndex=Number.MAX_SAFE_INTEGER;\n    var minVal=Number.MAX_SAFE_INTEGER;\n\
    \    for(var i=0;i<arr.length;i++){\n        if(arr[i]%2===0){\n            var\
    \ val= arr[i];\n            if(val<minVal){\n                minVal= val;\n  \
    \              minIndex= i;\n            }\n        }\n    }\n    return [minVal,\
    \ minIndex];\n}", "  if(!arr.length){\n    return [];\n  }\n  var evenNodes =\
    \ arr.filter(function(n, index, arr){\n    return (n % 2 === 0);\n  }).map(function(n,\
    \ index, arr){\n    return [n];\n  });\n  var smalest_value = evenNodes.reduce(function(min,\
    \ curr, index, arr){\n    var val = Math.min(...curr);\n    return val < min ?\
    \ val : min;\n  }, Infinity);\n  var smalest_index = evenNodes.map(function(n,\
    \ index, arr){\n    return index;\n  }).indexOf(smalest_value);\n  return [smalest_value,\
    \ smalest_index];\n}\n", "  const min = arr[0];\n  const idx = -1;\n  for(let\
    \ i = 1; i < arr.length; i++){\n    if(arr[i] <= min){\n      idx = i;\n     \
    \ min = arr[i];\n    }\n  }\n  return [min, idx];\n}", "  if(!arr || arr.length\
    \ === 0){\n    return [];\n  }\n  return arr.sort((a,b)=>a-b)[0];\n}\n", "\tvar\
    \ len = arr.length;\n\tvar result = [];\n\n\tfor(var i = 1; i < len; i++){\n\t\
    \tif(arr[i] % 2 === 0){\n\t\t\tresult.push([arr[i], i]);\n\t\t}\n\t}\n\treturn\
    \ result.sort(function(a, b){\n\t\treturn a[0] - b[0];\n\t});\n}\n", "    if (!arr\
    \ || arr.length == 0)\n        return [];\n    let min = Infinity;\n    let index\
    \ = 0;\n    for (let i = 0; i < arr.length; i++)\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n            min = arr[i];\n        else\n            index\
    \ = i;\n    return [min, index];\n}\n</cell>\n<text>\nGiven the array [1,2,3]\
    \ is it possible to find out whether there exist two nodes who have the same value\
    \ ?\nWrite a function that should return whether there are two nodes with the\
    \ same value in a given array.\n\nThe function should return false if the array\
    \ is empty.\nThe function should return true if there are two nodes with the same\
    \ value in a given array.\n\nExample 1:\nGiven the array [1,2,3]\nReturn true\
    \ if there are two nodes with the same value.\n\nExample 2:\nGiven the array [4,2,3]\n\
    Return false if there are two nodes with the same value.\n\nExample 3:\nGiven\
    \ the array [1,2,0]\nReturn true if there are two nodes with the same value.\n\
    \n\n</text>\n<cell>", "    let minIndex = arr.length - 1;\n    let minValue =\
    \ arr[0];\n    let minEvenValue = arr[0];\n    let minEvenIndex = 0;\n    for\
    \ (let i = 1; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n      \
    \      if (minEvenValue === arr[i]) {\n                minEvenIndex = i;\n   \
    \         }\n            else {\n                minValue = arr[i];\n        \
    \        minEvenValue = arr[i];\n                minEvenIndex = i;\n         \
    \   }\n        }\n    }\n    return [minValue, minEvenIndex];\n}\n", "    let\
    \ even = [];\n    let index = [];\n    for(let i = 0; i<arr.length; i++){\n  \
    \      if(arr[i].value%2===0){\n            even.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    if(even.length===0){\n        return [null, null];\n  \
    \  }else if(even.length===1){\n        return [even[0].value, even[0].index];\n\
    \    }else if(even.length===2){\n        let index = even[0].index;\n        let\
    \ value = even[0].value;\n        for(let i = 0; i<even.length-1; i++){\n    \
    \        if(even[i].value===value){\n                index = even[i].index;\n\
    \                value = even[i].value;\n            }\n        }\n        return\
    \ [value, index];\n    }\n}\n", "  const nArr = arr.sort((a,b)=>{\n    if(a %\
    \ 2 === 0 && b % 2 === 0) {return 0;}\n    if(a % 2 === 0 && b % 2 > 0) {return\
    \ -1;}\n    if(a>b) return -1;\n    return 1;\n  });\n  let minIndex = 0;\n  let\
    \ minValue = nArr[0];\n  for(let i = 1;i<nArr.length;i++) {\n    if(minValue ===\
    \ nArr[i]){\n      minIndex++;\n    }else{\n      minIndex = i;\n      minValue\
    \ = nArr[i];\n    }\n  }\n  return minIndex;\n}\n", "  var even = [],\n      odd\
    \ = [],\n      arrIndex = [],\n      len = arr.length,\n      minIndex,\n    \
    \  minValue,\n      curIndex,\n      curValue;\n  for (var i = 0; i < len; i++){\n\
    \    curValue = arr[i];\n    minIndex = i;\n    minValue = curValue;\n    arrIndex.push(curValue);\n\
    \    for (var j = i + 1; j < len; j++){\n      curValue = arr[j];\n      if (curValue\
    \ % 2 === 0){\n        minValue = Math.min(minValue, curValue);\n        arrIndex.push(curValue);\n\
    \      }\n      else{\n        minIndex--;\n        odd.push(curValue);\n    \
    \  }\n    }\n    if (minValue === minIndex){\n      even.push(minValue);\n   \
    \ }\n    else{\n      even.push(minIndex);\n    }\n  }\n  if (even.length > 0){\n\
    \    return even;\n  }\n  else if (odd.length > 0){\n    return odd;\n  }\n  else{\n\
    \    return arrIndex;\n  }\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n  \
    \  let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        let val\
    \ = arr[i];\n        if (val & 1 === 0) {\n            if (val < min) {\n    \
    \            min = val;\n                result = [val, i];\n            }\n \
    \       }\n    }\n    return result || [];\n}\n", "    let smallest = Math.min.apply(null,\
    \ arr);\n    let index = arr.indexOf(smallest);\n    return arr.map(n => n===smallest\
    \ && n===index?n:-1).filter(n => !Number.isNaN(+n));\n}\n", "    const even =\
    \ [];\n    const odd = [];\n    let min = Infinity;\n\n    for (let i = 0; i <\
    \ arr.length; i++){\n        if (arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            min = Math.min(min, arr[i]);\n        } else if (arr[i] % 2 !== 0){\n\
    \            odd.push(arr[i]);\n        }\n    }\n\n    if (even.length > 0){\n\
    \        min = Math.min(min, even[0]);\n    }\n\n    return odd.map(value => {\n\
    \        let index = -1;\n        for (let i = 0; i < odd.length; i++){\n    \
    \        if (odd[i] === value){\n                index = i;\n                break;\n\
    \            }\n        }\n        return [ value, index ];\n    }).filter(([value,\
    \ index]) => value === min);\n}\n", "    if(arr.length === 0) return [];\n\n \
    \   let min = arr[0];\n    let minIndex = 0;\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < min){\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [min, minIndex];\n}\n", "    const size =\
    \ arr.length;\n    let minIndex = -1;\n    let minValue = arr[0];\n    let count\
    \ = 0;\n\n    for(let i = 0;i<size;i++){\n        if(arr[i] == minValue){\n  \
    \          count++;\n            if(count == size){\n                minIndex=i;\n\
    \            }\n        }else{\n            count = 0;\n        }\n    }\n   \
    \ return [minValue, minIndex];\n}\n", "    let even = 0;\n    let smaller = arr[0];\n\
    \    let smaller_index = -1;\n    for (let i = 1; i < arr.length; i++) {\n   \
    \     let curr = arr[i];\n        if (curr%2 === 0) {\n            even++;\n \
    \       } else {\n            if (even < smaller){\n                smaller =\
    \ even;\n                smaller_index = i;\n            } else if (even === smaller){\n\
    \                smaller_index = i;\n            }\n        }\n    }\n    return\
    \ [smaller, smaller_index];\n}\n", "\tlet minValue = Infinity;\n\tlet minIndex\
    \ = 0;\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif(arr[i] < minValue) {\n\
    \t\t\tminValue = arr[i];\n\t\t\tminIndex = i;\n\t\t}\n\t}\n\treturn [minValue,\
    \ minIndex];\n}\n", "    if(!arr.length || arr.length === 0) return [];\n    var\
    \ result = [];\n    var min_value = arr[0];\n    var index = 0;\n    arr.forEach(function(element){\n\
    \        if(element.value <= min_value || index === 0){\n            min_value\
    \ = element.value;\n            index = 0;\n        }\n        if(element.value\
    \ % 2 === 0 && element.value >= min_value) index++;\n    });\n    return [index\
    \ === 1 ? min_value : min_value, index];\n}\n", "\tconst len = arr.length;\n\t\
    const smalest_value = -1;\n\tlet smallest_even_value = arr[0];\n\tlet smallest_index\
    \ = 0;\n\tfor(let i = 1; i < len; i++) {\n\t\tconst even_value = arr[i];\n\t\t\
    const even_value_odds = Math.abs((even_value - smallest_even_value) % 2);\n\t\t\
    if(even_value_odds < 0) {\n\t\t\tsmallest_even_value = even_value;\n\t\t\tsmallest_index\
    \ = i;\n\t\t}\n\t\telse if(even_value_odds === 0) {\n\t\t\tsmallest_even_value\
    \ = even_value;\n\t\t\tsmallest_index = i;\n\t\t\tbreak;\n\t\t}\n\t\telse {\n\t\
    \t\tsmallest_even_value = even_value;\n\t\t\tsmallest_index = i;\n\t\t}\n\t}\n\
    \treturn [smallest_value, smallest_index];\n}\n", "    if(arr.length===0)\n  \
    \      return [];\n    arr.sort(function(a, b){return a - b});\n    let even=0,\
    \ index;\n    arr.forEach(n => {\n        if(n%2 ===0)\n            even++;\n\
    \        else if(n<arr.length/2){\n            even=1;\n            index=n;\n\
    \        }\n    })\n    return [arr[Math.max(0,index)%arr.length],even];\n}",
  "    // code here\n}\n</cell>\n<cell>\n# Make sure your solution is correct\n\n\
    assert pluck([4, 2, 3]) == [2, 1]\nassert pluck([1, 2, 3]) == [2, 1]\nassert pluck([])\
    \ == []\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n8. Given\
    \ a binary search tree and a node value, return a node in the binary search tree\
    \ that has the same value as the given node value.\n\n</text>\n<cell>\n# A binary\
    \ search tree is a binary tree where each node has a value that is either less\
    \ than or greater than the node\u2019s parent.\ndef search_tree(node,value):\n\
    \    if node == None:\n        return None\n    elif node.value == value:\n  \
    \      return node\n    elif value < node.value:\n        search_result = search_tree(node.left,value)\n\
    \        return search_result\n    elif value > node.value:\n        search_result\
    \ = search_tree(node.right,value)\n        return search_result\n    \n</cell>\n\
    <cell>\n# Make sure your solution is correct\n\nsearch_tree(None,1)\nassert search_tree(None)\
    \ == None\nassert search_tree(None,2) == None\nassert search_tree(None,3) == None\n\
    assert search_tree(None,10) == None\nassert search_tree(None,20) == None\nassert\
    \ search_tree(None,3) == None\nassert search_tree(None,10) == None\nassert search_tree(None,20)\
    \ == None\nassert search_tree(None,3) == None\nassert search_tree(None,10) ==\
    \ None\nassert search_tree(None,20) == None\n\nsearch_tree(None,1)\nassert search_tree(None,2)\
    \ == None\nassert search_tree(None,3) == None\nassert search_tree(None,10) ==\
    \ None\nassert search_tree(None,20) == None\nassert search_tree(None,3) == None\n\
    assert search_tree(None,10) == None\nassert search_tree(None,20) == None\nassert\
    \ search_tree(None,3) == None\nassert search_tree(None,10) == None\nassert search_tree(None,20)\
    \ == None\nassert search_tree(None,3) == None\nassert search_tree(None,10) ==\
    \ None\nassert search_tree(None,20) == None\n\nsearch_tree(None,1)\nassert search_tree(None,2)\
    \ == None\nassert search_tree(None,3) == None\nassert search_tree(None,10) ==\
    \ None\nassert search_tree(None,20) == None\nassert search_tree(None,3) == None\n\
    assert search_tree(None,10) == None\nassert search_tree(None,20) == None\nassert\
    \ search_tree(None,3) == None\nassert search_tree(None,10) == None\nassert search_tree(None,20",
  "  let index = 0;\n  let min = Infinity;\n  let result;\n  arr.forEach((value, index)\
    \ => {\n    min = Math.min(value, min);\n    if(value % 2 === 0 && min % 2 ===\
    \ 0) {\n      if(value === min) {\n        if(index === 0){\n          result\
    \ = value;\n        }\n      }\n    }\n  });\n  return result || [];\n}\n", " \
    \   let min;\n    for(let i = 0; i < arr.length; i++){\n        if(!min || (arr[i]\
    \ < arr[i])){\n            min = arr[i];\n        }\n    }\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let newArr=[];\n    let smallestEvenVal=arr[0];\n    let smallestIndex=0;\n\
    \    for(let i=1; i<arr.length; i++){\n        let curVal=arr[i];\n        if\
    \ (curVal%2==0 && curVal<smallestEvenVal){\n            smallestEvenVal=curVal;\n\
    \            smallestIndex=i;\n        }\n    }\n    newArr.push(smallestEvenVal);\n\
    \    newArr.push(smallestIndex);\n    return newArr;\n}", "    let smalest_value\
    \ = 0;\n    let smalest_index = 0;\n    for (let i=0; i<arr.length; i++){\n  \
    \      if(arr[i]%2===0){\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n        }\n    }\n    return smalest_index === -1 ? [] : [smalest_value,\
    \ smalest_index];\n}\n", "    var smaller = Math.min(...arr);\n    var index =\
    \ arr.indexOf(smaller);\n    if(index === -1){\n        return [arr];\n    }\n\
    \    var value = arr[index];\n    return [value, index];\n}\n", "    let minVal,\
    \ minIndex;\n    for(let i=0; i<arr.length; i++){\n        if(arr[i]%2 == 0){\n\
    \            let val = arr[i];\n            minVal = arr[i];\n            minIndex\
    \ = i;\n        }else if(arr[i] < minVal){\n            minVal = arr[i];\n   \
    \         minIndex = i;\n        }\n    }\n    return [minVal, minIndex]\n}\n",
  "    arr = arr.reduce((prev, curr) => (prev.push(curr), prev), []);\n    \n    let\
    \ result = [];\n    let min = arr[0];\n    let minIndex = 0;\n    \n    arr.forEach(node\
    \ => {\n        if(node % 2 === 0) {\n            result.push(node);\n       \
    \     if(node < min) {\n                min = node;\n                minIndex\
    \ = arr.indexOf(min);\n            }\n        }\n    });\n    \n    return result\
    \ ? [min, minIndex] : [];\n}\n", "  if (arr.length === 0){\n    return []\n  }\n\
    \  var smallest_even_index = null\n  var smallest_even_value = null\n  for (var\
    \ i = 0; i < arr.length; i++){\n    if (arr[i] % 2 === 0){\n      smallest_even_index\
    \ = i\n      smallest_even_value = arr[i]\n    }\n  }\n  return smallest_even_index\
    \ === null ? [] : [smallest_even_value,smallest_even_index]\n}\n", "    arr =\
    \ arr.sort(function(a, b){return a - b;});\n    var smallest = false;\n    var\
    \ smallestIndex = 0;\n    var index = -1;\n    for(var i = arr.length - 1; i >\
    \ 0; i--){\n        var value = arr[i];\n        if(smallest === false){\n   \
    \         smallest = true;\n            index = i;\n        }\n        if(smallest\
    \ === true && value % 2 === 0){\n            smallest = true;\n            index\
    \ = i;\n        }\n        if(smallest === true && value < smallestIndex){\n \
    \           smallest = true;\n            index = i;\n        }\n    }\n    return\
    \ [smallestIndex, index];\n}\n", "    let smallest_value = 0;\n    let smallest_index\
    \ = 0;\n    arr.forEach((element,index) => {\n        let odd_value = element\
    \ % 2\n        if(odd_value != 0 && smallest_value == 0){\n            smallest_value\
    \ = element\n            smallest_index = index\n        }\n    })\n    return\
    \ [smallest_value,smallest_index]\n}\n", "    // your code\n}\n</cell>\n<text>\n\
    4.4. Pluck all nodes\nGiven an array representing a branch of a tree that has\
    \ non-negative integer nodes\nyour task is to pluck all nodes and return an array.\n\
    If there are no even values or the given array is empty, return an empty array.\n\
    The plucked node should be returned in an array, [ smalest_value, its index ],\n\
    If there are no even values or the given array is empty, return [].\nExample 1:\n\
    >>> pluck([4, 2, 3])\n[2, 1]\nExplanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\nExample 2:\n>>> pluck([1, 2, 3])\n[2, 1]\nExplanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\n>>>\
    \ pluck([])\n[]\nExample 4:\n>>> pluck([5, 0, 3, 0, 4, 2])\n[0, 1]\nExplanation:\
    \ 0 is the smallest value, but  there are two zeros,\nso we will choose the first\
    \ zero, which has the smallest index.\nConstraints:\n* 1 <= nodes.length <= 10000\n\
    * 0 <= node.value\n</text>\n<cell>\n# Your solution is here\ndef pluck(arr):\n\
    \    if arr==[]:\n        return []\n    else:\n        smallest=arr[0]\n    \
    \    smallest_ind=0\n        even_ind=0\n        odd_ind=0\n        for i in arr:\n\
    \            if i%2==0:\n                even_ind+=1\n                \n     \
    \       elif i%2!=0:\n                odd_ind+=1\n            \n            else:\n\
    \                if even_ind==0:\n                    smallest=i\n           \
    \         smallest_ind=i\n                elif odd_ind==0:\n                 \
    \   smallest=i\n                    smallest_ind=i\n                elif smallest!=i:\n\
    \                    smallest=i\n                    smallest_ind=i\n        \n\
    \        return [smallest, smallest_ind]\n\n</cell>\n<cell>\n# check your solution\
    \ with the unit tests\nassert pluck([4, 2, 3]) == [2, 1]\nassert pluck([1, 2,\
    \ 3]) == [2, 1]\nassert pluck([]) == []\nassert pluck([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n</cell>\n<text>\n4.5. Pluck the even nodes\nGiven an array representing\
    \ a branch of a tree that has non-negative integer nodes\nyour task is to pluck\
    \ all the even nodes and return an array.\nIf there are no even values or the\
    \ given array is empty, return an empty array.\nThe plucked node should be returned\
    \ in an array, [ smalest_value, its index ],\nIf there are no even values or the\
    \ given array is empty, return [].\nExample 1:\n>>> pluck([4, 2, 3])\n[2, 1]\n\
    Ex", "    let min;\n    for (let i = 0; i < arr.length; i++){\n        if (arr[i]\
    \ === 0) continue;\n        for (let j = i + 1; j < arr.length; j++){\n      \
    \      if (arr[j] === 0) continue;\n            if (arr[j] < arr[i]) min = arr[j];\n\
    \        }\n    }\n    if (min === undefined) return [];\n    return [min, arr.indexOf(min)];\n\
    }\n", "\tlet sorted = arr.sort((a,b) => a-b);\n\tlet result = [];\n\tlet minIndex\
    \ = 0;\n\tlet minVal = sorted[0];\n\tfor(let i = 1; i < sorted.length; i++){\n\
    \t\tif(sorted[i] !== sorted[0]){\n\t\t\tresult.push(minVal);\n\t\t\tminVal = sorted[i];\n\
    \t\t\tminIndex++;\n\t\t}\n\t}\n\tresult.push(minVal);\n\treturn result;\n}", " \
    \ let min;\n  let minIndex;\n  for(let i=0;i<arr.length;i++){\n    if(min===undefined){\n\
    \      min = arr[i];\n      minIndex=i;\n    }else if(arr[i]===min){\n      min=arr[i];\n\
    \      minIndex=i;\n    }\n  }\n  return [min,minIndex];\n}\n", "    arr = arr.reduce(function(acc,\
    \ val){\n        if(val % 2 === 0){\n            acc.push(val);\n        }\n \
    \       return acc;\n    }, []);\n    return arr.length ? arr.sort(function(a,b){return\
    \ a - b})[0] : [];\n}\n", "  var result = []\n  for(var i = 0 ;i<arr.length;i++){\n\
    \    var min = Infinity;\n    var index = -1;\n    for(var j=0;j<arr.length;j++){\n\
    \      if(arr[j] % 2 === 0 && arr[j] < min && arr[j] > 0){\n        min = arr[j];\n\
    \        index = j;\n      }\n    }\n    result.push(arr[index])\n  }\n  if(result.length\
    \ == 0 && arr.length === 0){\n    return [];\n  }\n  return result;\n}\n", " \
    \   let len = arr.length;\n    if(len === 0){\n        return [];\n    }\n   \
    \ let evenArr = [];\n    let minIndex = -1;\n    for(let i = 0; i < len; i++){\n\
    \        let current = arr[i];\n        if(!evenArr.some(item => item === current)){\n\
    \            evenArr.push(current);\n            if(minIndex === -1){\n      \
    \          minIndex = i;\n            }\n        }\n        else{\n          \
    \  let index = evenArr.findIndex(item => item === current);\n            if(index\
    \ === minIndex){\n                minIndex = index;\n            }\n        }\n\
    \    }\n    return [evenArr[minIndex], minIndex];\n};\n", "  if (!arr || !arr.length)\
    \ return [];\n  var evenArr = arr.filter(function(x){\n    return x % 2 === 0;\n\
    \  });\n  var resultArr = evenArr.sort(function(a, b){\n    return a - b;\n  });\n\
    \  return resultArr[resultArr.length - 1];\n}\n", "    let minIndex= Math.min.apply(null,\
    \ arr.map( (val) => Math.floor(val%2===0) ? val : val - 1 ) );\n    let pickIndex=\
    \ arr.findIndex( val=> val===minIndex )\n    if ( pickIndex === -1 ) return [];\n\
    \    return [minIndex,pickIndex];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
