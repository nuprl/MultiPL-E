name: HumanEval_7_filter_by_substring
language: js
prompt: "//Filter an input array of strings only for ones that contain given substring\n\
  // >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\"\
  , \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction\
  \ filter_by_substring(strings, substring){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\",\
  \ \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\",\
  \ \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\", \"\
  gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
completions: ["  var new_strings = []\n\n  for(var i = 0; i<strings.length; i++){\n\
    \    if(strings[i].indexOf(substring) != -1){\n      new_strings.push(strings[i])\n\
    \    }\n  }\n  return new_strings\n}\n", "    return strings.filter(function(el){\n\
    \        return el.toLowerCase().indexOf(substring.toLowerCase()) !== -1\n   \
    \ })\n}\n", "    return strings.filter(function(string){\n        return string.indexOf(substring)\
    \ !== -1;\n    });\n}\n", "    var ret = [];\n    strings.forEach(function(string){\n\
    \        if(string.indexOf(substring) !== -1){\n            ret.push(string);\n\
    \        }\n    });\n    return ret;\n}\n", "\tvar filtered_array = [];\n\tfor\
    \ (var i = 0; i < strings.length; i++) {\n\t\tvar current_string = strings[i];\n\
    \t\tif (current_string.indexOf(substring) !== -1) {\n\t\t\tfiltered_array.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered_array;\n}\n", "\tlet filtered = [];\n\tfor(let i\
    \ = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) >= 0){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n", "\treturn\
    \ _.filter(strings, s => s.indexOf(substring) != -1);\n}\n", "  var filtered =\
    \ [];\n  var string = strings[0];\n  for (var i = 0; i < strings.length; i++){\n\
    \    var substring_found = string.indexOf(substring) > -1;\n    if (substring_found){\n\
    \      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n}\n", "   \
    \ var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "\treturn strings.filter(function(s){\n\t\tif(substring.indexOf(s) !== -1){\n\
    \t\t\treturn true;\n\t\t}\n\t});\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) !== -1\n    })\n}\n", "  var filtered_strings\
    \ = []\n  for(var i=0; i<strings.length; i++){\n    if(strings[i].indexOf(substring)\
    \ != -1){\n      filtered_strings.push(strings[i])\n    }\n  }\n  return filtered_strings\n\
    }\n", "  return objects.filter(function(str){\n    return str.indexOf(substring)\
    \ !== -1;\n  }).map(function(str){\n    return str.slice(substring.length);\n\
    \  });\n}\n", "    var filtered_strings = [];\n    for (var i = 0; i < strings.length;\
    \ i++){\n        if (strings[i].indexOf(substring) > -1){\n            filtered_strings.push(strings[i]);\n\
    \        }\n    }\n    return filtered_strings;\n}\n", "  return strings.filter(function(word){\n\
    \    return word.indexOf(substring) !== -1;\n  });\n}\n", "    substring = substring.trim();\n\
    \    if(!strings || !substring) return strings;\n\n    var filtered_strings =\
    \ [];\n\n    strings.forEach(function(string){\n        if(string.indexOf(substring)\
    \ !== -1) {\n            filtered_strings.push(string);\n        }\n    });\n\n\
    \    return filtered_strings;\n}\n", "  var matches = [];\n  strings.forEach(function(string){\n\
    \    if(string.indexOf(substring) !== -1){\n      matches.push(string);\n    }\n\
    \  });\n  return matches;\n}\n", "  var matches = [];\n  for(var i = 0; i < strings.length;\
    \ i++){\n    if(strings[i].indexOf(substring) !== -1){\n      matches.push(strings[i]);\n\
    \    }\n  }\n  return matches;\n}\n", "    var newStrings = [];\n    for(var i\
    \ = 0; i < strings.length; i++){\n        var str = strings[i];\n        if(str.indexOf(substring)\
    \ > -1){\n            newStrings.push(str);\n        }\n    }\n    return newStrings;\n\
    }\n", "    return strings.filter(function(s){\n        return (s.indexOf(substring)\
    \ !== -1);\n    });\n}\n", "  var filtered = [];\n  for(var i = 0; i < strings.length;\
    \ i++){\n    if(strings[i].indexOf(substring) != -1){\n      filtered.push(strings[i]);\n\
    \    }\n  }\n  return filtered;\n}\n", "    if(!Array.isArray(strings)){\n   \
    \     throw new Error(\"Filter by Substring expects an array as input\")\n   \
    \ }\n    if(substring === \"\"){\n        return strings\n    }\n    return strings.filter(function(string){\n\
    \        return string.includes(substring)\n    })\n}\n", "    var filtered_array\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            filtered_array.push(strings[i]);\n        }\n    }\n \
    \   return filtered_array;\n}", "    return strings.filter(function (string) {\n\
    \        return string.indexOf(substring) !== -1\n    });\n}\n", "\treturn strings.filter(function\
    \ (string) {\n\t\treturn string.includes(substring);\n\t});\n}", "    var filtered_strings\
    \ = strings.filter(function(string){\n        return (string.indexOf(substring)\
    \ != -1);\n    });\n    return filtered_strings;\n}\n", "    return strings.filter(function(el){\n\
    \        return el.indexOf(substring) >= 0;\n    });\n}\n", "\tvar filtered_strings\
    \ = []\n\t\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\
    \t\t\tfiltered_strings.push(strings[i])\n\t\t}\n\t}\n\t\n\treturn filtered_strings\n\
    }\n", "    return strings.filter(function(string){\n        return string.indexOf(substring)\
    \ !== -1;\n    });\n}\n", "\treturn strings.filter(string => string.includes(substring));\n\
    }\n", "    return _.filter(strings, function(string){\n        return string.indexOf(substring)\
    \ !== -1;\n    });\n}\n", "  var filtered = [];\n  for(var i = 0; i < strings.length;\
    \ i++){\n    if(strings[i].indexOf(substring) != -1){\n      filtered.push(strings[i]);\n\
    \    }\n  }\n  return filtered;\n}\n", "    var filtered = [];\n    \n    for\
    \ (var i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(substring)\
    \ !== -1){\n            filtered.push(strings[i]);\n        }\n    }\n    \n \
    \   return filtered;\n}\n", "    if(!strings.length){\n        return strings\n\
    \    }\n    return strings.filter(str => {\n        return str.includes(substring)\n\
    \    })\n}\n", "    var filtered_strings = [];\n    strings.forEach(function(string){\n\
    \        if (string.indexOf(substring) > -1){\n            filtered_strings.push(string);\n\
    \        }\n    });\n    return filtered_strings;\n}", "    return strings.filter(function(string){\n\
    \        return string.includes(substring);\n    });\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) > -1;\n    });\n}\n", "  var filtered\
    \ = [];\n  for (var i = 0; i < strings.length; i++){\n    if (strings[i].indexOf(substring)\
    \ !== -1){\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n\
    }\n", "  var new_strings = []\n  for(var i = 0;i < strings.length;i++){\n    if(strings[i].indexOf(substring)\
    \ != -1){\n      new_strings.push(strings[i]);\n    }\n  }\n  return new_strings;\n\
    }\n", "  return strings.filter(function(item){\n    return item.indexOf(substring)\
    \ > -1;\n  });\n}\n", "    var filtered = [];\n    for(var i=0; i<strings.length;\
    \ i++){\n        if(strings[i].indexOf(substring) > -1){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}", "\tvar filtered = [];\n\tvar i;\n\
    \tfor(i = 0; i < strings.length; i++){\n\t\tif (strings[i].indexOf(substring)\
    \ > -1){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n",
  "    return strings.filter(x => x.indexOf(substring) !== -1);\n}\n", "    var filtered_strings\
    \ = [];\n    strings.forEach(function(string) {\n        if (string.includes(substring)){\n\
    \            filtered_strings.push(string);\n        }\n    });\n    return filtered_strings;\n\
    }\n", "    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ >= 0){\n            console.log(\"returning \" + strings[i]);\n            return\
    \ strings[i];\n        }\n    }\n    return null;\n}\n", "  for(var i=0, len=strings.length;\
    \ i < len; i++){\n    if(strings[i].indexOf(substring) === 0){\n      strings[i]\
    \ = strings[i].substring(substring.length);\n    }\n  }\n  return strings;\n};\n\
    \n", "    var filtered_strings = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(substring) != -1){\n            filtered_strings.push(\
    \ strings[i] );\n        }\n    }\n    return filtered_strings;\n}\n</code>\n\
    <|/ a dscore=0 tags=javascript,regex |>\n<| c |>\nThanks. But it doesnt work in\
    \ my case, because if i have an input \"abc\", \"abcd\", \"abce\" and substring\
    \ = \"b\" the result should be [\"abcd\", \"abce\"].\n<|/ c |>\n<| c |>\nI added\
    \ my own answer based on your code.\n<|/ c |>\n<| c |>\nI added another answer\
    \ based on your code. Hope that helps.\n<|/ c |>\n<| a tags=javascript,regex |>\n\
    You can do something like this (if you don't want to use Array.filter):\n<code>",
  "    return strings.filter(function(element){\n        return element.includes(substring);\n\
    \    });\n}\n", "    return _.filter(strings, function(string){\n        return\
    \ string.includes(substring);\n    });\n}\n", "    var results = []\n    for(var\
    \ i = 0; i < strings.length; i++){\n        var string = strings[i]\n        if(string.indexOf(substring)\
    \ !== -1){\n            results.push(string)\n        }\n    }\n    return results\n\
    }\n", "    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            strings.splice(i, 1);\n            i--;\n        }\n \
    \   }\n    return strings;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(substring) !== -1\n  })\n}", "    var filtered_strings\
    \ = [];\n\n    strings.forEach(function(string){\n        if(string.indexOf(substring)\
    \ !== -1){\n            filtered_strings.push(string);\n        }\n    });\n \
    \   return filtered_strings;\n}\n", "    \n    if(substring === null || substring\
    \ === \"\"){\n        return strings;\n    }\n\n    let filtered_strings = [];\n\
    \    for(let i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \n    return filtered_strings;\n}\n\n", "    return strings.filter(function (str){\n\
    \        return str.indexOf(substring) >= 0;\n    });\n}\n", "    var new_arr\
    \ = [];\n    for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            new_arr.push(strings[i]);\n        }\n    }\n    return\
    \ new_arr;\n}\n", "  var filtered_strings = []\n  strings.forEach(function(string){\n\
    \    if (string.indexOf(substring) > -1){\n      filtered_strings.push(string)\n\
    \    }\n  })\n  return filtered_strings\n}\n", "\treturn strings.filter(function(string){\n\
    \t\treturn string.includes(substring);\n\t});\n}\n", "    let filteredArray =\
    \ [];\n    for(const string of strings){\n        if(string.includes(substring)){\n\
    \            filteredArray.push(string);\n        }\n    }\n    return filteredArray;\n\
    }\n", "\treturn strings.filter(function(item){\n\t\treturn item.indexOf(substring)\
    \ !== -1;\n\t});\n}\n", "    var result = [];\n    strings.forEach(function(item){\n\
    \        if(item.indexOf(substring) > -1){\n            result.push(item);\n \
    \       }\n    });\n    return result;\n}\n", "\tvar filtered = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tfor(var j = 0; j < strings[i].length;\
    \ j++){\n\t\t\tif(strings[i].substr(j, substring.length).toLowerCase() === substring.toLowerCase()){\n\
    \t\t\t\tfiltered.push(strings[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ filtered;\n}\n", "    let filtered = []\n    strings.map(string => {\n     \
    \   if(string.includes(substring)){\n            filtered.push(string)\n     \
    \   }\n    })\n    return filtered\n}\n", "    var result = [];\n    strings.forEach(function(value){\n\
    \        if (value.indexOf(substring) >= 0){\n            result.push(value);\n\
    \        }\n    });\n    return result;\n}\n", "  var results = [];\n  for (var\
    \ i = 0; i < strings.length; i++){\n    var str = strings[i];\n    if (str.indexOf(substring)\
    \ !== -1){\n      results.push(str);\n    }\n  }\n  return results;\n}\n\n", " \
    \   var result = new Array();\n    for(var i = 0, l = strings.length; i < l; i++){\n\
    \        if(strings[i].indexOf(substring) !== -1){\n            result.push(strings[i]);\n\
    \        }\n    }\n    return result;\n}\n", "\tvar results = [];\n\tfor(var i\
    \ = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) > -1){\n\
    \t\t\tresults.push(strings[i]);\n\t\t}\n\t}\n\treturn results;\n}", "  var filtered\
    \ = [];\n\n  strings.forEach(function(string){\n    if(string.indexOf(substring)\
    \ !== -1){\n      filtered.push(string);\n    }\n  });\n\n  return filtered;\n\
    }\n", "    strings = strings||[];\n    substring = substring||\"\";\n    \n  \
    \  var filtered_strings = [];\n    \n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(substring) !== -1){\n            filtered_strings.push(strings[i]);\n\
    \        }\n    }\n    \n    return filtered_strings;\n}\n", "    var new_strings\
    \ = [],\n        filtered_string,\n        substring_index;\n\n    for (var i\
    \ = 0; i < strings.length; i++){\n        substring_index = strings[i].indexOf(substring);\n\
    \        if (substring_index != -1){\n            filtered_string = strings[i];\n\
    \            break;\n        }\n    }\n\n    new_strings.push(filtered_string);\n\
    \    return new_strings;\n}", "  return strings.filter(function(val){\n    return\
    \ (val.indexOf(substring) !== -1);\n  });\n}\n", "\treturn strings.filter(function(str){\n\
    \t\treturn str.indexOf(substring) > -1;\n\t});\n}\n", "    return strings.filter(function(string){\
    \ return string.indexOf(substring) !== -1; });\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(substring) >= 0;\n  });\n}\n", "    var re = new RegExp(substring,\
    \ \"i\");\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(re.test(strings[i])){\n            filtered.push(strings[i]);\n  \
    \      }\n    }\n    return filtered;\n}\n", "  var filtered_array = [];\n  strings.forEach(function(string){\n\
    \    if(string.includes(substring)){\n      filtered_array.push(string);\n   \
    \ }\n  });\n  return filtered_array;\n}\n", "    if (substring == \"\") return\
    \ strings;\n    return strings.filter(function(string){\n        return string.indexOf(substring)\
    \ !== -1;\n    });\n}", "    for(var i=0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            strings.splice(i, 1);\n        }\n    }\n    return strings;\n\
    }\n", "    var filtered = [];\n    strings.forEach(function(el){\n        if(el.indexOf(substring)\
    \ !== -1){\n            filtered.push(el);\n        }\n    });\n    return filtered;\n\
    }\n", "  return strings.filter(function(string){\n    return string.indexOf(substring)\
    \ !== -1\n  })\n}\n", "    var filtered_array = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(substring) !== -1){\n            filtered_array.push(strings[i]);\n\
    \        }\n    }\n    return filtered_array;\n}\n", "    var re = new RegExp('^'\
    \ + substring + '$');\n    return objects.filter(function(string){\n        return\
    \ re.test(string);\n    });\n}\n</code>\n<|/ a |>\n<| c |>\nI added a question\
    \ about how to use this with multiple arguments. http://stackoverflow.com/questions/30507993/how-to-use-this-filter-with-multiple-arguments\n\
    <|/ c |>\n<| a dscore=5 |>\nYou could use the Array.prototype filter method\n\
    <code>\nvar strings = [ 'a', 'b', 'c', 'd' ];\nvar filtered = strings.filter(function(s)\
    \ {\n  return s === 'a' || s === 'c';\n});\n</code>\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n\
    <|/ a tags=javascript,functional-programming |>\n<| a tags=javascript,functional-programming\
    \ |>\nA more modern approach to this, using the new Array.prototype.reduce() method\
    \ and Array.includes() method:\n\n<code>\nvar strings = ['a', 'b', 'c'];\n", "\t\
    var newStrings = [];\n\tfor (var i = 0; i < strings.length; i++){\n\t\tif (strings[i].includes(substring)){\n\
    \t\t\tnewStrings.push(strings[i]);\n\t\t}\n\t}\n\treturn newStrings;\n}\n\n",
  "    return strings.filter(function(string){\n        return string.indexOf(substring)\
    \ >= 0;\n    });\n}\n", "    var results = [];\n    strings.forEach(function(string){\n\
    \        if (string.includes(substring)){\n            results.push(string)\n\
    \        }\n    })\n    return results;\n}\n\n", "    var filtered = [];\n   \
    \ \n    for (var i=0; i < strings.length; i++){\n        var str = strings[i];\n\
    \        \n        if (str.indexOf(substring) !== -1){\n            filtered.push(str);\n\
    \        }\n    }\n    \n    return filtered;\n}\n", "\tfor(var i in strings){\n\
    \t\tif(strings[i].indexOf(substring) === 0){\n\t\t\tstrings[i] = strings[i].substring(substring.length);\n\
    \t\t}\n\t}\n\treturn strings;\n}\n", "  return strings.filter(function (string)\
    \ {\n    return string.indexOf(substring) != -1\n  });\n}\n", "    var i, j, result,\
    \ array;\n    array = [];\n    for(i = 0; i < strings.length; i++){\n        for(j\
    \ = 0; j < strings[i].length; j++){\n            if(strings[i].indexOf(substring,\
    \ j) !== -1){\n                array.push(strings[i]);\n            }\n      \
    \  }\n    }\n    return result;\n}\n", "\tvar out = [];\n\tfor (var i=0; i<strings.length;\
    \ i++){\n\t\tvar str = strings[i];\n\t\tvar index = str.indexOf(substring);\n\t\
    \tif (index > -1){\n\t\t\tout.push(str);\n\t\t}\n\t}\n\treturn out;\n}\n", " \
    \   return strings.filter(function(elem){\n        return elem.indexOf(substring)\
    \ != -1;\n    });\n}\n", "\treturn strings.filter(function(value){\n\t\treturn\
    \ value.indexOf(substring) !== -1;\n\t});\n}\n", "  var new_array = [];\n  for(var\
    \ i =0; i< strings.length; i++){\n    if(strings.indexOf(strings[i]) >= 0){\n\
    \      new_array.push(strings[i]);\n    }\n  }\n  return new_array;\n}\n", "\t\
    return strings.filter(function(string){\n\t\treturn string.indexOf(substring)\
    \ !== -1;\n\t});\n}\n", "    var filtered = [];\n\n    for (var i = 0; i < strings.length;\
    \ i++){\n        if (strings[i].indexOf(substring) > -1){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n\n    return filtered;\n}\n", "\tvar filtered = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tvar string = strings[i];\n\t\tif(string.indexOf(substring)\
    \ !== -1)\n\t\t\tfiltered.push(string);\n\t}\n\treturn filtered;\n}\n", "    var\
    \ filtered_strings = []\n    strings.forEach(function(string){\n        if (string.indexOf(substring)\
    \ != -1) {\n            filtered_strings.push(string)\n        }\n    });\n  \
    \  return filtered_strings\n}\n", "    var filtered = [], i;\n\n    for(i = 0;\
    \ i < strings.length; i++){\n        if(strings.indexOf(substring) > -1){\n  \
    \          filtered.push(strings[i]);\n        }\n    }\n\n    return filtered;\n\
    }\n", "    return strings.filter(function(x){\n        return substring in x;\n\
    \    });\n}\n\n", "  var filtered = [];\n  for(var i = 0; i < strings.length;\
    \ i++){\n    if(strings[i].indexOf(substring) >= 0){\n      filtered.push(strings[i]);\n\
    \    }\n  }\n  return filtered;\n}\n", "    return strings.filter(function(string){\n\
    \        return string.includes(substring)\n    })\n}\n", "    return objects.filter(\n\
    \        function(el){\n            return el.search(substring) !== -1;\n    \
    \    }\n    )\n}\n", "\treturn strings.filter(function(string){\n\t\treturn string.includes(substring);\n\
    \t});\n}\n", "    var output = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(substring) > -1){\n            output.push(strings[i]);\n\
    \        }\n    }\n    return output;\n}\n", "    var filtered_array = []\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ >= 0){\n            filtered_array.push(strings[i])\n        }\n    }\n    return\
    \ filtered_array\n}", "    return strings.filter(function(string){\n        return\
    \ string.indexOf(substring) !== -1;\n    });\n}\n", "  return _.filter(strings,\
    \ function(string){\n    return string.indexOf(substring) > -1;\n  });\n}\n",
  "\tlet filtered_strings = [];\n\tfor(let string of strings){\n\t\tif(string.includes(substring)){\n\
    \t\t\tfiltered_strings.push(string);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n", "  return strings.filter(function(string){\n    return string.indexOf(substring)\
    \ != -1;\n  });\n}\n", "    return strings.filter(function(str){\n        return\
    \ str.indexOf(substring) >= 0;\n    });\n}\n", "\tfor(var i=0;i<strings.length;i++)\n\
    \t\tif(strings[i].includes(substring))\n\t\t\treturn [strings[i]]\n\treturn [];\n\
    }\n", "  return strings.filter(function(str){\n    return str.includes(substring)\n\
    \  })\n}\n", "    var filtered_strings = [];\n    strings.forEach(function(string)\
    \ {\n        if (string.indexOf(substring) !== -1) {\n            filtered_strings.push(string);\n\
    \        }\n    });\n    return filtered_strings;\n}\n", "\treturn objects.filter(function\
    \ (str) {\n\t\treturn str.indexOf(substring) > -1;\n\t});\n}\n", "\treturn filters.reduce(function(acc,\
    \ val){\n\t\tif(val.indexOf(substring) > -1){\n\t\t\tacc.push(val);\n\t\t}\n\t\
    \treturn acc;\n\t}, []);\n}\n", "\treturn strings.filter(function(e){\n\t\treturn\
    \ e.indexOf(substring) > -1;\n\t});\n}\n", "    console.log(\"strings: \" + strings);\n\
    \    console.log(\"substring: \" + substring);\n    \n    return strings.filter(function(str){\n\
    \        console.log(\"str: \" + str);\n        console.log(\"str.includes(substring):\
    \ \" + str.includes(substring));\n        \n        return str.includes(substring);\n\
    \    });\n}\n", "  const substring_index = strings.indexOf(substring);\n  return\
    \ substring_index >= 0 ? strings.slice(substring_index + substring.length) : [];\n\
    }\n", "    var return_strings = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(substring) >= 0){\n            return_strings.push(strings[i]);\n\
    \        }\n    }\n    return return_strings;\n}\n", "  var filtered_strings =\
    \ [];\n  for(var i=0; i<strings.length; i++){\n    if(strings[i].indexOf(substring)\
    \ !== -1){\n      filtered_strings.push( strings[i] );\n    }\n  }\n  return filtered_strings;\n\
    }\n", "    console.log(\"in filter_by_substring\");\n    console.log(strings);\n\
    \    console.log(substring);\n    return strings.filter(function(str){\n     \
    \   return str.indexOf(substring) !== -1;\n    });\n}", "    var newStrings =\
    \ [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            newStrings.push(strings[i]);\n        }\n    }\n    return\
    \ newStrings;\n}\n", "\tvar arr = [];\n\tfor(var i = 0; i<strings.length;i++){\n\
    \t\tif(strings[i].indexOf(substring) > -1){\n\t\t\tarr.push(strings[i]);\n\t\t\
    }\n\t}\n\treturn arr;\n}\n", "\treturn strings.filter( function (s){\n\t\treturn\
    \ s.indexOf(substring) != -1\n\t})\n}\n", "    return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n", "\treturn strings.filter(function(string){\n\t\treturn string.includes(substring);\n\
    \t});\n}\n", "  var matches = [];\n  strings.forEach(function(string){\n    if\
    \ (string.indexOf(substring) !== -1){\n      matches.push(string);\n    }\n  });\n\
    \  return matches;\n}\n", "    for(var i = 0; i < strings.length; i++){\n    \
    \    if (strings[i].indexOf(substring) !== -1){\n            strings[i] = strings[i].substr(substring.length);\n\
    \        }\n    }\n    return strings;\n}\n\n", "\tvar filtered = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) !== -1){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n", "\tvar\
    \ filtered_strings = [];\n\tfor (var i = 0; i < strings.length; i++){\n\t\tif\
    \ (strings[i].indexOf(substring) !== -1){\n\t\t\tfiltered_strings.unshift(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered_strings;\n}\n", "    return strings.filter(function(string){\n\
    \        return string.includes(substring);\n    });\n}\n", "  return strings.filter(function(string){\n\
    \    return string.includes(substring);\n  });\n}\n", "    var new_strings = []\n\
    \    for (var i=0; i<strings.length; i++){\n        var substring_found = false\n\
    \        for (var j=0; j<substring.length; j++){\n            if (strings[i].includes(substring[j])){\n\
    \                substring_found = true\n                break\n            }\n\
    \        }\n        if (!substring_found){\n            new_strings.push(strings[i])\n\
    \        }\n    }\n    return new_strings\n}\n<|/ file ext=.js source=github |>",
  "\treturn strings.filter(function(item){\n\t\treturn item.indexOf(substring) !=\
    \ -1\n\t})\n}\n", "  var result = new Array();\n  for (var i=0; i<strings.length;\
    \ i++){\n    if (strings[i].indexOf(substring) !== -1)\n      result.push(strings[i]);\n\
    \  }\n  return result;\n}\n", "    return strings.filter(function(string){\n \
    \       return string.indexOf(substring) !== -1\n    })\n}\n", "\t\n\tvar new_array\
    \ = [];\n\t\n\tfor(var i=0; i < strings.length; i++){\n\t\t\n\t\tif(strings[i].indexOf(substring)\
    \ !== -1){\n\t\t\tnew_array.push(strings[i]);\n\t\t}\n\t\t\n\t}\n\t\n\treturn\
    \ new_array;\n\t\n}\n", "\tlet result = [];\n\tfor(let string of strings){\n\t\
    \tif(string.includes(substring)){\n\t\t\tresult.push(string);\n\t\t}\n\t}\n\t\
    return result;\n}\n", "\tvar newStrings = [];\n\tstrings.forEach(function(string){\n\
    \t\tif(string.indexOf(substring) > -1){\n\t\t\tnewStrings.push(string);\n\t\t\
    }\n\t});\n\treturn newStrings;\n}", "    return strings.filter(function(string){\n\
    \        return string.includes(substring);\n    });\n}\n", "    var result =\
    \ [];\n    strings.forEach(function(elem){\n        var contains = substring.indexOf(elem);\n\
    \        if(contains !== -1){\n            result.push(elem);\n        }\n   \
    \ });\n    return result;\n}\n", "    strings = strings.filter(function(string){\n\
    \        return string.includes(substring);\n    });\n    return strings;\n}\n",
  "  var filtered_strings = [];\n  var words = strings.split(/\\s+/);\n  for(var i\
    \ = 0, n = words.length; i < n; i++){\n    var word = words[i];\n    if(word.indexOf(substring)\
    \ > -1){\n      filtered_strings.push(word);\n    }\n  }\n  return filtered_strings;\n\
    }\n", "  return strings.filter(function(string){\n    return string.includes(substring);\n\
    \  });\n}\n", "    var result = [];\n    for(var i in strings){\n        var val\
    \ = strings[i];\n        if(val.indexOf(substring) !== -1){\n            result.push(val);\n\
    \        }\n    }\n    return result;\n}\n\n", "    \n    var filtered_strings\
    \ = [];\n\n    strings.forEach(function(string){\n        \n        if(string.includes(substring)){\n\
    \            filtered_strings.push(string)\n        }\n        \n    })\n\n  \
    \  return filtered_strings;\n}\n", "  var filtered_strings = [];\n  for(var i=0;\
    \ i < strings.length; i++){\n    if(strings[i].indexOf(substring) !== -1){\n \
    \     filtered_strings.unshift(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n", "  return strings.filter(function(string){\n    return string.includes(substring);\n\
    \  });\n}\n", "    var output = [];\n    for(var index = 0; index < strings.length;\
    \ index++){\n        if(strings[index].indexOf(substring) != -1){\n          \
    \  output.push(strings[index]);\n        }\n    }\n    return output;\n}\n", " \
    \ return strings.filter(function(string){\n    return string.includes(substring);\n\
    \  })\n}\n", "    var filtered_strings = []\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].includes(substring)){\n            filtered_strings.push(strings[i])\n\
    \        }\n    }\n    return filtered_strings\n}\n", "\tvar filtered = [];\n\t\
    for (var i = 0; i < strings.length; i++){\n\t\tif (strings[i].includes(substring)){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\n", "  \
    \  var filtered = [];\n    for(var i=0;i<strings.length;i++){\n        if(strings[i].indexOf(substring)>=0){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "    var result = new Array();\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(substring) !== -1){\n            result.push(strings[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) > -1;\n    });\n}\n", "  if(strings.length\
    \ == 0){\n    return [];\n  }\n  return strings.filter(function (string){\n  \
    \  return string.includes(substring);\n  });\n}\n", "    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        var value = strings[i];\n\
    \        if(value.indexOf(substring) != -1){\n            filtered.push(value);\n\
    \        }\n    }\n    return filtered;\n}", "    return strings.filter(function(x){\
    \ return x.includes(substring)});\n}\n", "    var filtered_strings = []\n    for\
    \ (var i = 0; i < strings.length; i++) {\n        if(strings[i].indexOf(substring)\
    \ !== -1) {\n            filtered_strings.push(strings[i])\n        }\n    }\n\
    \    return filtered_strings\n}\n", "\treturn _.filter(strings, function(string){\n\
    \t\treturn string.toLowerCase().indexOf(substring.toLowerCase()) !== -1;\n\t});\n\
    }\n", "\treturn strings.filter(function(item){\n\t\treturn item.indexOf(substring)\
    \ !== -1;\n\t});\n}\n", "    var result = new Array(strings.length);\n    for(var\
    \ i=0; i<strings.length; i++){\n        var str = strings[i];\n        var index\
    \ = str.indexOf(substring);\n        if (index > -1) result[i] = str;\n    }\n\
    \    return result;\n}\n", "  var filtered = [];\n\n  strings.forEach(function(s){\n\
    \    var has_substring = (s.indexOf(substring) >= 0);\n\n    if(has_substring){\n\
    \      filtered.push(s);\n    }\n  });\n\n  return filtered;\n}\n", "\tvar filtered_strings\
    \ = [];\n\n\tfor (var i=0; i<strings.length; i++){\n\t\tif (strings[i].indexOf(substring)\
    \ > -1){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\n\treturn filtered_strings;\n\
    }\n", "    const filtered = [];\n    for(let i=0; i < strings.length; i++){\n\
    \        const value = strings[i];\n        const substringMatch = value.indexOf(substring);\n\
    \        if(substringMatch !== -1){\n            filtered.push(value);\n     \
    \   }\n    }\n    return filtered;\n}\n", "\treturn strings.filter(function(string){\n\
    \t\treturn string.indexOf(substring) !== -1\n\t})\n}\n", "    strings = strings.filter(function(string){\n\
    \        return string.indexOf(substring) !== -1;\n    });\n    return strings;\n\
    }\n", "    return objects.filter(function (el) {\n        return el.includes(substring);\n\
    \    });\n}\n", "\tlet filtered = [];\n\tfor(let i=0; i < strings.length; i++){\n\
    \t\tif((strings[i].indexOf(substring) > -1)) filtered.push(strings[i]);\n\t}\n\
    \treturn filtered;\n}", "    if (strings.length == 0)\n        return [];\n\n\
    \    var filtered_strings = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if (strings[i].indexOf(substring) != -1)\n            filtered_strings.push(\
    \ strings[i] );\n    }\n    return filtered_strings;\n}\n", "    var matches =\
    \ [];\n    strings.forEach(function(item){\n        if(item.indexOf(substring)\
    \ > -1){\n            matches.push(item);\n        }\n    });\n    return matches;\n\
    }\n", "\tvar filtered_array = [];\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tif(strings[i].indexOf(substring) > -1){\n\t\t\tfiltered_array.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered_array;\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) > -1;\n    });\n}\n", "  var filtered_strings\
    \ = [];\n  strings.forEach(function(string){\n    if(string.includes(substring)){\n\
    \      filtered_strings.push(string);\n    }\n  });\n  return filtered_strings;\n\
    }\n", "  return strings.filter(function(string){\n    return string.indexOf(substring)\
    \ >= 0;\n  });\n}\n", "\tconst filtered_strings = strings.filter((x)=>{\n\t\t\
    return x.includes(substring);\n\t});\n\treturn filtered_strings;\n}\n", "\tlet\
    \ newstrings = [];\n\tfor(let string of strings){\n\t\tif (string.includes(substring)){\n\
    \t\t\tnewstrings.push(string);\n\t\t}\n\t}\n\treturn newstrings;\n}", "    return\
    \ strings.filter(function(el){\n        return el.includes(substring)\n    })\n\
    }\n", "    let arr = []\n    for(let i=0; i<strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            arr.push(strings[i])\n        }\n    }\n    return arr\n}\n\n", " \
    \   return strings.filter(string => string.includes(substring))\n}\n", "    var\
    \ new_strings = []\n    strings.forEach(function(string){\n        if(string.indexOf(substring)\
    \ !== -1){\n            new_strings.push(string)\n        }\n    })\n    return\
    \ new_strings\n}\n", "    var found = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(substring.indexOf(strings[i]) != -1){\n            found.push(strings[i]);\n\
    \        }\n    }\n    return found;\n}\n", "    var filtered_strings = [];\n\
    \    for (var i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(substring)\
    \ != -1){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n", "  return strings.filter(function(value){\n\
    \    return value.indexOf(substring) > -1;\n  });\n}\n", "  return strings.filter(function(string){\n\
    \    return string.includes(substring);\n  });\n}\n", "    for(var i=0; i<strings.length;\
    \ i++){\n        if(strings[i].indexOf(substring) > -1){\n            strings[i].splice(strings[i].indexOf(substring),1);\n\
    \        }\n    }\n    return strings;\n}\n", "\tvar filtered_strings = []\n\t\
    for(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ != -1){\n\t\t\tfiltered_strings.push(strings[i])\n\t\t}\n\t}\n\treturn filtered_strings\n\
    }\n", "    return strings.filter(function(string){\n        return (string.indexOf(substring)\
    \ > -1);\n    });\n}\n", "  var filtered_array = [];\n  for (var i = 0; i < strings.length;\
    \ i++){\n    if (strings[i].indexOf(substring) > -1){\n      filtered_array.push(strings[i]);\n\
    \    }\n  }\n  return filtered_array;\n}\n", "\tvar new_arr = [];\n\tstrings.forEach(function(string_arr){\n\
    \t\tstring_arr.forEach(function(string){\n\t\t\tif(string.includes(substring)){\n\
    \t\t\t\tnew_arr.push(string_arr);\n\t\t\t}\n\t\t});\n\t});\n\treturn new_arr;\n\
    }\n\n", "    return strings.filter(function(item){\n        return item.indexOf(substring)\
    \ !== -1;\n    });\n}\n", "\treturn strings.filter(function(string){\n\t\treturn\
    \ string.indexOf(substring) >= 0;\n\t});\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(substring) >= 0;\n  });\n}\n", "  for(let i = 0; i\
    \ < strings.length; i++){\n    if(strings[i].includes(substring)){\n      strings.splice(i,\
    \ 1);\n    }\n  }\n  return strings;\n}\n", "  var filtered_strings = []\n  for(var\
    \ i=0; i<strings.length; i++){\n    if(strings[i].includes(substring)){\n    \
    \  filtered_strings.push(strings[i])\n    }\n  }\n  return filtered_strings\n\
    }\n", "\treturn strings.filter(function(string){\n\t\treturn string.includes(substring);\n\
    \t});\n}\n", "  const filtered_strings = []\n  for(const string of strings){\n\
    \    if(string.includes(substring)){\n      filtered_strings.push(string)\n  \
    \  }\n  }\n  return filtered_strings\n}\n", "  return strings.filter(function(el){\n\
    \    return el.toLowerCase().indexOf(substring.toLowerCase()) !== -1\n  });\n\
    }\n", "  return strings.filter(function(string){\n    return string.includes(substring);\n\
    \  });\n}\n", "    for(let i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            return strings.slice(i);\n        }\n    }\n    return strings;\n\
    }\n</code>\nThe function above will return all the elements from an array of strings\
    \ that includes the given substring.\n<code>"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
