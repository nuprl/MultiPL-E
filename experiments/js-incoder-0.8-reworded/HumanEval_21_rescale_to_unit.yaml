name: HumanEval_21_rescale_to_unit
language: js
prompt: "//Given array of numbers (of at least two elements), apply a linear transform\
  \ to that array,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n \
  \ assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
  \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
  \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["    if(numbers.length < 2)\n        return numbers;\n\n    var max_number\
    \ = numbers[0];\n    var min_number = numbers[0];\n\n    var sum = numbers.reduce(function(a,b){\n\
    \        return a+b;\n    });\n\n    for (var i = 1, len = numbers.length; i <\
    \ len; i++){\n        var n = numbers[i];\n\n        if(n > max_number)\n    \
    \        max_number = n;\n        if(n < min_number)\n            min_number =\
    \ n;\n    }\n\n    var scale = max_number / (max_number - min_number);\n    var\
    \ offset = (min_number - min_number * scale) / 2;\n\n    numbers.forEach(function(n){\n\
    \        if(n > 0)\n            n += offset;\n        else\n            n -= offset;\n\
    \    });\n\n    return numbers;\n}\n\n", "    var scale = [];\n    for (var i\
    \ = 0; i < numbers.length; i++){\n        if (numbers[i] > 0){\n            scale.push(1);\n\
    \        } else {\n            scale.push(numbers[i]);\n        }\n    }\n   \
    \ return scale;\n}\n", "    var min_num = Math.min.apply(null, numbers);\n   \
    \ var max_num = Math.max.apply(null, numbers);\n    var delta = max_num - min_num;\n\
    \    var result_array = [];\n\n    for (var i=0; i < numbers.length; i++){\n \
    \       result_array[i] = (numbers[i] - min_num) / delta;\n    }\n\n    return\
    \ result_array;\n}\n", "    var minimum = math.min(numbers);\n    var maximum\
    \ = math.max(numbers);\n    var target_range = maximum-minimum;\n    var ratio\
    \ = target_range/minimum;\n    numbers = numbers.map(function(x){ return (x-minimum)*ratio\
    \ });\n    return numbers;\n}\n", "    var min = _.min(numbers);\n    var max\
    \ = _.max(numbers);\n    var diff = max - min;\n    if(diff>0){\n        var new_min\
    \ = numbers[0] - diff * min;\n        var new_max = numbers[0] + diff * max;\n\
    \        return _.map(numbers, function(number){\n            return (number-new_min)\
    \ / (new_max - new_min);\n        });\n    } else {\n        return _.map(numbers,\
    \ function(number){\n            return number/max;\n        });\n    }\n}\n",
  "\tvar max = 0;\n\tvar min = 100000;\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tif(numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t\tif(numbers[i] < min)\n\t\
    \t\tmin = numbers[i];\n\t}\n\tif(max - min > 100000){\n\t\tconsole.warn(\"All\
    \ numbers are the same, min and max are very similar, rescaling can cause a loss\
    \ of precision, please check numbers' values manually!\");\n\t}\n\tvar min2 =\
    \ -min;\n\tvar max2 = max;\n\tvar numbers2 = 0;\n\tvar diff = (max2 - min2)/100;\n\
    \tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] > max2){\n\t\t\t\
    numbers2 = numbers2 + diff;\n\t\t\tnumbers[i] = max2;\n\t\t}\n\t\tif(numbers[i]\
    \ < min2){\n\t\t\tnumbers2 = numbers2 - diff;\n\t\t\tnumbers[i] = min2;\n\t\t\
    }\n\t}\n\treturn numbers;\n}", "  var min_index = 0;\n  var max_index = 0;\n \
    \ \n  if(numbers.length == 1){\n    return numbers[0];\n  }\n  \n  for(var index\
    \ = 0; index < numbers.length - 1; index++){\n    if(numbers[index] > numbers[index\
    \ + 1]){\n      max_index = index;\n    }\n  }\n  \n  for(var index = 0; index\
    \ < numbers.length - 1; index++){\n    if(numbers[index] < numbers[index + 1]){\n\
    \      min_index = index;\n    }\n  }\n  \n  if(max_index - min_index == 1){\n\
    \    return numbers[0];\n  }\n  \n  var range = numbers[max_index] - numbers[min_index];\n\
    \  \n  var delta_min_index = numbers[min_index] - numbers[0];\n  if(delta_min_index\
    \ > 0){\n    delta_min_index = delta_min_index - 1;\n  }\n  \n  var delta_max_index\
    \ = numbers[max_index] - numbers[max_index - 1];\n  if(delta_max_index > 0){\n\
    \    delta_max_index = delta_max_index - 1;\n  }\n  \n  var new_array = [];\n\
    \  \n  for(var index = 0; index < numbers.length; index++){\n    new_array.push(numbers[index]\
    \ - delta_min_index / range * numbers[max_index - 1]);\n  }\n  \n  return new_array;\n\
    }\n\n", "    var min_number = Math.min.apply(null, numbers);\n    var max_number\
    \ = Math.max.apply(null, numbers);\n    var range = max_number - min_number;\n\
    \    if(range === 0) return min_number;\n    var result = [];\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        result.push(numbers[i] - min_number);\n\
    \    }\n    return result.map(function(x){ return x / range; });\n}\n</code>\n\
    Now that you have a range of numbers in [0,1], you can scale your data:\n<code>",
  "\tlet scale = (numbers[0] + numbers[1]) / 2;\n\tlet i;\n\tlet newNumbers = [];\n\
    \t\n\tfor(i = 0; i < numbers.length; i++){\n\t\tnewNumbers.push(scale * numbers[i]);\n\
    \t}\n\t\n\treturn newNumbers;\n}\n", "    var max = Math.max.apply(null, numbers);\n\
    \    var min = Math.min.apply(null, numbers);\n    var range = (max - min)/2.0;\
    \ //Rescale values to 0,1\n    var results = [];\n    \n    for(var i = 0, len\
    \ = numbers.length; i < len; i++){\n        results.push(numbers[i]*range + min);\n\
    \    }\n    \n    return results;\n}", "\tvar min, max;\n\tif(numbers.length ==\
    \ 0)\n\t\treturn [];\n\tmin = numbers[0];\n\tmax = numbers[0];\n\tfor(var i =\
    \ 1; i < numbers.length; i++){\n\t\tif(numbers[i] < min){\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\tvar scale\
    \ = 1 / (max - min);\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tnumbers[i]\
    \ *= scale;\n\t}\n\treturn numbers;\n}\n", "  var min = Math.min(numbers[0], numbers[1]);\n\
    \  var max = Math.max(numbers[0], numbers[1]);\n  var scale = (max - min) / (Math.pow(10,\
    \ Math.floor(Math.log10(max))));\n  return numbers.map(function(num){\n    return\
    \ num * scale;\n  });\n}\nexports.rescale_to_unit = rescale_to_unit;\n\n", " \
    \   numbers.sort(function(a, b){return a - b;});\n\n    var n = numbers.length;\n\
    \    if(n < 2) return numbers;\n    var first_number = numbers[0];\n    var last_number\
    \ = numbers[n-1];\n\n    var range = last_number - first_number;\n    numbers[0]\
    \ = (first_number/range);\n    numbers[n-1] = (last_number/range);\n\n    return\
    \ numbers;\n}\n", "    var max_value = 0;\n    var min_value = 1;\n    numbers.map(function(n){\n\
    \        if(n > max_value){\n            max_value = n\n        }\n        if(n\
    \ < min_value){\n            min_value = n\n        }\n    })\n    \n    for(var\
    \ i = 0; i < numbers.length; i++){\n        numbers[i] -= min_value;\n       \
    \ numbers[i] *= (max_value - min_value)\n    }\n    return numbers\n}", "    if\
    \ (numbers.length === 0) return [];\n    if (numbers.length === 1) return numbers;\n\
    \    var result = new Array(numbers.length);\n    var min = new Number(numbers[0]);\n\
    \    var max = new Number(numbers[0]);\n    for (var i = 0; i < numbers.length;\
    \ ++i){\n        var n = numbers[i];\n        if (n < min) min = n;\n        if\
    \ (n > max) max = n;\n    }\n    for (var i = 1; i < numbers.length; ++i){\n \
    \       var n = numbers[i];\n        if (n > max - min || n < min) continue;\n\
    \        var d = max - min;\n        var c = (n - min) / d;\n        result[i\
    \ - 1] = c >= 0 ? Math.floor(c) : Math.ceil(c);\n    }\n    return result;\n}\n",
  "  var max = Math.max.apply(null, numbers);\n  var min = Math.min.apply(null, numbers);\n\
    \  var range = (max - min) / 2;\n  return numbers.map(function(value){\n    return\
    \ (value - min) / range;\n  });\n}\n", "    var smallest, largest;\n    numbers.forEach(function(n){\n\
    \        smallest = !smallest ? n : smallest;\n        largest = !largest ? n\
    \ : largest;\n    });\n    return [smallest, largest];\n}", "\tvar scale = Math.min(numbers[1]\
    \ / numbers[0], numbers[2] / numbers[0], 1);\n\treturn numbers.map(function(d){\
    \ return (d - numbers[0]) / scale })\n}\n", "  var max_value = Math.max.apply(null,\
    \ numbers);\n  var min_value = Math.min.apply(null, numbers);\n  var range = (max_value\
    \ - min_value)/2;\n  return numbers.map(function(n){\n    return (n-min_value)*range;\n\
    \  });\n}\n\nexports.rescale_to_unit = rescale_to_unit;\n},{}],6:[function(require,module,exports){\n\
    var ramp = require('./ramp');\nvar extend = require('../tools/extend');\nvar isArray\
    \ = require('../tools/is_array');\nvar extendShallow = require('../tools/extend_shallow');\n\
    \nvar ramp$1 = extend(ramp, {\n  zero: function(){\n    return ramp({\n      values:\
    \ [],\n      min: 0,\n      max: 1\n    });\n  },\n\n  one: function(x){\n   \
    \ return ramp({\n      values: [x],\n      min: x,\n      max: 1\n    });\n  },\n\
    \n  two: function(x){\n    return ramp({\n      values: [x, x],\n      min: x,\n\
    \      max: 2\n    });\n  },\n\n  three: function(x){\n    return ramp({\n   \
    \   values: [x, x, x],\n      min: x,\n      max: 3\n    });\n  },\n\n  four:\
    \ function(x){\n    return ramp({\n      values: [x, x, x, x],\n      min: x,\n\
    \      max: 4\n    });\n  },\n\n  five: function(x){\n    return ramp({\n    \
    \  values: [x, x, x, x, x],\n      min: x,\n      max: 5\n    });\n  },\n\n  six:\
    \ function(x){\n    return ramp({\n      values: [x, x, x, x, x, x],\n      min:\
    \ x,\n      max: 6\n    });\n  },\n\n  seven: function(x){\n    return ramp({\n\
    \      values: [x, x, x, x, x, x, x],\n      min: x,\n      max: 7\n    });\n\
    \  },\n\n  eight: function(x){\n    return ramp({\n      values: [x, x, x, x,\
    \ x, x, x, x],\n      min: x,\n      max: 8\n    });\n  },\n\n  nine: function(x){\n\
    \    return ramp({\n      values: [x, x, x, x, x, x, x, x, x],\n      min: x,\n\
    \      max: 9\n    });\n  },\n\n  ten: function(x){\n    return ramp({\n     \
    \ values: [x, x, x, x, x, x, x, x, x, x],\n      min: x,\n      max: 10\n    });\n\
    \  },\n\n  eleven: function(x){\n    return ramp({\n      values: [", "\tif(numbers.length\
    \ === 0){\n\t\treturn numbers;\n\t}\n\n\tvar smallest = Math.min(numbers[0], numbers[numbers.length\
    \ - 1]);\n\tvar largest = Math.max(numbers[0], numbers[numbers.length - 1]);\n\
    \n\treturn [smallest, largest];\n}\n", "  var min = 0\n  var max = numbers[0]\n\
    \  for(var i in numbers){\n    if(numbers[i] > max){\n      max = numbers[i]\n\
    \    }\n    if(numbers[i] < min){\n      min = numbers[i]\n    }\n  }\n\n  var\
    \ scale = (max - min)/2.0\n  return numbers.map(function(x){ return x/scale });\n\
    }\n", "\tvar min_value = numbers[0],\n\t    max_value = numbers[1];\n\tfor(var\
    \ i = 2; i < numbers.length; i++){\n\t\tvar new_value = numbers[i] / numbers[i\
    \ - 1];\n\t\tif(new_value < min_value) min_value = new_value;\n\t\telse if(new_value\
    \ > max_value) max_value = new_value;\n\t}\n\treturn [min_value, max_value];\n\
    }", "\tlet max_value = Math.max.apply(null, numbers);\n\tlet min_value = Math.min.apply(null,\
    \ numbers);\n\tlet range = (max_value - min_value)/2;\n\treturn numbers.map(num\
    \ => (num - min_value) * range + min_value);\n}\n", "  var n = numbers.length;\n\
    \  var min_val = Math.min.apply(null, numbers);\n  var max_val = Math.max.apply(null,\
    \ numbers);\n  var min_val_rescaled = (min_val - 0.5) * max_val;\n  var max_val_rescaled\
    \ = (max_val - 0.5) * min_val;\n\n  if(n <= 1){\n    return numbers;\n  }\n\n\
    \  if(n == 2){\n    return [max_val, min_val];\n  }\n\n  var scaled_numbers =\
    \ [];\n  for(var i=0;i<n;i++){\n    scaled_numbers.push(((numbers[i] - min_val)\
    \ / max_val) * max_val_rescaled + 0.5);\n  }\n  return scaled_numbers;\n}\n",
  "\tconst min = Math.min(...numbers);\n\tconst max = Math.max(...numbers);\n\tconst\
    \ range = max - min;\n\tconst new_numbers = [];\n\tfor(let i = 0; i < numbers.length;\
    \ i++){\n\t\tnew_numbers.push(min + (numbers[i] - min) / range * 0.5);\n\t}\n\t\
    return new_numbers;\n}\n", "    var max = numbers[0], min = numbers[0];\n    for\
    \ (var i = 1; i < numbers.length; ++i){\n        var n = numbers[i];\n       \
    \ if (n < min) min = n;\n        if (n > max) max = n;\n    }\n    if (min > max){\n\
    \        var m = max/min;\n        numbers.forEach(function(n){\n            n\
    \ = n*m;\n        });\n    }\n    return numbers;\n}\n", "  var min = min(numbers);\n\
    \  var max = max(numbers);\n  var diff = max - min;\n  var scale = (diff >= 0)\
    \ ? diff : -diff;\n  var newNumbers = [];\n  numbers.forEach(function(number,\
    \ i){\n    number = (number - min)/scale;\n    newNumbers.push(number);\n  });\n\
    \  return newNumbers;\n}\n\n", "    var min_num = Math.min.apply(Math, numbers);\n\
    \    var max_num = Math.max.apply(Math, numbers);\n    if (min_num === max_num){\n\
    \        return numbers;\n    }\n    var range_size = max_num - min_num;\n   \
    \ var interval_size = range_size / numbers.length;\n    var scaled_numbers = [];\n\
    \    for (var i = 0; i < numbers.length; i++){\n        scaled_numbers.push((numbers[i]\
    \ - min_num) * interval_size + min_num);\n    }\n    return scaled_numbers;\n\
    }\n\n", "    numbers = numbers.map(Number);\n    var smallest = numbers.shift();\n\
    \    var largest = numbers.pop();\n    var scaled = numbers.map(function(n){\n\
    \        var scaled = (n - smallest) / (largest - smallest);\n        return scaled;\n\
    \    });\n    return scaled;\n}\nexports.rescale_to_unit = rescale_to_unit;\n",
  "\tnumbers = numbers.map(function(value){\n\t\tvar range_size = 1 - Math.abs(value);\n\
    \t\tvar scale = Math.floor(range_size / 2);\n\t\treturn scale * value + scale\
    \ * (1-value);\n\t});\n\treturn numbers.map(function(value){\n\t\treturn value/range_size;\n\
    \t});\n}\n", "    var min = 0;\n    var max = numbers[0];\n    var factor = 1;\n\
    \    for(var i = 0; i < numbers.length; i++){\n        min = Math.min(min, numbers[i]);\n\
    \        max = Math.max(max, numbers[i]);\n        factor *= (max - min);\n  \
    \  }\n    for(i = 0; i < numbers.length; i++){\n        numbers[i] -= min;\n \
    \       numbers[i] *= factor;\n    }\n    return numbers;\n}\n", "\tvar min =\
    \ Math.min(numbers);\n\tvar max = Math.max(numbers);\n\tvar diff = (max - min)\
    \ / (max - 0);\n\tvar i;\n\tvar num_unit = (numbers.length - 1) / numbers.length;\n\
    \tvar units = [];\n\tfor(i = 0; i < num_unit; i++){\n\t\tunits.push(diff);\n\t\
    }\n\tfor(i = num_unit; i >= 0; i--){\n\t\tunits.push(0);\n\t}\n\treturn units;\n\
    }\n", "  var max_ = Math.max.apply(null, numbers);\n  return numbers.map(function(n){\n\
    \    return Math.max(0, Math.min(max_, n)); \n  });\n}\n", "    var smallest_number,\
    \ biggest_number;\n    if(numbers.length == 1){\n        return [numbers[0]];\n\
    \    }\n    for(var i=0; i<numbers.length; i++){\n        if(smallest_number ==\
    \ undefined && numbers[i] < numbers[(i+1)%numbers.length]){\n            smallest_number\
    \ = numbers[i];\n        }\n        if(biggest_number == undefined && numbers[i]\
    \ > numbers[(i+1)%numbers.length]){\n            biggest_number = numbers[i];\n\
    \        }\n    }\n    var ratio = biggest_number / smallest_number;\n    return\
    \ numbers.map(function(number){\n        return number * ratio;\n    });\n}\n",
  "    numbers.sort(function(a, b){\n        return a - b;\n    });\n\n    var max_num\
    \ = numbers[numbers.length - 1];\n\n    for (var i = 0; i < numbers.length; i++)\n\
    \        numbers[i] /= max_num;\n\n    return numbers;\n}\n", "    var minimum\
    \ = Math.min.apply(null, numbers);\n    var maximum = Math.max.apply(null, numbers);\n\
    \    var scale = (maximum - minimum) / (maximum - minimum);\n    var result =\
    \ [];\n    for(var i = 0; i<numbers.length; i++){\n        result.push(numbers[i]\
    \ - minimum);\n        result[i] = result[i] / scale;\n    }\n    return result;\n\
    }\n", "\tvar max_ = numbers[0];\n\tvar min_ = numbers[0];\n\tfor(var i = 1; i\
    \ < numbers.length; i++){\n\t\tmax_ = Math.max(max_, numbers[i]);\n\t\tmin_ =\
    \ Math.min(min_, numbers[i]);\n\t}\n\treturn numbers.map(function(val){\n\t\t\
    return (val - min_) / (max_ - min_);\n\t});\n}\n", "    var scale = (numbers[numbers.length-1]\
    \ - numbers[0]) / (numbers[1] - numbers[0]);\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        numbers[i] -= scale;\n    }\n    return numbers;\n}\n\nexports.rescale_to_unit\
    \ = rescale_to_unit;\n},{}],134:[function(_dereq_,module,exports){\n'use strict';\n\
    \nmodule.exports = sortObjectProperties;\n", "    if(numbers.length < 2){\n  \
    \      throw \"Error: not enough numbers to scale\";\n    }\n    var first_number\
    \ = numbers[0];\n    var last_number = numbers[numbers.length - 1];\n    var total_number\
    \ = last_number - first_number;\n    var new_numbers = [];\n    var new_last_number\
    \ = 0.0;\n    var new_first_number = 1.0;\n    for(var i = 0; i < numbers.length;\
    \ ++i){\n        new_numbers.push(numbers[i] - new_first_number);\n        new_last_number\
    \ = new_numbers[new_numbers.length - 1];\n    }\n    new_numbers.push(new_last_number);\n\
    \    return new_numbers;\n}\n", "\tvar min_value = numbers[0];\n\tvar max_value\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < min_value) min_value = numbers[i];\n\t\telse if(numbers[i] > max_value) max_value\
    \ = numbers[i];\n\t}\n\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < 0){\n\t\t\tnumbers[i] = (max_value + min_value) / 2;\n\t\t}else{\n\t\t\tnumbers[i]\
    \ = (max_value - min_value) / 2;\n\t\t}\n\t}\n}\n", "    var largest = Math.max.apply(null,\
    \ numbers);\n    var smallest = Math.min.apply(null, numbers);\n    var factor\
    \ = (largest - smallest) / largest;\n    return numbers.map(function(number){\n\
    \        return number / factor;\n    });\n}\n", "\tvar len = numbers.length;\n\
    \tvar min = numbers[0];\n\tvar max = numbers[0];\n\tfor(var i=1; i<len; i++){\n\
    \t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t\
    }\n\tvar rescaled = [];\n\tfor(var i=0; i<len; i++){\n\t\trescaled.push(Math.round(numbers[i]/max*100)/100);\n\
    \t}\n\treturn rescaled;\n}\n", "\treturn numbers.map(function(x){\n\t\treturn(x\
    \ - Math.min(numbers)) / ( Math.abs(Math.max(numbers)) - Math.abs(Math.min(numbers))\
    \ );\n\t});\n}\n\n", "\tvar sum = 0;\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tsum += numbers[i];\n\t}\n\tfor(var j = 0; j < numbers.length; j++){\n\t\t\
    if(numbers[j] < 0){\n\t\t\tnumbers[j] = 0\n\t\t}else if(numbers[j] > 1){\n\t\t\
    \tnumbers[j] = 1\n\t\t}\n\t}\n\treturn numbers / sum;\n}", "\t\n\tif (numbers.length\
    \ < 2)\n\t\tthrow \"Invalid input array. Array must have at least two elements\"\
    \n\t\n\tvar range = numbers[numbers.length-1] - numbers[0]\n\t\n\t// If all numbers\
    \ are equal, than return numbers[0] instead of 0\n\t// This would mean that\n\t\
    // [0.0, 1.0] -> 0\n\t// [0.0, 1.1] -> 0\n\t// would result in 0\n\tif (range\
    \ == 0) return numbers[0]\n\t\n\tnumbers = numbers.map(function(num){\n\t\treturn\
    \ num / range\n\t})\n\t\n\treturn numbers\n}\n", "    if(numbers.length <= 1)\
    \ return numbers;\n    var min = numbers[0], max = numbers[0];\n    for(var i\
    \ = 1; i < numbers.length; i++){\n        var n = numbers[i];\n        if(n >=\
    \ min){\n            if(n < max){\n                min = n;\n            }else{\n\
    \                max = n;\n            }\n        }\n    }\n    \n    //The maximum\
    \ value is the lower bound\n    max = min;\n    \n    for(var i = 0; i < numbers.length;\
    \ i++){\n        var n = numbers[i];\n        var factor = max - min;\n      \
    \  numbers[i] = min + (n - min) * factor;\n    }\n    \n    return numbers;\n\
    }\n", "  if(numbers.length < 2){\n    return numbers;\n  }\n  else{\n    for(var\
    \ i=0; i<numbers.length; i++){\n      numbers[i] = Math.min(0.5, Math.max(numbers[i],\
    \ 0.0));\n    }\n    return numbers;\n  }\n}\n", "\tvar max = 0, min = 0;\n\t\
    numbers.forEach(function(num){\n\t\tmin = Math.min(min, num);\n\t\tmax = Math.max(max,\
    \ num);\n\t});\n\tnumbers.forEach(function(num){\n\t\tnum = (num - min) / (max\
    \ - min);\n\t});\n\treturn numbers;\n}\n", "\tvar new_numbers = [];\n\tnumbers.forEach(function(element){\n\
    \t\tvar new_element = element;\n\t\tif(element < 0){\n\t\t\tnew_element = 0;\n\
    \t\t}else if(element > 0){\n\t\t\tnew_element = 1;\n\t\t}\n\t\tnew_numbers.push(new_element);\n\
    \t});\n\treturn new_numbers;\n}\n", "    var min = Math.min.apply(null, numbers);\n\
    \    var max = Math.max.apply(null, numbers);\n    var range = max-min;\n    var\
    \ rescaled = [];\n    for (var i = 0; i < numbers.length; i++){\n        rescaled.push(min\
    \ + range * numbers[i]);\n    }\n    return rescaled;\n}\n", "    var largest\
    \ = Math.max.apply(null, numbers);\n    var smallest = Math.min.apply(null, numbers);\n\
    \    var delta = (largest-smallest);\n    \n    var result = new Array(numbers.length);\n\
    \n    for(var i=0; i<numbers.length; i++){\n        result[i] = numbers[i] - delta;\n\
    \    }\n    \n    return result;\n}", "    let min = Math.min(...numbers);\n \
    \   let max = Math.max(...numbers);\n    const delta = max - min;\n    let rescaled\
    \ = [];\n    for(let i = 0; i < numbers.length; i++){\n        const value = numbers[i];\n\
    \        rescaled.push((value - min) / delta);\n    }\n    return rescaled;\n\
    }\n", "\tvar rescaled = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    rescaled.push(Math.floor((numbers[i] - min(numbers)) / (max(numbers) - min(numbers))\
    \ * (100 - 0)) / 100);\n\t}\n\treturn rescaled;\n}\n", "\tvar new_numbers = new\
    \ Array(numbers.length);\n\tfor(var i = 0; i < numbers.length; ++i){\n\t\tnew_numbers[i]\
    \ = numbers[i] / (Math.min(numbers[i] + 1, 1));\n\t}\n\treturn new_numbers;\n\
    }\n", "  numbers = numbers.map(function(num){\n    return num < 0 ? 0 : num;\n\
    \  });\n\n  var smallest = numbers[0];\n  var largest = numbers[0];\n  for (var\
    \ i = 0; i < numbers.length; i++){\n    var n = numbers[i];\n    if (n < smallest)\
    \ smallest = n;\n    if (n > largest) largest = n;\n  }\n  smallest = Math.min(smallest,\
    \ 1);\n  largest = Math.max(largest, 1);\n\n  var range = (largest - smallest);\n\
    \  numbers = numbers.map(function(num){\n    return ((num - smallest) / range);\n\
    \  });\n\n  return numbers;\n}\n", "\tvar min = Math.min(numbers[0] , numbers[1]);\n\
    \tvar max = Math.max(numbers[0] , numbers[1]);\n\tvar range = (max - min)/2;\n\
    \tvar rescaled_numbers = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    rescaled_numbers[i] = (numbers[i] -min)/range;\n\t}\n\treturn rescaled_numbers;\n\
    }", "\tvar l = numbers.length,\n\t\tmax = numbers[0],\n\t\tmin = numbers[0];\n\
    \t\n\tfor(var i = 0; i < l; i++){\n\t\tmax = Math.max(max, numbers[i]);\n\t\t\
    min = Math.min(min, numbers[i]);\n\t}\n\t\n\treturn [min, max, (max-min)/l];\n\
    }\n\t", "\tvar min_val = Math.min.apply(null, numbers);\n\tvar max_val = Math.max.apply(null,\
    \ numbers);\n\tvar delta = max_val - min_val;\n\t\n\tif (delta === 0) return numbers;\n\
    \t\n\tvar result = [];\n\t\n\tfor (var i = 0; i < numbers.length; i++)\n\t\tresult[i]\
    \ = (numbers[i] - min_val) / delta;\n\t\n\treturn result;\n}\n", "\tvar range\
    \ = Math.max(numbers[0], numbers[1]);\n\tvar diff = range - numbers[0];\n\tvar\
    \ result = [];\n\t\n\tresult.push(0);\n\tresult.push(diff);\n\t\n\tfor (var i=2;\
    \ i<numbers.length; i++){\n\t\tvar num = numbers[i];\n\t\tvar scale = Math.floor(num\
    \ / range);\n\t\tresult.push(scale);\n\t\tresult.push(scale * diff);\n\t}\n\t\n\
    \treturn result;\n}\n", "\tvar num_arr = numbers.map(function(number){\n\t\treturn\
    \ Math.min( Math.max( number, 0 ), 1 );\n\t});\n\treturn num_arr;\n}\n", "   \
    \ var min = Math.min(numbers[0] , numbers[1]);\n    var max = Math.max(numbers[0]\
    \ , numbers[1]);\n    var scale = (max - min) / (numbers.length - 1);\n    return\
    \ numbers.map(function(val, idx){\n        return val * scale;\n    });\n}\n",
  "  var total_min = numbers[0]\n  for (var i = 0; i < numbers.length; i++){\n   \
    \ total_min = Math.min(total_min, numbers[i])\n  }\n  var total_max = numbers[0]\n\
    \  for (var i = 0; i < numbers.length; i++){\n    total_max = Math.max(total_max,\
    \ numbers[i])\n  }\n  var scaled_array = []\n  for (var i = 0; i < numbers.length;\
    \ i++){\n    scaled_array.push((numbers[i] - total_min) / (total_max - total_min))\n\
    \  }\n  return scaled_array\n}\n", "    numbers.sort(function(a,b){ return a -\
    \ b; })\n    return numbers.map(function(number){ \n        return (number - numbers.min())/(numbers.max()\
    \ - numbers.min()); \n    });\n}\n\n", "  var scale = new Array(numbers.length);\n\
    \  for(var i = 0; i < numbers.length; i++){\n    scale[i] = (numbers[i] - numbers[0])\
    \ / (numbers[i - 1] - numbers[0]);\n  }\n  return scale;\n}\nvar d3_transform\
    \ = {\"scale\":d3.scaleLinear(), \"translate\":d3.scaleLinear(), \"scaleX\":d3.scaleLinear(),\
    \ \"scaleY\":d3.scaleLinear(), \"scaleZ\":d3.scaleLinear(), \"skew\":d3.scaleLinear(),\
    \ \"rotate\":d3.scaleLinear(), \"translateX\":d3.scaleLinear(), \"translateY\"\
    :d3.scaleLinear(), \"translateZ\":d3.scaleLinear(), \"matrix\":d3.identity, \"\
    translate3d\":d3.identity, \"scale3d\":d3.identity, \"skewX\":d3.identity, \"\
    skewY\":d3.identity, \"rotateX\":d3.identity, \"rotateY\":d3.identity, \"rotateZ\"\
    :d3.identity, \"perspective\":d3.identity};\nd3.transform = function(){\n  var\
    \ scale = d3.transformScale(),\n      translate = d3.transformTranslate(),\n \
    \     rotate = d3.transformRotate(),\n      matrix = d3.transformMatrix(),\n \
    \     local = d3.transformLocal(),\n      event = d3_svg_brushEvent,\n      extent\
    \ = d3_selection.prototype.extent;\n  d3_selection.prototype.transform = function(string){\n\
    \    var n = d3_transform[string];\n    return n == null ? n : n.apply(this, arguments);\n\
    \  };\n  d3_transform.prototype.toString = function(){\n    return \"translate(\"\
    \ + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skewX + \"\
    )skewY(\" + this.skewY + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transform(m)\
    \ {\n    var r0 = [ m.a, m.b ],\n        r1 = [ m.c, m.d ],\n        a0 = m.a,\n\
    \        a1 = m.c,\n        a2 = m.b,\n        b0 = m.x,\n        b1 = m.y,\n\
    \        b2 = m.z,\n        x0 = r1[0] * r1[0] * b0 + r1[1] * r1[1] * b0 + r1[2]\
    \ * r1[2] * b0,\n        y0 = r1[0] * r1[1] * b0 + r1[1] * r1[1] * b1 + r1[2]\
    \ * r1[2] * b1,\n        z0 = r1[0] * r1[2] * b0 + r1[1] * r1[2] * b1 + r1[2]\
    \ * r1[2] * b2,\n        w0 = Math.max(r0[1],r1[1]),\n        w1 = Math.max(r0[2],r1[2]),\n\
    \        x1 = Math.min(r0[0],r1[0]),\n        y1 = Math.min(r0[1],r1[1]),\n  \
    \      z1 = Math.min(r0[2],r1[2]),\n        x0 = Math.max(x0,", "    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] < smallest){\n            smallest = numbers[i]\n\
    \        }\n        if(numbers[i] > largest){\n            largest = numbers[i]\n\
    \        }\n    }\n    return numbers.map(function(number){ return number / largest;\
    \ })\n}\n", "\tvar max = Math.max.apply(null, numbers);\n\tvar min = Math.min.apply(null,\
    \ numbers);\n\tvar range = (max - min)/10;\n\treturn numbers.map(function(n){\n\
    \t\treturn n * (10 - range) + min;\n\t});\n}\n\n", "  var min = _.min(numbers);\n\
    \  var max = _.max(numbers);\n  var range = max - min;\n  return numbers.map(function(n){\n\
    \    return ((n - min) / range);\n  });\n}\n", "\tnumbers = numbers.map(function(x){\n\
    \t\treturn (x == 0.0) ? 0 : (x - min(x));\n\t});\n\treturn numbers.map(function(x){\n\
    \t\treturn (x == 0.0) ? 0 : (1.0/(max - min));\n\t});\n}\n", "    var min_number\
    \ = Math.min.apply(null, numbers);\n    var max_number = Math.max.apply(null,\
    \ numbers);\n    var range = Math.max.apply(null, numbers) - min_number;\n   \
    \ return function(number) {\n        return ((number - min_number) / range) *\
    \ 100;\n    };\n}\n", "\tconst max = Math.max(...numbers);\n\tconst min = Math.min(...numbers);\n\
    \tconst range = max - min;\n\tconst rescaled = [];\n\tfor (const num of numbers){\n\
    \t\trescaled.push((num - min) / range);\n\t}\n\treturn rescaled;\n}\n", "  numbers\
    \ = numbers.map((number)=>{\n    return (number - Math.min(...numbers)) / (\n\
    \      Math.max(...numbers) - Math.min(...numbers)\n    )\n  })\n  return numbers\n\
    }\n", "    var min_number = Math.min.apply(this, numbers);\n    var max_number\
    \ = Math.max.apply(this, numbers);\n    var difference = max_number - min_number;\n\
    \    var scale = (difference == 0) ? 1.0 : Math.pow(10.0, ((difference > 0) ?\
    \ Math.ceil(difference / 2.) : Math.floor(difference / 2.)));\n    var scaled_numbers\
    \ = numbers.map(function(n){ return (n - min_number) * scale; });\n    return\
    \ scaled_numbers;\n}\n", "\tvar max_value = numbers[0];\n\tvar min_value = numbers[0];\n\
    \tnumbers.forEach(function(number, i){\n\t\tmin_value = Math.min(number, min_value);\n\
    \t\tmax_value = Math.max(number, max_value);\n\t});\n\treturn numbers.map(function(number){\n\
    \t\treturn (number - min_value) / (max_value - min_value);\n\t});\n}\n", "  var\
    \ l = numbers.length;\n  if (l === 0){\n    return [0.0, 0.0];\n  }\n  var scale\
    \ = [];\n  for (var i = 0; i < l; i++){\n    scale.push(Math.pow(numbers[i], 1.0/l));\n\
    \  }\n  return scale;\n}\n", "    return numbers.map(function(value){\n      \
    \  return (value - MIN) / (MAX - MIN)\n    });\n}\n\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    if(range === 0){\n        return [min, max];\n    }\n    var\
    \ result = [min, max];\n    var step = (numbers[1] - numbers[0]) / range;\n  \
    \  for(var i = 2; i < numbers.length; i++){\n        result[i] = min + i * step;\n\
    \    }\n    return result;\n}\n", "    var rescaled = [];\n    var prev_min =\
    \ numbers[0];\n    var prev_max = numbers[0];\n    var prev_sum = 0;\n    var\
    \ num;\n    for(var i = 1; i < numbers.length; i++){\n        num = numbers[i];\n\
    \        rescaled[i] = (num - prev_min) / (prev_max - prev_min);\n        prev_min\
    \ = Math.min(prev_min, num);\n        prev_max = Math.max(prev_max, num);\n  \
    \      prev_sum += num;\n    }\n    return rescaled;\n}\n", "    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var factor = (max-min)/(numbers.length-1);\n\
    \    for(var i=0; i<numbers.length; i++){\n        numbers[i] = numbers[i]*factor;\n\
    \    }\n    return numbers;\n}\n", "\tvar new_numbers = new Array(numbers.length);\n\
    \tfor(var i = 0; i < numbers.length; i++){\n\t\tnew_numbers[i] = Math.ceil(numbers[i]/256);\n\
    \t}\n\treturn new_numbers;\n}\n", "  return numbers.map(function(number){\n  \
    \  return number/Math.max(Math.min(number, 1));\n  });\n}\n", "    var smallest_number\
    \ = numbers[0];\n    var largest_number = numbers[numbers.length - 1];\n    var\
    \ smallest_number_unit = 0;\n    var largest_number_unit = 0;\n    for(var index\
    \ = 0; index < numbers.length; index++){\n        var number_unit = numbers[index];\n\
    \        if(number_unit === 0){\n            smallest_number_unit = 0;\n     \
    \       largest_number_unit = 1;\n        }else{\n            smallest_number_unit\
    \ = smallest_number_unit * units[smallest_number_unit];\n            largest_number_unit\
    \ = largest_number_unit * units[largest_number_unit];\n        }\n    }\n    var\
    \ rescaled_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n     \
    \   var rescaled_number = numbers[i] / largest_number_unit;\n        rescaled_numbers.push(rescaled_number\
    \ * largest_number_unit + smallest_number_unit);\n    }\n    return rescaled_numbers;\n\
    }\n", "    var max_ = numbers[0];\n    var min_ = numbers[0];\n    for(var i =\
    \ 1; i < numbers.length; i++){\n        var num = numbers[i];\n        if(num\
    \ > max_){ max_ = num; };\n        if(num < min_){ min_ = num; };\n    };\n  \
    \  var scale = (max_ - min_)/0.0;\n    for(var i = 1; i < numbers.length; i++){\n\
    \        numbers[i] *= scale;\n    };\n    return numbers;\n};\n", "    var total\
    \ = 0;\n    var max_index = 0;\n    var min = Number.MAX_VALUE;\n    for(var i\
    \ = 0; i < numbers.length; i++){\n        total += numbers[i];\n        if(total\
    \ < min){\n            min = total;\n            max_index = i;\n        }\n \
    \   }\n    numbers[max_index] = 1;\n    return numbers;\n}\n", "  var max = Math.max.apply(null,\
    \ numbers);\n  var min = Math.min.apply(null, numbers);\n  var range = (max -\
    \ min) / 1.0;\n  return numbers.map(function(x) { return (x - min) * range; });\n\
    }\n", "    var min_ = numbers[0];\n    var max_ = numbers[0];\n    for(var i=0;i<numbers.length;i++){\n\
    \        if(numbers[i] < min_){\n            min_ = numbers[i];\n        } else\
    \ if(numbers[i] > max_){\n            max_ = numbers[i];\n        }\n    }\n \
    \   var range_ = max_ - min_;\n    return function(x){\n        return (x - min_)\
    \ / range_;\n    };\n}\n", "  var min = _min(numbers);\n  var max = _max(numbers);\n\
    \  var range = (max - min)/1.0;\n  return _(_.map(numbers, function(n){\n    return\
    \ n * range + min;\n  }));\n}\n", "    var max = Math.max(...numbers);\n    var\
    \ min = Math.min(...numbers);\n    var diff = (max - min);\n    var new_min =\
    \ min;\n    var new_max = max;\n    if (diff > 0){\n        while(diff > 0){\n\
    \            new_min += 1;\n            diff -= 1;\n        }\n        new_max\
    \ += 1;\n    }\n    var new_array = new Array(new_max - new_min);\n    new_array[0]\
    \ = new_min;\n    for(var i = 1; i < new_array.length; i++){\n        new_array[i]\
    \ = new_min + i * (new_max - new_min) / new_array.length;\n    }\n    return new_array;\n\
    }\n", "\treturn numbers.map(function(n){ return (n - Math.min(numbers)) / (Math.max(numbers)\
    \ - Math.min(numbers)); });\n}\n", "\tif(numbers.length <= 1){\n\t\treturn numbers;\n\
    \t}\n\tlet max_value = Math.max.apply(null, numbers);\n\tlet min_value = Math.min.apply(null,\
    \ numbers);\n\tlet range = (max_value - min_value)/numbers.length\n\treturn numbers.map(x\
    \ => Math.round(x*range))\n}\n", "    var min = Math.min.apply(null, numbers);\n\
    \    var max = Math.max.apply(null, numbers);\n    var range = (max-min)/Math.max(1.0,\
    \ Math.abs(min));\n    return numbers.map(function(x){return range*(x - min);});\n\
    }\n", "  var max_num = Math.max.apply(null, numbers);\n  return numbers.map(function(num){\n\
    \    return Math.max(0, Math.min(num, max_num));\n  });\n}", "    var min_num\
    \ = Math.min.apply(null, numbers);\n    var max_num = Math.max.apply(null, numbers);\n\
    \    var range = max_num - min_num;\n    if(range === 0){\n        return [min_num];\n\
    \    }\n    var new_numbers = [];\n    for(var i=0; i<numbers.length; i++){\n\
    \        var rescaled = numbers[i] / range;\n        new_numbers.push(rescaled);\n\
    \    }\n    return new_numbers;\n}\n\nmodule.exports = rescale_to_unit;\n\n},{}],36:[function(require,module,exports){",
  "    numbers = numbers.map((n) => {\n        return Math.max(0, Math.min(1, n));\n\
    \    });\n    return numbers;\n}\n", "\tvar smallest = Math.min.apply(null, numbers);\n\
    \tvar largest = Math.max.apply(null, numbers);\n\tvar range = largest - smallest;\n\
    \tvar scale = Math.pow(10, Math.floor(Math.log(range) / Math.LN10));\n\tvar newArray\
    \ = [];\n\tfor (var i = 0; i < numbers.length; i++){\n\t\tnewArray.push((numbers[i]\
    \ - smallest)/scale);\n\t}\n\treturn newArray;\n}\n", "  if(numbers.length <=\
    \ 1) return numbers;\n\n  var min_value = numbers[0];\n  var max_value = numbers[0];\n\
    \  var index = 0;\n\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i]\
    \ < min_value){\n      min_value = numbers[i];\n    }\n\n    if(numbers[i] > max_value){\n\
    \      max_value = numbers[i];\n    }\n  }\n\n  var ratio = (max_value - min_value)/max_value;\n\
    \  var scale = [];\n\n  while(numbers.length > 0){\n    scale.push(numbers.pop()\
    \ * ratio);\n  }\n\n  return scale;\n}\n", "    if (numbers.length <= 1) return\
    \ numbers; // no op\n    if (numbers.length === 0) return numbers; // nothing\
    \ to do\n    var max = Math.max.apply(null, numbers);\n    var min = Math.min.apply(null,\
    \ numbers);\n    var range = max - min;\n    var f = (numbers[0]-min)/range;\n\
    \    if (f < 0.5) f = f + 1;\n    return numbers.map(function(n) { return f*n;\
    \ });\n}", "  var smallest = Math.min.apply(null, numbers);\n  var largest = Math.max.apply(null,\
    \ numbers);\n  var range = largest - smallest;\n  return function(x){\n    return\
    \ (x - smallest) / range;\n  }\n}\n", "\tvar max_vals = numbers.map(function(x){\
    \ return Math.abs(x) });\n\tvar min_vals = numbers.map(function(x){ return Math.min(x,\
    \ 0) });\n\tvar range = max_vals.map(function(max_val){\n\t\treturn max_val-min_vals[0];\n\
    \t});\n\tvar new_number = numbers[0];\n\tvar min_range = min_vals[0]-min_vals[1];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar new_val = numbers[i] - min_vals[i];\n\
    \t\tvar factor = range / max_vals[i];\n\t\tnew_number += factor * new_val;\n\t\
    \tmin_range += factor * min_val;\n\t}\n\treturn [new_number, min_range];\n}\n\n",
  "    var min = Math.min(numbers);\n    var max = Math.max(numbers);\n    var range\
    \ = max - min;\n    return numbers.map(function(value){\n        return (value\
    \ - min) / range;\n    });\n}\n", "\tvar min = min(numbers);\n\tvar max = max(numbers);\n\
    \tvar new_numbers = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tnew_numbers.push(Math.floor((numbers[i]\
    \ - min) / (max - min) * 100));\n\t}\n\treturn new_numbers;\n}\n", "\tvar sum\
    \ = 0;\n\tfor(var i = 0; i < numbers.length; ++i){\n\t\tsum += numbers[i];\n\t\
    }\n\treturn sum / numbers.length;\n}\n", "    var min = Math.min(numbers[0], numbers[1]);\n\
    \    var max = Math.max(numbers[0], numbers[1]);\n    var range = (max-min) /\
    \ 2;\n    return numbers.map(function(num){\n        return ((num-min)/range);\n\
    \    });\n}", "    var min = 0;\n    var max = numbers[0];\n    var scaled_numbers\
    \ = [];\n\n    for(var i in numbers){\n        scaled_numbers.push(min + ((numbers[i]\
    \ - min) / (max - min)));\n        min = min + ((numbers[i] - min) / (max - min));\n\
    \        max = numbers[i];\n    }\n    return scaled_numbers;\n}\n", "    var\
    \ min_number = numbers[0];\n    var max_number = numbers[0];\n    var rescaled\
    \ = [];\n\n    for(var i=1; i<numbers.length; i++){\n        var current = numbers[i];\n\
    \        if(current < min_number){\n            min_number = current;\n      \
    \  }\n        if(current > max_number){\n            max_number = current;\n \
    \       }\n        rescaled.push(current - min_number);\n    }\n\n    if(numbers.length\
    \ == 1){\n        return [min_number, numbers[0]];\n    }else{\n        return\
    \ [min_number, max_number];\n    }\n}\n\n", "    var min = numbers[0];\n    var\
    \ max = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n        min\
    \ = min < numbers[i] ? numbers[i] : (min > numbers[i] ? numbers[i] : min);\n \
    \       max = max > numbers[i] ? numbers[i] : (max < numbers[i] ? numbers[i] :\
    \ max);\n    }\n    return [min, max];\n}\nexports.rescale_to_unit = rescale_to_unit;\n",
  "\t\n\tvar smallest = Math.min.apply(null, numbers);\n\tvar largest = Math.max.apply(null,\
    \ numbers);\n\tvar range = largest - smallest;\n\t\n\tfor(var n = 0; n < numbers.length;\
    \ n++){\n\t\tnumbers[n] -= smallest;\n\t}\n\t\n\tfor(var n = 0; n < numbers.length;\
    \ n++){\n\t\tvar offset = range / numbers.length;\n\t\tnumbers[n] = offset + numbers[n];\n\
    \t}\n\t\n\treturn numbers;\n}\n", "  var minVal = math.min(numbers);\n  var maxVal\
    \ = math.max(numbers);\n  return numbers.map(function(n){\n    return n*(maxVal-minVal)/((maxVal-minVal)*(maxVal-minVal));\n\
    \  });\n};\n", "    var largest = Math.max.apply(null, numbers);\n    var smallest\
    \ = Math.min.apply(null, numbers);\n    var diff = (largest - smallest);\n   \
    \ var scale = (diff / largest);\n    var result = [];\n    var i;\n    for (i\
    \ = 0; i < numbers.length; i++) {\n        result.push((numbers[i] - smallest)\
    \ * scale + largest);\n    }\n    return result;\n}\n", "  var min = Math.min(numbers[0],\
    \ numbers[1]);\n  var max = Math.max(numbers[0], numbers[1]);\n  var delta = max\
    \ - min;\n  return numbers.map(function(number){\n    return number - min;\n \
    \ }).map(function(number){\n    return number / delta;\n  });\n}\n", "\tlet result\
    \ = [];\n\tlet max_value = numbers[0];\n\tlet min_value = numbers[0];\n\tfor(let\
    \ i = 0; i < numbers.length; i++){\n\t\tlet number = numbers[i];\n\t\tmax_value\
    \ = Math.max(number, max_value);\n\t\tmin_value = Math.min(number, min_value);\n\
    \t}\n\tfor(let i = 0; i < numbers.length; i++){\n\t\tlet number = numbers[i];\n\
    \t\tresult.push(\n\t\t\t(number - min_value) / (max_value - min_value)\n\t\t);\n\
    \t}\n\treturn result;\n}\n", "    var l = numbers.length;\n    var first=numbers[0];\n\
    \    var last=numbers[l-1];\n    var middle = numbers.filter(function(x){\n  \
    \      return x<middle;\n    })[0]||first;\n    var scale_factor = 1.0;\n    if\
    \ (middle > first) {\n        scale_factor = (last - first) / (last - middle);\n\
    \    }\n    var result = numbers.map(function(x){\n        return x * scale_factor;\n\
    \    });\n    return result;\n}", "    if (numbers.length < 2) {\n        return\
    \ numbers;\n    }\n    var sum = 0, min = numbers[0];\n    for (var i = 1; i <\
    \ numbers.length; i++) {\n        var cur = numbers[i];\n        var delta = cur\
    \ - min;\n        min = Math.min(min, cur);\n        sum += delta;\n    }\n  \
    \  var out = new Array(numbers.length);\n    for (var j = 0; j < numbers.length;\
    \ j++) {\n        out[j] = min + sum * j;\n    }\n    return out;\n}\n", "\tnumbers\
    \ = _.clone(numbers);\n\t_.forEach(numbers, function(num){\n\t\tnum *= (1/(numbers.length\
    \ - 1));\n\t});\n\treturn numbers;\n}\n", "    var i, min;\n    if(numbers.length\
    \ < 2) return numbers; // nothing to do\n    min = numbers[0];\n    for(i=1; i<numbers.length;\
    \ i++){\n        if(numbers[i] < min) min = numbers[i];\n    }\n    for(i=1; i<numbers.length;\
    \ i++){\n        numbers[i] /= min;\n    }\n    return numbers;\n}\n", "  var\
    \ length = numbers.length;\n  var min_value = numbers[0];\n  var max_value = numbers[0];\n\
    \  for(var i = 1; i < length; i++){\n    var value = numbers[i];\n    if(value\
    \ < min_value){\n      min_value = value;\n    }\n    if(value > max_value){\n\
    \      max_value = value;\n    }\n  }\n  return [\n    numbers[0] - min_value,\n\
    \    max_value / min_value - min_value\n  ];\n}\n", "\treturn numbers.map(function(number){\n\
    \t\tnumber = (number + 0) / 1;\n\t\treturn Math.pow(10, Math.floor(Math.log(number)\
    \ / Math.LN10));\n\t});\n}\n", "    var min = numbers[0],\n        max = numbers[0];\n\
    \    for(var i = 1; i < numbers.length; i++){\n        min = Math.min(min, numbers[i]);\n\
    \        max = Math.max(max, numbers[i]);\n    }\n    return [min, max];\n}\n",
  "    var max = numbers.reduce(function(a, b){\n        return (a[0] > b[0]) ? a\
    \ : b;\n    });\n\n    var min = numbers.reduce(function(a, b){\n        return\
    \ (a[0] < b[0]) ? a : b;\n    });\n\n    if(max[0] === min[0]){\n        return\
    \ [1.0, numbers[1]];\n    }\n\n    var result = [];\n    for(var i = 0; i<numbers.length;\
    \ i++){\n        if(numbers[i] < min[0]){\n            result.push(numbers[i]);\n\
    \        }else if(numbers[i] > max[0]){\n            result.push(max[0]);\n  \
    \      }else{\n            result.push(\n                (numbers[i]-min[0])\n\
    \                /(max[0]-min[0])\n            );\n        }\n    }\n    return\
    \ result;\n}\n", "    numbers.sort(function(a, b){\n        return a - b;\n  \
    \  });\n    var n = numbers.length;\n    var sum = 0;\n    var avg = 0.0;\n  \
    \  var max_index = 0;\n    var min_index = n - 1;\n    for(var i = 0;i < n;++i){\n\
    \        sum += numbers[i];\n        avg = sum / i;\n        if(numbers[i] < avg){\n\
    \            min = i;\n            break;\n        }\n    }\n    max_index = min_index;\n\
    \    for(var i = 0;i < n;++i){\n        sum += numbers[i];\n        avg = sum\
    \ / i;\n        if(numbers[i] > avg){\n            max_index = i;\n          \
    \  break;\n        }\n    }\n    if(max_index === min_index){\n        return\
    \ [0.0];\n    }\n    avg = numbers[max_index];\n    var res = [];\n    for(var\
    \ i = 0;i < n;++i){\n        avg = numbers[i] / avg;\n        res.push(Math.pow(avg,\
    \ 1.0 / numbers.length));\n    }\n    res.reverse();\n    return res;\n}", " \
    \   var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var max_value = max - min;\n    var factor;\n    if(max_value\
    \ == 0){\n        return [min, max];\n    }\n    factor = Math.pow(10, Math.floor(Math.log(max_value)\
    \ / Math.LN10));\n    var scaled_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        scaled_numbers.push(numbers[i] * factor + min);\n    }\n    return\
    \ scaled_numbers;\n}\n", "\tnumbers = numbers.map(function (num){\n\t\treturn\
    \ Math.abs(num);\n\t});\n\tvar min_number = numbers[0];\n\tvar max_number = numbers[numbers.length\
    \ - 1];\n\treturn numbers.map(function (num){\n\t\tnum -= min_number;\n\t\treturn\
    \ num / (max_number - min_number);\n\t});\n}\n", "    return numbers.map(function(x){\n\
    \        return Math.min(Math.max(x, 0.0), 1.0)\n    });\n}\n", "\tvar min_value\
    \ = Math.min.apply(null, numbers);\n\tvar max_value = Math.max.apply(null, numbers);\n\
    \tvar min_value_index = numbers.indexOf(min_value);\n\tvar max_value_index = numbers.indexOf(max_value);\n\
    \n\tvar length = numbers.length;\n\tvar unit = (max_value - min_value_index) /\
    \ (length - 1);\n\n\tvar rescaled_numbers = new Array(length);\n\tfor (var i =\
    \ 0; i<length; i++){\n\t\trescaled_numbers[i] = min_value_index + (i + 1) * unit;\n\
    \t}\n\n\treturn rescaled_numbers;\n}\n", "    var minValue = Math.min.apply(null,\
    \ numbers);\n    var maxValue = Math.max.apply(null, numbers);\n    if(minValue\
    \ == maxValue){\n        return numbers;\n    }\n    var scale = 1 / (maxValue\
    \ - minValue);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        result.push(numbers[i] * scale);\n    }\n    return result;\n}\n", " \
    \   var total = 0;\n    var sum = 0;\n    var min = numbers[0];\n    var max =\
    \ numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n        total +=\
    \ numbers[i];\n        sum += numbers[i] * numbers[i];\n        if(min === undefined){\n\
    \            min = numbers[i];\n        } else if(min > numbers[i]){\n       \
    \     min = numbers[i];\n        } else if(max < numbers[i]){\n            max\
    \ = numbers[i];\n        }\n    }\n    return [min, max, total/sum];\n}", "  \
    \  if(numbers.length < 2){\n        return numbers;\n    }\n    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    \n    var scale\
    \ = (max - min) / 2.0;\n    var scaled_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        scaled_numbers.push(min + ((numbers[i] - min) / scale));\n  \
    \  }\n    return scaled_numbers;\n}\n", "    var sorted_arr = numbers.sort(function(a,\
    \ b){\n        return a - b;\n    });\n\n    var min_ind = Math.ceil(Math.log(sorted_arr[0])\
    \ / Math.LN10);\n    var max_ind = Math.floor(Math.log(sorted_arr[sorted_arr.length\
    \ - 1]) / Math.LN10);\n\n    return sorted_arr.map(function(num){\n        return\
    \ num / Math.pow(10, min_ind - max_ind + 1);\n    });\n}\n", "\tvar largest =\
    \ Math.max.apply(null, numbers);\n\tvar smallest = Math.min.apply(null, numbers);\n\
    \tvar range = (largest-smallest)/2.0;\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tnumbers[i] -= smallest;\n\t\tif(numbers[i] > range){\n\t\t\tnumbers[i] = (range/2.0);\n\
    \t\t}\n\t\telse{\n\t\t\tnumbers[i] += largest;\n\t\t}\n\t}\n\treturn numbers;\n\
    }\n", "  var total_min = numbers[0];\n  var total_max = numbers[0];\n  for(var\
    \ i = 1; i < numbers.length; i++){\n    var number = numbers[i];\n    var min\
    \ = total_min == null ? number : Math.min(total_min, number);\n    var max = total_max\
    \ == null ? number : Math.max(total_max, number);\n    total_min = min;\n    total_max\
    \ = max;\n  }\n  if(total_min != null){\n    return total_min / (total_max - total_min);\n\
    \  }\n  else{\n    return 1.0;\n  }\n}", "\tvar len = numbers.length;\n\tvar min\
    \ = numbers[0];\n\tvar max = numbers[0];\n\tfor(var i = 1; i < len; i++){\n\t\t\
    min = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\t\
    for(var i = 0; i < len; i++){\n\t\tnumbers[i] = ((numbers[i] - min) / (max - min));\n\
    \t}\n\treturn numbers;\n}\n\n", "    var min = Math.min(numbers[0], numbers[numbers.length\
    \ - 1]);\n    var max = Math.max(numbers[0], numbers[numbers.length - 1]);\n \
    \   var diff = (max - min) / 2;\n    var i = 0;\n    var new_array = new Array(numbers.length);\n\
    \    for(i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n   \
    \         new_array[i] = max;\n        }else if(numbers[i] < min){\n         \
    \   new_array[i] = min;\n        }else{\n            new_array[i] = numbers[i];\n\
    \        }\n    }\n    return new_array;\n}\n", "    var min_ = numbers.reduce(function(p,\
    \ c){\n        return c < p ? c : p;\n    }, Infinity);\n    var max_ = numbers.reduce(function(p,\
    \ c){\n        return c > p ? c : p;\n    }, -Infinity);\n    return numbers.map(function(x){\
    \ return (x-min_)/(max_-min_); });\n}\n", "    numbers = numbers.slice();\n  \
    \  var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    return numbers.map(function(num){\n        var new_num = ((num\
    \ - min) / (max - min)) * 2.0;\n        return new_num;\n    });\n}\n", "  var\
    \ min = 0,\n      max = numbers[0];\n  \n  for(var i = 0; i < numbers.length;\
    \ i++){\n    if(numbers[i] < min){\n      min = numbers[i];\n    }\n    if(numbers[i]\
    \ > max){\n      max = numbers[i];\n    }\n  }\n\n  var diff = Math.abs(max -\
    \ min);\n  var new_min = min + diff * 0.05;\n  var new_max = max + diff * 0.05;\n\
    \n  var new_numbers = [];\n  for(var i = 0; i < numbers.length; i++){\n    new_numbers.push(numbers[i]\
    \ < new_min ? new_min : numbers[i] >= new_max ? new_max : numbers[i]);\n  }\n\
    \  \n  return new_numbers;\n}\n", "  var min = numbers.reduce(function(a, b){return\
    \ Math.min(a, b);});\n  var max = numbers.reduce(function(a, b){return Math.max(a,\
    \ b);});\n  return numbers.map(function(x){return (x - min) / (max - min);});\n\
    };\n", "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
    \ numbers[1]);\n    var range = max - min;\n    return numbers.map(function(i){\n\
    \        return (i - min) / range * 0.5;\n    });\n}\n", "    numbers = numbers.slice();\n\
    \    numbers.sort(function(x, y){ return x-y; });\n    var min_number = 0;\n \
    \   var max_number = 1;\n    for (var i = 0; i < numbers.length; i++){\n     \
    \   if (numbers[i] === 0) continue;\n        if (min_number > 0 && numbers[i]\
    \ < min_number) min_number = numbers[i];\n        if (max_number < 1 && numbers[i]\
    \ > max_number) max_number = numbers[i];\n    }\n    var diff = Math.abs(max_number\
    \ - min_number);\n    if (diff === 0) return [0.0, 0.0];\n    return [min_number\
    \ / diff, max_number / diff];\n}", "\tvar min_num = Math.min.apply(null, numbers);\n\
    \tvar max_num = Math.max.apply(null, numbers);\n\tvar range = max_num - min_num;\n\
    \n\treturn function(x){\n\t\treturn ((x - min_num) / range);\n\t};\n}\n", "  \
    \  // Calculate max\n    var max_val = Math.max.apply(null, numbers);\n    var\
    \ diff = max_val - min_val;\n    if (diff < 1e-8) {\n        return [min_val,\
    \ max_val];\n    } else {\n        return [min_val+(max_val-min_val)/diff, max_val];\n\
    \    }\n}\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\t\n\
    \tfor (var i = 1; i < numbers.length; i++){\n\t\tvar n = numbers[i];\n\t\tif (n\
    \ < smallest ) smallest = n;\n\t\telse if (n > largest) largest = n;\n\t}\n\t\n\
    \tif (smallest == Number.NEGATIVE_INFINITY) smallest = 0;\n\tif (largest == Number.POSITIVE_INFINITY)\
    \ largest = 1;\n\t\n\treturn [smallest, largest];\n}\n", "    for(var i = 0; i\
    \ < numbers.length; i++){\n        var n = numbers[i];\n        var min = Number.MAX_VALUE;\n\
    \        var max = Number.MIN_VALUE;\n        for(var j = 0; j < numbers.length;\
    \ j++){\n            if(j == i)\n                continue;\n            var d\
    \ = Math.abs(n - numbers[j]);\n            min = Math.min(min, d);\n         \
    \   max = Math.max(max, d);\n        }\n        var range = (max - min) / 2;\n\
    \        numbers[i] = min + range * 0.5;\n    }\n    return numbers;\n}\n\n",
  "\tvar min = Math.min(...numbers);\n\tvar max = Math.max(...numbers);\n\t\n\tvar\
    \ scale = (max - min)/1.0;\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\
    \tnumbers[i] = (numbers[i] - min)*scale + min;\n\t}\n\treturn numbers;\n}\n",
  "    var min, max, i;\n    var results = [];\n\n    // Find minimum and maximum\
    \ values\n    for(i=0; i<numbers.length; i++){\n        min = max = numbers[i];\n\
    \        for(j=0; j<numbers.length; j++){\n            if(numbers[j] < min){\n\
    \                min = numbers[j];\n            }\n            else if(numbers[j]\
    \ > max){\n                max = numbers[j];\n            }\n        }\n     \
    \   results.push(min);\n    }\n\n    // Scale all numbers from 0 to 1\n    for(i=0;\
    \ i<numbers.length; i++){\n        results[i] = (numbers[i] - min) / (max - min);\n\
    \    }\n\n    return results;\n}\n", "\tnumbers.sort(function(a, b){\n\t\treturn\
    \ a - b\n\t})\n\tlet min_val = numbers[0]\n\tlet max_val = numbers[numbers.length\
    \ - 1]\n\tlet diff = max_val - min_val\n\tfor(let i = 0; i < numbers.length; i++){\n\
    \t\tnumbers[i] = (numbers[i] - min_val) / diff\n\t}\n\treturn numbers\n}\n\n",
  "\treturn numbers.map(function(v){\n\t\tv = v - Math.min(numbers);\n\t\treturn v\
    \ / ( v + Math.max(numbers) );\n\t});\n}\n\n\nvar is_func = function(a){\n\treturn\
    \ typeof a == \"function\" || false;\n};\n\nvar is_array = Array.isArray || function(a){\n\
    \treturn a instanceof Array || false;\n};\n\nvar array_chunk = function(arr, size){\n\
    \tsize = size || 2;\n\tif(arr.length > size){\n\t\tvar chunks = []\n\t\twhile(arr.length\
    \ > size){\n\t\t\tchunks.push(arr.splice(0, size));\n\t\t}\n\t\treturn chunks;\n\
    \t} else {\n\t\treturn [arr];\n\t}\n};\n\nvar sort_numerically = function(arr){\n\
    \treturn arr.sort(function(a, b){\n\t\tif(a < b) return 1;\n\t\tif(a > b) return\
    \ -1;\n\t\treturn 0;\n\t});\n};\n\nvar flatten = function(arr){\n\treturn arr.reduce(function(a,\
    \ b){\n\t\treturn a.concat(b);\n\t});\n};\n\nvar slice_array = function(arr, slices,\
    \ fill){\n\tslices = slices || 1;\n\tvar out = [];\n\tfor(var i = 0; i < slices;\
    \ i++){\n\t\tout.push(arr.slice(i, i + 1));\n\t\tif(fill) out.push(fill);\n\t\
    }\n\treturn out;\n};\n\nvar translate_locations = function(locations, x_offset,\
    \ y_offset){\n\treturn slice_array(locations, 4).map(function(location){\n\t\t\
    return location[0] + x_offset, location[1] + y_offset;\n\t});\n};\n\nvar scale_locations\
    \ = function(locations, x_scale, y_scale){\n\treturn slice_array(locations, 4).map(function(location){\n\
    \t\treturn x_scale(location[0]) - x_scale(location[2]),\n\t\t\ty_scale(location[1])\
    \ - y_scale(location[3]);\n\t});\n};\n\nvar array_range = function(arr, start,\
    \ end){\n\treturn slice_array(arr, end - start + 1).map(function(arr){\n\t\treturn\
    \ arr[start];\n\t});\n};\n", "    var max_value = Math.max.apply(null, numbers);\n\
    \    var min_value = Math.min.apply(null, numbers);\n    if(min_value >= max_value){\n\
    \        return [min_value, 1.0];\n    }else{\n        return [0.0, (max_value\
    \ - min_value)/max_value];\n    }\n}\n", "    var min = 0,\n        max = 0;\n\
    \    for(var i = 0; i < numbers.length; ++i){\n        var number = numbers[i];\n\
    \        if(number < min) min = number;\n        if(number > max) max = number;\n\
    \    }\n    var scale = (max - min) / (2 * Math.PI);\n    return [\n        ((min\
    \ + max) / 2) * Math.pow(scale, 0),\n        scale * Math.pow(min, 0)\n    ];\n\
    }", "\tlet new_numbers = []\n\tfor (let i = 0; i < numbers.length; i++){\n\t\t\
    new_numbers.push(numbers[i]/numbers.length)\n\t}\n\treturn new_numbers\n}\n\n",
  "\tvar new_numbers = []\n\tfor (var i = 0; i < numbers.length; i++){\n\t\tnew_numbers.push(Math.round(numbers[i]\
    \ * rescale_factor));\n\t}\n\treturn new_numbers\n}\n", "\tvar min_value = Math.min.apply(null,\
    \ numbers),\n\t\tmax_value = Math.max.apply(null, numbers),\n\t\tmin_range = min_value\
    \ - min_value,\n\t\tmax_range = max_value - min_value,\n\t\tmin_diff = min_range\
    \ / min_value, //Smallest difference between min and max\n\t\tmax_diff = max_range\
    \ / max_value,\n\t\trange = max_value - min_value;\n\n\tif (range === 0) return\
    \ numbers;\n\n\tnumbers = numbers.map(function(val){\n\t\treturn (val - min_value)\
    \ / range;\n\t});\n\treturn numbers.map(function(val){\n\t\tif(val > 0) return\
    \ Math.max(0, val);\n\t\tif(val < 0) return Math.min(1, val);\n\t});\n}\n", "\t\
    var min = min(numbers);\n\tvar max = max(numbers);\n\tvar rescaled = [];\n\t\n\
    \tnumbers.forEach(function(number, index){\n\t\trescaled.push(number/max - min);\n\
    \t});\n\t\n\treturn rescaled;\n}\n", "\tvar min = numbers[0];\n\tvar max = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > max)\n\t\t\tmax\
    \ = numbers[i];\n\t\tif(numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t}\n\tvar\
    \ diff = max - min;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tnumbers[i]\
    \ -= diff * min / max;\n\t}\n\treturn numbers;\n}\n", "\tnumbers = numbers.map(function(num){\n\
    \t\tif(isNumber(num)){\n\t\t\tif(num<0){\n\t\t\t\tnum = 0;\n\t\t\t}\n\t\t\tif(num>1){\n\
    \t\t\t\tnum = 1;\n\t\t\t}\n\t\t}\n\t\treturn num;\n\t});\n\t\n\tvar smallest =\
    \ numbers[0] || 0;\n\tvar largest = numbers[numbers.length-1] || 1;\n\t\n\tvar\
    \ scale = (largest-smallest)/(largest-largest);\n\treturn numbers.map(function(num){\n\
    \t\treturn smallest + (num/scale);\n\t});\n}\n\n", "  var minimum = Math.min(...numbers);\n\
    \  var maximum = Math.max(...numbers);\n  var scale = (maximum - minimum) / (maximum\
    \ + minimum);\n  return numbers.map(n => n * scale);\n}", "    var min_index =\
    \ 0;\n    var max_index = 0;\n\n    for (var i = 0; i < numbers.length; i++){\n\
    \        if (numbers[i] > numbers[max_index]){\n            max_index = i;\n \
    \       }\n\n        if (numbers[i] < numbers[min_index]){\n            min_index\
    \ = i;\n        }\n    }\n\n    var scale = (numbers[max_index] - numbers[min_index])\
    \ / (max_index - min_index);\n\n    for (var i = 0; i < numbers.length; i++){\n\
    \        numbers[i] = numbers[i] - numbers[min_index] * scale;\n    }\n}\n", " \
    \   var min_val = Math.min(...numbers);\n    var max_val = Math.max(...numbers);\n\
    \    return numbers.map(v => v - min_val).map(v => v / max_val);\n}\n", "\tconst\
    \ min = Math.min(...numbers);\n\tconst max = Math.max(...numbers);\n\treturn [((numbers[0]\
    \ - min) / (max - min)),\n\t\t\t(numbers[1] - min) / (max - min),\n\t\t\t(numbers[2]\
    \ - min) / (max - min),\n\t\t\t(numbers[3] - min) / (max - min),\n\t\t\t(numbers[4]\
    \ - min) / (max - min)];\n}\nexports.rescale_to_unit = rescale_to_unit;\n", " \
    \   var min = numbers.shift();\n    var max = numbers.shift();\n    numbers =\
    \ numbers.map(function(n){\n        return (n-min)/(max-min);\n    });\n    return\
    \ numbers;\n}\n", "    var smallest_number = Math.min.apply( Math, numbers );\n\
    \    var largest_number = Math.max.apply( Math, numbers );\n    return smaller(\
    \ largest_number, smallest_number )\n        ? largest_number\n        : smallest_number;\n\
    }\n", "\tvar max = 0\n\tvar min = 1e12\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tvar n = numbers[i]\n\t\tif(n > max)\n\t\t\tmax = n\n\t\tif(n < min)\n\t\t\t\
    min = n\n\t}\n\tvar center = (max+min)/2\n\tvar scale = (max-min)/center\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tnumbers[i] = numbers[i]*scale+center\n\
    \t}\n\treturn numbers\n}\n", "  numbers = numbers.slice();\n  var min = numbers[0];\n\
    \  var max = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n    max\
    \ = Math.max(max, numbers[i]);\n  }\n  for(var i = numbers.length-1; i >= 0; i--){\n\
    \    min = Math.min(min, numbers[i]);\n  }\n  var range = max - min;\n  if(range\
    \ === 0){\n    numbers = [0];\n  } else if(range !== 1){\n    numbers = [((numbers[numbers.length-1]\
    \ - min)/range).toFixed(range)];\n  }\n  return numbers;\n}\n", "  var min_value\
    \ = numbers[0];\n  var max_value = numbers[numbers.length - 1];\n\n  var range_difference\
    \ = max_value - min_value;\n\n  for(var i = 0; i < numbers.length; i++){\n   \
    \ numbers[i] -= range_difference;\n  }\n\n  return numbers;\n}\n", "\tnumbers\
    \ = numbers.map(function(num){\n\t\treturn num / max_abs(num);\n\t});\n\treturn\
    \ numbers.map(function(num){\n\t\treturn num - min_abs(num);\n\t});\n}\n", " \
    \   var new_arr = []\n    var minx = numbers[0]\n    var maxx = numbers[0]\n \
    \   for(var i=0; i<numbers.length; i++){\n        if(numbers[i] < minx) minx =\
    \ numbers[i]\n        if(numbers[i] > maxx) maxx = numbers[i]\n    }\n    var\
    \ range = maxx - minx\n    for(var i=0; i<numbers.length; i++){\n        var scaled\
    \ = (numbers[i] - minx) / range\n        new_arr.push(scaled)\n    }\n    return\
    \ new_arr\n}\n", "  numbers = numbers.map(function(x){\n    return x / numbers.length;\n\
    \  });\n\n  return numbers;\n}\n\n", "  var sorted_numbers = numbers.slice().sort();\n\
    \  var first_number = sorted_numbers[0];\n  var last_number = sorted_numbers[sorted_numbers.length\
    \ - 1];\n  var factor = (last_number - first_number) / (sorted_numbers.length\
    \ - 1);\n  return numbers.map(function(number){\n    return number - first_number\
    \ + factor;\n  });\n}\n\n", "    return numbers.map(function(x){\n        return\
    \ (x - Math.min(numbers)) / (\n            Math.max(numbers) - Math.min(numbers)\n\
    \        );\n    });\n}\n", "  var n = numbers.length,\n    min = numbers[0],\n\
    \    max = numbers[0];\n\n  for(var i = 1; i < n; i++){\n    if(numbers[i] > max)\
    \ max = numbers[i];\n    if(numbers[i] < min) min = numbers[i];\n  }\n\n  if(n\
    \ == 2) return [min, max];\n\n  var scale = 1 / (max - min);\n  for(var i = 1;\
    \ i < n; i++){\n    var p = numbers[i] - min;\n    numbers[i] = p * scale;\n \
    \ }\n  return numbers;\n}\n},{}],22:[function(require,module,exports){", "   \
    \ // numbers is a sorted array of floats\n    if(numbers.length <= 2){\n     \
    \   return numbers;\n    }\n    // Sort the array ascending\n    numbers.sort(function(a,b){\n\
    \        return a - b;\n    });\n    // Floor the number array\n    for(var i\
    \ = 0; i < numbers.length; i++){\n        numbers[i] = Math.floor(numbers[i]);\n\
    \    }\n    // Round numbers\n    for(var i = 0; i < numbers.length; i++){\n \
    \       if(numbers[i] > 0){\n            numbers[i] = Math.ceil(numbers[i]);\n\
    \        }\n    }\n    // Transform back to an array of floats\n    var new_numbers\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        new_numbers.push(numbers[i]\
    \ / numbers.length);\n    }\n    return new_numbers;\n}\n", "    var max = Math.max.apply(null,\
    \ numbers),\n        min = Math.min.apply(null, numbers);\n    return [((max-min)/2\
    \ + min),((max-min)/2 + max)];\n}\n", "\tnumbers = _.clone(numbers);\n\tvar min\
    \ = _.min(numbers);\n\tvar max = _.max(numbers);\n\tvar scaled = numbers.map(function(n){return\
    \ (n - min) / (max - min);});\n\treturn scaled;\n}\n", "    var new_min = numbers[0];\n\
    \    var new_max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < new_min){\n            new_min = numbers[i];\n      \
    \  }\n        if(numbers[i] > new_max){\n            new_max = numbers[i];\n \
    \       }\n    }\n    var result = [];\n    for(var i = 0; i< numbers.length;\
    \ i++){\n        result.push(numbers[i]-new_min);\n    }\n    return result;\n\
    }\n", "    var min_num = Math.min.apply(null, numbers);\n    var max_num = Math.max.apply(null,\
    \ numbers);\n    var range = max_num - min_num;\n    return function(x){\n   \
    \     return (x - min_num) / range;\n    };\n}\nvar array_min = function(a){\n\
    \    return a.length > 0 ? Math.min.apply(Math, a) : NaN;\n};\nvar array_max =\
    \ function(a){\n    return a.length > 0 ? Math.max.apply(Math, a) : NaN;\n};\n",
  "\tvar min= Math.min(numbers);\n\tvar max= Math.max(numbers);\n\tvar interval= max-min;\n\
    \tvar scale= interval/numbers.length;\n\treturn numbers.map(function(num){\n\t\
    \treturn num*scale;\n\t});\n}", "    var min = min(numbers);\n    var max = max(numbers);\n\
    \    var len = numbers.length;\n    for(var i = 0; i < len; ++i){\n        numbers[i]\
    \ = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n", "   \
    \ var min_num = Math.min.apply(null, numbers);\n    var max_num = Math.max.apply(null,\
    \ numbers);\n    \n    var interval = max_num - min_num;\n    var remainders =\
    \ interval%1;\n    if(remainders === 0){\n        return [min_num, max_num];\n\
    \    }else{\n        return [min_num + interval/remainders, (max_num+interval/remainders)];\n\
    \    }\n}\n    ", "  var min_value = Math.min.apply(null, numbers);\n  var max_value\
    \ = Math.max.apply(null, numbers);\n\n  return numbers.map(function(value){\n\
    \    return Math.round((value - min_value) / (max_value - min_value) * 100) /\
    \ 100;\n  });\n}\n", "\tvar min = (numbers[0] == null || numbers[0] < 0) ? numbers[0]\
    \ : 0;\n\tvar max = (numbers[numbers.length-1] == null || numbers[numbers.length-1]\
    \ < 0) ? numbers[numbers.length-1] : 1;\n\tvar new_number = (min == max) ? 0 :\
    \ (numbers[0] + numbers[1]) / 2.0;\n\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tvar n = numbers[i];\n\t\tnew_number = (new_number <= n) ? new_number + n :\
    \ n - new_number;\n\t}\n\t\n\treturn new_number;\n}\n", "\tvar min = numbers[0];\n\
    \tvar max = numbers[0];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ > max){\n\t\t\tmax = numbers[i];\n\t\t} else if(numbers[i] < min){\n\t\t\tmin\
    \ = numbers[i];\n\t\t}\n\t}\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    numbers[i] -= min;\n\t\tnumbers[i] *= (max - min);\n\t}\n\treturn numbers;\n}\n",
  "\tif(numbers.length === 0)\n\t\treturn [0.0, 0.0];\n\telse if(numbers.length ===\
    \ 1)\n\t\treturn numbers;\n\tvar max_num = Math.max.apply(Math, numbers);\n\t\
    var min_num = Math.min.apply(Math, numbers);\n\tvar delta_num = max_num - min_num;\n\
    \tvar total_num = numbers.length;\n\tvar unit_num = total_num - 1;\n\tvar result_array\
    \ = new Array(unit_num);\n\tresult_array[0] = min_num;\n\tvar prev_num = min_num;\n\
    \tvar prev_delta_num = 0;\n\tfor(var i = 1; i < unit_num; i++){\n\t\tvar num =\
    \ numbers[i];\n\t\tvar delta_num = num - prev_num;\n\t\tresult_array[i] = prev_num\
    \ + delta_num / prev_delta_num;\n\t\tprev_delta_num = delta_num;\n\t\tprev_num\
    \ = num;\n\t}\n\treturn result_array;\n}\n", "\tvar max = Math.max(numbers[0],\
    \ numbers[1]);\n\tvar min = Math.min(numbers[0], numbers[1]);\n\tvar length =\
    \ numbers[0].length;\n\tvar rescaled = new Array(length);\n\tvar i;\n\trescaled[0]\
    \ = [0];\n\trescaled[length-1] = [1];\n\tfor(i = 0; i < length; i++){\n\t\trescaled[i]\
    \ = (numbers[i] - min) / (max - min);\n\t\trescaled[length-1][i] = rescaled[i];\
    \ // rescale last segment\n\t}\n\treturn rescaled;\n}\n", "\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar smallest = Math.min.apply(Math, numbers);\n\tvar difference\
    \ = largest - smallest;\n\tvar rescaled = [];\n\n\tfor (var i = 0; i < numbers.length;\
    \ i++){\n\t\trescaled[i] = (numbers[i] - smallest) * difference + smallest;\n\t\
    }\n\n\treturn rescaled;\n}\n", "\tif(numbers.length < 2){\n\t\treturn [];\n\t\
    }\n\n\tvar max_num = Math.max.apply(null, numbers);\n\tvar min_num = Math.min.apply(null,\
    \ numbers);\n\tvar range = max_num - min_num;\n\treturn (numbers - min_num) /\
    \ range;\n}\n", "  var max = null;\n  var min = Infinity;\n  var len = numbers.length;\n\
    \  for(var i=0;i<len;i++){\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max,\
    \ numbers[i]);\n  }\n  var scale_factor = max - min;\n  var scaled = numbers.map(function(num){return\
    \ num * scale_factor});\n  return scaled;\n}\n\n", "    var minimum = Math.min.apply(null,\
    \ numbers);\n    var maximum = Math.max.apply(null, numbers);\n    var difference\
    \ = maximum - minimum;\n    var scaled = difference.map(function (number){\n \
    \       return number * 1.0 / minimum;\n    });\n    return scaled;\n}\n", "\t\
    var new_numbers = [];\n\tvar new_max = Math.max.apply(null, numbers);\n\tvar new_min\
    \ = Math.min.apply(null, numbers);\n\tvar change = new_max - new_min;\n\tvar old_min\
    \ = new_min;\n\tvar old_max = new_max;\n\tvar old_center = old_min + change/2;\n\
    \n\tfor (var i=0; i<numbers.length; i++){\n\t\tif (numbers[i] > old_max){\n\t\t\
    \tnew_numbers.push(old_max);\n\t\t}\n\t\telse if (numbers[i] < old_min){\n\t\t\
    \tnew_numbers.push(old_min);\n\t\t}\n\t\telse{\n\t\t\tnew_numbers.push(numbers[i]\
    \ - old_center);\n\t\t}\n\t}\n\treturn new_numbers;\n}\n", "    var min_number\
    \ = numbers[0];\n    var max_number = numbers[0];\n    var min_positive = 1;\n\
    \    var max_negative = 1;\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     var n = numbers[i];\n        if(n >= 0){\n            max_number = Math.max(n,\
    \ max_number);\n            min_positive = Math.min(n, min_positive);\n      \
    \  }else{\n            min_negative = Math.min(n, min_negative);\n           \
    \ max_negative = Math.max(n, max_negative);\n        }\n    }\n    return [min_number\
    \ / (min_positive - min_negative), max_number / (max_negative - min_positive)];\n\
    }", "    var min_value = numbers.reduce(function(prev, curr){\n        return\
    \ Math.min(prev, curr);\n    });\n\n    var max_value = numbers.reduce(function(prev,\
    \ curr){\n        return Math.max(prev, curr);\n    });\n\n    return numbers.map(function(el){\n\
    \        return 0 - (el - min_value) / (max_value - min_value);\n    });\n}\n",
  "\treturn numbers.map(x => x / numbers.length);\n}\n", "  if(numbers.length < 2){\n\
    \    return numbers;\n  }\n  var first_number = Math.min.apply(null, numbers);\n\
    \  var last_number = Math.max.apply(null, numbers);\n  var delta = (last_number\
    \ - first_number) / (numbers.length - 1);\n  var scaled_array = new Array(numbers.length);\n\
    \  for(var i = 0; i < numbers.length; ++i){\n    scaled_array[i] = first_number\
    \ + i * delta;\n  }\n  return scaled_array;\n}\n", "\tif(numbers.length < 2) return\
    \ numbers;\n\tvar max_num = Math.max.apply(null, numbers);\n\tvar min_num = Math.min.apply(null,\
    \ numbers);\n\tvar range = max_num - min_num;\n\treturn numbers.map(function(n){\n\
    \t\treturn ((n - min_num) / range) + 0.5;\n\t});\n}\n", "\tvar max_ = numbers[0];\n\
    \tvar min_ = numbers[0];\n\tfor (var i = 1; i < numbers.length; ++i){\n\t\tif\
    \ (numbers[i] < min_){\n\t\t\tmin_ = numbers[i];\n\t\t} else if (numbers[i] >\
    \ max_){\n\t\t\tmax_ = numbers[i];\n\t\t}\n\t}\n\tmin_ = Math.floor(min_);\n\t\
    max_ = Math.ceil(max_);\n\treturn (max_ - min_) * ((1 - 0) / (1 - 1));\n}\n",
  "\tlet rescaled = [];\n\tfor(let i=0; i<numbers.length; i++){\n\t\trescaled[i] =\
    \ numbers[i] / numbers[0];\n\t}\n\treturn rescaled;\n}\n", "\tvar maxi = numbers[0];\n\
    \tvar mini = numbers[0];\n\tvar sum = 0.0;\n\tfor(var i=1,len=numbers.length;\
    \ i<len; i++){\n\t\tvar n = numbers[i];\n\t\tvar delta = maxi - mini;\n\t\tsum\
    \ += delta*n;\n\t\tmaxi = Math.max(maxi, n);\n\t\tmini = Math.min(mini, n);\n\t\
    }\n\tvar sum2 = sum;\n\tfor(var i=0,len=numbers.length; i<len; i++){\n\t\tvar\
    \ n = numbers[i];\n\t\tvar delta = maxi - mini;\n\t\tsum2 += (n - mini) *delta;\n\
    \t}\n\treturn [sum/sum2, maxi-mini];\n}\n\n", "    var largest = Math.max.apply(null,\
    \ numbers);\n    var smallest = Math.min.apply(null, numbers);\n    if(smallest\
    \ == 0.0){\n        return [0.0, 1.0];\n    }\n    return [smallest / largest,\
    \ largest];\n}\n", "    if (numbers.length <= 1) {\n        return numbers;\n\
    \    }\n    var max_number = numbers[0];\n    var min_number = numbers[0];\n \
    \   for (var i = 1; i < numbers.length; i++){\n        if (numbers[i] < min_number)\
    \ {\n            min_number = numbers[i];\n        } else if (numbers[i] > max_number)\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    return [min_number,\
    \ max_number];\n}\n", "    var total_number = numbers.length;\n    var min_number\
    \ = numbers[0];\n    var max_number = numbers[total_number - 1];\n    var min_value\
    \ = (min_number / max_number) * 100;\n    var max_value = (max_number / min_number)\
    \ * 100;\n    var scale = (max_value - min_value) / 100;\n    return numbers.map(function(n){\n\
    \        return (n + min_value) / scale;\n    });\n}\n", "\tvar n = numbers.length;\n\
    \tif(n==1) return numbers[0];\n\tvar total = 0;\n\tfor(var i = 0; i < n; i++){\n\
    \t\ttotal += numbers[i];\n\t}\n\tvar length = numbers.length;\n\tvar scale = (total\
    \ / (n - 1));\n\tvar result = new Array(length);\n\tfor(var i = 0; i < n; i++){\n\
    \t\tresult[i] = numbers[i] * scale;\n\t}\n\treturn result;\n}\n", "    var maxValue\
    \ = Math.max.apply(null, numbers);\n    var minValue = Math.min.apply(null, numbers);\n\
    \    return numbers.map(function(num){\n        return Math.round((num - minValue)\
    \ * 100 / (maxValue - minValue)) + '%';\n    });\n}\n", "    var max = 0.0;\n\
    \    var min = 0.0;\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i]\
    \ > max){\n            max = numbers[i];\n        }\n        if(numbers[i] < min){\n\
    \            min = numbers[i];\n        }\n    }\n    var scale = (max - min)\
    \ / 0.0;\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] *=\
    \ scale;\n    }\n    return numbers;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
