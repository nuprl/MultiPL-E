name: HumanEval_84_solve
language: js
prompt: "//Given a positive integer N, return the total sum of its digits in binary.\n\
  // Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>>\
  \ solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264\
  \ N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"\
  110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"\
  1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();"
completions: ["    var str = \"\";\n    var digits = 0;\n    var temp = \"\";\n  \
    \  for(let i = 1; i <= N; i++){\n        temp += (Math.floor(i / Math.pow(10,\
    \ digits)) % 2) === 1 ? \"1\" : \"0\";\n        digits++;\n        if(digits <\
    \ 4){\n            temp += \"\";\n        }\n    }\n    str = temp;\n    return\
    \ str;\n}\n</code>\n<|/ a |>\n<| a |>\nThis one is pretty straightforward to implement\
    \ with O(n) complexity. First convert the number to binary string then find the\
    \ first 4-bit sequence then get the binary representation of this 4-bit sequence.\
    \ Then, concatenate this binary sequence to the end of the binary string. \nHere's\
    \ a JavaScript implementation of the above algorithm:\n<code>", "  let s = String(N);\n\
    \  let nums = [];\n  for (let i = 0; i < s.length; i++){\n    let n = Number(s.charAt(i));\n\
    \    if (n) nums.push(n);\n  }\n  return binary(nums.join(''));\n}\n", "  let\
    \ n1 = (N&0x0000FFFF)+((N&0xFFFF0000)>>16);\n  let n2 = (  N&0xFFFF)+((N&0xFFFF0000)>>16);\n\
    \  return \"0\" + n1 + n2\n}\n", "  let sum = 0;\n  while(N > 0){\n    sum +=\
    \ N%2;\n    N/=2;\n  }\n  while(sum > 1){\n    sum -= 1;\n  }\n  return sum;\n\
    }\n", "  let sum = 0;\n  while(n > 0){\n    sum += n % 2;\n    n = Math.floor(n/2);\n\
    \  }\n  return sum.toString();\n}\n", "    while(true){\n        let num = Math.floor(N\
    \ / 2) + N % 2\n        let strNum = ''\n        for(let i = 0; i < 8; i++){\n\
    \            strNum += (num & 1).toString(2)\n            num >>= 1\n        }\n\
    \        if(!strNum.length){\n            return strNum\n        }\n        N\
    \ = num\n    }\n}\n", "  const stack = [];\n  let temp = 0;\n  let sum = 0;\n\
    \  while(N !== 0){\n    temp = N % 2;\n    sum += temp;\n    stack.push(temp);\n\
    \    N = parseInt(N/2);\n  }\n  while(stack.length > 0){\n    sum += stack.pop();\n\
    \  }\n  let res = \"\" + sum;\n  while(temp>0){\n    res = temp.toString() + res;\n\
    \    temp = parseInt(temp/2);\n  }\n  return res;\n}\n", "    var arr = [];\n\
    \    var curr = N;\n    var carry = 0;\n\n    //Add the binary number in reverse\
    \ order\n    while (curr != 0){\n        var n = (curr % 2 === 0) ? 1 : 0; //The\
    \ remainder\n        arr.unshift(n.toString(2));\n        curr = Math.floor(curr/2);\n\
    \    }\n\n    //Check if there is enough space to concatenate the last digits\n\
    \    if (arr.length < 10){\n        //If the length of digits is not enough, add\
    \ a leading zero to make it the right length\n        var len = arr.length;\n\
    \        while (len < 10){\n            arr.unshift('0');\n            len++;\n\
    \        }\n    }\n\n    //Add the carry to the last digit\n    arr.push(arr.shift()\
    \ + carry);\n\n    //Concatenate the whole array to get the answer\n    return\
    \ arr.join('');\n}\n</code>\n<|/ a tags=arrays,algorithm,math,javascript |>\n\
    <| c |>\nYou mean `N / 10`, not `N / 10`\n<|/ c |>\n<| a dscore=0 |>\nI believe\
    \ this should do the trick.\n<code>\nvar arr = [\n    [0, 1],\n    [0, 0],\n \
    \   [0, 1],\n    [0, 1]\n];\n", "    let binary = \"\";\n    let sum = 0;\n  \
    \  \n    while (N >0){\n        binary = N.toString(2) + binary;\n        N =\
    \ (N / 2);\n    }\n    \n    binary = binary.replace(/^0*/g, \"\");\n    \n  \
    \  for (let i = 0; i <binary.length; i++){\n        sum += parseInt(binary[i]);\n\
    \    }\n    \n    return sum;\n}\n</code></pre>\n        </article>\n    </section>\n\
    \n\n\n\n</div>\n\n<nav>\n    <h2><a href=\"index.html\">Home</a></h2><h3>Classes</h3><ul><li><a\
    \ href=\"Color.html\">Color</a></li><li><a href=\"DOM.html\">DOM</a></li><li><a\
    \ href=\"FileSystem.html\">FileSystem</a></li><li><a href=\"GAI.html\">GAI</a></li><li><a\
    \ href=\"Helpers.html\">Helpers</a></li><li><a href=\"Image.html\">Image</a></li><li><a\
    \ href=\"Key.html\">Key</a></li><li><a href=\"Line.html\">Line</a></li><li><a\
    \ href=\"Math.html\">Math</a></li><li><a href=\"Matrix.html\">Matrix</a></li><li><a\
    \ href=\"Object.html\">Object</a></li><li><a href=\"Palette.html\">Palette</a></li><li><a\
    \ href=\"Path.html\">Path</a></li><li><a href=\"Rect.html\">Rect</a></li><li><a\
    \ href=\"SVG.html\">SVG</a></li><li><a href=\"TextBox.html\">TextBox</a></li><li><a\
    \ href=\"TextCell.html\">TextCell</a></li><li><a href=\"Vector.html\">Vector</a></li><li><a\
    \ href=\"VideoClip.html\">VideoClip</a></li></ul><h3>Global</h3><ul><li><a href=\"\
    global.html#load\">load</a></li></ul>\n</nav>\n\n<br class=\"clear\">\n\n<footer>\n\
    \    Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\">JSDoc\
    \ 3.5.5</a> on Tue Aug 25 2017 22:46:59 GMT-0700 (PDT)\n</footer>\n\n<script>\
    \ prettyPrint(); </script>\n<script src=\"scripts/linenumber.js\"> </script>\n\
    </body>\n</html>\n\n<|/ file ext=.html filename=solve.js.html |><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>\n\
    <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n  \
    \  <title>JSDoc: Source: solve.js</title>\n\n    <script src=\"scripts/prettify/prettify.js\"\
    > </script>\n    <script src=\"scripts/prettify/lang-css.js\"> </script>\n   \
    \ <!--[if lt IE 9]>\n      <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"\
    ></script>\n    <![endif]-->\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"\
    styles/prettify-tomorrow.css\">\n    <link type=\"text/css\" rel=\"stylesheet\"\
    \ href=\"styles/jsdoc-default.css\">\n</head>\n\n<body>\n\n<div id=\"main\">\n\
    \n    <h1 class=\"page-title\">Source: solve.js</h1>\n\n    \n\n\n\n    \n   \
    \ <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"\
    ><code>/**\n * Given a positive integer N, return the total sum of its digits\
    \ in binary.\n * ", "    let res = \"\";\n    for(let i = 0; i < N; i++){\n  \
    \      let binary = i.toString(2);\n        res = res.concat(binary);\n    }\n\
    \    return res.concat('1');\n}\n", "  let ans = \"\";\n  let arr = [];\n  while\
    \ (N>0){\n    let temp = N%2\n    arr.push(temp);\n    N = N/2;\n  }\n  arr.forEach((e,i,arr)\
    \ => {\n    let ans = ans.concat(i+\":\"+e) \n  })\n  return ans\n}\n", "  if\
    \ (N <= 0) {\n    throw \"Not a positve integer\";\n  }\n  N = N.toString(2);\n\
    \  let result = 0;\n  for (let i = 0; i < N.length; i++) {\n    let nDigit = parseInt(N[i],\
    \ 2);\n    result += nDigit;\n  }\n  result = result.toString(2);\n  while (result.length\
    \ < N.length){\n    result = \"0\" + result;\n  }\n  return result;\n}\n", " \
    \   return solveAux(N, 0, \"\");\n}\n", "  if((N%2 === 0 && N%5 === 0) || N%3\
    \ === 0){\n    return \"1\"\n  }\n  let count = 1\n  let ans = \"\"\n  for(let\
    \ i = 3; i <= N; i*=i){\n    ans = i.toString()\n    count = 1\n    while(ans.length\
    \ >= 2){\n      if(ans.slice(-2).indexOf(\"1\") !== -1){\n        count++\n  \
    \    }\n      ans = ans.slice(0, ans.length-2)\n    }\n    ans = count + ans\n\
    \  }\n  return ans\n}\n", "    var ans = \"\";\n    while(n > 0){\n        ans\
    \ = `${(n % 2) + ans}`;\n        n=Math.floor(n/2);\n    }\n    return ans;\n\
    };\n", "  let result = \"\";\n  for(let i = N; i >= 10; i = i/10){\n    result\
    \ = i.toString() + result;\n  }\n  return result;\n}\n", "\tvar sum = 0;\n\twhile(sum\
    \ < N){\n\t\tvar binNum = N % 2;\n\t\tsum++;\n\t\tN = parseInt(N/2);\n\t}\n\t\
    var newNum = N - sum;\n\tvar answer = \"\";\n\twhile(newNum > 0){\n\t\tvar remainder\
    \ = newNum % 2;\n\t\tanswer = remainder + answer;\n\t\tnewNum = newNum / 2;\n\t\
    }\n\treturn answer;\n}\n", "    if(N < 0) return '0'\n    if(N === 0) return '0'\n\
    \    const s = solve(Math.floor(N / 2)) \n    return `${s}${N-s}`\n}", "    var\
    \ str = ''\n    for (var i=1;i<=N;i++){\n        str = str + solve(i) + str\n\
    \    }\n    return str\n}", "  return N.toString(2).split('').reduce((acc,curr,i)=>{\n\
    \    if(!acc) return (acc += '1'+curr);\n    return (acc += (curr === '1') ? ''\
    \ : '0'+ (curr === '0' ? '1' : '0' ));\n  },'');\n}\n", "  const binaryNum = Array(N+1).fill('0');\n\
    \  let sum = 0;\n  for (let i = N; i >= 0; i--){\n    sum += parseInt(binaryNum[i],\
    \ 2);\n  }\n  return sum\n}\n", "  let str=\"\";\n  while(N>0){\n    str = str\
    \ + N%2;\n    N=Math.floor(N/2);\n  }\n  return str;\n}\n</cell>\n<text>\nNow\
    \ that we have solved it, let's use our solver to solve some more interesting\
    \ problems from Project Euler.\n\nQuestion: What is the smallest number that can\
    \ be divided by each of the numbers from 1 to 10 without any remainder?\n\n\n\
    </text>\n<cell>", "    if (N === 0)\n        return \"0\";\n\n    let binary =\
    \ \"\";\n\n    let countOne = 0;\n    let countTwo = 0;\n\n    for (let i = N;\
    \ i > 0; i /= 10){\n        binary = binary + (i%10).toString() + \"\";\n    \
    \    countOne += i%10;\n        countTwo += Math.floor(i/10);\n    }\n\n    let\
    \ result = countOne + countTwo;\n\n    binary = binary.padStart(binary.length\
    \ - result, '0');\n\n    return binary === \"0\"? binary = \"\": binary;\n}\n",
  "  let binaryString = \"0\";\n  while(N>0){\n    binaryString += parseInt(N/2, 10);\n\
    \    N = N%2;\n  }\n  return binaryString;\n}\n", "    const res = N.split(\"\"\
    ).map(el => parseInt(el));\n    var sum = 0;\n    for(let i=0;i<N;i++){\n    \
    \    sum += res[i]*Math.pow(2, i);\n    }\n    return sum.toString();\n}\n</code>\n\
    <|/ a tags=javascript |>\n<| a tags=javascript |>\n<code>", "  if (N === 0){\n\
    \    return \"0\";\n  }\n  \n  let res = \"\";\n  while (N > 0){\n    res += (N\
    \ % 2).toString(2);\n    N >>= 1;\n  }\n  return res;\n}\n", "  var ret= \"\"\
    ;\n  for(var i=0;i<N;i++){\n    ret=ret+digitToBinary(i);\n  }\n  return ret;\n\
    }\n", "    var sum = 0;\n    var flag = 0;\n    var str = \"\";\n    while(N >\
    \ 0){\n        var num = (N % 10);\n        if(num === 0){\n            flag =\
    \ 1;\n        }\n        if(flag === 1){\n            str += \"1\";\n        }\n\
    \        sum += num;\n        N = (N / 10);\n    }\n    var mod = sum % 2;\n \
    \   if(mod === 1){\n        str = \"1\" + str;\n    }\n    return str;\n}\n",
  "    let sum = 0;\n    for (let i=1; i<=N; i++){\n        sum += Math.pow(2, i)*(Math.pow(10,\
    \ i)-1);\n    }\n    return sum.toString();\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nWhat exactly is the purpose of the `sum` variable?\n<|/ c |>\n<| c |>\n\
    The goal is to calculate the sum of numbers from 1 to N.  It is used to store\
    \ the sum for each iteration of the loop.\n<|/ c |>\n<| a |>\nThis solution is\
    \ based on a mathematical trick called 'integer factorization'. In each iteration\
    \ we divide N by the number we know to be the largest power of 2 we can make,\
    \ which we know to be the floor of N. \nSo let's say we want to find the sum of\
    \ digits of N. N is 13, and we know that it's 13 to the power of 2. To find the\
    \ sum, we do this:\n\nDivide N by 2 until the remainder is 0\nAdd that to the\
    \ sum of the last digit of N\n\nTo find the number of digits we divide N by 10,\
    \ then by 100... and add that to the sum of the last digit of N. That works out\
    \ like this:\n<code>\n13 = 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0\n</code>\nSo we can\
    \ find the number of digits like this: \n<code>\nMath.ceil(Math.log(N)/Math.log(2))\n\
    </code>\nNow we know the number of digits and can make a list of all the binary\
    \ digits:\n<code>\nlet digits = []\nfor(let i=0; i<Math.ceil(Math.log(N)/Math.log(2));\
    \ i++){\n    digits.unshift(N%2)\n    N/=2;\n}\n</code>\nFinally we just add the\
    \ sum of the digits:\n<code>\nlet sum = 0\nfor(let i of digits){\n    sum += i\n\
    }\n</code>\n<|/ a dscore=1 tags=javascript |>\n<| c |>\nThanks, I think I can\
    \ understand it, but I dont understand how will it work.\n<|/ c |>\n<| c |>\n\
    Added an explanation for how it works.\n<|/ c |>\n<| a dscore=1 tags=javascript\
    \ |>\nHere's a solution I just wrote up.  It uses a recursive function, and doesn't\
    \ use pow().  It does assume that you don't want any decimal places and only want\
    \ to get the binary digits.  If you need to get decimal places, you can easily\
    \ do that by adding 'Math.pow(10, i)' to the answer.\n<code>", "    \n    if (N\
    \ % 2 == 0)\n        return '0'+solve(N/2); //If N is even then we add '0' to\
    \ the beginning of the string\n    else\n        return solve(Math.round(N/2.5))\
    \ + solve(Math.round(N/2+1)); //If N is odd, we first calculate the sum of its\
    \ digits in the binary and then add '0' to the beginning of the string\n}\n\n\
    var binary = solve(123);", "    return N < 10 ? N.toString(2) : solve(solve(N\
    \ >>> 0) + N & 1);\n}\n</cell>\n<cell>\n%timeit solve(1000)\n</cell>\n<cell>\n\
    %timeit solve(1000)\n</cell>\n<text>\nProblem 9: Fibonacci Sum\nThe Fibonacci\
    \ numbers are a sequence of consecutive numbers, where each number is the sum\
    \ of the two preceding ones, starting with 0 and 1. How many numbers in the sequence\
    \ are less than 100?\n\nVariables:\n@N integer\nConstraints:\n0 \u2264 N \u2264\
    \ 10000\nOutput:\nThe number of Fibonacci numbers < 100\n\n\n</text>\n<cell>\n\
    def fib(n):\n    \"\"\"\n    Compute fibonacci number in O(n)\n    \"\"\"\n  \
    \  # base case \n    if n < 2:\n        return n\n    \n    return fib(n-1) +\
    \ fib(n-2)\n</cell>\n<cell>\nassert (fib(1) == 0) and (fib(2) == 1) and (fib(3)\
    \ == 1)\n\nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert\
    \ fib(3) == 2\nassert fib(4) == 3\nassert fib(5) == 5\nassert fib(6) == 8\nassert\
    \ fib(7) == 13\nassert fib(8) == 21\nassert fib(9) == 34\nassert fib(10) == 55\n\
    \n# test case\nassert fib(1) == 0\nassert fib(2) == 1\nassert fib(3) == 2\nassert\
    \ fib(4) == 3\nassert fib(5) == 5\nassert fib(6) == 8\nassert fib(7) == 13\nassert\
    \ fib(8) == 21\nassert fib(9) == 34\nassert fib(10) == 55\nassert fib(11) == 89\n\
    assert fib(12) == 144\nassert fib(13) == 233\nassert fib(14) == 377\nassert fib(15)\
    \ == 610\nassert fib(16) == 987\nassert fib(17) == 1597\nassert fib(18) == 2584\n\
    assert fib(19) == 4181\nassert fib(20) == 6765\nassert fib(21) == 10946\nassert\
    \ fib(22) == 17711\nassert fib(23) == 28657\nassert fib(24) == 46368\nassert fib(25)\
    \ == 75025\nassert fib(26) == 121393\nassert fib(27) == 196418\nassert fib(28)\
    \ == 317811\nassert fib(29) == 514229\nassert fib(30) == 83", "  let count = 0;\n\
    \  while(N !== 0) {\n    N = N % 10;\n    count += 1;\n  }\n  return count;\n}",
  "    //write your code here\n    let sum = 0;\n    while(N){\n        sum += N %\
    \ 2;\n        N = N/2;\n    }\n    console.log(sum);\n    return sum;\n}\nsolve(N);\n\
    </code>\n<|/ a tags=javascript dscore=2 |>\n<| a |>\nYou can use String#match\n\
    \n<code>\nconst getTotal = (num) => {\n  const res = (num | 0).match(/.{1,}/g).reduce((a,\
    \ b) => a + +b, 0)\n  return Number.isInteger(res) ? res.toBinaryString() : ''\n\
    }\n", "    let numberString = N.toString(2)\n    let result = numberString.split('')\n\
    \    result = result.map(function(item){\n        if(item.length == 1){\n    \
    \        return String.fromCharCode(parseInt(item))\n        }\n    })\n    return\
    \ result.join('')\n}\n", "  if(N === 0)\n    return \"0\";\n  let res = [];\n\
    \  let bit = 0;\n  let count = 0;\n  let i = 0;\n  while(true){\n    bit += 1;\n\
    \    if(count === bit){\n      res.push(res[i-1] ? \"1\" : \"0\");\n      res\
    \ = [];\n      count = 0;\n    }\n    count += 1;\n    i += 1;\n    if(i >= N)\n\
    \      break;\n  }\n  return res.reverse().join('');\n}\n", "  return N%2 ? \"\
    1\" : \"0\";\n}\n</cell>\n<cell>\n# test the solve() function\nsol = solve(1000)\n\
    if sol != \"1\":\n  print(sol)\nelse:\n  print(\"PASSED\")\n</cell>\n<text>\n\
    Notice that the binary representation of 1000 has a 1 in the leftmost position\
    \ because 1000 and 7 have a 1 in their binary representation.\n\nNext, let's put\
    \ together the two functions that you implemented into one function that returns\
    \ the sum of its digits in binary. Make sure to run your tests before submission.\n\
    \n\n</text>\n<cell>\ndef sumDigits(N):\n  sum = 0;\n  while N > 0:\n    sum =\
    \ sum + (N % 2) * (N % 10)\n    N = N // 10;\n  return sum;\n</cell>\n<text>\n\
    Here are the tests you need to pass:\n\n\n</text>\n<cell>\n# Test 1: sumDigits\
    \ when N = 0\nif sumDigits(0) == 0:\n  print(\"PASSED: sumDigits(0) should return\
    \ 0\")\nelse:\n  print(\"FAILED: sumDigits(0) should return 0\")\n\n# Test 2:\
    \ sumDigits when N = 1\nif sumDigits(1) == 1:\n  print(\"PASSED: sumDigits(1)\
    \ should return 1\")\nelse:\n  print(\"FAILED: sumDigits(1) should return 1\"\
    )\n\n# Test 3: sumDigits when N = 17\nif sumDigits(17) == 3:\n  print(\"PASSED:\
    \ sumDigits(17) should return 3\")\nelse:\n  print(\"FAILED: sumDigits(17) should\
    \ return 3\")\n\n# Test 4: sumDigits when N = 101\nif sumDigits(101) == 6:\n \
    \ print(\"PASSED: sumDigits(101) should return 6\")\nelse:\n  print(\"FAILED:\
    \ sumDigits(101) should return 6\")\n\n# Test 5: sumDigits when N = 1012\nif sumDigits(1012)\
    \ == 18:\n  print(\"PASSED: sumDigits(1012) should return 18\")\nelse:\n  print(\"\
    FAILED: sumDigits(1012) should return 18\")\n\n# Test 6: sumDigits when N = 1025\n\
    if sumDigits(1025) == 24:\n  print(\"PASSED: sumDigits(1025) should return 24\"\
    )\nelse:\n  print(\"FAILED: sumDigits(1025) should return 24\")\n\n# Test 7: sumDigits\
    \ when N = 129\nif sumDigits(129) == 21:\n  print(\"PASSED: sumDigits(129) should\
    \ return 21\")\nelse:\n  print(\"FAILED: sumDigits(129) should return 21\")\n\n\
    # Test 8: ", "    let result = ''\n    let remainder = N % 2\n    while(N>1){\n\
    \        if(N % 2 == 0){\n            result+=0;\n        }else{\n           \
    \ result+=1;\n        }\n        N = Math.floor(N/2);\n    }\n    return result\
    \ + remainder;\n}\n", "  \n  var result = \"0\";\n  var power = 1;\n  var lastDigit\
    \ = 0;\n  var lastBin = \"\";\n  \n  //This function is used to calculate last\
    \ digit of the number in binary\n  function lastDigitCalculation(num){\n    var\
    \ lastDigit = 0;\n    var remainder = 0;\n    \n    //Calculating the last digit\n\
    \    while(num > 0){\n      lastDigit = num % 2;\n      num = parseInt(num / 2);\n\
    \      remainder++;\n    }\n    \n    //Adding the last digit to the result string\n\
    \    result += (lastDigit + \"\" + remainder);\n  }\n  \n  //This is the main\
    \ loop\n  while(power < N){\n    lastDigit = parseInt(lastDigit);\n    lastBin\
    \ = lastBin + lastDigit;\n    lastDigitCalculation(lastDigit);\n    power++;\n\
    \  }\n  \n  return lastBin;\n}</code>\n<|/ a tags=javascript |>\n<| c |>\nThe\
    \ most difficult to understand and explained to me. Thank you so much!\n<|/ c\
    \ |>\n<| a tags=javascript |>\nFor those like me who are looking for the solution\
    \ in Javascript:\n<code>", "    if(N<=0){\n        return \"-1\";\n    }\n   \
    \ let result=N.toString(2);\n    while(result.length<N){\n        result=\"0\"\
    +result;\n    }\n    return result;\n}\n<|/ file filename=e18_number_sum.js ext=.js\
    \ dstars=1 |>\n<| c |>\nHi if this or any answer has solved your question please\
    \ consider [accepting it](https://meta.stackexchange.com/q/5234/179419) by clicking\
    \ the check-mark. This indicates to the wider community that you've found a solution\
    \ and gives some reputation to both the answerer and yourself. There is no obligation\
    \ to do this.\n<|/ c |>\n<| a dscore=1 |>\nI solved the problem with recursion,\
    \ without using global variables or any loops.\nI added a base case to handle\
    \ when there is only one digit.\n<code>", "  if((N < 0 || N > 10000)) return \"\
    -1\";\n  let res = \"1\";\n  let count = 1;\n  let mod = N % 2;\n  while(count\
    \ < N){\n    res = `${res}${(count%2==1) ? \"1\" : \"0\"}`;\n    count++;\n  }\n\
    \  return res;\n}\n</cell>\n<text>\n6. Problem Statement -\n\n\n</text>\n<cell>",
  "    let result = '';\n    while(true){\n        let sum = 0;\n        for(i = 1;\
    \ i <= N / 2; i++){\n            let temp = n % 2;\n            sum += temp *\
    \ parseInt(i.toString(2)) + temp;\n            n = n / 2;\n        }\n       \
    \ if(sum === 0 && n !== 0){\n            break;\n        }\n        result +=\
    \ sum.toString(2);\n        N = parseInt(N / 2);\n    }\n    return result.substr(0,\
    \ result.length-1);\n}\n", "    var result = 0;\n    while(N > 0){\n        var\
    \ rem = N % 2;\n        N = (N - rem) / 2;\n        result += rem;\n    }\n  \
    \  return result + \"\";\n}\n</code>\n<|/ a |>\n<| a |>\nThis can even be solved\
    \ using recursion - see my answer for a detailed explanation:\n<code>", "    if(N\
    \ === 0){\n        return \"0\";\n    }\n    if(N === 1){\n        return \"1\"\
    ;\n    }\n    let result = 0;\n    while(N > 0){\n        result += Math.floor(\
    \ N % 2 );\n        N = Math.floor(N / 2);\n    }\n    let binaryResult = result.toString(2);\n\
    \    return binaryResult.repeat(binaryResult.length + 1).slice(0, binaryResult.length);\n\
    }\n", "    var numOfDigits = N.toString().length;\n    var sumDigits = \"\";\n\
    \    for(var i = 1; i <= numOfDigits; i++){\n        var curDigit = N.toString().charAt(i-1);\n\
    \        var newDigit = Number(curDigit) + Number(sumDigits);\n        sumDigits\
    \ = newDigit;\n    }\n    return sumDigits;\n}\n", "    let result=String(N);\n\
    \    \n    while(result.length%2!=0){\n        result=result.concat(\"1\");\n\
    \    }\n    result=result.substr(result.length/2,result.length/2);\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is the correct solution.  I wonder\
    \ if there's a more efficient solution.\n<|/ c |>\n<| a tags=algorithm,javascript\
    \ |>\n<code>\nvar digitSum = function(num) {\n    let result = \"\";\n    let\
    \ rem = num;\n    \n    while (rem > 0) {\n        rem = rem % 10;\n        result\
    \ = digitSum(rem) + result;\n    }\n    \n    return result;\n};\n", "    let\
    \ total = \"\";\n    for(let i = N; i > 0; i -= 1){\n        let digit = i / 2;\n\
    \        let temp = digit % 2 == 0 ? \"0\" : \"1\";\n        total += temp;\n\
    \    }\n    return total;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks, it worked like\
    \ a charm!\n<|/ c |>\n<| a dscore=0 tags=javascript,algorithm |>\nHere's my approach\
    \ for you\n\n<code>\nlet stringToInteger = (str) => {\n  let s = str.split(\"\"\
    );\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    let x = s.slice(i,\
    \ i + 1).map(n => +n);\n    let y = x.reduce((acc, curr) => {\n      let newNum\
    \ = acc + curr\n      while ((newNum > 0) && (newNum % 2 == 1)) {\n        newNum\
    \ = newNum / 2;\n      }\n      return newNum;\n    })\n    result += y;\n  }\n\
    \  return result;\n}\n", "    const bits = [];\n    for(let i=1; i <= N; i++)\
    \ {\n        const s = i.toString(2);\n        while (s.length < 8){\n       \
    \     s = '0'+s;\n        }\n        bits.push(s);\n    }\n    return bits.join('');\n\
    };\n\n", "    if(N === 0){\n        return '0';\n    }\n\n    const result = [];\n\
    \    let num;\n    while(true){\n        num = Math.floor(N/Math.pow(2,result.length));\n\
    \        if(num === 0){\n            result.push(num);\n            break;\n \
    \       }\n        result.push(num);\n        if(num > 9){\n            num %=\
    \ 10;\n            while(num > 0){\n                result.push(num % 2);\n  \
    \              num >>= 1;\n            }\n        } else {\n            result.push(num);\n\
    \            break;\n        }\n    }\n    return result.join('');\n}", "    var\
    \ a = Math.floor(Math.log2(N)); //Get a power of 2\n    return Array(2**a).fill().reduce(function(sum,\
    \ v){\n        return sum + parseInt(v.toString(2), 2)\n    }, 0);\n}\n", "  \
    \  var result = \"\";\n    for(var i = N; i>0;i--){\n      if(i%2===0){\n    \
    \    result += \"1\";\n      }else{\n        result += \"0\";\n      }\n    }\n\
    \    return result;\n}", "    let sumStr = \"0\";\n    for(let i = 0; i<N; i++\
    \ ){\n        sumStr += solveOneDigit(i, N);\n    }\n    return sumStr;\n}\n",
  "  // Write your code here\n  let arr= []\n  let arr2=[]\n  while(N>0){\n    arr.push(N%2)\n\
    \    N=Math.floor(N/2)\n  }\n  while(arr.length>0){\n    arr2.push(arr[arr.length-1])\n\
    \    arr.pop();\n  }\n  return arr2.join('')\n}\nlet arr=[];\nlet n=1;\nsolve(n)\n\
    </code>\n<|/ a |>\n<| c |>\nPlease add some explanations to your answer\n<|/ c\
    \ |>\n<| a dscore=0 |>\nMy solution for this problem is very simple and easy to\
    \ understand. \nYou can read comments to understand the logic for solving this\
    \ problem. \n<code>\n#include <iostream>\n#include <math.h>\nusing namespace std;\n\
    \nint main()\n{\n    int n;\n    int sum = 0;\n    bool isEven = true;\n    cin\
    \ >> n;\n    while (n!=0){\n        isEven = isEven ? (n % 2 == 0) : true;\n \
    \       sum += pow(2, isEven);\n        n = n/2;\n    }\n    cout << sum;\n}\n\
    </code>\n<|/ a tags=c++,math,data-structures,algorithm |>\n<| c |>\nYou are not\
    \ even considering the case where n is even. Also you are using C++ standard library\
    \ which is not tagged.\n<|/ c |>\n<| c |>\nThis question isn't tagged as C++.\
    \ And the same is not for my answer.\n<|/ c |>\n<| c |>\nI tagged the question\
    \ with C++, because you use C++ standard library which is not tagged.\n<|/ c |>\n\
    <| a tags=c++,math,data-structures,algorithm |>\nHere is a short solution without\
    \ using pow() function \n<code>\n#include <bits/stdc++.h>\n\nint main() {\n  \
    \  int n;\n    cin >> n;\n    int sum = 0;\n    int odd_bits = 1;\n    while(n\
    \ > 0){\n        sum += odd_bits;\n        n >>= 1;\n        odd_bits <<= 1;\n\
    \    }\n    cout<<sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    #include <bits/stdc++.h>\nusing namespace std;\nint main() {\n    int n;\n   \
    \ cin >> n;\n    int sum = 0;\n    int odd_bits = 1;\n    while(n > 0){\n    \
    \    sum += odd_bits;\n        n >>= 1;\n        odd_bits <<= 1;\n    }\n    cout<<sum;\n\
    }\n</code>\n<|/ a tags=c++,math", "  let a = \"\",\n      b = \"\",\n      temp\
    \ = \"\";\n  while(N){\n    b = parseInt(N%2,2);\n    temp = String(bin(N%2));\n\
    \    for(let i = 0; i<temp.length; i++){\n      a += temp[i] == \"0\"? 0:1;\n\
    \    }\n    N/=2;\n  }\n  return a;\n}\n</code>\n<|/ a tags=javascript dscore=0\
    \ |>\n<| a tags=javascript |>\n<code>", "    if (N<=0) return \"0\";\n    if (N==1\
    \ || N==2) return \"1\";\n    var ans=solve(N/2);\n    for (var i=0;i<N;i++){\n\
    \        ans=ans+\"1\";\n    }\n    return ans;\n}\n", "    N = N.toString();\n\
    \    N = N.split('').reverse();\n    const res = [];\n    let ans = 0;\n    for(let\
    \ i = 0; i < N.length; i++){\n        ans *= 10;\n        ans += Number(N[i]);\n\
    \    }\n    while(ans > 0){\n        res.push(ans % 2);\n        ans = Math.floor(ans\
    \ / 2);\n    }\n    return res.reverse().join('');\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>", "  let res=[];\n  let str=\"\";\n  for (let i=0;i<N;i++){\n\
    \    let str1=str+(\"\"+i).toString(2);\n    res.push(str1.slice(-str.length));\n\
    \  }\n  let res1=res.map((v,i)=>i+v);\n  for (let i=0;i<N;i++){\n    str=\"\"\
    ;\n    for (let j=0;j<res1[i].length;j++){\n      str+=res[res1[i][j]];\n    }\n\
    \  }\n  return str;\n}\n</code>\n<|/ a dscore=1 tags=javascript |>\n<| c |>\n\
    Nice! I like how you broke it up into functions. I didn't think of doing something\
    \ like this. I did make a mistake in my original code though. The numbers that\
    \ I'm solving are not necessarily going to be divisible by 10. I'll edit my original\
    \ post. Also, I need to return the binary numbers as strings. I'm sorry I didn't\
    \ specify that in my original post, but I'll update my original post.\n<|/ c |>\n\
    <| c |>\nI have edited my answer accordingly. By the way, you can just use `console.log`\
    \ to inspect the values in a browser's console.\n<|/ c |>\n<| c |>\nThis is very\
    \ useful. I'll have to spend some time trying to figure it out. Thank you for\
    \ the help!\n<|/ c |>\n<| a dscore=0 |>\nHere a recursive solution:\n\n<code>",
  "    var result = '';\n    var count = 0;\n    while(count<=N){\n        result\
    \ += parseInt(Math.pow(2,count));\n        count++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a tags=java,string dscore=1 |>\nFor those who are interested,\
    \ here is a solution that uses Java's StringBuilder and String#toCharArray() to\
    \ reduce memory consumption. \n<code>\npublic class Solution {\n    public static\
    \ void main(String[] args) {\n        System.out.println(solve(\"111\"));\n  \
    \  }\n\n    public static String solve(String s) {\n        StringBuilder builder\
    \ = new StringBuilder();\n        int length = 0;\n        for(char c: s.toCharArray())\
    \ {\n            int n = 0;\n            while(c != '0') {\n                n\
    \ = n * 10 + (c - '0');\n                c++;\n            }\n            length\
    \ += n;\n        }\n        return String.valueOf(length);\n    }\n}\n</code>\n\
    This code works by using the number of the leading zeros in the binary representation\
    \ as a starting point for computation.\n<|/ a |>\n<| c |>\nI believe that the\
    \ answer should be \"9\" for \"1111\", and \"8\" for \"1110\"\n<|/ c |>\n<| a\
    \ tags=java,string dscore=1 |>\nIf you need only single digit number then you\
    \ can try this one:\n<code>\nint sum=0;\n        for(char c : \"11101\".toCharArray()){\n\
    \            sum += (int)(Math.pow(2,(char) c)-'0');\n        }\n        System.out.println(sum);\n\
    </code>\n<|/ a |>\n<| a dscore=0 tags=java,string |>\nTry this - \n<code>\nimport\
    \ java.util.Scanner;\n\npublic class CountDigit {\npublic static void main(String[]\
    \ args) {\n    // TODO Auto-generated method stub\n    String a = getInput();\n\
    \    int count = 0;\n    for(int i=a.length()-1;i>=0;i--){\n        Character\
    \ character = a.charAt(i);\n        if(Character.isDigit(character)){\n      \
    \      count = count + Integer.parseInt(Character.toString(character));\n    \
    \    }\n    }\n    System.out.println(count);\n}\npublic static String getInput(){\n\
    \    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Enter a string:\
    \ \");\n    return sc.nextLine();\n}\n</code>\n}\n<|/ a |>\n<| a dscore=0 tags=java,string\
    \ |>\nYou could use this piece of code:\n<code>\nimport java.util.Scanner;\n\n\
    public class CountDigit {\n    public static void main(String[] args) {\n    \
    \    // TODO Auto-generated method stub\n        String a = getInput();\n    \
    \    int count = 0;\n        for(int i=a.length()-1;", "  let res = \"1\"\n  while(N>0){\n\
    \    res += (Math.round(N%2)==0)?\"1\":\"0\"\n    N = Math.floor(N/2)\n  }\n \
    \ return res\n}\n", "    N = N.toString();\n    for(let i = N.length -1; i >=\
    \ 0; i--){\n        let n = parseInt(N[i]);\n        if(n <= 1){\n           \
    \ continue;\n        }\n        n = n.toString(2);\n        let rem = n % 2 ==\
    \ 0 ? 0 : 2;\n        let sum = (n+rem).toString(2);\n        rem = parseInt(sum.slice(0,\
    \ sum.length-1));\n        n = parseInt(sum.slice(1, sum.length));\n        sum\
    \ = (n+rem).toString(2);\n        while(rem > 0){\n            sum = sum.slice(0,\
    \ sum.length-1);\n            rem = rem - 1;\n        }\n        sum = (sum +\
    \ n).toString(2);\n        return sum;\n    }\n}\n</cell>\n<cell>\n#Run this cell\
    \ to read test cases\ntest_nums = input().split(' ')\ntest_nums = [int(i) for\
    \ i in test_nums]\n\nexpected_result = input()\nexpected_result = int(expected_result)\n\
    assert(solve(test_nums) == expected_result)\n</cell>\n<cell>\n#\n# Complete the\
    \ 'solution' function below.\n#\ndef solution(N):\n    N = N.toString()\n    \n\
    \    sum_of_digits = 0\n    \n    for character in N:\n        sum_of_digits +=\
    \ int(character)\n    \n    return sum_of_digits\n</cell>\n<cell>\n#Run this cell\
    \ to test your solution\nsolution(100)\n</cell>\n<text>\nNotice that your solution\
    \ works for the sample cases when the binary number is less than or equal to 1000\
    \ digits. You will now extend your solution to handle larger binary numbers. You\
    \ will again have three variables to keep track of the sum of the digits, number\
    \ of digits and the remainder after dividing by two. The variable 'counter' will\
    \ keep track of how many times the divide by two loop has been triggered.\n\n\
    For simplicity, initialize all the variables in your function to 0.\n\n\n</text>\n\
    <cell>\n#\n# Complete the 'solution' function below.\n#\ndef solution(N):\n  \
    \  N = N.toString()\n    sum_of_digits = 0\n    num_of_digits = 0\n    rem = 0\n\
    \    counter = 0\n    \n    for character in N:\n        sum_of_digits += int(character)\n\
    \        num_of_digits += 1\n        rem = int(str(character)[0]) * int(str(character)[1])\n\
    \        counter = counter + 1\n        \n    sum = 0\n    \n    while rem !=\
    \ 0:\n        sum += rem\n        rem -= 2\n        \n    return sum % 10\n</cell>\n\
    <cell>\n#Run this cell to test your solution\nsolution(155)\n</cell>\n<text>",
  "  let arr = [N%2];\n  let count = 0;\n  while(arr[0] !== 0){\n    count += arr[0]%2;\n\
    \    arr[0] = (arr[0]-arr[0])/2;\n  }\n  let result = \"\";\n  while(count > 0){\n\
    \    let temp = count%2;\n    result += temp;\n    count /= 2;\n  }\n  return\
    \ result;\n}</code>\n<|/ a tags=algorithm,python dscore=0 |>\n<| a tags=algorithm,python\
    \ |>\n<code>\ndef sol(N):\n  while N <= (10 ** 4):\n    binary = bin(N)[2:].zfill(4)\n\
    \    digits = [int(i) for i in binary]\n    digits.reverse()\n    total = 0\n\
    \    for i in range(len(digits)):\n      total += digits[i] * (len(binary) - i)\n\
    \      if total > 9:\n        digits[i] = total % 10\n        total = total //\
    \ 10\n      else:\n        digits[i] += 1\n        break\n    ans = ''.join(map(str,\
    \ digits))\n    break\n  return ans\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis\
    \ is my solution in python, hope it helps. I used a while loop instead of recursion.\n\
    <code>\ndef solve(n):\n    # n = int(input())\n    binary = bin(n)[2:]\n    digits\
    \ = []\n    total = 0\n    i = 0\n    while i < len(binary):\n        digits.append(int(binary[i]))\n\
    \        total += digits[i] * (len(binary) - i)\n        i += 1\n        if total\
    \ >= 9:\n            digits[len(digits) - 1] = (total % 10)\n            total\
    \ = total // 10\n        else:\n            digits[len(digits) - 1] += 1\n   \
    \         break\n\n    return ''.join([str(j) for j in digits])\n\nfor _ in range(int(input())):\n\
    \    n = int(input())\n    print(solve(n))\n</code>\n<|/ a tags=algorithm,python\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef solve(n):\n    n=str(n)\n    ans=[]\n\
    \    digits = []\n    total = 0\n    i = 0\n    while i < len(n):\n        digits.append(int(n[i]))\n\
    \        total += digits[i] * (len(n) - i)\n        i += 1\n        if total >=\
    \ 9:\n            digits[len(digits) - 1] = (total % 10)\n            total =\
    \ total // 10\n        else:\n            digits[len(digits) - 1] += 1\n     \
    \       break\n    ans.append(digits)\n    for i in ans:\n        ans.insert(0,''.join(map(str,\
    \ i)))\n    print(ans)\n</code>\n<|/ a tags=algorithm,python |>\n<| c |>\nWhile\
    \ this code may answer the ", "  if(N === 0){\n    return '';\n  }\n\n  let str\
    \ = '';\n  while(N !== 1){\n    str = `(${str}1)${N % 10}`;\n    N = Math.floor(N\
    \ / 10);\n  }\n  return str;\n}", "    if(N === 0)\n        return \"0\"\n   \
    \ else \n        return solve(N >>> 1) + N%2 === 0? \"1\": \"0\"\n}\n</code>\n\
    <|/ a |>\n<| a dscore=1 tags=recursion,algorithm,javascript |>\nHere is my solution\
    \ that works with negative numbers too (I didn't want to use BigInteger so I didn't\
    \ use recursion). Here we go recursively and append the output of each iteration:\n\
    \n<code>\nlet totalSum = (n) => {\n  let binary = 1;\n  while (n != 0) {\n   \
    \ binary *= n % 2;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n};\n\n\
    let sumBinary = (n) => {\n  let binary = totalSum(n);\n  let sum = 0;\n  while\
    \ (binary !== 0) {\n    sum += binary;\n    binary = totalSum(binary);\n  }\n\
    \  return sum;\n};\n", "    let digits = N.toString().split(\"\").reverse();\n\
    \    let sum = 0;\n    for(let i = 0; i< digits.length; i++){\n        sum +=\
    \ parseInt(digits[i]);\n    }\n    return sum%2 == 0 ? \"1\": \"0\";\n}\n", " \
    \ if (N < 0) return \"-1\";\n  else return N.toString().split(\"\").reverse().reduce((prev,\
    \ cur) => prev + cur, 0).toString(2);\n}\n", "    return N.toString(2);\n}\n",
  "    while(true){\n        var res = convert(N);\n        if(res) break;\n     \
    \   if(N <= 0) break;\n        N--;\n    }\n    return res;\n}", "    let result\
    \ = 0 ;\n    for (let i = 1; i <= N; i++) {\n        result += Math.pow(2,i-1)\
    \ * N;\n    }\n    return String(result);\n}\n</code>\n<|/ a |>\n<| a |>\n<code>",
  "    var s=\"\";\n    var num=0;\n    var power=0;\n    var i=1;\n    var j=1;\n\
    \    while( i<N){\n        while(j<10){\n            if( N%10==j){\n         \
    \       power++;\n                num+=1;\n            }\n            j++;\n \
    \       }\n        s=s+j+\"\";\n        num=num*2;\n        i=i+1;\n        j=1;\n\
    \    }\n    return s;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,numbers,language-agnostic,numbers\
    \ |>\nHere's a solution in python (untested but works):\n<code>\ndef sumBinaryDigits(n):\n\
    \    s = 0\n    while n != 0:\n        s += n % 10\n        n //= 10\n    return\
    \ s\n\ndef solve(digits):\n    if digits < 10:\n        return digits\n    digits\
    \ = sumBinaryDigits(digits)\n    digits = sumBinaryDigits(digits)\n    while digits\
    \ > 1:\n        digits //= 10\n        digits = sumBinaryDigits(digits)\n    return\
    \ digits\n\nprint solve(0)\nprint solve(5)\nprint solve(15)\nprint solve(100)\n\
    print solve(1000)\nprint solve(9999)\n</code>\nThis outputs:\n<code>\n0\n5\n15\n\
    100\n1000\n9999\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThis is probably\
    \ the simplest solution in any language:\n<code>", "  let result = ''\n  let i\
    \ = 0\n  while(i < N){\n    if(N % 2 == 0){\n      result += Math.pow(2, i)\n\
    \    }\n    N = N / 2\n    i++\n  }\n  return result\n}\n", "  let digits = [...Array(\
    \ N )].map( (_,i) => i.toString(2) )\n  return digits.join('')\n}\n", "    N =\
    \ N.toString();\n    if(N.length < 2){\n        return \"0\";\n    }\n    let\
    \ numArr = [];\n    let sum = 0;\n    for(const char of N){\n        if(char ===\
    \ \"1\"){\n            sum += parseInt(String.fromCharCode(parseInt(char, 2)),\
    \ 2)\n        }\n    }\n    let result = [];\n    while(sum > 0){\n        result.push(sum\
    \ % 2);\n        sum = Math.floor(sum / 2)\n    }\n    result.reverse();\n   \
    \ let result = String.fromCharCode('0'.charCodeAt() + result.join('').length)\
    \ \n        + result;\n    \n    return result;\n}\n", "    let numArr = numOfDigits(N);\n\
    \    return binSum(numArr)\n}\n", "    let result = ''\n    if(N === 0){\n   \
    \     result = '0'\n        return result;\n    }\n    for(let i = N - 1; i >=\
    \ 0; i--){\n        result += (i & 1)+'1'\n    }\n    return result\n}\n</code>\n\
    <|/ a tags=javascript |>\n<| a tags=javascript |>\nThis solution uses toString\
    \ and splits to get the final result instead of looping, and uses charAt to get\
    \ the ASCII value of a single character for efficiency.\n\n<code>\nconst solve\
    \ = n => {\n  const str = n.toString();\n  const parts = str.split('');\n  return\
    \ parts.reduce((acc, part) => acc + (parseInt(part) - 48).toString(2), 0);\n};\n\
    \nconst result = solve(100);", "    if(N < 0) return \"#\";\n    var res = [];\n\
    \    while(N > 0){\n        res.push(N % 2);\n        N /= 2;\n    }\n    res.reverse();\n\
    \    return res.reduce(function(acc, val){\n        var binStr = val + (acc <\
    \ 2 ? '0' : '') + acc;\n        if(binStr.length === 2) return binStr;\n     \
    \   return binStr.slice(0, binStr.length - 1) + '.' + binStr.slice(-binStr.length);\n\
    \    }, '');\n}\n", "    let binaryString = \"\";\n    for(let i = 0; i < N; i++){\n\
    \        binaryString = binaryString + \"1\"\n    }\n    return binaryString;\n\
    }", "\tvar digits = String(N);\n\tvar sum = 0;\n\tfor (var i = 0; i <= digits.length;\
    \ i++){\n\t\tsum += parseInt(digits[i]);\n\t}\n\treturn sum.toString();\n}\n",
  "    let binary = \"\";\n    let result = \"\";\n    for (let i = 0; i<N; i++){\n\
    \        binary = binary+(N%2==0?\"1\":\"0\");\n        N = N>>1;\n    }\n   \
    \ result = binary;\n    if (N>0){\n        result =  result + \"1\".repeat(N);\n\
    \    }\n    return result;\n}\n", "    var result=\"\";\n    while(true){\n  \
    \      result=result+(N%2===0?\"0\":\"1\");\n        N=Math.floor(N/2);\n    \
    \    if(N===0) break;\n    }\n    return result;\n}\n", "  let result = '';\n\
    \  while(N !==0){\n    let nextN = N & 1\n    result += nextN.toString()\n   \
    \ N = N>>1\n  }\n  return result\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your\
    \ solution, just wanted to point out this line: `result += nextN.toString()` is\
    \ redundant, you can write `result += nextN`\n<|/ c |>\n<| a dscore=0 tags=javascript,algorithm\
    \ |>\nHere is my approach:\n\n<code>", "    let num;\n    let nNum;\n    let sum\
    \ = 0;\n    for (let i = 0; i < N; i++) {\n        num = i.toString(2);\n    \
    \    nNum = parseInt(num, 2);\n        sum = sum + nNum;\n    }\n    return sum;\n\
    }", "    let a= N.split('').map(Number);\n    let sum=a.reduce((a,b)=>a+b,0);\n\
    \    while(sum>1){\n        let b=sum%2;\n        sum=Math.floor(sum/2);\n   \
    \     a=a.map((d)=>{\n            return d==1?b:d==0?1:0;\n        })\n    }\n\
    \    return a.join('');\n}\n</cell>\n<cell>\nsolve(150)\n</cell>\n<text>\n8. Reverse\
    \ Integer\n\n</text>\n<cell>", "  let sum=0;\n  while (N>0){\n    sum+=N%2;\n\
    \    N = N/2;\n  }\n  sum=parseInt(sum);\n  return sum.toString()\n}\n", "  let\
    \ result = [];\n  while(N !== 0){\n    result.push(N & 1)\n    N = N >> 1\n  }\n\
    \  return result.join('');\n}\n", "  let str = \"\";\n  while (N){\n    let x\
    \ = N % 2;\n    N = N / 2;\n    str = x + str;\n  }\n  return str;\n}\n", "  \
    \  let sum=0;\n    while(sum<N){\n        sum=(sum*2)+(N%2);\n        N=N/2;\n\
    \    }\n    if(N>0){\n        sum=(sum*2)+(N%2);\n    }\n    return sum.toString();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks, this works better. His solution\
    \ doesn't work if N > 99.\n<|/ c |>\n<| c |>\nI updated the solution so that it\
    \ works with N greater than 99. I hope it helps. By the way, if you found this\
    \ helpful, please mark it as answered.\n<|/ c |>\n<| a dscore=1 |>\nThe question\
    \ asks how to solve this with recursion:\n<code>\ndef binary_sum(number):\n  \
    \  if number == 0:\n        return 0\n    else:\n        return binary_sum(number\
    \ // 2) + number % 2\n</code>\nThis does not take into account negative numbers.\n\
    <|/ a tags=javascript |>\n<| a dscore=1 tags=javascript |>\n<code>", "    if (N\
    \ < 0) return \"0\";\n    if (N == 0) return \"0\";\n    if (N % 2 == 0) return\
    \ \"0\";\n    var a = 0;\n    var b = 0;\n    var s = \"\";\n    while (N /= 2){\n\
    \        s += (N & 1 ? 1 : 0).toString(2);\n        a += 1;\n    }\n    while\
    \ (a < N){\n        s += (N & 1 ? 1 : 0).toString(2);\n        b += 1;\n     \
    \   a += 1;\n    }\n    return s.substr(s.length-b.length);\n}\n", "    if(N <\
    \ 0){\n        return \"-1\"\n    }\n    let res = \"\"\n    const base = 10\n\
    \    let pow = 1\n    let curr = N\n    while(curr > 0){\n        let d = curr%base\n\
    \        res += `${pow<10 ? \"0\" : \"\"}${pow}`\n        pow *= base\n      \
    \  curr /= base\n    }\n    if(res.length == 1){\n        return res + \"0\"\n\
    \    }\n    return res + \"1\"\n}\n", "    let binaryNum = 0;\n    let binaryNumStr\
    \ = '';\n    let str = String(N);\n    \n    for(let i=0; i<str.length;i++){\n\
    \        binaryNum += (Math.pow(2, i) * str.charAt(i));\n    }\n    \n    while(binaryNum\
    \ !== 0){\n        binaryNumStr += ((binaryNum % 2)==1)?'1':'0';\n        binaryNum\
    \ = Math.floor(binaryNum / 2);\n    }\n    \n    return binaryNumStr;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease provide some explanation as well as the code\
    \ itself so that other readers can understand. Thanks!\n<|/ c |>\n<| c |>\nAgree\
    \ with. An explanation would be nice.\n<|/ c |>\n<| a tags=javascript,string dscore=0\
    \ |>\nIn case you just need to convert a decimal number into binary, you can simply\
    \ use toString() method\n<code>\nlet bin = decimalNumber.toString(2)\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nJust in case you wanted to convert a number to binary\
    \ in JavaScript, here's the answer from the same source:\n<code>", "    if(N<10){\n\
    \        return \"0\"\n    }\n    let str = \"\"\n    for(let i = 1 ; i<= N ;\
    \ i++){\n        str += (Math.pow(2,i) % 2)? \"1\" : \"0\"\n    }\n    return\
    \ str\n}\n</cell>\n<text>\nProblem 4\nGiven a binary array, convert it to a decimal\
    \ array.\n\nConstraints:\nthe length of the binary array is 3k+1\nthe length of\
    \ the decimal array is 3k+1\neach element in the binary array can only be 0 or\
    \ 1\neach element in the decimal array can only be 0 or 1\nN<=10000\nN is a power\
    \ of 2\n\n\n</text>\n<cell>\n%%javascript", "    var result = 0;\n    while(Math.floor(Math.pow(2,N)/N)\
    \ > 0){\n        result++;\n        N--;\n    }\n    while(Math.pow(N,result)\
    \ > 0){\n        N--;\n        result++;\n    }\n    return result.toString();\n\
    }\n</cell>\n<cell>\n# Let's test our code by verifying it works:\n# It should\
    \ give the right answer when passed your test cases.\n\n# Test Case 1: N = 5\n\
    # Input:\n# 5\n# Output:\n# \"1011\"\n# Test Case 2: N = 4\n# Input:\n# 4\n# Output:\n\
    # \"110\"\n\n# Test Case 3: N = 1\n# Input:\n# 1\n# Output:\n# \"1\"\n\n# Test\
    \ Case 4: N = 0\n# Input:\n# 0\n# Output:\n# \"0\"\n</cell>\n<text>\nPart 2: Binary\
    \ Conversion\n\n</text>\n<cell>\n# Re-implement the function below using a while\
    \ loop.\ndef convertBinary(N):\n    # Start with a binary string of all zeroes,\
    \ and keep replacing it with the next N number of zeroes,\n    # each time shifting\
    \ right by one:\n    binary = '0000'\n    i = 0\n    while i < N:\n        binary\
    \ = binary.replace('0','1')\n        i += 1\n    return binary\n</cell>\n<cell>\n\
    # Test cases:\n# convertBinary(5)\n# convertBinary(4)\n# convertBinary(1)\n# convertBinary(0)\n\
    # convertBinary(10)\n# convertBinary(5)\n# convertBinary(11)\n# convertBinary(16)\n\
    # convertBinary(21)\n# convertBinary(26)\n# convertBinary(31)\n</cell>\n<cell>\n\
    # Let's verify the output our code gives for convertBinary(1):\n# It should equal\
    \ \"1\"\n# It should equal \"0\"\n# It should equal \"0\"\n# It should equal \"\
    0\"\n\n# Test Case 1: N = 1\n# Input:\n# 1\n# Output:\n# \"1\"\n\n# Test Case\
    \ 2: N = 0\n# Input:\n# 0\n# Output:\n# \"0\"\n\n# Test Case 3: N = 2\n# Input:\n\
    # 2\n# Output:\n# \"00\"\n\n# Test Case 4: N = 3\n# Input:\n# 3\n# Output:\n#\
    \ \"000\"\n</cell>\n<text>\nPart 3: Binary Search\nProblem 3\nWrite a program\
    \ to find if there exists a sequence of four consecutive zeros in a binary number.\
    \ There can be any number of zeros between the ", "    let str = N.split('');\n\
    \    let str2 = str.map((i) => parseInt(i).toString(2)).join('');\n    return\
    \ str2;\n}\n", "    let string = \"\"\n    while(N >=0){\n        string += ((N%2==0)?'1':'0')\n\
    \        N = (N/2)\n    }\n    return string\n}\n", "  let result = '';\n  while(true){\n\
    \    let n = N % 2 === 0 ? '0' : '1';\n    result += n;\n    if(N > 0) N = N/2;\n\
    \    else return result;\n  }\n}\n</code>\n<|/ a tags=algorithm,string |>\n<|\
    \ c |>\nThis doesn't work: it gives a string with the binary representation of\
    \ the positive number in decimal form.\n<|/ c |>\n<| a dscore=4 tags=algorithm,string\
    \ |>\nI wanted to know why this problem was considered a tough question to solve,\
    \ and I looked for solutions to the same problem on Quora and found an elegant\
    \ solution that I wanted to share with you all.\nThe solution was written for\
    \ a programming language, but I believe you can easily translate it to your language\
    \ of choice. Here it is:\n<code>\ndef to_binary(n):\n    binary = str(bin(n))[2:]\n\
    \    while len(binary) < 32:\n        binary = '0' + binary\n    return binary\n\
    </code>\n<|/ a |>\n<| a dscore=4 |>\nHere's a solution that doesn't use recursion.\n\
    <code>", "  let arr = [];\n  for(let i=0;i<N;i++){\n    arr.push((i%2 ? \"0\"\
    \ : \"1\"));\n  }\n  return arr.join(\"\");\n}\n", "\tvar res = 0\n\tfor(var i\
    \ = 0; i <= N; i++){\n\t\tres = res + numToBits(i)\n\t}\n\treturn res\n}\n", " \
    \   let res = \"\";\n    for(let i=0;i<N;i++){\n        if(isEven(i)){\n     \
    \       res=res+\"1\"\n        }\n        else{\n            res=res+\"0\"\n \
    \       }\n    }\n    return res;\n}", "    let numStr = String(N);\n    let res\
    \ = [];\n    let len = numStr.length;\n    let num = 0;\n    let tmpNum = 0;\n\
    \    for(let i = 0; i < len; i++){\n        num = parseInt(numStr[i]);\n     \
    \   console.log(num)\n        tmpNum = num % 2;\n        res.push(tmpNum);\n \
    \       num = (num - tmpNum) / 2;\n    }\n    return res.reverse().join('');\n\
    }\n", "    let binary = [];\n    for(let i=0;i<N;i++){\n        binary.push(String.fromCharCode(N%2));\n\
    \        N=Math.floor(N/2);\n    }\n    return binary;\n}\n", "  var arr=[];\n\
    \  arr.push((N>>0).toString(2));\n  while(N){\n    arr.push((N>>0).toString(2));\n\
    \    N=N&(N-1);\n  }\n  var result=arr.join('');\n  return result;\n}\n", "  \
    \  var s=0;\n    for( var i=N; i>0; i/=2 ){\n        if( i&1 ) s++;\n    }\n \
    \   return s.toString(2);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=dynamic-programming,algorithm\
    \ |>\nLet the number be N, then let the array arr[N] be an array of integers where\
    \ arr[i] is the number of ways to form N using i binary digits. \nFor example,\
    \ if we want to form the number 15 as \"101\", then arr[3] will be 1 and arr[4]\
    \ will be 2, which means we can form 15 as \"10100\". In this way, we can make\
    \ recursive calls.\nA simple recursive solution is\n<code>\nint helper(int n,\
    \ int arr[]) {\n    if (n == 0) return 0;\n    if (n == 1) return arr[n];\n  \
    \  return arr[n] + helper(n / 10, arr) + helper(n % 10, arr);\n}\n</code>\nNow\
    \ the trick is to use dynamic programming. Let d[i1, ..., in] be the array in\
    \ which d[i] is the number of ways to form i using i binary digits. Now you can\
    \ solve this problem by performing the following operation:\n<code>\nint dp[]\
    \ = new int[1010];\n\nfor (int i = 0; i < 1010; i++) {\n    dp[i] = helper(i,\
    \ arr);\n}\n</code>\nHere, it is assumed that arr[i] > 0.\n<|/ a dscore=0 |>\n\
    <| a tags=dynamic-programming,algorithm |>\nA straightforward dynamic programming\
    \ approach (assuming that you use only binary digits):\n<code>\ndef answer(N):\n\
    \    # base case\n    if N == 0:\n        return 0\n\n    # memoization\n    if\
    \ N not in memo:\n        memo[N] = sum(answer(N//2) + answer(N//2) + answer(N//2)\
    \ + answer(N//2))\n\n    return memo[N]\n</code>\nHere the memory is initialized\
    \ with 0s, and each subproblem is calculated from scratch (no recursion).\nThe\
    \ time complexity is O(N). In reality this solution does not scale well as it\
    \ is limited to binary numbers (you might want to add some code for larger numbers),\
    \ but since your input is restricted to binary digits this should not be a problem.\n\
    <|/ a dscore=0 |>\n<| a |>\nThe algorithm is very simple\nlet dp[i] be the answer\
    \ for i binary digits\nthen, let dp[i] = dp[i/2] + (dp[i/2] and dp[i/2])\n<code>\n\
    dp[0] = 0;\nfor(int i=1;i<N;i++){\n    dp[i] = dp[i/2];\n    if(N%i==0){\n   \
    \     dp[i] = dp[i/2];\n    }\n", "    if(N === 0){\n        return \"0\"\n  \
    \  }\n    let ret = \"\";\n    let base = Math.pow(2, N)\n    while(base){\n \
    \       ret = ret + base%2\n        base = base/2;\n    }\n    return ret;\n}\n",
  "    \n    let arr =  Array.from(Array(N), () => Array(9).fill(0));\n    let str\
    \ = \"\";\n    \n    for(let i=0; i<N; i++){ //loop through the array\n      \
    \  arr[i][0] = 1;\n        arr[i][1] = 1;\n        \n        for(let j=0; j<i;\
    \ j++){\n            if(arr[j][i] > 0){\n                arr[j][i] = arr[j][i]\
    \ + 1;\n            }\n        }\n        \n        if(arr[i][1] > 0){ //if the\
    \ sum is above zero\n            for(let j=0; j<i; j++){\n                arr[j][i]\
    \ = arr[j][i] - 1;\n                if(arr[j][i] > 0){\n                    arr[j][i]\
    \ = arr[j][i] + 1;\n                }\n            }\n        }\n    }\n    \n\
    \    //loop through the array and concatenate each element with the next element\
    \ if they are both positive\n    for(let i=2; i<=N; i++){\n        str = arr[i].reduce((str,\
    \ arrVal) => str += arrVal + arr[i-1]);\n    }\n    \n    return str;\n}\n", " \
    \   let s=0;\n    while(N>0){\n        s+=N%2;\n        N=N>>1;\n    }\n    return\
    \ s;\n}\n", "    let sum = 0;\n    for (let i=1; i<=N; i++){\n        const current\
    \ = i.toString(2);\n        sum += current.length <= 1 ? 0 : current.length;\n\
    \    }\n    return `${sum}`;\n}\n</cell>\n<cell>\nsolve(1)\n</cell>\n<text>\n\
    Questions\nWhat is the smallest positive integer that does not divide evenly into\
    \ all integers from 1 to N?\n\n\n</text>\n<cell>", "  let digitCount = 0;\n  let\
    \ binary = \"\";\n  while(digitCount < N){\n    if(N % 2 == 0){\n      binary\
    \ = binary + N.toString(2);\n      N = (N/2).toString(2);\n      digitCount =\
    \ digitCount + 1;\n    }else{\n      N = (N/2).toString(2);\n      digitCount\
    \ = digitCount + 1;\n    }\n  }\n  return binary;\n}\n", "\tvar a = \"1\"\n\t\
    for( var x = 2; x <= N; x++ ){\n\t\ta = a*x\n\t}\n\treturn a\n}\n", "    const\
    \ sum = N.toString().split('').map(Number).reduce((acc, cur) => {\n        return\
    \ acc + cur;\n    }, 0);\n    let result = new Array(Math.floor(Math.log(sum)/Math.LN2)).fill().map((_,i)\
    \ => {\n        return sum / Math.pow(2, i);\n    });\n    return result.map((val)\
    \ => val.toString(2)).join('');\n}\n", "    let result = new Array();\n    for(let\
    \ i = 0; i <= N; i++){\n        let temp = 0;\n        while(N > 0){\n       \
    \     temp += N % 2;\n            N /= 2;\n        }\n        result.push(temp);\n\
    \    }\n    return result.join('');\n}\n\n<|/ file dstars=1 ext=.js source=github\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    let num = \"\";\n    \n    if(N ==\
    \ 0){\n        return \"0\";\n    }\n    \n    for(let i = N; i>0; i--){\n   \
    \     let s = solve(N-i) + \"0\";\n        num = num + s;\n    }\n    \n    return\
    \ num;\n}\n", "  return Array\n  .from({ length: Math.ceil(Math.log(N)/Math.log(2))\
    \ },\n  (_,i) => i === N ? 1 : 0);\n}\n", "    if(N<10)\n      return N.toString()\n\
    \    if(N%2==0)\n      return solve(N/2).concat('1'+solve(N/2))\n    return solve(N/2).concat('0'+solve(N/2))\n\
    \  }\n", "  let num = 0;\n  for(let i=0;i<N;i++){\n    num += Math.pow(2, i);\n\
    \  }\n  return num;\n}", "  let str = \"\";\n  \n  for (let i = 1; i <= N; i++){\n\
    \    let temp = i.toString(2);\n    while (temp.length < i){\n      temp = \"\
    0\" + temp;\n    }\n    str += temp;\n  }\n\n  return str;\n}\n", "    var s =\
    \ '';\n    while(N){\n        s = N%2 + s;\n        N = (N-s)/2;\n    }\n    return\
    \ s;\n}\n", "    var res = []\n    for(var i=0; i< N; i++){\n        for(var j=0;\
    \ j<8; j++){\n            if(i<j){\n                res.push(Math.pow(2, 8-j))\n\
    \            }\n            else if(i>j){\n                res.push(Math.pow(2,\
    \ 8-i)+(i>j))\n            }\n        }\n    }\n    return res.reduce((a,b)=>\
    \ a+b)\n}\n", "    var ret = \"\";\n    var rev = N;\n    while(rev){\n      \
    \  var ret = String(Math.pow(2,rev%2)) + ret;\n        rev = parseInt(rev/2);\n\
    \    }\n    return ret;\n}\n</code>\n<|/ a |>\n<| a tags=recursion,javascript\
    \ |>\nHere is a solution by recursion.\n<code>", "    return String.fromCharCode(parseInt((N\
    \ % 2)) + parseInt((N >> 1)));\n}\n", "  let str = \"\";\n  while (N >= 10){\n\
    \    str = `${str}${N%10}`;\n    N = (N/10).toFixed(1);\n  }\n  str = `${str}${N}`;\n\
    \  return str;\n}\n", "  if (N < 0) return \"-1\"\n  let ans = \"\"\n  while (N\
    \ >= 1000){\n    N = N /1000\n    ans += N.toString(2)\n  }\n  N -= 1000 //N is\
    \ always less than 1000\n  while (N >= 100){\n    ans += \"1\" + N%100.toString(2)\n\
    \    N = N/100\n  }\n  while (N >= 1){\n    ans += \"0\" + N%10.toString(2)\n\
    \    N = N/10\n  }\n  return ans\n}\n", "    if(N%2 == 0) return solve(N / 2);\n\
    \    else return \"0\" + solve(N / 2) + solve(N / 2 * 3);\n}\n", "    let result\
    \ = '';\n    for(let i = 8; i >= 0; i--){\n        const remainder = N % 2;\n\
    \        result += remainder ? 1 : 0;\n        N = Math.floor(N / 2);\n    }\n\
    \    return result;\n}\n", "    let res = []\n    let sum = 0\n    while (N !==\
    \ 0){\n        sum = (sum * 2) + (N % 2)\n        N = Math.floor(N/2)\n    }\n\
    \    while(sum >= 1){\n        res.push(sum%2)\n        sum = Math.floor(sum/2)\n\
    \    }\n    return res.reverse().join(\"\")\n}\n", "    let sum = 0;\n    for(let\
    \ i = N; i > 0; i = i/2){\n        sum += i%2;\n    }\n    return sum.toString();\n\
    }\n", "    // code here\n    let result = '', i; \n    while(N !== 0){\n     \
    \   result = N%2 + result;\n        N = N/2\n    }\n    return result;\n}\n",
  "    let res =0;\n    for(let i = N ; i >0 ; i /=2){\n        res += Math.floor(i\
    \ / 2);\n    }\n    return res ;\n}\n</code>\n<|/ a |>\n<| a |>\nThe sum of the\
    \ digits of N can be easily done by converting N into a string and iterating over\
    \ the characters of the string as follows:\n\n<code>", "    let res = \"\";\n\
    \    for(let i = 0;i < N;i++){\n        let num = Math.pow(2, i);\n        if(num\
    \ >= 2){\n            res += num;\n        } else {\n            res += \"0\"\
    ;\n        }\n    }\n    return res;\n}\n</code>\n<|/ a dscore=0 tags=javascript,algorithm,function\
    \ |>\n<| a |>\n<code>\nvar solve = function(N) {\n  return N.toString(2).split('').reduce((a,\
    \ c, i) => {\n    return +a + +c.padStart(i, '0');\n  }, 0);\n};\n</code>\n<|/\
    \ a dscore=0 tags=javascript,algorithm,function |>\n<| c |>\nThis answer is better\
    \ than my solution because it avoids creating an array of the binary representation\
    \ of N. Furthermore, it uses padStart() to ensure the resulting string is always\
    \ at least as long as N, even if it's padded with zeros.\n<|/ c |>\n<| a |>\n\
    <code>", "    return N.toString().split('').map(function(digit, index) {\n   \
    \     let result = digit;\n        if (index === N - 1) {\n            result\
    \ = \"1\" + result;\n        }\n        return result;\n    }).join('');\n}\n",
  "    let binaryNum = \"\";\n    while(true){\n        let currentVal = Math.pow(2,\
    \ binaryNum.length);\n        let addUp = Math.floor(currentVal * N);\n      \
    \  binaryNum = binaryNum + addUp.toString();\n        if(binaryNum.length >= 3){\n\
    \            break;\n        }\n    }\n    return binaryNum;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis is way overkill, though. Why would you multiply\
    \ by `Math.pow(2, binaryNum.length)`? Why not simply multiply by `2`?\n<|/ c |>\n\
    <| c |>\nAlso, you should test `binaryNum.length <= 3`, not just `binaryNum.length\
    \ >= 3`.\n<|/ c |>\n<| c |>\nThanks for pointing out the length check. I was testing\
    \ for the `>=` instead of just `<`. Edited my answer accordingly.\n<|/ c |>\n\
    <| c |>\nThe length check is now also moved to the top of the loop, so that it\
    \ will only break if the binary length is less than or equal to 3.\n<|/ c |>\n\
    <| a dscore=0 |>\nHere is a solution without loop and without recursion, just\
    \ simple arithmetic:\n<code>\nconst solve = n => {\n  let result = n;\n  const\
    \ powerOfTwo = Math.pow(2, n);\n  const powerOfFour = Math.pow(4, n);\n  result\
    \ = result + ((result % powerOfFour + powerOfFour) % powerOfTwo);\n  return result;\n\
    };\n</code>\n<|/ a tags=math,algorithm,javascript |>\n<| a dscore=0 |>\n<code>",
  "  let str = '';\n  \n  if(N === 0){\n    return str;\n  }\n  \n  while (N > 0){\n\
    \    str = `${(N % 10).toString(2)}${str}`;\n    N = Math.floor(N/10);\n  }\n\
    \  \n  return str;\n}\n", "  let sum = 0;\n  while(N){\n    sum += N%2;\n    N\
    \ = N/2;\n  }\n  return sum;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<|\
    \ a dscore=0 |>\n<code>", "    for(var i = 0;i < N;i++)\n        sum += getBinary(i).length;\n\
    \    return sum;\n}\n", "  var result = '';\n  while (N >= 1){\n    var remainder\
    \ = N % 2;\n    N = N / 2;\n    result = remainder + result;\n  }\n  return result;\n\
    }\n", "  let sum = 0;\n  while (N > 0) {\n    sum = sum + n % 10;\n    N = N >>\
    \ 1;\n  }\n  return sum\n}\n", "   var s=\"\";\n   var sum=N%2;\n   var rev=N>0?N-1:0;\n\
    \   while(rev>0){\n      s=sum+rev%2;\n      rev=rev/2;\n      sum=sum+rev%2;\n\
    \   }\n   return s;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for the\
    \ question \"Given a positive integer N, return the total sum of its digits in\
    \ binary\", as the problem specifies that the sum will be in binary, not the count\n\
    <|/ c |>\n<| a tags=javascript,python,algorithm |>\nAs others have said, this\
    \ question doesn't make a whole lot of sense.  You're asking how to solve the\
    \ problem when the solution doesn't make sense.  What makes sense is when you\
    \ have a solution, and it seems to work.  Here's a solution in Python.\n<code>\n\
    def sumDigits(n):\n    \"\"\"\n    From http://stackoverflow.com/questions/2939587/given-a-positive-integer-n-return-the-total-sum-of-its-digits-in-binary\n\
    \n    Given a positive integer N, return the total sum of its digits in binary.\n\
    \    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n    \"110\"\n\
    \    >>> solve(147)\n    \"1100\"\n    >>> solve(119)\n    \"111\"\n    \"\"\"\
    \n    if n < 0:\n        raise ValueError(\"Negative integers are not allowed\"\
    )\n\n    nDigits = 0\n    while n > 0:\n        n, r = divmod(n, 2)\n        nDigits\
    \ += r\n    return str(nDigits)\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work with the test `solve(119)`. Should return `111`, but it returns `1011`.\n\
    <|/ c |>\n<| c |>\nAs I understand it, the question specifies that `sumDigits()`\
    \ should return a string, so the test should pass, but the actual implementation\
    \ returns a number.\n<|/ c |>\n<| c |>\nIt does.  I used the OP's code, and it\
    \ returns `\"111\"` when I run it.\n<|/ c |>\n<| c |>\nYou're right, I missed\
    \ the distinction between \"sum\" and \"count\". The point was that the OP was\
    \ asking how to solve the problem when the solution doesn't make sense.\n<|/ c\
    \ |>\n<| c |>\nThe point was that there are other answers that work for all the\
    \ tests, including the one I gave.\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndef sumDigits(n):\n\
    \   binary = bin(n).replace('0b', '')\n   return len(binary)\n", "  let total\
    \ = 0;\n  let result = [];\n\n  for(let i = N;i > 0; i--){\n    let digit = i%2;\n\
    \    total += digit;\n    result.push(digit);\n  }\n  return result.reverse().join('');\n\
    }\n", "    var str = \"\",\n        sum = 0;\n\n    for (var i = N; N > 0; N =\
    \ N >> 1){\n        sum += N;\n        str += sum.toString(2);\n    }\n    return\
    \ str;\n}", "  if(N<=0){\n    return \"0\";\n  }\n  let s=N.toString(2);\n  for(let\
    \ i=0;i<s.length-1;i++){\n    if(parseInt(s[i])>parseInt(s[i+1])){\n      s=s.substr(0,i)+s.substr(i+1,s.length);\n\
    \    }\n  }\n  return s;\n}\n</cell>\n<cell>\n%matplotlib inline\nfrom notebook\
    \ import notebookapp\nnotebookapp.list_running_servers()\n</cell>\n<cell>\ns =\
    \ solve(100)\ns\n</cell>\n<text>\nThe solution is in string format with leading\
    \ zeros if necessary.\n\n\n</text>\n<text>\nProblem 8: Given a string of only\
    \ lowercase letters, sort the string in descending order of the number of each\
    \ letter appearing. The string can contain duplicates.\nExample\n>>> letters =\
    \ \"hellohellohello\"\n>>> solution(letters)\n\"hellohello\"\nVariables:\n@letters\
    \ string\nConstraints: 0 \u2264 length(letters) \u2264 10, and letters contains\
    \ only lowercase letters.\nOutput:\na sorted string of letters \nThe solution\
    \ assumes the string is unique and sorted.\n\n\n</text>\n<text>\nProblem 9: Given\
    \ a list of integers, return a new list with all the integers in sorted order.\
    \ \nExample\n>>> sort([5, -4, 3, 9])\n[3, 4, 9, 5]\nVariables:\n@integers list\
    \ of integers\nConstraints: -10000 < integers[i] < 10000\nOutput:\na list of integers\
    \ \nThe solution assumes the list is unique, sorted, and contains no duplicates.\n\
    \n\n</text>\n<text>\nProblem 10: Given a string, return a new string where any\
    \ occurence of two consecutive identical characters are replaced by the smallest\
    \ number possible (including the occurrence of characters repeatedly appearing\
    \ just once).\nExample\n>>> s = \"abracadabra\"\n>>> solve(s) \n\"abcadabra\"\n\
    Variables:\n@s string\nConstraints: 0 \u2264 length(s) \u2264 10, and s contains\
    \ only lowercase letters.\nOutput:\na string of characters where two consecutive\
    \ letters are the same.\n\n\n</text>\n<text>\nProblem 11: Given a string, return\
    \ a new string where any occurence of two consecutive identical characters (either\
    \ upper or lowercase) is replaced by the smallest number possible (including the\
    \ occurrence of characters repeatedly appearing just once).\nExample\n>>> s =\
    \ \"abracadabra\"\n>>> solve(s) \n\"abbccddbca\"\nVariables:\n@s string\nConstraints:\
    \ 0 \u2264 length(s) \u2264 10, and ", "    let sum = 0;\n    while (N >> 1){\n\
    \        sum += N % 2;\n        N >>= 1;\n    }\n    return sum.toString();\n\
    }\n", "\t\n\t\n\t\n\tconst arr=new Array(N).fill(0)\n\t\n\tfor(i=0;i<N;i++){\n\
    \t\tlet s=i.toString(2)\n\t\ts.split('').reverse().reduce((a,b)=>a+b*1,0)\n\t\t\
    arr[i]=s\n\t}\n\t\n\t\n\tconst result=arr.reduce((a,b)=>a+b,'')\n\t\n\tconst final=result.replace(/^1/g,'')\
    \ // remove leading 1\n\t\n\treturn final\n\t\n\t\n\t\n\t\n\t\n\t\n}\n", "   \
    \ if (N < 0 || N > 10000){\n        return \"1\"\n    }\n    let arr = []\n  \
    \  for (let i = N; i > 0; i--){\n        arr.push(String.fromCharCode(Math.floor((i\
    \ / Math.pow(10,i))%10) +  Math.floor((i / Math.pow(10,i))%Math.pow(10,i)))\n\
    \    }\n    console.log(arr)\n    return arr.join(\"\")\n}", "  return '0'.repeat(N/2-1).split(\"\
    \").reverse().map(function(x){\n    return parseInt(x,2)\n  }).reduce(function(sum,current,index){\n\
    \    return sum+current\n  },0)\n}</code>\n<|/ a tags=algorithm,javascript |>\n\
    <| c |>\nNice one, it would be interesting to see a solution which doesn't require\
    \ `.reduce()`\n<|/ c |>\n<| a tags=algorithm,javascript |>\nYou can make use of\
    \ reduce and binary literals in Javascript to solve the problem:\n\n<code>\nvar\
    \ sum = function(number) {\n  var bin = parseInt(number).toString(2);\n  return\
    \ bin.reduce(function(sum, digit, index) {\n    return sum + digit;\n  });\n}\n",
  "    let res = \"\";\n    while(n >= 10){\n        n = (n%10)+ n\n        res +=\
    \ n.toString();\n        n = n/10;\n    }\n    return res;\n}\n</code>\n<|/ a\
    \ dscore=0 tags=javascript |>\n<| c |>\nThis looks like a homework question, so\
    \ you should probably at least try to solve it yourself. As it stands, this question\
    \ shows no effort\n<|/ c |>\n<| c |>\nIt was a question asked in a coding bootcamp.\
    \ I'm a student and the solution came easily. I'm new here and I thought it was\
    \ a genuine question to ask.\n<|/ c |>\n<| a dscore=0 tags=javascript |>\nTry\
    \ this one:\n<code>", "    let res = \"0\"\n    while(N>0){\n        res += \"\
    0\"\n        N = Math.floor( N / 2)\n    }\n    return res\n}\n", "  // use N\
    \ to calculate length of string\n  let lenOfStr = N.toString().length;\n\n  //\
    \ if N has decimals, don't add them\n  // i.e. 3.456 = .3456\n  if(N % 1 !== 0){\n\
    \    lenOfStr--;\n  }\n\n  // init sum\n  let sum = 0;\n  let temp = 0;\n\n  //\
    \ while loop for N\n  while(sum < N){\n\n    // remainder\n    temp = N % 10;\n\
    \    // add digit to sum\n    sum += temp;\n    // move N over to next digit\n\
    \    N = Math.floor(N / 10);\n  }\n\n  // convert sum to binary string and return\n\
    \  return  parseInt(sum).toString(2).padStart(lenOfStr, '0');\n}\n", "  if(N===0)\n\
    \    return \"0\";\n  if(N>0){\n    var str=\"\";\n    var count=0;\n    while(N!=0){\n\
    \      count++;\n      N=N%2;\n    }\n    while(count!=0){\n      str=str+\"1\"\
    ;\n      count=count-1;\n    }\n    return str;\n  }\n}\n\n<|/ file ext=.js dstars=1\
    \ |>\n<| c |>\nYour `solve` function will work for small numbers. But it will\
    \ not work for large numbers like `147 ` because it will become very large after\
    \ `count==1`.\n<|/ c |>\n<| c |>\nYour first while loop will run in O(n) time.\
    \ But in your second while loop you are running a loop that runs for O(log(N))\
    \ time. Which is O(n^2)\n<|/ c |>\n<| a tags=javascript,algorithm,node.js dscore=0\
    \ |>\nYou can simply do:\n\n<code>", "  var total = 0;\n  for(var i = 1;i <= Math.sqrt(N);i++){\n\
    \    total+=Math.pow(i,N);\n  }\n  return total;\n}\n", "  var str = ''\n  if(N\
    \ == 0){\n    str = '0'\n  }\n  if(N > 0){\n    str = solve(N/2) + solve(N%2)\n\
    \  }\n  return str\n}\n", "    return N.toString(2).split('').reduce(function(s,c,i){\n\
    \      if(!~s.indexOf(c)) s += c;\n      return s;\n    }, '');\n}\n", "    let\
    \ nums = N.toString(2);\n    let res = nums.split(\"\");\n    res.map(e => parseInt(e));\n\
    \    return res.reduce((a,b)=>a+b);\n}", "    let sum = 0;\n    while(N >0){\n\
    \        sum+=Math.floor(N/2);\n        N = N-Math.floor(N/2);\n    }\n    return\
    \ sum.toString(2);\n}", "    //Your code here\n    var nums=[],\n        sum=0;\n\
    \    for(var i=0;i<N;i++){\n        var b=i.toString(2);\n        for(var j=0;j<b.length;j++){\n\
    \            nums.push(parseInt(b[j]));\n        }\n    }\n    for(var i=0;i<nums.length;i++){\n\
    \        sum+=nums[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=javascript\
    \ |>\n<| c |>\nYour solution is too slow as it iterates over all the digits of\
    \ the number twice, unnecessarily slowing things down.\n<|/ c |>\n<| c |>\nThanks\
    \ for letting me know, i have updated the answer.\n<|/ c |>\n<| c |>\nThis answer\
    \ doesn't give the correct answer. See my answer for the right answer.\n<|/ c\
    \ |>\n<| a |>\n<code>", "  let numStr = N.toString(2);\n  if(numStr.length < 2){\n\
    \    let numStr = (N.toString(2));\n  }\n  let retStr = numStr;\n  let sum = 0;\n\
    \  let count = 0;\n  for(let index = 0; index < numStr.length; index++){\n   \
    \ if(index === 0){\n      sum += parseInt(numStr[index]);\n      count++;\n  \
    \    continue;\n    }\n    if(numStr[index].includes('1')){\n      count++;\n\
    \      sum += parseInt(numStr[index]);\n    }\n  }\n  \n  if(count < numStr.length){\n\
    \    retStr = (sum - sum%Math.pow(2,count));\n  }\n  \n  return retStr;\n}</code>\n\
    <|/ a tags=javascript,math |>\n<| c |>\nI guess this might be a good solution,\
    \ but could you please provide an explanation on how this works?\n<|/ c |>\n<|\
    \ c |>\nSure, let me add an explanation\n<|/ c |>\n<| c |>\nIt is a bit late but\
    \ I think this can actually be solved without any loops, just one math operation!\
    \ The idea is to get the number in reverse and reverse the digits. Then just add\
    \ the reversed number to the one with digits 1 and then reverse the result again.\
    \ No need for loops or anything.\n<|/ c |>\n<| a tags=javascript,math dscore=2\
    \ |>\nAs you can see in the other answers, your solution is good except that you\
    \ do not need to convert the number to string. That could lead to unexpected results\
    \ with very large numbers. For example \"1222\" becomes \"1212\".\nAs long as\
    \ the number is greater than or equal to 1, you can easily divide by 2 and get\
    \ the sum of the digits. As soon as the number exceeds 1, you need to divide by\
    \ 10 to get the sum of digits in the last place and then multiply by the sum of\
    \ the digits in last place (without that last digit you multiply the sum of the\
    \ digits by 10^(n-1), where n is the amount of digits in number).\nHere is a code\
    \ snippet which does this and prints the result to console:\n\n<code>", "  var\
    \ binary = \"\";\n  for(var i = N; i>0; i--){\n    binary += toBinary(i).toLowerCase();\n\
    \  }\n  return binary;\n}", "    // Base case: N = 0\n    if(N == 0){\n      \
    \  return \"0\";\n    }\n    // Base case: N < 0\n    if(N < 0){\n        return\
    \ \"-1\";\n    }\n    // Base case: N < 10\n    if(N < 10){\n        return String(N);\n\
    \    }\n    // Base case: N < 100\n    if(N < 100){\n        return solve(String(N))\
    \ + solve(String(N >> 1));\n    }\n    // Base case: N < 1000\n    if(N < 1000){\n\
    \        return solve(String(N)) + solve(String(N >> 2)) + solve(String(N >> 4))\
    \ + solve(String(N >> 8)) + solve(String(N >> 16)) + solve(String(N >> 32)) +\
    \ solve(String(N >> 64)) + solve(String(N >> 128)) + solve(String(N >> 256));\n\
    \    }\n    // Base case: N < 10000\n    if(N < 10000){\n        return solve(String(N))\
    \ + solve(String(N >> 4)) + solve(String(N >> 8)) + solve(String(N >> 16)) + solve(String(N\
    \ >> 32)) + solve(String(N >> 64)) + solve(String(N >> 128)) + solve(String(N\
    \ >> 256)) + solve(String(N >> 512));\n    }\n    // Base case: N < 100000\n \
    \   if(N < 100000){\n        return solve(String(N)) + solve(String(N >> 8)) +\
    \ solve(String(N >> 16)) + solve(String(N >> 32)) + solve(String(N >> 64)) + solve(String(N\
    \ >> 128)) + solve(String(N >> 256)) + solve(String(N >> 512)) + solve(String(N\
    \ >> 1024)) + solve(String(N >> 2048));\n    }\n    // Base case: N < 1000000\n\
    \    if(N < 1000000){\n        return solve(String(N)) + solve(String(N >> 16))\
    \ + solve(String(N >> 32)) + solve(String(N >> 64)) + solve(String(N >> 128))\
    \ + solve(String(N >> 256)) + solve(String(N >> 512)) + solve(String(N >> 1024))\
    \ + solve(String(N >> 2048)) + solve(String(N >> 4096));\n    }\n    // Base case:\
    \ N < 10000000\n    if(N < 10000000){\n        return solve(String(N)) + solve(String(N\
    \ >> 32)) + solve(String(N >> 64)) + solve(String(N >> 128)) + solve(String(N\
    \ >> 256)) + solve(String(N >> 512)) + solve(String(N >> 1024)) + solve(String(N\
    \ >> 2048)) + solve(String(N >> 4096)) + solve(String(N >> 8192));\n    }\n  \
    \  // Base case: N < 100000000\n    if(N < 100000000){\n        return solve(String(N))\
    \ + solve(String(N >> 64)) + solve(String(N >> 128)) + solve(String(N >> 256))\
    \ + solve(String(N >> 512)) + solve(String(", "\treturn N.toString(2);\n}\n<|/\
    \ file source=github ext=.js dstars=1 |>\n<| a tags=javascript,binary-search-tree\
    \ dscore=0 |>\nYou can convert binary number to string using bitwise operators.\
    \ Then you can use split() to get the string into array.\nExample: for 1101 the\
    \ string will be:\n<code>\n[\"1\",\"1\",\"1\",\"1\"]\n</code>\nand for 1100 the\
    \ string will be:\n<code>\n[\"0\",\"0\",\"0\",\"1\"]\n</code>\nYou can use shift()\
    \ to get the first element and shift() to get last element from array.\n<code>",
  "  if (N==0 || N==1)\n    return String(N);\n  var sum=N;\n  while (sum>0){\n  \
    \  sum=sum/10;\n  }\n  return sum;\n}\n</code>\n<|/ a |>\n<| a tags=math,javascript\
    \ |>\nAnother approach is to convert it to an unsigned binary integer and do your\
    \ math on that.  Since javascript does integer math, it's easy to work around\
    \ this limitation.\nHere's a function that converts a positive integer to a string\
    \ in its binary representation\n<code>", "  let res = \"\";\n  let counter = 1;\n\
    \  while (counter <= N) {\n    if (counter % 2 === 0)\n      counter = counter\
    \ * 3 + 1\n    else \n      counter = counter * 3 + 0\n  }\n  while (counter >\
    \ 0) {\n    if (counter % 2 === 0)\n      res += \"0\"\n    else \n      res +=\
    \ \"1\"\n    counter -= 1\n  }\n  return res;\n}\n", "  return N.toString().split(\"\
    \").map(function(item){\n    return item == \"1\"? \"1\": \"0\"\n  }).join(\"\"\
    );\n}\n", "    var res = N.toString(2);\n    while (Number(res)%2 === 0){\n  \
    \      res = res+\"0\";\n    }\n    return res;\n}", "  let sum = 0;\n  while(n\
    \ > 0){\n    sum = sum + n % 2;\n    n = parseInt(n/2);\n  }\n  return sum;\n\
    }\n", "\tlet sum = 0;\n\tlet str = '';\n\tlet i = parseInt(N / 2);\n\twhile(i\
    \ > 0){\n\t\tsum += i % 2;\n\t\ti++;\n\t}\n\twhile(sum > 0){\n\t\tstr += '1';\n\
    \t\tsum -= 2;\n\t}\n\twhile(sum > 1){\n\t\tstr += '0';\n\t\tsum -= 1;\n\t}\n\t\
    return str;\n}\nmodule.exports = {\n\tsolve\n};\n\n},{}],3:[function(require,module,exports){",
  "    if( N==0 ) return \"0\";\n    var s=\"\";\n    while(N!=0){\n        s+=N%2;\n\
    \        N=parseInt(N/2);\n    }\n    return s;\n}\n</cell>\n<cell>", "  let nStr\
    \ = '';\n  let arr = [];\n  for (let i = N; i > 0; i/= 2){\n    let temp = i.toString(2);\n\
    \    arr = arr.concat(temp.split(\"\"));\n  }\n  arr = arr.concat(arr.shift());\n\
    \  for (let i = 0; i < arr.length; i++){\n    let temp = arr[i] + arr[i+1];\n\
    \    let temp1 = temp.substring(0, 1);\n    let temp2 = temp.substring(1);\n \
    \   nStr += temp1 + temp2;\n  }\n  return nStr;\n}\n", "  if(N < 0 || N > 10000){\n\
    \    return \"INVALID INPUT\";\n  }\n  let ans=\"\";\n  let nums = String(N).split(\"\
    \");\n  for(let i=0;i<nums.length;i++){\n    if(parseInt(nums[i])>0){\n      ans+=parseInt(nums[i])%2;\n\
    \    }\n  }\n  return ans;\n}\n", "  if(N<=1){return \"0\"}\n  let sum = 0;\n\
    \  let flag = true;\n  let index = 0;\n  while(index<N){\n    if(N%2===0){\n \
    \     sum += N%2\n      N = N/2\n    }else{\n      flag = !flag\n      sum = -sum\n\
    \      N /= 2\n    }\n    index++\n  }\n  if(sum<0){\n    flag = !flag\n    sum\
    \ = -sum\n  }\n  return flag ? String(sum) : String(sum.toString(2)) \n}\n", " \
    \ let n = N.toString(2);\n  let res = [];\n  while (n !== \"0\".repeat(n.length)){\n\
    \    res.push(parseInt(n));\n    n = (n+\"0\").repeat(n.length);\n  }\n  return\
    \ res.reduce(function(a, b){\n    return a + b.toString(2);\n  });\n}\n</cell>\n\
    <text>\n\_Challenge: Implement the function digitSum() below that returns the\
    \ total sum of its digits in decimal.\n\n\n</text>\n<cell>", "    let n1 = N;\n\
    \    n1 = n1.toString(2)\n    let numStr = \"\";\n    for(let i = 0; i < n1.length;\
    \ i++){\n        let num = parseInt(n1[i]);\n        numStr = numStr + num.toString(2)\n\
    \    }\n    return numStr;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI used the\
    \ Python solution above to make a solution using JavaScript that prints out solutions:\n\
    <code>", "    var binaryNumber=\"\";\n    for(i=1;i<=N;i++)\n    binaryNumber+=i.toString(2);\n\
    \    return binaryNumber;\n}\n", "  var res = []\n  var count = 0\n  while(N !==\
    \ 0){\n    res.push(N % 2)\n    N = Math.floor(N/2)\n    count++\n  }\n  return\
    \ res.length ? res.reverse().join(\"\") : count\n}\n", "    let sum = 0;\n   \
    \ while (N !== 0){\n        sum = sum*10 + N%2;\n        N = Math.floor(N/2)\n\
    \    }\n    return sum.toString()\n}\n", "    var result=\"\";\n    while(N>0){\n\
    \        result=result+(N%2)==1?\"1\":\"0\"; //convert number to its binary representation\
    \ and add it to result\n        N=Math.floor(N/2); //divide N by 2 each time until\
    \ N is 0 or 1\n    }\n    return result;\n}\n", "    var result = \"\";\n    var\
    \ remainder = 0;\n    for(var i = 0; i < N; i++){\n        remainder = (N % 10\
    \ + remainder) % 2;\n        result = remainder + result;\n        N = Math.floor((N\
    \ - remainder) / 2);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=algorithm,math,javascript |>\nI made this solution, based on Jonathan\
    \ Leffler solution but I also added the reverse function.\n<code>", "  let temp\
    \ = [];\n  for (let i = 0; i < N; i++){\n    let curr = parseInt(N.toString(2)[i]);\n\
    \    if (curr === 0){\n      curr = 1;\n    }\n    temp.push(curr);\n  }\n  let\
    \ result = '';\n  temp.forEach((curr, index) => {\n    let newNum = '';\n    for\
    \ (let i = index; i< curr.length; i++){\n      newNum += curr[i]\n    }\n    result\
    \ += newNum\n  });\n  return result\n}\n", "  let result = \"\";\n  let rem =\
    \ N%2;\n  for(let i = 0; i<=Math.floor(N/2); i++){\n    result += (N-(i*i)%2)*rem;\n\
    \    rem = (N-(i*i)%2)/2;\n  }\n  return result;\n}\n", "    let binaryArr = [];\n\
    \    while (N !== 0){\n        binaryArr.unshift(N%2);\n        N = Math.floor(N/2);\n\
    \    }\n    let sum = 0;\n    for (let i=0;i<binaryArr.length;i++){\n        sum+=binaryArr[i]*(Math.pow(2,i));\n\
    \    }\n    return sum;\n}\n", "    return N.toString(2);\n}\n", "  return binary(N).split('').filter(function(x){return\
    \ x.trim().length}).join('')\n}\n", "    let  ret = [];\n    for(let i=0;i<N;i++){\n\
    \        let digits = N%2;\n        ret = [digits, ...ret, ...(digits.toString(2).padStart(N,'0'))];\n\
    \        N=N/2;\n    }\n    return ret.reduce((a,b)=>a+b)\n}\n", "    return binary(N).replace(/^0*/,'').replace(/.{8}/g,'$&0'.repeat(8)).split('').map(n\
    \ => n.charCodeAt(0)).join('')\n}\n", "    // Write your code here.\n    let result\
    \ = '';\n    let number = 0;\n    while(number < N){\n        number += Math.floor(N\
    \ / 2);\n        result += String( number % 2 + 1).toLowerCase();\n        N =\
    \ Math.floor(N / 2);\n    }\n    return result.substring(0, result.length - 1);\n\
    }\n</cell>\n<cell>\n# Test your code\ntests()\n</cell>\n<text>\nThe Question\n\
    Given a positive integer N. Find a pair of numbers X and Y such that X \u2264\
    \ Y and X + Y equals N.\nFor example,\n    given N = 12, return (9, 12).\n\n</text>\n\
    <cell>\n# Use the code below to test your solution\ndef solve(N):\n    first =\
    \ 1\n    second = 1\n    i = 0\n    while first <= N:\n        second = first\
    \ * (first + 1) // 2\n        i += 1\n        first = second\n        if second\
    \ == N:\n            break\n    return (first, second + i)\n            \nassert\
    \ solve(1) == (1, 9)\nassert solve(10) == (10, 99)\nassert solve(23) == (23, 148)\n\
    </cell>\n<cell>\n# Run this cell to see if your output matches ours.\nfrom prettytable\
    \ import PrettyTable\ndef solve(N):\n    first = 1\n    second = 1\n    i = 0\n\
    \    while first <= N:\n        second = first * (first + 1) // 2\n        i +=\
    \ 1\n        first = second\n        if second == N:\n            break\n    return\
    \ (first, second + i)\n            \nassert '912' in [solve(1), solve(10), solve(23)]\n\
    </cell>\n<cell>\n# Practice what happens when N is equal to 1.\nassert solve(1)\
    \ == (1, 9)\n</cell>\n<cell>\n# Practice what happens when N is equal to 10.\n\
    assert solve(10) == (10, 99)\n</cell>\n<cell>\n# Practice what happens when N\
    \ is equal to 23.\nassert solve(23) == (23, 148)\n</cell>\n<cell>\n# Practice\
    \ what happens when N is equal to 24.\nassert solve(24) == (24, 157)\n</cell>\n\
    <text>\nThe Answer - Stone Soup\nThe Stone Soup is a dice game where you roll\
    \ two dice, until you roll a 5, then you win. \nThe game continues until there\
    \ are no more rolls. \nGiven N, find the number of rolls of dice that will result\
    \ in a N. \nFor example, given N = 37, return the number of rolls of dice that\
    \ will result in a N = 37. ", "  let str=\"\";\n  for(let i=0;i<N;i++){\n    let\
    \ binary=i.toString(2);\n    binary=binary.split(\"\").reverse().join(\"\");\n\
    \    while(binary.length<4){\n      binary=`0${binary}`;\n    }\n    str+=binary;\n\
    \  }\n  return str;\n}\n", "  let sum = 0;\n  for(let i = 0; i < N; i++){\n  \
    \  const binary = toBinaryString(i);\n    const sumDigits = binary.split('').map(digit\
    \ => digit.repeat(digit.length).split(''))\n      .map(arr => arr.reduce((acc,\
    \ item) => acc + item)).reduce((acc, item) => acc + item);\n    sum += sumDigits;\n\
    \  }\n  return sum;\n}\n", "  if(N%2===0) return N;\n  var sum = 1;\n  for(var\
    \ i=0;i<N;i++)\n    sum*=2\n  return sum.toString(2)\n}\n", "\tlet sum = 0;\n\t\
    let result = '';\n\t\n\twhile(N !== 0){\n\t\tsum += N % 2;\n\t\tN = Math.floor(N\
    \ / 2);\n\t}\n\n\tif(sum === 0) result = '0';\n\telse if(sum === 1) result = '1';\n\
    \telse result = '';\n\n\twhile(result.length < N){\n\t\tresult += '0';\n\t}\n\t\
    return result;\n}\n</cell>\n<text>\nExample 3:\nInput: 3\nOutput: 11\n\n\n</text>\n\
    <cell>", "    if(N === 0) return '0'\n    if(N === 1) return '1'\n    if(N < 0)\
    \ return 'INV'\n    let totalStr = ''\n    let Nstr = N.toString()\n    for(let\
    \ i = Nstr.length - 1; i >= 0; i--){\n        let curr = Nstr[i]\n        let\
    \ nextVal = parseInt(curr, 2)\n        let currentTotal = parseInt(totalStr, 2)\n\
    \        if(nextVal >= 10){\n            totalStr += nextVal.toString()\n    \
    \    } else {\n            totalStr += `1${nextVal}`\n        }\n    }\n    return\
    \ totalStr\n}\n", "    var sum = 0;\n    while(N > 0){\n        var r = parseInt(N\
    \ % 2, 10);\n        sum += r;\n        N = parseInt(N / 2, 10);\n    }\n    return\
    \ sum;\n}\n", "    \n    let arr = [];\n    while(N>0){\n        arr.unshift(N%2);\n\
    \        N = N/2;\n    }\n    let res = \"\";\n    \n    let len = arr.length;\n\
    \    arr.forEach((val,index)=>{\n        if(val!==0){\n            while(index>=0\
    \ && arr[index]==0){\n                index--;\n            }\n            res\
    \ = res.concat(arr[index]);\n        }\n    })\n    return res;\n}\n", "    var\
    \ result=\"\";\n    while(N > 0){\n        result+=numToBinary(N%2)+result;\n\
    \        N=Math.floor(N/2);\n    }\n    return result;\n}\n", "\tlet str = \"\"\
    ;\n\twhile(N !== 0){\n\t\tlet tmp = N % 2;\n\t\tN = N / 2;\n\t\tstr = String(tmp)\
    \ + str;\n\t}\n\treturn str\n}\nmodule.exports = {\n\tsolve\n}\n</code></pre>\n\
    \        </article>\n    </section>\n\n\n\n\n</div>\n\n<nav>\n    <h2><a href=\"\
    index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"BinaryTree.html\"\
    >BinaryTree</a></li><li><a href=\"BinarySearchTree.html\">BinarySearchTree</a></li><li><a\
    \ href=\"Complex.html\">Complex</a></li><li><a href=\"Integer.html\">Integer</a></li><li><a\
    \ href=\"Tree.html\">Tree</a></li><li><a href=\"Vector.html\">Vector</a></li><li><a\
    \ href=\"Vertex.html\">Vertex</a></li><li><a href=\"Vertext.html\">Vertext</a></li></ul>\n\
    </nav>\n\n<br class=\"clear\">\n\n<footer>\n    Documentation generated by <a\
    \ href=\"https://github.com/jsdoc3/jsdoc\">JSDoc 3.5.5</a> on Wed Oct 26 2018\
    \ 10:58:00 GMT+0000 (UTC)\n</footer>\n\n<script> prettyPrint(); </script>\n<script\
    \ src=\"scripts/linenumber.js\"> </script>\n</body>\n</html>\n\n<|/ file filename=solver.js.html\
    \ source=github |><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
  "    let res=\"\";\n    while(N>0){\n        let digit=N%2;\n        N=Math.floor(N/2);\n\
    \        res += digit.toString();\n    }\n    return res;\n}", "    let num =\
    \ '';\n    let count = 0;\n    let numStr = '';\n    while(count < N){\n     \
    \   num += numStr;\n        numStr = (N % 2 === 0) ? '1' : '0';\n        N = Math.floor(N\
    \ / 2);\n        count += 1;\n    }\n    return num;\n}\n", "\tvar result = '';\n\
    \tfor(var i=0;i<N;i++){\n\t\tif(N%2 === 0) result += 1;\n\t\tN /= 2;\n\t}\n\t\
    return result;\n}\n", "    \n    \n    while(N > 0){\n        let digit = N %\
    \ 2;\n        N = N / 2;\n        sum += digit;\n    }\n    \n    return sum;\n\
    }\n\n", "    let res = [];\n    while(n != 0){\n        res[res.length] = n %\
    \ 2;\n        n = Math.floor(n / 2);\n    }\n    return res.reverse().join(\"\"\
    );\n}\n</code>\n<|/ a dscore=0 tags=javascript,recursion |>\n<| a |>\nA solution\
    \ that returns \"110111\" (4 characters) by calculating in base-26\n<code>", "\t\
    return N.toString(2);\n}\n", "    let counter = 0;\n    for (let i = 0; i <= N;\
    \ i++) {\n        while (N % 2 == 0) {\n            N /= 2;\n            counter++;\n\
    \        }\n        N /= 2;\n    }\n    let result = Array(counter).fill('1');\n\
    \    while (N !== 0) {\n        if (N & 1) {\n            result[--counter] =\
    \ '0';\n        }\n        N >>= 1;\n    }\n    return result.join('');\n}\n</code>\n\
    <|/ a dscore=0 tags=algorithm,binary,javascript |>\n<| c |>\nThanks for the answer!\n\
    <|/ c |>\n<| a tags=algorithm,binary,javascript |>\n<code>", "    if(N%2 == 0)\
    \ return solve(N >> 1) + 1;\n    return solve(N >> 1) + solve(N - N >> 1);\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nHi Rishi, can you please explain a bit more\
    \ how this works? It seems so simple, but I am not able to understand it. I would\
    \ really appreciate if you could give some more details about it. Thanks.\n<|/\
    \ c |>\n<| c |>\nThe recursive approach is basically the sum of digits of the\
    \ number's binary representation. For a positive number, it is the sum of its\
    \ digits in binary (ie. 110, 0001 => 110 + 010 = 313). For a negative number,\
    \ the sum is its positive counterpart. Since it is recursive it is the same as\
    \ the iterative version which you can find [here](https://www.geeksforgeeks.org/iterative-approach-to-sum-digits-in-a-binary-number/).\n\
    <|/ c |>\n<| c |>\nYeah, I understand, but I do not understand how to find the\
    \ digits in binary in code. Thanks.\n<|/ c |>\n<| a tags=algorithm,java dscore=1\
    \ |>\nOne can use recursive method to solve this problem:\n<code>\nint sum = 0;\n\
    private String binary = \"\";\n\npublic String getSum(long n) {\n    // if number\
    \ is positive\n    if (n > 0) {\n        // get the binary representation of number\
    \ and add to sum\n        binary += Integer.toString((n >> 0) % 2, 2);\n     \
    \   sum += (n / 10) * (int) Math.pow(2, binary.length());\n    } else {\n    \
    \    // if number is negative\n        binary += Integer.toString((n >> 0) % 2,\
    \ 2);\n        sum += (n / 10) * (int) Math.pow(2, binary.length());\n    }\n\
    \    // if number is 0, then reset binary and sum\n    if (n == 0) {\n       \
    \ binary = \"0\";\n        sum = 0;\n    }\n    return getSum(sum);\n}\n\npublic\
    \ static void main(String[] args) {\n    System.out.println(new Solution().getSum(5));\n\
    \    System.out.println(new Solution().getSum(-5));\n}\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 |>\nYou can use a method called reversed(), which reverses an integer.\
    \ You can then use an arraylist to hold each individual binary digit, and you\
    \ can then sum up each binary digit.\n<|/ a tags=algorithm,java |>\n<| c |>\n\
    Yeah, I understand how I can reverse an integer, but I am not sure how to store\
    \ each individual binary digit in an arraylist. Thanks.\n<|/ c |>\n<| a dscore=0\
    \ |>\n", "  if(N<10000) return \"0\"\n  return N.toString().split('').reduce((a,b)=>a+=b+parseInt(b.toString(2).split('').reduce((a,b)=>a+=b,'0'),2))\n\
    }\n</code>\n<|/ a tags=algorithm,javascript |>\n<| a dscore=2 |>\nThis is my take\
    \ on it:\n<code>", "\tlet res = '1';\n\tlet i = N;\n\twhile(i>0){\n\t\tlet s =\
    \ i.toString(2);\n\t\tres = res.substr(0, res.length-s.length)+s;\n\t\ti = i/2;\n\
    \t}\n\treturn res.substr(1);\n}\nmodule.exports = {\n\tsolve\n}\n<|/ file |>\n\
    <| c |>\nCould you explain how this works? Specifically this part: `let res =\
    \ 1 + Math.floor(Math.pow(N / 2, 2) / 2);`\n<|/ c |>\n<| c |>\nIt means find the\
    \ sum of the last digit of N and append it to the next digit\n<|/ c |>\n<| c |>\n\
    If this answered your question please upvote and accept it :)\n<|/ c |>\n<| c\
    \ |>\nI upvoted and accepted it. I just wanted to clarify that this solution doesn't\
    \ work for all N values. For example: `solve(2)` should return \"0\", but it returns\
    \ \"11\".\n<|/ c |>\n<| c |>\nApologies - I missed that case. Have updated the\
    \ answer to ensure it returns 0 for that case. Also changed the answer to not\
    \ return N for all cases.\n<|/ c |>\n<| a dscore=0 |>\nYou can do this in one\
    \ line as such:\n<code>\nconst mod = (n) => [n % 2 ? 1 : 0, n >> 1];\n\nconst\
    \ result = `${1 + mod((n | 0))}${mod((n | 0))}`;\n</code>\n<|/ a tags=javascript\
    \ |>\n<| c |>\nThis assumes negative integers aren't allowed, which they may not\
    \ be\n<|/ c |>\n<| c |>\nGood point. I was looking at the original question and\
    \ didn't notice that they wanted to return 0 for negative numbers. I'll update\
    \ the answer.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nvar solve = (n) => {\n\
    \    var arr = n.toString().split('').reverse().join('').split('').reverse();\n\
    \    var res = arr.reduce((a,b) => a + parseInt(b), 0);\n    var str = '';\n \
    \   for(var i = res.length - 1; i >= 0; i--){\n        str += '1' + parseInt(res[i]);\n\
    \    }\n    return str;\n}\n\nsolve(-4)\nsolve(0)\nsolve(2)\nsolve(100)\nsolve(253)\n\
    solve(12345)\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript dscore=0 |>\n<code>",
  "  let num = new Array(N+1).fill(0);\n  for (let i=0;i<N;i++){\n    num[N-i]=1;\n\
    \  }\n  num.reverse();\n  let res = \"\";\n  for (let i=0;i<N;i++){\n    res+=num[i]\n\
    \  }\n  return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
