name: HumanEval_158_find_max
language: r
prompt: "# Write a function that accepts a list of strings.\n# The list contains different\
  \ words. Return the word with maximum number\n# of unique characters. If multiple\
  \ strings have maximum number of unique\n# characters, return the one which comes\
  \ first in lexicographical order.\n# >>> find_max(c('name', 'of', 'string'))\n#\
  \ 'string'\n# >>> find_max(c('name', 'enam', 'game'))\n# 'enam'\n# >>> find_max(c('aaaaaaa',\
  \ 'bb', 'cc'))\n# 'aaaaaaa'\nfind_max <- function(words) {"
tests: "test_humaneval <- function() {\ncandidate <- find_max\n    if(!identical(candidate(c('name',\
  \ 'of', 'string')), 'string')){quit('no', 1)}\n    if(!identical(candidate(c('name',\
  \ 'enam', 'game')), 'enam')){quit('no', 1)}\n    if(!identical(candidate(c('aaaaaaa',\
  \ 'bb', 'cc')), 'aaaaaaa')){quit('no', 1)}\n    if(!identical(candidate(c('abc',\
  \ 'cba')), 'abc')){quit('no', 1)}\n    if(!identical(candidate(c('play', 'this',\
  \ 'game', 'of', 'footbott')), 'footbott')){quit('no', 1)}\n    if(!identical(candidate(c('we',\
  \ 'are', 'gonna', 'rock')), 'gonna')){quit('no', 1)}\n    if(!identical(candidate(c('we',\
  \ 'are', 'a', 'mad', 'nation')), 'nation')){quit('no', 1)}\n    if(!identical(candidate(c('this',\
  \ 'is', 'a', 'prrk')), 'this')){quit('no', 1)}\n    if(!identical(candidate(c('b')),\
  \ 'b')){quit('no', 1)}\n    if(!identical(candidate(c('play', 'play', 'play')),\
  \ 'play')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  max_word <- words[1]\n  max_unique <- length(unique(strsplit(words[1],\
    \ \"\")[[1]]))\n  for (word in words[-1]) {\n    unique_chars <- length(unique(strsplit(word,\
    \ \"\")[[1]]))\n    if (unique_chars > max_unique) {\n      max_word <- word\n\
    \      max_unique <- unique_chars\n    }\n  }\n  return(max_word)\n}\n", "\n \
    \ max_unique <- 0\n  max_word <- \"\"\n  for (word in words) {\n    unique_chars\
    \ <- unique(strsplit(word, \"\")[[1]])\n    if (length(unique_chars) > max_unique)\
    \ {\n      max_unique <- length(unique_chars)\n      max_word <- word\n    }\n\
    \  }\n  return(max_word)\n}\n", "\n  max_len <- max(nchar(words))\n  max_words\
    \ <- words[nchar(words) == max_len]\n  max_words[which.min(max_words)]\n}\n",
  "\n    max_word <- words[1]\n    max_unique <- length(unique(strsplit(words[1],\
    \ \"\")[[1]]))\n    for (word in words[2:length(words)]) {\n        unique_chars\
    \ <- length(unique(strsplit(word, \"\")[[1]]))\n        if (unique_chars > max_unique)\
    \ {\n            max_word <- word\n            max_unique <- unique_chars\n  \
    \      }\n    }\n    return(max_word)\n}\n", "\n  max_len <- 0\n  max_word <-\
    \ \"\"\n  for (word in words) {\n    if (length(unique(strsplit(word, \"\")[[1]]))\
    \ > max_len) {\n      max_len <- length(unique(strsplit(word, \"\")[[1]]))\n \
    \     max_word <- word\n    }\n  }\n  return(max_word)\n}\n", "\n  max_word <-\
    \ words[1]\n  max_len <- length(unique(strsplit(words[1], \"\")[[1]]))\n  for\
    \ (word in words[-1]) {\n    len <- length(unique(strsplit(word, \"\")[[1]]))\n\
    \    if (len > max_len) {\n      max_word <- word\n      max_len <- len\n    }\n\
    \  }\n  max_word\n}\n", "\n    max_word <- words[1]\n    max_count <- length(unique(strsplit(words[1],\
    \ \"\")[[1]]))\n    for (word in words[2:length(words)]) {\n        count <- length(unique(strsplit(word,\
    \ \"\")[[1]]))\n        if (count > max_count) {\n            max_word <- word\n\
    \            max_count <- count\n        }\n    }\n    return(max_word)\n}\n",
  "\n  max_word <- words[1]\n  max_unique <- length(unique(strsplit(words[1], \"\"\
    )[[1]]))\n  for (word in words[-1]) {\n    unique_chars <- length(unique(strsplit(word,\
    \ \"\")[[1]]))\n    if (unique_chars > max_unique) {\n      max_word <- word\n\
    \      max_unique <- unique_chars\n    }\n  }\n  return(max_word)\n}\n", "\n \
    \ max_unique_chars <- max(sapply(words, function(word) {\n    length(unique(strsplit(word,\
    \ \"\")[[1]]))\n  }))\n  words[which.max(sapply(words, function(word) {\n    length(unique(strsplit(word,\
    \ \"\")[[1]])) == max_unique_chars\n  }))]\n}\n", "\n  # YOUR CODE HERE\n  max_unique_chars\
    \ <- 0\n  max_word <- \"\"\n  for (word in words) {\n    unique_chars <- length(unique(strsplit(word,\
    \ \"\")[[1]]))\n    if (unique_chars > max_unique_chars) {\n      max_unique_chars\
    \ <- unique_chars\n      max_word <- word\n    }\n  }\n  return(max_word)\n}\n",
  "\n  # YOUR CODE HERE\n  max_unique_chars <- 0\n  max_word <- \"\"\n  for (word\
    \ in words) {\n    unique_chars <- length(unique(unlist(strsplit(word, \"\"))))\n\
    \    if (unique_chars > max_unique_chars) {\n      max_unique_chars <- unique_chars\n\
    \      max_word <- word\n    }\n  }\n  return(max_word)\n}\n", "\n  max_unique\
    \ <- 0\n  max_word <- ''\n  for (word in words) {\n    unique_chars <- length(unique(unlist(strsplit(word,\
    \ ''))))\n    if (unique_chars > max_unique) {\n      max_unique <- unique_chars\n\
    \      max_word <- word\n    }\n  }\n  return(max_word)\n}\n", "\n  # YOUR CODE\
    \ HERE\n  max_unique_chars <- 0\n  max_word <- \"\"\n  for (word in words) {\n\
    \    unique_chars <- length(unique(unlist(strsplit(word, \"\"))))\n    if (unique_chars\
    \ > max_unique_chars) {\n      max_unique_chars <- unique_chars\n      max_word\
    \ <- word\n    }\n  }\n  return(max_word)\n}\n", "\n  max_unique <- 0\n  max_word\
    \ <- \"\"\n  for (word in words) {\n    unique_chars <- length(unique(strsplit(word,\
    \ \"\")[[1]]))\n    if (unique_chars > max_unique) {\n      max_unique <- unique_chars\n\
    \      max_word <- word\n    }\n  }\n  return(max_word)\n}\n", "\n  max_unique\
    \ <- 0\n  max_word <- \"\"\n  for (word in words) {\n    unique_chars <- length(unique(strsplit(word,\
    \ \"\")[[1]]))\n    if (unique_chars > max_unique) {\n      max_unique <- unique_chars\n\
    \      max_word <- word\n    }\n  }\n  return(max_word)\n}\n", "\n  max_word <-\
    \ words[1]\n  max_unique <- length(unique(strsplit(max_word, '')[[1]]))\n  for\
    \ (word in words[-1]) {\n    unique_chars <- length(unique(strsplit(word, '')[[1]]))\n\
    \    if (unique_chars > max_unique) {\n      max_word <- word\n      max_unique\
    \ <- unique_chars\n    }\n  }\n  return(max_word)\n}\n", "\n  max_word <- words[1]\n\
    \  max_unique <- length(unique(strsplit(max_word, \"\")[[1]]))\n  for (word in\
    \ words) {\n    unique_chars <- length(unique(strsplit(word, \"\")[[1]]))\n  \
    \  if (unique_chars > max_unique) {\n      max_word <- word\n      max_unique\
    \ <- unique_chars\n    }\n  }\n  return(max_word)\n}\n", "\n  max_unique <- 0\n\
    \  max_word <- \"\"\n  for (word in words) {\n    unique_letters <- length(unique(strsplit(word,\
    \ \"\")[[1]]))\n    if (unique_letters > max_unique) {\n      max_unique <- unique_letters\n\
    \      max_word <- word\n    }\n  }\n  return(max_word)\n}\n", "\n  max_len <-\
    \ 0\n  max_word <- \"\"\n  for (word in words) {\n    if (length(unique(unlist(strsplit(word,\
    \ \"\")))) > max_len) {\n      max_len <- length(unique(unlist(strsplit(word,\
    \ \"\"))))\n      max_word <- word\n    }\n  }\n  return(max_word)\n}\n", "\n\
    \  max_word <- words[1]\n  max_count <- length(unique(strsplit(words[1], \"\"\
    )[[1]]))\n  for (word in words[-1]) {\n    count <- length(unique(strsplit(word,\
    \ \"\")[[1]]))\n    if (count > max_count) {\n      max_word <- word\n      max_count\
    \ <- count\n    }\n  }\n  return(max_word)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
