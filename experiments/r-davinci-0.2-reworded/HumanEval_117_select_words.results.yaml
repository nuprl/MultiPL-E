name: HumanEval_117_select_words
language: r
results:
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words[sapply(words, function(x) {\n    sum(!grepl(\"[aeiou]\", x))\
    \ == n\n  })]\n}\n\ntest_humaneval <- function() {\ncandidate <- select_words\n\
    \    if(!identical(candidate('Mary had a little lamb', 4), c('little'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Mary had a little lamb', 3), c('Mary', 'lamb'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('simple white space', 2), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('Hello world', 4), c('world'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Uncle sam', 3), c('Uncle'))){quit('no', 1)}\n\
    \    if(!identical(candidate('', 4), c())){quit('no', 1)}\n    if(!identical(candidate('a\
    \ b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n  return(words)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- select_words\n    if(!identical(candidate('Mary had a little\
    \ lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary had\
    \ a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n  return(words)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- select_words\n    if(!identical(candidate('Mary had a little\
    \ lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary had\
    \ a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n  return(words)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- select_words\n    if(!identical(candidate('Mary had a little\
    \ lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary had\
    \ a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    }\n \ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[words != \"\"]\n  consonants <- c(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n  words <- words[sapply(words,\
    \ function(x) sum(sapply(strsplit(x, \"\")[[1]], function(y) y %in% consonants))\
    \ == n)]\n  return(words)\n}\n\ntest_humaneval <- function() {\ncandidate <- select_words\n\
    \    if(!identical(candidate('Mary had a little lamb', 4), c('little'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Mary had a little lamb', 3), c('Mary', 'lamb'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('simple white space', 2), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('Hello world', 4), c('world'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Uncle sam', 3), c('Uncle'))){quit('no', 1)}\n\
    \    if(!identical(candidate('', 4), c())){quit('no', 1)}\n    if(!identical(candidate('a\
    \ b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n    words <- unlist(strsplit(s,\
    \ \" \"))\n    words <- words[nchar(words) > 0]\n    consonants <- c('b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z')\n    words <- words[sapply(words, function(word) {\n        sum(nchar(gsub('[^a-zA-Z]',\
    \ '', word))) == n\n    })]\n    return(words)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- select_words\n    if(!identical(candidate('Mary had a little\
    \ lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary had\
    \ a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  if (nchar(s) ==\
    \ 0) {\n    return(c())\n  }\n  words <- unlist(strsplit(s, \" \"))\n  words <-\
    \ words[nchar(words) > 0]\n  consonants <- c(\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n  words <- words[sapply(words, function(word)\
    \ {\n    sum(nchar(word) == n && sapply(strsplit(word, \"\")[[1]], function(letter)\
    \ {\n      letter %in% consonants\n    }))\n  })]\n  return(words)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nWarning messages:\\n1: In nchar(word) == n && sapply(strsplit(word, \"\"\
    )[[1]], function(letter) { :\\n  \\'length(x) = 4 > 1\\' in coercion to \\'logical(1)\\\
    '\\n2: In nchar(word) == n && sapply(strsplit(word, \"\")[[1]], function(letter)\
    \ { :\\n  \\'length(x) = 4 > 1\\' in coercion to \\'logical(1)\\'\\n'"
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- strsplit(s,\
    \ \" \")[[1]]\n  words[sapply(words, function(w) {\n    sum(!grepl(\"[aeiou]\"\
    , w)) == n\n  })]\n}\n\ntest_humaneval <- function() {\ncandidate <- select_words\n\
    \    if(!identical(candidate('Mary had a little lamb', 4), c('little'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Mary had a little lamb', 3), c('Mary', 'lamb'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('simple white space', 2), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('Hello world', 4), c('world'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Uncle sam', 3), c('Uncle'))){quit('no', 1)}\n\
    \    if(!identical(candidate('', 4), c())){quit('no', 1)}\n    if(!identical(candidate('a\
    \ b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ ' '))\n  words[nchar(gsub('[aeiou]', '', words)) == n]\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  # YOUR CODE HERE\n\
    \  return(NULL)\n}\n\ntest_humaneval <- function() {\ncandidate <- select_words\n\
    \    if(!identical(candidate('Mary had a little lamb', 4), c('little'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Mary had a little lamb', 3), c('Mary', 'lamb'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('simple white space', 2), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('Hello world', 4), c('world'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Uncle sam', 3), c('Uncle'))){quit('no', 1)}\n\
    \    if(!identical(candidate('', 4), c())){quit('no', 1)}\n    if(!identical(candidate('a\
    \ b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  s <- unlist(strsplit(s,\
    \ \" \"))\n  s <- s[nchar(s) >= n]\n  s <- s[nchar(gsub(\"[aeiou]\", \"\", s))\
    \ == n]\n  return(s)\n}\n\ntest_humaneval <- function() {\ncandidate <- select_words\n\
    \    if(!identical(candidate('Mary had a little lamb', 4), c('little'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Mary had a little lamb', 3), c('Mary', 'lamb'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('simple white space', 2), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('Hello world', 4), c('world'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Uncle sam', 3), c('Uncle'))){quit('no', 1)}\n\
    \    if(!identical(candidate('', 4), c())){quit('no', 1)}\n    if(!identical(candidate('a\
    \ b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  s <- strsplit(s,\
    \ \" \")[[1]]\n  s <- s[nchar(s) >= n]\n  s <- s[nchar(gsub(\"[aeiou]\", \"\"\
    , s)) == n]\n  return(s)\n}\n\ntest_humaneval <- function() {\ncandidate <- select_words\n\
    \    if(!identical(candidate('Mary had a little lamb', 4), c('little'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Mary had a little lamb', 3), c('Mary', 'lamb'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('simple white space', 2), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('Hello world', 4), c('world'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Uncle sam', 3), c('Uncle'))){quit('no', 1)}\n\
    \    if(!identical(candidate('', 4), c())){quit('no', 1)}\n    if(!identical(candidate('a\
    \ b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words[nchar(gsub(\"[aeiou]\", \"\", words)) == n]\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words[nchar(gsub(\"[aeiou]\", \"\", words)) == n]\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n  return(words)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- select_words\n    if(!identical(candidate('Mary had a little\
    \ lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary had\
    \ a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- strsplit(s,\
    \ \" \")[[1]]\n  words[sapply(words, function(x) {\n    sum(!grepl(\"[aeiou]\"\
    , x)) == n\n  })]\n}\n\ntest_humaneval <- function() {\ncandidate <- select_words\n\
    \    if(!identical(candidate('Mary had a little lamb', 4), c('little'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Mary had a little lamb', 3), c('Mary', 'lamb'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('simple white space', 2), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('Hello world', 4), c('world'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Uncle sam', 3), c('Uncle'))){quit('no', 1)}\n\
    \    if(!identical(candidate('', 4), c())){quit('no', 1)}\n    if(!identical(candidate('a\
    \ b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    }\n \ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
    # c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  s <- strsplit(s,\
    \ \" \")[[1]]\n  s <- s[nchar(s) >= n]\n  s <- s[sapply(s, function(x) sum(!(x\
    \ %in% c(\"a\", \"e\", \"i\", \"o\", \"u\")))) == n]\n  return(s)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
    \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
