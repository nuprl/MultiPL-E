name: HumanEval_153_Strongest_Extension
language: r
prompt: "# You will be given the name of a class (a string) and a list of extensions.\n\
  # The extensions are to be used to load additional classes to the class. The\n#\
  \ strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  # letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n# in the extension's name, the strength is given by the fraction CAP - SM. \n\
  # You should find the strongest extension and return a string in this \n# format:\
  \ ClassName.StrongestExtensionName.\n# If there are two or more extensions with\
  \ the same strength, you should\n# choose the one that comes first in the list.\n\
  # For example, if you are given \"Slices\" as the class and a list of the\n# extensions:\
  \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes'\
  \ since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n#\
  \ Example:\n# >>> Strongest_Extension('my_class', c('AA', 'Be', 'CC'))\n# 'my_class.AA'\n\
  Strongest_Extension <- function(class_name, extensions) {"
tests: "test_humaneval <- function() {\ncandidate <- Strongest_Extension\n    if(!identical(candidate('Watashi',\
  \ c('tEN', 'niNE', 'eIGHt8OKe')), 'Watashi.eIGHt8OKe')){quit('no', 1)}\n    if(!identical(candidate('Boku123',\
  \ c('nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg')), 'Boku123.YEs.WeCaNe')){quit('no',\
  \ 1)}\n    if(!identical(candidate('__YESIMHERE', c('t', 'eMptY', 'nothing', 'zeR00',\
  \ 'NuLl__', '123NoooneB321')), '__YESIMHERE.NuLl__')){quit('no', 1)}\n    if(!identical(candidate('K',\
  \ c('Ta', 'TAR', 't234An', 'cosSo')), 'K.TAR')){quit('no', 1)}\n    if(!identical(candidate('__HAHA',\
  \ c('Tab', '123', '781345', '-_-')), '__HAHA.123')){quit('no', 1)}\n    if(!identical(candidate('YameRore',\
  \ c('HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-')), 'YameRore.okIWILL123')){quit('no',\
  \ 1)}\n    if(!identical(candidate('finNNalLLly', c('Die', 'NowW', 'Wow', 'WoW')),\
  \ 'finNNalLLly.WoW')){quit('no', 1)}\n    if(!identical(candidate('_', c('Bb', '91245')),\
  \ '_.Bb')){quit('no', 1)}\n    if(!identical(candidate('Sp', c('671235', 'Bb')),\
  \ 'Sp.671235')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # your code here\n  return(paste(class_name, extensions[which.max(nchar(extensions)\
    \ - nchar(gsub(\"[A-Z]\", \"\", extensions)))], sep = \".\"))\n}\nStrongest_Extension('my_class',\
    \ c('AA', 'Be', 'CC'))\n", "\n  # your code here\n  strength <- function(x) {\n\
    \    CAP <- sum(grepl(\"[A-Z]\", x))\n    SM <- sum(grepl(\"[a-z]\", x))\n   \
    \ return(CAP - SM)\n  }\n  max_strength <- max(sapply(extensions, strength))\n\
    \  return(paste(class_name, extensions[which.max(sapply(extensions, strength))],\
    \ sep = \".\"))\n}\n", "\n  # Your code goes here\n  strength <- function(x) {\n\
    \    CAP <- sum(grepl(\"[A-Z]\", x))\n    SM <- sum(grepl(\"[a-z]\", x))\n   \
    \ return(CAP - SM)\n  }\n  strength_list <- sapply(extensions, strength)\n  max_strength\
    \ <- max(strength_list)\n  max_strength_index <- which(strength_list == max_strength)\n\
    \  return(paste(class_name, extensions[max_strength_index[1]], sep = \".\"))\n\
    }\n", "\n  # Your code goes here\n  strength <- function(x) {\n    CAP <- sum(grepl(\"\
    [A-Z]\", x))\n    SM <- sum(grepl(\"[a-z]\", x))\n    return(CAP - SM)\n  }\n\
    \  max_strength <- max(sapply(extensions, strength))\n  max_strength_index <-\
    \ which(sapply(extensions, strength) == max_strength)\n  return(paste(class_name,\
    \ extensions[max_strength_index[1]], sep = \".\"))\n}\n", "\n  # your code here\n\
    }\n", "\n  # Your code here\n  return(paste(class_name, '.', extensions[which.max(nchar(gsub('[a-z]',\
    \ '', extensions)) - nchar(gsub('[A-Z]', '', extensions)))], sep = ''))\n}\n",
  "\n  # Your code goes here\n  # You can use the function 'str_count' from the 'stringr'\
    \ package\n  # to count the number of uppercase and lowercase letters in a string\n\
    \  # For example:\n  # str_count('AA', '[A-Z]')\n  # will return 2\n  # str_count('AA',\
    \ '[a-z]')\n  # will return 0\n  # str_count('AA', '[A-Z]') - str_count('AA',\
    \ '[a-z]')\n  # will return 2\n  # You can use the function 'which.max' to find\
    \ the index of the\n  # maximum value in a vector\n  # For example:\n  # which.max(c(1,\
    \ 2, 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return\
    \ 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2,\
    \ 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return\
    \ 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2,\
    \ 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return\
    \ 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2,\
    \ 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return\
    \ 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2,\
    \ 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return\
    \ 3\n", "\n  # your code here\n  cap <- sapply(extensions, function(x) sum(grepl(\"\
    [A-Z]\", x)))\n  sm <- sapply(extensions, function(x) sum(grepl(\"[a-z]\", x)))\n\
    \  strength <- cap - sm\n  return(paste(class_name, extensions[which.max(strength)],\
    \ sep = \".\"))\n}\n", "\n    # Your code goes here\n    return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) {\n        sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n    }))], sep = '.'))\n}\n ", "\n  # your code\
    \ here\n  strength <- sapply(extensions, function(x) {\n    sum(grepl(\"[A-Z]\"\
    , x)) - sum(grepl(\"[a-z]\", x))\n  })\n  max_strength <- max(strength)\n  max_strength_index\
    \ <- which(strength == max_strength)\n  paste(class_name, extensions[max_strength_index[1]],\
    \ sep = \".\")\n}\n", "\n  # your code here\n}\n", "\n  # Your code here\n  strength\
    \ <- function(extension) {\n    CAP <- sum(str_detect(extension, \"[A-Z]\"))\n\
    \    SM <- sum(str_detect(extension, \"[a-z]\"))\n    return(CAP - SM)\n  }\n\
    \  extension_strength <- sapply(extensions, strength)\n  strongest_extension <-\
    \ extensions[which.max(extension_strength)]\n  return(paste(class_name, strongest_extension,\
    \ sep = \".\"))\n}\n", "\n  # Your code here\n  return(paste(class_name, '.',\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(strsplit(x, '')[[1]]\
    \ %in% LETTERS) - sum(strsplit(x, '')[[1]] %in% letters)\n  }))], sep = ''))\n\
    }\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n", "\n  # your code\
    \ here\n}\n", "\n    # Your code goes here\n    # You will need to use the function\
    \ 'str_count' from the 'stringr' package\n    # The function 'str_count' takes\
    \ a string and a pattern and returns the number\n    # of times the pattern appears\
    \ in the string.\n    # For example:\n    # >>> str_count('Hello', '[A-Z]')\n\
    \    # 1\n    # >>> str_count('Hello', '[a-z]')\n    # 4\n    # >>> str_count('Hello',\
    \ '[A-Za-z]')\n    # 5\n    # >>> str_count('Hello', '[0-9]')\n    # 0\n    #\
    \ >>> str_count('Hello', '[^0-9]')\n    # 5\n    # >>> str_count('Hello', '[^A-Z]')\n\
    \    # 4\n    # >>> str_count('Hello', '[^a-z]')\n    # 1\n    # >>> str_count('Hello',\
    \ '[^A-Za-z]')\n    # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n    # 0\n\
    \    # >>> str_count('Hello', '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello',\
    \ '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n   \
    \ # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello',\
    \ '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n   \
    \ # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello',\
    \ '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n   \
    \ # 0\n    # >>>", "\n  # your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = ''))\n}\n", "\n    # Your code goes here\n    return(paste(class_name,\
    \ '.', extensions[which.max(sapply(extensions, function(x) {\n        sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n    }))], sep = ''))\n}\n", "\n  # Your code here\n\
    \  strength <- numeric(length(extensions))\n  for (i in 1:length(extensions))\
    \ {\n    strength[i] <- sum(grepl(\"[A-Z]\", extensions[i])) - sum(grepl(\"[a-z]\"\
    , extensions[i]))\n  }\n  class_name <- paste(class_name, extensions[which.max(strength)],\
    \ sep = \".\")\n  return(class_name)\n}\n ", "\n  # Your code here\n  strongest_extension\
    \ <- extensions[1]\n  strongest_strength <- 0\n  for (extension in extensions)\
    \ {\n    strength <- sum(str_detect(extension, \"[A-Z]\")) - sum(str_detect(extension,\
    \ \"[a-z]\"))\n    if (strength > strongest_strength) {\n      strongest_strength\
    \ <- strength\n      strongest_extension <- extension\n    }\n  }\n  paste(class_name,\
    \ strongest_extension, sep = \".\")\n}\n", "\n  # your code here\n  return(paste(class_name,\
    \ extensions[which.max(nchar(extensions) - nchar(tolower(extensions)))], sep =\
    \ '.'))\n}\n", "\n  # Your code here\n  # You should return a string\n  # You\
    \ should not modify the class_name or the extensions\n  # You should not use any\
    \ packages\n  # You should not use any loops\n  # You should not use any if statements\n\
    \  # You should not use any for statements\n  # You should not use any while statements\n\
    \  # You should not use any repeat statements\n  # You should not use any break\
    \ statements\n  # You should not use any next statements\n  # You should not use\
    \ any return statements\n  # You should not use any switch statements\n  # You\
    \ should not use any tryCatch statements\n  # You should not use any try statements\n\
    \  # You should not use any stop statements\n  # You should not use any warning\
    \ statements\n  # You should not use any message statements\n  # You should not\
    \ use any cat statements\n  # You should not use any print statements\n  # You\
    \ should not use any paste statements\n  # You should not use any paste0 statements\n\
    \  # You should not use any sprintf statements\n  # You should not use any format\
    \ statements\n  # You should not use any sprintf statements\n  # You should not\
    \ use any format statements\n  # You should not use any sprintf statements\n \
    \ # You should not use any format statements\n  # You should not use any sprintf\
    \ statements\n  # You should not use any format statements\n  # You should not\
    \ use any sprintf statements\n  # You should not use any format statements\n \
    \ # You should not use any sprintf statements\n  # You should not use any format\
    \ statements\n  # You should not use any sprintf statements\n  # You should not\
    \ use any format statements\n  # You should not use any sprintf statements\n \
    \ # You should not use any format statements\n  # You should not use any sprintf\
    \ statements\n  # You should not use any format statements\n  # You should not\
    \ use any sprintf statements\n  # You should not use any format statements\n \
    \ # You should not use any sprintf statements\n  # You should not use any format\
    \ statements\n  # You should not use any sprintf statements\n  # You should not\
    \ use any format statements\n  # You should not use any sprintf statements\n \
    \ # You should not use any format statements\n  # You should not use any sprintf\
    \ statements\n  # You should not use any", "\n  # your code here\n}\n", "\n  #\
    \ Your code here\n  return(paste(class_name, '.', extensions[which.max(vapply(extensions,\
    \ function(x) {\n    sum(grepl('[[:upper:]]', x)) - sum(grepl('[[:lower:]]', x))\n\
    \  }, numeric(1)))], sep = ''))\n}\n", "\n    # Your code goes here\n    return(paste(class_name,\
    \ extensions[which.max(nchar(extensions) - nchar(gsub(\"[A-Z]\", \"\", extensions)))],\
    \ sep = \".\"))\n}\nStrongest_Extension('my_class', c('AA', 'Be', 'CC'))\n", "\n\
    \    # your code here\n    return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) {\n        sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n   \
    \ }))], sep = ''))\n}\n ", "\n    # your code here\n    return(paste(class_name,\
    \ \".\", extensions[which.max(nchar(gsub(\"[a-z]\", \"\", extensions)) - nchar(gsub(\"\
    [A-Z]\", \"\", extensions)))], sep = \"\"))\n}\n ", "\n  # your code here\n  return(paste(class_name,\
    \ \".\", extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl(\"\
    [A-Z]\", x)) - sum(grepl(\"[a-z]\", x))\n  }))], sep = \"\"))\n}\n", "\n  # your\
    \ code here\n  return(paste(class_name, '.', extensions[1], sep = ''))\n}\n",
  "\n  # Your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = ''))\n}\n", "\n  # Your code here\n  return(paste(class_name, extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = '.'))\n}\n", "\n  # Your code here\n  # Calculate the strength of each\
    \ extension\n  strength <- sapply(extensions, function(x) {\n    # Count the number\
    \ of uppercase letters\n    num_upper <- sum(grepl(\"[A-Z]\", x))\n    # Count\
    \ the number of lowercase letters\n    num_lower <- sum(grepl(\"[a-z]\", x))\n\
    \    # Calculate the strength\n    num_upper - num_lower\n  })\n  # Find the index\
    \ of the strongest extension\n  strongest_index <- which.max(strength)\n  # Return\
    \ the strongest extension\n  paste(class_name, extensions[strongest_index], sep\
    \ = \".\")\n}\n", "\n  # your code here\n  return(paste(class_name, extensions[which.max(str_count(extensions,\
    \ \"[A-Z]\") - str_count(extensions, \"[a-z]\"))], sep = \".\"))\n}\n", "\n  #\
    \ Your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = ''))\n}\n", "\n  # Your code here\n  CAP <- sapply(extensions, function(x)\
    \ sum(grepl(\"[A-Z]\", x)))\n  SM <- sapply(extensions, function(x) sum(grepl(\"\
    [a-z]\", x)))\n  strength <- CAP - SM\n  max_strength <- max(strength)\n  max_strength_index\
    \ <- which(strength == max_strength)\n  strongest_extension <- extensions[max_strength_index[1]]\n\
    \  return(paste(class_name, strongest_extension, sep = \".\"))\n}\n", "\n  # your\
    \ code here\n}\n", "\n  # Your code here\n  # You can use the function 'str_count'\
    \ from the 'stringr' package\n  # to count the number of uppercase letters in\
    \ a string.\n  # You can use the function 'str_length' from the 'stringr' package\n\
    \  # to count the number of lowercase letters in a string.\n  # You can use the\
    \ function 'which.max' to find the index of the\n  # maximum value in a vector.\n\
    \  # You can use the function 'paste' to concatenate strings.\n  # You can use\
    \ the function 'str_c' to concatenate strings.\n  # You can use the function 'str_to_upper'\
    \ to convert a string to uppercase.\n  # You can use the function 'str_to_lower'\
    \ to convert a string to lowercase.\n  # You can use the function 'str_detect'\
    \ to detect if a string contains a pattern.\n  # You can use the function 'str_replace'\
    \ to replace a pattern in a string.\n  # You can use the function 'str_split'\
    \ to split a string into a list of strings.\n  # You can use the function 'str_trim'\
    \ to trim a string.\n  # You can use the function 'str_sub' to extract a substring\
    \ from a string.\n  # You can use the function 'str_dup' to duplicate a string.\n\
    \  # You can use the function 'str_replace_all' to replace all occurences of a\
    \ pattern in a string.\n  # You can use the function 'str_replace_na' to replace\
    \ NA values in a string.\n  # You can use the function 'str_sort' to sort a string.\n\
    \  # You can use the function 'str_subset' to extract a substring from a string.\n\
    \  # You can use the function 'str_wrap' to wrap a string.\n  # You can use the\
    \ function 'str_view' to view a string.\n  # You can use the function 'str_which'\
    \ to find the indices of a pattern in a string.\n  # You can use the function\
    \ 'str_count' to count the number of occurences of a pattern in a string.\n  #\
    \ You can use the function 'str_length' to count the", "\n  # your code here\n\
    \  return(paste(class_name, \".\", extensions[which.max(nchar(extensions) - nchar(gsub(\"\
    [A-Z]\", \"\", extensions)))], sep = \"\"))\n}\n", "\n  # your code here\n  return(paste(class_name,\
    \ '.', extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n  }))], sep = ''))\n}\n", "\n    # Your code goes\
    \ here\n    return(paste(class_name, extensions[which.max(sapply(extensions, function(x)\
    \ {\n        sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n    }))], sep =\
    \ '.'))\n}\n", "\n  # your code here\n  strength <- function(x) {\n    CAP <-\
    \ length(grep(\"[A-Z]\", x))\n    SM <- length(grep(\"[a-z]\", x))\n    return(CAP\
    \ - SM)\n  }\n  strength_list <- lapply(extensions, strength)\n  max_strength\
    \ <- max(strength_list)\n  max_strength_index <- which(strength_list == max_strength)\n\
    \  if (length(max_strength_index) > 1) {\n    max_strength_index <- max_strength_index[1]\n\
    \  }\n  return(paste(class_name, extensions[max_strength_index], sep = \".\"))\n\
    }\n", "\n  # Your code here\n  # You can create other functions as you wish\n\
    \  # You can use the function 'str_count' from the 'stringr' package\n  # You\
    \ can use the function 'which.max' from the 'base' package\n  # You can use the\
    \ function 'paste' from the 'base' package\n  # You can use the function 'str_to_lower'\
    \ from the 'stringr' package\n  # You can use the function 'str_to_upper' from\
    \ the 'stringr' package\n  # You can use the function 'str_length' from the 'stringr'\
    \ package\n  # You can use the function 'abs' from the 'base' package\n  # You\
    \ can use the function 'sum' from the 'base' package\n  # You can use the function\
    \ 'str_split' from the 'stringr' package\n  # You can use the function 'str_c'\
    \ from the 'stringr' package\n  # You can use the function 'str_replace' from\
    \ the 'stringr' package\n  # You can use the function 'str_detect' from the 'stringr'\
    \ package\n  # You can use the function 'str_sub' from the 'stringr' package\n\
    \  # You can use the function 'str_extract' from the 'stringr' package\n  # You\
    \ can use the function 'str_replace_all' from the 'stringr' package\n  # You can\
    \ use the function 'str_match' from the 'stringr' package\n  # You can use the\
    \ function 'str_replace_na' from the 'stringr' package\n  # You can use the function\
    \ 'str_dup' from the 'stringr' package\n  # You can use the function 'str_trim'\
    \ from the 'stringr' package\n  # You can use the function 'str_wrap' from the\
    \ 'stringr' package\n  # You can use the function 'str_sort' from the 'stringr'\
    \ package\n  # You can use the function 'str_view' from the 'stringr' package\n\
    \  # You can use the function 'str_subset' from the 'stringr' package\n  # You\
    \ can use the function 'str_trunc' from the 'stringr' package\n  # You can use\
    \ the function 'str", "\n  # your code here\n}\n ", "\n  # your code here\n  return(paste(class_name,\
    \ \".\", extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl(\"\
    [A-Z]\", x)) - sum(grepl(\"[a-z]\", x))\n  }))], sep = \"\"))\n}\n", "\n  # your\
    \ code here\n}\n", "\n  # Your code here\n  class_name <- class_name\n  extensions\
    \ <- extensions\n  strength <- 0\n  strongest <- ''\n  for (extension in extensions)\
    \ {\n    cap <- sum(str_detect(extension, '[A-Z]'))\n    sm <- sum(str_detect(extension,\
    \ '[a-z]'))\n    if (cap - sm > strength) {\n      strength <- cap - sm\n    \
    \  strongest <- extension\n    }\n  }\n  return(paste(class_name, '.', strongest,\
    \ sep = ''))\n}", "\n  # your code here\n}\n", "\n  # Your code here\n  return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n  }))], sep = '.'))\n}\n", "\n    # Your code\
    \ goes here\n    return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) sum(grepl('[A-Z]', x))) - sapply(extensions, function(x) sum(grepl('[a-z]',\
    \ x))))], sep = ''))\n}\n", "\n  # Your code here\n  return(paste(class_name,\
    \ \".\", extensions[which.max(nchar(extensions) - nchar(gsub(\"[A-Z]\", \"\",\
    \ extensions)))], sep = \"\"))\n}\n", "\n  # your code here\n}\n", "\n  # Your\
    \ code here\n  return(paste(class_name, extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = '.'))\n}\n", "\n  # your code here\n}\n", "\n  # Your code here\n  class_name\
    \ <- paste(class_name, \".\", sep = \"\")\n  strength <- sapply(extensions, function(x)\
    \ {\n    sum(str_count(x, \"[A-Z]\")) - sum(str_count(x, \"[a-z]\"))\n  })\n \
    \ class_name <- paste(class_name, extensions[which.max(strength)], sep = \"\"\
    )\n  return(class_name)\n}\n", "\n  # your code here\n  class_name <- paste(class_name,\
    \ \".\", sep = \"\")\n  strongest_extension <- extensions[1]\n  strongest_extension_strength\
    \ <- 0\n  for (extension in extensions) {\n    extension_strength <- sum(str_detect(extension,\
    \ \"[A-Z]\")) - sum(str_detect(extension, \"[a-z]\"))\n    if (extension_strength\
    \ > strongest_extension_strength) {\n      strongest_extension_strength <- extension_strength\n\
    \      strongest_extension <- extension\n    }\n  }\n  return(paste(class_name,\
    \ strongest_extension, sep = \"\"))\n}\n", "\n    # your code here\n}\n ", "\n\
    \  # Your code here\n  strengths <- sapply(extensions, function(x) {\n    sum(str_detect(x,\
    \ \"[A-Z]\")) - sum(str_detect(x, \"[a-z]\"))\n  })\n  return(paste(class_name,\
    \ extensions[which.max(strengths)], sep = \".\"))\n}\n", "\n  # Your code here\n\
    }\n", "\n  # your code here\n}\n ", "\n  # Your code here\n}\n", "\n  # Your code\
    \ here\n  strengths <- sapply(extensions, function(x) {\n    sum(grepl(\"[A-Z]\"\
    , x)) - sum(grepl(\"[a-z]\", x))\n  })\n  max_strength <- max(strengths)\n  max_strength_index\
    \ <- which(strengths == max_strength)\n  return(paste(class_name, extensions[max_strength_index[1]],\
    \ sep = \".\"))\n}\n", "\n  # your code here\n  return(paste(class_name, extensions[which.max(sapply(extensions,\
    \ function(x) {\n    return(sum(grepl('[A-Z]', x))) - sum(grepl('[a-z]', x))\n\
    \  }))], sep = '.'))\n}\n", "\n  # your code here\n}\n", "\n  # Your code here\n\
    \  # You should return a string\n  # You should not modify the input\n  # You\
    \ can use the following function to count the number of uppercase letters\n  #\
    \ in a string:\n  # nchar(gsub('[^A-Z]', '', 'STRING'))\n  # You can use the following\
    \ function to count the number of lowercase letters\n  # in a string:\n  # nchar(gsub('[^a-z]',\
    \ '', 'STRING'))\n  # You can use the following function to find the index of\
    \ the maximum value\n  # in a vector:\n  # which.max(c(1, 2, 3))\n  # You can\
    \ use the following function to extract an element from a vector:\n  # c(1, 2,\
    \ 3)[1]\n  # You can use the following function to concatenate strings:\n  # paste('STRING1',\
    \ 'STRING2', sep = '')\n  # You can use the following function to convert a number\
    \ to a string:\n  # as.character(1)\n  # You can use the following function to\
    \ convert a string to a number:\n  # as.numeric('1')\n}\n", "\n  # Your code here\n\
    }\n ", "\n  # Your code here\n}\n", "\n  # your code here\n}\n", "\n  # your code\
    \ here\n  class_name <- class_name\n  extensions <- extensions\n  strength <-\
    \ function(extension) {\n    CAP <- nchar(gsub(\"[^A-Z]\", \"\", extension))\n\
    \    SM <- nchar(gsub(\"[^a-z]\", \"\", extension))\n    return(CAP - SM)\n  }\n\
    \  strongest <- extensions[which.max(sapply(extensions, strength))]\n  return(paste(class_name,\
    \ \".\", strongest, sep = \"\"))\n}\n", "\n    # your code here\n    return(paste(class_name,\
    \ '.', extensions[which.max(sapply(extensions, function(x) sum(is.upper.tri(x))\
    \ - sum(is.lower.tri(x))))], sep = ''))\n}\n", "\n    # Your code goes here\n\
    \    return(paste(class_name, extensions[which.max(sapply(extensions, function(x)\
    \ {\n        sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n    }))], sep =\
    \ '.'))\n}\n", "\n  # your code here\n  strength <- function(x) {\n    CAP <-\
    \ sum(str_detect(x, \"[A-Z]\"))\n    SM <- sum(str_detect(x, \"[a-z]\"))\n   \
    \ return(CAP - SM)\n  }\n  return(paste(class_name, extensions[which.max(sapply(extensions,\
    \ strength))], sep = \".\"))\n}\n", "\n  # your code here\n  return(paste(class_name,\
    \ '.', extensions[which.max(nchar(gsub('[^A-Z]', '', extensions)) - nchar(gsub('[^a-z]',\
    \ '', extensions)))], sep = ''))\n}\n", "\n  # your code here\n  return(paste(class_name,\
    \ '.', extensions[1], sep = ''))\n}\n", "\n  # your code here\n  return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(x %in% LETTERS)\
    \ - sum(x %in% letters)\n  }))], sep = '.'))\n}\n", "\n  # Your code here\n  strength\
    \ <- function(extension) {\n    CAP <- sum(str_detect(extension, \"[A-Z]\"))\n\
    \    SM <- sum(str_detect(extension, \"[a-z]\"))\n    return(CAP - SM)\n  }\n\
    \  strengths <- sapply(extensions, strength)\n  strongest <- which.max(strengths)\n\
    \  return(paste(class_name, extensions[strongest], sep = \".\"))\n}\n", "\n  #\
    \ Your code here\n  return(paste(class_name, extensions[which.max(sapply(extensions,\
    \ function(x) {\n    return(sum(grepl('[A-Z]', x))) - sum(grepl('[a-z]', x))\n\
    \  }))], sep = '.'))\n}\n", "\n  # Your code here\n  return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n  }))], sep = '.'))\n}\n", "\n  # Your code here\n\
    \  return(paste(class_name, \".\", extensions[which.max(sapply(extensions, function(x)\
    \ {\n    sum(grepl(\"[A-Z]\", x)) - sum(grepl(\"[a-z]\", x))\n  }))], sep = \"\
    \"))\n}\n", "\n    # your code here\n    return(paste(class_name, \".\", extensions[which.max(sapply(extensions,\
    \ function(x) sum(grepl(\"[A-Z]\", x))))], sep = \"\"))\n}\n ", "\n    # Your\
    \ code goes here\n    return(paste(class_name, \".\", extensions[which.max(nchar(extensions)\
    \ - nchar(gsub(\"[A-Z]\", \"\", extensions)))], sep = \"\"))\n}\n ", "\n  # Your\
    \ code here\n}\n", "\n  # your code here\n  return(paste(class_name, extensions[which.max(sapply(extensions,\
    \ function(x) {\n    return(sum(grepl('[A-Z]', x))) - sum(grepl('[a-z]', x))\n\
    \  }))], sep = '.'))\n}\n", "\n  # your code here\n  return(paste(class_name,\
    \ \".\", extensions[1], sep = \"\"))\n}\n", "\n  # your code here\n}\n", "\n \
    \ # your code here\n}\n", "\n  # Your code here\n  return(paste(class_name, '.',\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(x %in% LETTERS)\
    \ - sum(x %in% letters)\n  }))], sep = ''))\n}\n", "\n  # Your code here\n  return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) {\n    return(sum(is.na(grep(\"\
    [A-Z]\", x))) - sum(is.na(grep(\"[a-z]\", x))))\n  }))], sep = \".\"))\n}\n",
  "\n  # your code here\n}\n", "\n  # Your code here\n  return(paste(class_name, '.',\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n  }))], sep = ''))\n}\nStrongest_Extension('my_class',\
    \ c('AA', 'Be', 'CC'))\n", "\n  # your code here\n}\n ", "\n  # Your code here\n\
    \  strength <- function(x) {\n    CAP <- sum(str_detect(x, \"[A-Z]\"))\n    SM\
    \ <- sum(str_detect(x, \"[a-z]\"))\n    return(CAP - SM)\n  }\n  max_strength\
    \ <- max(sapply(extensions, strength))\n  max_strength_index <- which(sapply(extensions,\
    \ strength) == max_strength)\n  return(paste(class_name, extensions[max_strength_index[1]],\
    \ sep = \".\"))\n}\n", "\n  # Your code here\n  return(paste(class_name, extensions[which.max(nchar(extensions)\
    \ - nchar(gsub(\"[A-Z]\", \"\", extensions)))], sep = \".\"))\n}\n", "\n  # your\
    \ code here\n}\n", "\n  # Your code here\n  return(paste(class_name, extensions[1],\
    \ sep = \".\"))\n}\n", "\n  # Your code here\n  strength <- function(extension)\
    \ {\n    CAP <- sum(str_detect(extension, \"[A-Z]\"))\n    SM <- sum(str_detect(extension,\
    \ \"[a-z]\"))\n    return(CAP - SM)\n  }\n  strengths <- sapply(extensions, strength)\n\
    \  strongest <- which.max(strengths)\n  return(paste(class_name, extensions[strongest],\
    \ sep = \".\"))\n}", "\n  # Your code here\n}\n", "\n  # your code here\n  return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) {\n    return(sum(grepl('[A-Z]',\
    \ x))) - sum(grepl('[a-z]', x))\n  }))], sep = '.'))\n}\n", "\n  # your code here\n\
    }\n", "\n  # Your code here\n  # You can use the function sum()\n  # You can use\
    \ the function toupper()\n  # You can use the function tolower()\n  # You can\
    \ use the function which.max()\n  # You can use the function paste()\n  # You\
    \ can use the function substr()\n  # You can use the function nchar()\n  # You\
    \ can use the function strsplit()\n  # You can use the function unlist()\n  #\
    \ You can use the function sort()\n  # You can use the function unique()\n  #\
    \ You can use the function names()\n  # You can use the function match()\n  #\
    \ You can use the function as.numeric()\n  # You can use the function as.character()\n\
    \  # You can use the function as.data.frame()\n  # You can use the function as.vector()\n\
    \  # You can use the function as.list()\n  # You can use the function as.matrix()\n\
    \  # You can use the function as.integer()\n  # You can use the function as.logical()\n\
    \  # You can use the function as.factor()\n  # You can use the function as.double()\n\
    \  # You can use the function as.complex()\n  # You can use the function as.array()\n\
    \  # You can use the function as.raw()\n  # You can use the function as.numeric()\n\
    \  # You can use the function as.character()\n  # You can use the function as.data.frame()\n\
    \  # You can use the function as.vector()\n  # You can use the function as.list()\n\
    \  # You can use the function as.matrix()\n  # You can use the function as.integer()\n\
    \  # You can use the function as.logical()\n  # You can use the function as.factor()\n\
    \  # You can use the function as.double()\n  # You can use the function as.complex()\n\
    \  # You can use the function as.array()\n  # You can use the function as.raw()\n\
    \  # You can use the function as.numeric()\n  # You can use the function as.character()\n\
    \  # You can use the function as.data.frame()\n  # You can use the", "\n    #\
    \ your code here\n    return(paste(class_name, '.', extensions[which.max(nchar(gsub('[^A-Z]',\
    \ '', extensions)) - nchar(gsub('[^a-z]', '', extensions)))], sep = ''))\n}\n ",
  "\n  # your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) {\n    return(sum(grepl('[A-Z]', x))) - sum(grepl('[a-z]', x)))\n\
    \  }))], sep = ''))\n}\n", "\n  # Your code here\n  # You can use the function\
    \ 'str_count' from the 'stringr' package\n  # to count the number of uppercase\
    \ letters in a string.\n  # You can use the function 'str_length' from the 'stringr'\
    \ package\n  # to count the number of lowercase letters in a string.\n  # You\
    \ can use the function 'which.max' to find the index of the\n  # maximum value\
    \ in a vector.\n  # You can use the function 'paste' to concatenate strings.\n\
    \  # You can use the function 'str_c' to concatenate strings.\n  # You can use\
    \ the function 'str_to_upper' to convert a string to uppercase.\n  # You can use\
    \ the function 'str_to_lower' to convert a string to lowercase.\n  # You can use\
    \ the function 'str_detect' to detect if a string contains a pattern.\n  # You\
    \ can use the function 'str_sub' to extract a substring.\n  # You can use the\
    \ function 'str_replace' to replace a pattern with a string.\n  # You can use\
    \ the function 'str_split' to split a string into a list of strings.\n  # You\
    \ can use the function 'str_trim' to trim whitespace from the beginning and end\
    \ of a string.\n  # You can use the function 'str_dup' to repeat a string.\n \
    \ # You can use the function 'str_order' to sort a vector of strings.\n  # You\
    \ can use the function 'str_sort' to sort a vector of strings.\n  # You can use\
    \ the function 'str_count' to count the number of matches in a string.\n  # You\
    \ can use the function 'str_locate' to find the position of the first match in\
    \ a string.\n  # You can use the function 'str_view' to view a string in a browser.\n\
    \  # You can use the function 'str_wrap' to wrap a string to a specified width.\n\
    \  # You can use the function 'str_subset' to match a pattern in a vector of strings.\n\
    \  # You can use the function 'str_which' to find the indices of strings that\
    \ match a pattern.\n  # You can use the function 'str_", "\n  # your code here\n\
    \  class_name <- paste(class_name, \".\", sep = \"\")\n  strongest_extension <-\
    \ extensions[1]\n  strongest_strength <- 0\n  for (extension in extensions) {\n\
    \    strength <- sum(str_detect(extension, \"[A-Z]\")) - sum(str_detect(extension,\
    \ \"[a-z]\"))\n    if (strength > strongest_strength) {\n      strongest_strength\
    \ <- strength\n      strongest_extension <- extension\n    }\n  }\n  return(paste(class_name,\
    \ strongest_extension, sep = \"\"))\n}\n", "\n  # Your code here\n  return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n  }))], sep = '.'))\n}\n", "\n  # Your code here\n\
    \  return(paste(class_name, '.', extensions[which.max(nchar(extensions) - nchar(tolower(extensions)))],\
    \ sep = ''))\n}\n", "\n  # your code here\n}\n", "\n  # your code here\n  return(paste(class_name,\
    \ \".\", extensions[which.max(nchar(extensions) - nchar(gsub(\"[A-Z]\", \"\",\
    \ extensions)))], sep = \"\"))\n}\n", "\n  # your code here\n  class_name <- paste(class_name,\
    \ \".\", sep = \"\")\n  strength <- sapply(extensions, function(x) {\n    sum(grepl(\"\
    [A-Z]\", x)) - sum(grepl(\"[a-z]\", x))\n  })\n  class_name <- paste(class_name,\
    \ extensions[which.max(strength)], sep = \"\")\n  return(class_name)\n}\n", "\n\
    \  # Your code here\n  return(paste(class_name, '.', extensions[1], sep=''))\n\
    }\n", "\n  # your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))))], sep = ''))\n\
    }\n", "\n  # your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = ''))\n}\n ", "\n  # your code here\n}\n", "\n  # your code here\n}\n",
  "\n  # Your code here\n  strength <- function(x) {\n    CAP <- sum(grepl(\"[A-Z]\"\
    , x))\n    SM <- sum(grepl(\"[a-z]\", x))\n    return(CAP - SM)\n  }\n  strength_list\
    \ <- sapply(extensions, strength)\n  max_strength <- max(strength_list)\n  max_index\
    \ <- which(strength_list == max_strength)\n  return(paste(class_name, extensions[max_index[1]],\
    \ sep = \".\"))\n}\n", "\n  # your code here\n  return(paste(class_name, '.',\
    \ extensions[1], sep = ''))\n}", "\n  # Your code here\n  # Hint: You can use\
    \ the function str_count() from the stringr package\n  # to count the number of\
    \ uppercase and lowercase letters in a string.\n  # You can use the function which.max()\
    \ to find the index of the maximum\n  # value in a vector.\n  # You can use the\
    \ function paste() to concatenate strings.\n  # You can use the function tolower()\
    \ to convert a string to lowercase.\n  # You can use the function toupper() to\
    \ convert a string to uppercase.\n  # You can use the function str_split() to\
    \ split a string into a list of\n  # strings.\n  # You can use the function str_c()\
    \ to concatenate a list of strings.\n  # You can use the function str_replace()\
    \ to replace a substring with another\n  # string.\n  # You can use the function\
    \ str_detect() to check if a string contains a\n  # substring.\n  # You can use\
    \ the function str_sub() to extract a substring from a string.\n  # You can use\
    \ the function str_length() to get the length of a string.\n  # You can use the\
    \ function str_dup() to repeat a string.\n  # You can use the function str_trim()\
    \ to remove leading and trailing\n  # whitespace from a string.\n  # You can use\
    \ the function str_pad() to pad a string with whitespace.\n  # You can use the\
    \ function str_wrap() to wrap a string into multiple lines.\n  # You can use the\
    \ function str_to_title() to convert a string to title case.\n  # You can use\
    \ the function str_to_upper() to convert a string to uppercase.\n  # You can use\
    \ the function str_to_lower() to convert a string to lowercase.\n  # You can use\
    \ the function str_order() to sort a string.\n  # You can use the function str_sort()\
    \ to sort a string.\n  # You can use the function str_count() to count the number\
    \ of matches in a\n  # string.\n  # You can use the function str_locate() to locate\
    \ the position of a pattern\n  # in a string.\n  # You can use the function str",
  "\n  # Your code here\n  # Create a dataframe to store the strength of each extension\n\
    \  df <- data.frame(extension = extensions, strength = 0)\n  # Calculate the strength\
    \ of each extension\n  for (i in 1:nrow(df)) {\n    df$strength[i] <- sum(grepl(\"\
    [A-Z]\", df$extension[i])) - sum(grepl(\"[a-z]\", df$extension[i]))\n  }\n  #\
    \ Find the strongest extension\n  max_strength <- max(df$strength)\n  # Find the\
    \ extension with the highest strength\n  strongest_extension <- df$extension[which(df$strength\
    \ == max_strength)[1]]\n  # Return the result\n  return(paste(class_name, \".\"\
    , strongest_extension, sep = \"\"))\n}\n", "\n  # your code here\n}\n", "\n  #\
    \ your code here\n}\n", "\n  # Your code here\n  return(paste(class_name, extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = '.'))\n}\n", "\n  # Your code here\n}\n", "\n  # your code here\n  return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n  }))], sep = '.'))\n}\n", "\n  # Your code here\n\
    \  return(paste(class_name, '.', extensions[which.max(nchar(extensions) - nchar(gsub('[A-Z]',\
    \ '', extensions)))], sep = ''))\n}\n", "\n  # your code here\n}\n", "\n  # your\
    \ code here\n  strength <- function(x) {\n    CAP <- sum(str_detect(x, \"[A-Z]\"\
    ))\n    SM <- sum(str_detect(x, \"[a-z]\"))\n    return(CAP - SM)\n  }\n  max_strength\
    \ <- max(strength(extensions))\n  max_strength_index <- which(strength(extensions)\
    \ == max_strength)\n  return(paste(class_name, extensions[max_strength_index],\
    \ sep = \".\"))\n}\n ", "\n  # Your code here\n}\n", "\n  # your code here\n}\n",
  "\n  # your code here\n}\n", "\n    # your code here\n    return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) {\n        sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n    }))], sep = '.'))\n}\nStrongest_Extension('my_class',\
    \ c('AA', 'Be', 'CC'))\n", "\n  # Your code here\n  # You can create other functions\
    \ as you need.\n  # You can also change the function signature as you need.\n\
    \  # You can also change the function name.\n  # You can also add other arguments\
    \ to the function.\n  # You can also change the return value.\n  # You can also\
    \ change the return type.\n  # You can also change the return name.\n  # You can\
    \ also change the return class.\n  # You can also change the return length.\n\
    \  # You can also change the return attributes.\n  # You can also change the return\
    \ dimensions.\n  # You can also change the return dimnames.\n  # You can also\
    \ change the return rownames.\n  # You can also change the return colnames.\n\
    \  # You can also change the return names.\n  # You can also change the return\
    \ levels.\n  # You can also change the return labels.\n  # You can also change\
    \ the return units.\n  # You can also change the return format.\n  # You can also\
    \ change the return class.\n  # You can also change the return mode.\n  # You\
    \ can also change the return storage.\n  # You can also change the return typeof.\n\
    \  # You can also change the return truelength.\n  # You can also change the return\
    \ nrows.\n  # You can also change the return ncols.\n  # You can also change the\
    \ return length.\n  # You can also change the return size.\n  # You can also change\
    \ the return nlevels.\n  # You can also change the return p.\n  # You can also\
    \ change the return n.\n  # You can also change the return has.\n  # You can also\
    \ change the return is.\n  # You can also change the return row.\n  # You can\
    \ also change the return col.\n  # You can also change the return dim.\n  # You\
    \ can also change the return dimnames.\n  # You can also change the return rownames.\n\
    \  # You can also change the return colnames.\n  # You can also change the return\
    \ names.\n  # You can also change the return levels.\n  # You can also change\
    \ the return labels.\n  # You can also change the return units.\n  # You can also\
    \ change the return format.", "\n  # Your code here\n  return(paste(class_name,\
    \ extensions[which.max(nchar(extensions) - nchar(gsub(\"[A-Z]\", \"\", extensions)))],\
    \ sep = \".\"))\n}\n", "\n  # Your code here\n  return(paste(class_name, '.',\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n  }))], sep = ''))\n}\n", "\n  # Your code here\n\
    \  return(paste(class_name, '.', extensions[which.max(sapply(extensions, function(x)\
    \ {\n    return(sum(grepl('[A-Z]', x))) - sum(grepl('[a-z]', x)))\n  }))], sep\
    \ = ''))\n}\n", "\n  # Your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = ''))\n}\n", "\n  # Your code here\n  class_name <- paste(class_name, \"\
    .\", sep = \"\")\n  extension_strength <- c()\n  for (extension in extensions)\
    \ {\n    extension_strength <- c(extension_strength, sum(grepl(\"[A-Z]\", extension))\
    \ - sum(grepl(\"[a-z]\", extension)))\n  }\n  return(paste(class_name, extensions[which.max(extension_strength)],\
    \ sep = \"\"))\n}\n", "\n  # Your code here\n  strength <- numeric(length(extensions))\n\
    \  for (i in 1:length(extensions)) {\n    strength[i] <- sum(grepl(\"[A-Z]\",\
    \ extensions[i])) - sum(grepl(\"[a-z]\", extensions[i]))\n  }\n  return(paste(class_name,\
    \ extensions[which.max(strength)], sep = \".\"))\n}\n", "\n  # your code here\n\
    }\n", "\n  # Your code here\n  return(paste(class_name, \".\", extensions[which.max(nchar(extensions)\
    \ - nchar(gsub(\"[A-Z]\", \"\", extensions)))], sep = \"\"))\n}\n", "\n  # your\
    \ code here\n}\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n", "\n\
    \  # Your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) {\n    return(sum(grepl('[A-Z]', x))) - sum(grepl('[a-z]', x)))\n\
    \  }))], sep = ''))\n}\n", "\n  # your code here\n  return(paste(class_name, extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = '.'))\n}\n", "\n  # your code here\n  return(paste(class_name, \".\",\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl(\"[A-Z]\"\
    , x)) - sum(grepl(\"[a-z]\", x))\n  }))], sep = \"\"))\n}\n", "\n  # Your code\
    \ here\n  strength <- function(x) {\n    CAP <- sum(grepl(\"[A-Z]\", x))\n   \
    \ SM <- sum(grepl(\"[a-z]\", x))\n    return(CAP - SM)\n  }\n  strengths <- sapply(extensions,\
    \ strength)\n  return(paste(class_name, extensions[which.max(strengths)], sep\
    \ = \".\"))\n}\n", "\n  # your code here\n}\n", "\n  # Your code here\n  strength\
    \ <- sapply(extensions, function(x) {\n    sum(str_detect(x, \"[A-Z]\")) - sum(str_detect(x,\
    \ \"[a-z]\"))\n  })\n  return(paste(class_name, extensions[which.max(strength)],\
    \ sep = \".\"))\n}\n", "\n  # your code here\n  class_name <- paste(class_name,\
    \ \".\", sep = \"\")\n  strength <- function(x) {\n    x <- strsplit(x, \"\")[[1]]\n\
    \    return(sum(x %in% LETTERS) - sum(x %in% letters))\n  }\n  return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, strength))], sep = \"\"))\n}\n", "\n\
    \  # Your code here\n  strength <- sapply(extensions, function(x) {\n    sum(str_count(x,\
    \ \"[[:upper:]]\")) - sum(str_count(x, \"[[:lower:]]\"))\n  })\n  return(paste(class_name,\
    \ extensions[which.max(strength)], sep = \".\"))\n}\n", "\n  # Your code here\n\
    \  class_name = class_name\n  extensions = extensions\n  strength = numeric()\n\
    \  for (i in extensions){\n    strength = c(strength, sum(str_count(i, \"[A-Z]\"\
    )) - sum(str_count(i, \"[a-z]\")))\n  }\n  return(paste(class_name, extensions[which.max(strength)],\
    \ sep = \".\"))\n}\n", "\n  # Your code here\n}\n", "\n  # your code here\n}\n",
  "\n  # Your code here\n  strength <- function(x) {\n    CAP <- length(grep(\"[A-Z]\"\
    , x))\n    SM <- length(grep(\"[a-z]\", x))\n    return(CAP - SM)\n  }\n  strengths\
    \ <- sapply(extensions, strength)\n  return(paste(class_name, extensions[which.max(strengths)],\
    \ sep = \".\"))\n}\n", "\n  # your code here\n}\n", "\n  # Your code here\n  return(paste(class_name,\
    \ '.', extensions[which.max(nchar(gsub('[a-z]', '', extensions)) - nchar(gsub('[A-Z]',\
    \ '', extensions)))], sep = ''))\n}\n", "\n  # Your code here\n  class_name <-\
    \ paste(class_name, \".\", sep = \"\")\n  ext_strength <- c()\n  for (i in 1:length(extensions))\
    \ {\n    ext_strength[i] <- sum(grepl(\"[A-Z]\", extensions[i])) - sum(grepl(\"\
    [a-z]\", extensions[i]))\n  }\n  class_name <- paste(class_name, extensions[which.max(ext_strength)],\
    \ sep = \"\")\n  return(class_name)\n}\n", "\n  # your code here\n  return(paste(class_name,\
    \ \".\", extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl(\"\
    [A-Z]\", x)) - sum(grepl(\"[a-z]\", x))\n  }))], sep = \"\"))\n}\n", "\n  # Your\
    \ code here\n  return(paste(class_name, '.', extensions[which.max(nchar(extensions)\
    \ - nchar(tolower(extensions)))], sep = ''))\n}\n", "\n  # your code here\n}\n",
  "\n  # your code here\n}\n", "\n  # your code here\n}\n", "\n  # your code here\n\
    }\n", "\n  # your code here\n}\n", "\n  # Your code here\n  return(paste(class_name,\
    \ extensions[which.max(nchar(gsub(\"[a-z]\", \"\", extensions)) - nchar(gsub(\"\
    [A-Z]\", \"\", extensions)))], sep = \".\"))\n}\n", "\n  # your code here\n  strength\
    \ <- function(x) {\n    CAP <- sum(str_detect(x, \"[A-Z]\"))\n    SM <- sum(str_detect(x,\
    \ \"[a-z]\"))\n    return(CAP - SM)\n  }\n  strength_list <- sapply(extensions,\
    \ strength)\n  return(paste(class_name, extensions[which.max(strength_list)],\
    \ sep = \".\"))\n}\n", "\n  # Your code here\n  strength <- sapply(extensions,\
    \ function(x) {\n    sum(str_count(x, \"[A-Z]\")) - sum(str_count(x, \"[a-z]\"\
    ))\n  })\n  return(paste(class_name, extensions[which.max(strength)], sep = \"\
    .\"))\n}\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n", "\n  #\
    \ your code here\n}\n", "\n  # Your code here\n  strength <- function(extension)\
    \ {\n    CAP <- sum(grepl(\"[A-Z]\", extension))\n    SM <- sum(grepl(\"[a-z]\"\
    , extension))\n    return(CAP - SM)\n  }\n  max_strength <- max(sapply(extensions,\
    \ strength))\n  max_strength_index <- which(sapply(extensions, strength) == max_strength)\n\
    \  return(paste(class_name, extensions[max_strength_index[1]], sep = \".\"))\n\
    }\n", "\n  # your code here\n}\n", "\n  # Your code here\n  strength <- function(extension)\
    \ {\n    CAP <- nchar(gsub(\"[^A-Z]\", \"\", extension))\n    SM <- nchar(gsub(\"\
    [^a-z]\", \"\", extension))\n    return(CAP - SM)\n  }\n  strongest <- max(strength(extensions))\n\
    \  return(paste(class_name, extensions[strength(extensions) == strongest], sep\
    \ = \".\"))\n}\n", "\n  # your code here\n  strength <- function(extension) {\n\
    \    CAP <- length(grep(\"[A-Z]\", extension))\n    SM <- length(grep(\"[a-z]\"\
    , extension))\n    return(CAP - SM)\n  }\n  strength_list <- sapply(extensions,\
    \ strength)\n  strongest_extension <- extensions[which.max(strength_list)]\n \
    \ return(paste(class_name, \".\", strongest_extension, sep = \"\"))\n}\n", "\n\
    \  # your code here\n}\n", "\n  # your code here\n}\n", "\n    # your code here\n\
    }\n ", "\n  # your code here\n}\n", "\n  # Your code here\n  # You should return\
    \ a string\n  # You can use the function 'str_count' from the 'stringr' package\n\
    \  # to count the number of uppercase letters in a string\n  # You can use the\
    \ function 'nchar' to count the number of characters in a string\n  # You can\
    \ use the function 'max' to find the maximum value in a vector\n  # You can use\
    \ the function 'which.max' to find the index of the maximum value in a vector\n\
    \  # You can use the function 'paste' to concatenate strings\n  # You can use\
    \ the function 'paste0' to concatenate strings\n  # You can use the function 'toupper'\
    \ to convert a string to uppercase\n  # You can use the function 'tolower' to\
    \ convert a string to lowercase\n  # You can use the function 'str_detect' to\
    \ detect if a string contains a substring\n  # You can use the function 'str_sub'\
    \ to extract a substring from a string\n  # You can use the function 'str_replace'\
    \ to replace a substring in a string\n  # You can use the function 'str_split'\
    \ to split a string into a list of strings\n  # You can use the function 'str_split_fixed'\
    \ to split a string into a matrix of strings\n  # You can use the function 'str_trim'\
    \ to trim a string\n  # You can use the function 'str_dup' to duplicate a string\n\
    \  # You can use the function 'str_c' to concatenate strings\n  # You can use\
    \ the function 'str_length' to get the length of a string\n  # You can use the\
    \ function 'str_subset' to get a vector of strings that contain a substring\n\
    \  # You can use the function 'str_order' to sort a vector of strings\n  # You\
    \ can use the function 'str_sort' to sort a vector of strings\n  # You can use\
    \ the function 'str_sort_desc' to sort a vector of strings in descending order\n\
    \  # You can use the function 'str_count' to count the number of matches of a\
    \ pattern in a string\n  # You can use the function 'str_locate' to locate the\
    \ position of the first match of a pattern in a", "\n  # Your code here\n  return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n  }))], sep = '.'))\n}\n", "\n  # Your code here\n\
    \  class_name <- paste(class_name, \".\", sep = \"\")\n  strength <- sapply(extensions,\
    \ function(x) {\n    sum(str_count(x, \"[A-Z]\") - str_count(x, \"[a-z]\"))\n\
    \  })\n  return(paste(class_name, extensions[which.max(strength)], sep = \"\"\
    ))\n}\n", "\n  # your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = ''))\n}\n", "\n  # Your code here\n  # You can create other functions\
    \ as you need\n  # You can use the function str_count() from the stringr package\n\
    \  # to count the number of uppercase letters in a string\n  # You can use the\
    \ function str_count() from the stringr package\n  # to count the number of lowercase\
    \ letters in a string\n  # You can use the function which.max() to find the index\
    \ of the\n  # maximum value in a vector\n  # You can use the function paste()\
    \ to concatenate strings\n  # You can use the function paste0() to concatenate\
    \ strings\n  # You can use the function tolower() to convert a string to lowercase\n\
    \  # You can use the function toupper() to convert a string to uppercase\n  #\
    \ You can use the function str_to_lower() from the stringr package\n  # to convert\
    \ a string to lowercase\n  # You can use the function str_to_upper() from the\
    \ stringr package\n  # to convert a string to uppercase\n  # You can use the function\
    \ str_to_title() from the stringr package\n  # to convert a string to titlecase\n\
    \  # You can use the function str_to_upper() from the stringr package\n  # to\
    \ convert a string to uppercase\n  # You can use the function str_to_upper() from\
    \ the stringr package\n  # to convert a string to uppercase\n  # You can use the\
    \ function str_to_upper() from the stringr package\n  # to convert a string to\
    \ uppercase\n  # You can use the function str_to_upper() from the stringr package\n\
    \  # to convert a string to uppercase\n  # You can use the function str_to_upper()\
    \ from the stringr package\n  # to convert a string to uppercase\n  # You can\
    \ use the function str_to_upper() from the stringr package\n  # to convert a string\
    \ to uppercase\n  # You can use the function str_to_upper() from the stringr package\n\
    \  # to convert a string to uppercase\n  # You can use the function str_to_upper()\
    \ from the stringr package\n  # to convert a string to uppercase\n  # You can\
    \ use the function str", "\n  # your code here\n  return(paste(class_name, \"\
    .\", extensions[which.max(nchar(extensions) - nchar(gsub(\"[A-Z]\", \"\", extensions)))],\
    \ sep = \"\"))\n}\n", "\n  # your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = ''))\n}\n", "\n  # Your code here\n  return(paste(class_name, \".\", extensions[which.max(nchar(gsub(\"\
    [a-z]\", \"\", extensions)) - nchar(gsub(\"[A-Z]\", \"\", extensions)))], sep\
    \ = \"\"))\n}\n", "\n    # your code here\n}\n ", "\n    # Your code goes here\n\
    \    return(paste(class_name, '.', extensions[which.max(sapply(extensions, function(x)\
    \ {\n        sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n    }))], sep =\
    \ ''))\n}\n", "\n  # your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))))], sep = ''))\n\
    }\n", "\n  # your code here\n  return(paste(class_name, extensions[which.max(sapply(extensions,\
    \ function(x) {\n    return(sum(grepl('[A-Z]', x))) - sum(grepl('[a-z]', x))\n\
    \  }))], sep = '.'))\n}\n", "\n  # Your code here\n  return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) sum(is.upper.tri(x)) - sum(is.lower.tri(x))))],\
    \ sep = '.'))\n}\n", "\n  # Your code here\n  strength <- function(x) {\n    cap\
    \ <- sum(str_detect(x, \"[A-Z]\"))\n    sm <- sum(str_detect(x, \"[a-z]\"))\n\
    \    return(cap - sm)\n  }\n  strengths <- sapply(extensions, strength)\n  return(paste(class_name,\
    \ extensions[which.max(strengths)], sep = \".\"))\n}\n", "\n  # your code here\n\
    }\n", "\n  # Your code here\n  strength <- rep(0, length(extensions))\n  for (i\
    \ in 1:length(extensions)) {\n    strength[i] <- sum(grepl(\"[A-Z]\", extensions[i]))\
    \ - sum(grepl(\"[a-z]\", extensions[i]))\n  }\n  return(paste(class_name, extensions[which.max(strength)],\
    \ sep = \".\"))\n}\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n",
  "\n  # your code here\n  strength <- function(extension){\n    CAP <- sum(str_detect(extension,\
    \ \"[A-Z]\"))\n    SM <- sum(str_detect(extension, \"[a-z]\"))\n    return(CAP\
    \ - SM)\n  }\n  return(paste(class_name, extensions[which.max(strength(extensions))],\
    \ sep = \".\"))\n}\n", "\n  # Your code goes here\n  return(paste(class_name,\
    \ '.', extensions[which.max(sapply(extensions, function(x) {\n    sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n  }))], sep = ''))\n}\n", "\n  # your code here\n\
    \  return(paste(class_name, '.', extensions[which.max(sapply(extensions, function(x)\
    \ {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))], sep = ''))\n\
    }\n", "\n    # Your code goes here\n    return(paste(class_name, extensions[which.max(sapply(extensions,\
    \ function(x) {\n        sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n   \
    \ }))], sep = '.'))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
