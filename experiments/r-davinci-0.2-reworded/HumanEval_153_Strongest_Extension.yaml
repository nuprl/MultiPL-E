name: HumanEval_153_Strongest_Extension
language: r
prompt: "# You will be given the name of a class (a string) and a list of extensions.\n\
  # The extensions are to be used to load additional classes to the class. The\n#\
  \ strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  # letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n# in the extension's name, the strength is given by the fraction CAP - SM. \n\
  # You should find the strongest extension and return a string in this \n# format:\
  \ ClassName.StrongestExtensionName.\n# If there are two or more extensions with\
  \ the same strength, you should\n# choose the one that comes first in the list.\n\
  # For example, if you are given \"Slices\" as the class and a list of the\n# extensions:\
  \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes'\
  \ since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n#\
  \ Example:\n# >>> Strongest_Extension('my_class', c('AA', 'Be', 'CC'))\n# 'my_class.AA'\n\
  Strongest_Extension <- function(class_name, extensions) {"
tests: "test_humaneval <- function() {\ncandidate <- Strongest_Extension\n    if(!identical(candidate('Watashi',\
  \ c('tEN', 'niNE', 'eIGHt8OKe')), 'Watashi.eIGHt8OKe')){quit('no', 1)}\n    if(!identical(candidate('Boku123',\
  \ c('nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg')), 'Boku123.YEs.WeCaNe')){quit('no',\
  \ 1)}\n    if(!identical(candidate('__YESIMHERE', c('t', 'eMptY', 'nothing', 'zeR00',\
  \ 'NuLl__', '123NoooneB321')), '__YESIMHERE.NuLl__')){quit('no', 1)}\n    if(!identical(candidate('K',\
  \ c('Ta', 'TAR', 't234An', 'cosSo')), 'K.TAR')){quit('no', 1)}\n    if(!identical(candidate('__HAHA',\
  \ c('Tab', '123', '781345', '-_-')), '__HAHA.123')){quit('no', 1)}\n    if(!identical(candidate('YameRore',\
  \ c('HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-')), 'YameRore.okIWILL123')){quit('no',\
  \ 1)}\n    if(!identical(candidate('finNNalLLly', c('Die', 'NowW', 'Wow', 'WoW')),\
  \ 'finNNalLLly.WoW')){quit('no', 1)}\n    if(!identical(candidate('_', c('Bb', '91245')),\
  \ '_.Bb')){quit('no', 1)}\n    if(!identical(candidate('Sp', c('671235', 'Bb')),\
  \ 'Sp.671235')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # your code here\n  return(paste(class_name, extensions[which.max(nchar(extensions)\
    \ - nchar(gsub(\"[A-Z]\", \"\", extensions)))], sep = \".\"))\n}\nStrongest_Extension('my_class',\
    \ c('AA', 'Be', 'CC'))\n", "\n  # your code here\n  strength <- function(x) {\n\
    \    CAP <- sum(grepl(\"[A-Z]\", x))\n    SM <- sum(grepl(\"[a-z]\", x))\n   \
    \ return(CAP - SM)\n  }\n  max_strength <- max(sapply(extensions, strength))\n\
    \  return(paste(class_name, extensions[which.max(sapply(extensions, strength))],\
    \ sep = \".\"))\n}\n", "\n  # Your code goes here\n  strength <- function(x) {\n\
    \    CAP <- sum(grepl(\"[A-Z]\", x))\n    SM <- sum(grepl(\"[a-z]\", x))\n   \
    \ return(CAP - SM)\n  }\n  strength_list <- sapply(extensions, strength)\n  max_strength\
    \ <- max(strength_list)\n  max_strength_index <- which(strength_list == max_strength)\n\
    \  return(paste(class_name, extensions[max_strength_index[1]], sep = \".\"))\n\
    }\n", "\n  # Your code goes here\n  strength <- function(x) {\n    CAP <- sum(grepl(\"\
    [A-Z]\", x))\n    SM <- sum(grepl(\"[a-z]\", x))\n    return(CAP - SM)\n  }\n\
    \  max_strength <- max(sapply(extensions, strength))\n  max_strength_index <-\
    \ which(sapply(extensions, strength) == max_strength)\n  return(paste(class_name,\
    \ extensions[max_strength_index[1]], sep = \".\"))\n}\n", "\n  # your code here\n\
    }\n", "\n  # Your code here\n  return(paste(class_name, '.', extensions[which.max(nchar(gsub('[a-z]',\
    \ '', extensions)) - nchar(gsub('[A-Z]', '', extensions)))], sep = ''))\n}\n",
  "\n  # Your code goes here\n  # You can use the function 'str_count' from the 'stringr'\
    \ package\n  # to count the number of uppercase and lowercase letters in a string\n\
    \  # For example:\n  # str_count('AA', '[A-Z]')\n  # will return 2\n  # str_count('AA',\
    \ '[a-z]')\n  # will return 0\n  # str_count('AA', '[A-Z]') - str_count('AA',\
    \ '[a-z]')\n  # will return 2\n  # You can use the function 'which.max' to find\
    \ the index of the\n  # maximum value in a vector\n  # For example:\n  # which.max(c(1,\
    \ 2, 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return\
    \ 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2,\
    \ 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return\
    \ 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2,\
    \ 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return\
    \ 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2,\
    \ 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return\
    \ 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2,\
    \ 3, 2, 1))\n  # will return 3\n  # which.max(c(1, 2, 3, 2, 1))\n  # will return\
    \ 3\n", "\n  # your code here\n  cap <- sapply(extensions, function(x) sum(grepl(\"\
    [A-Z]\", x)))\n  sm <- sapply(extensions, function(x) sum(grepl(\"[a-z]\", x)))\n\
    \  strength <- cap - sm\n  return(paste(class_name, extensions[which.max(strength)],\
    \ sep = \".\"))\n}\n", "\n    # Your code goes here\n    return(paste(class_name,\
    \ extensions[which.max(sapply(extensions, function(x) {\n        sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n    }))], sep = '.'))\n}\n ", "\n  # your code\
    \ here\n  strength <- sapply(extensions, function(x) {\n    sum(grepl(\"[A-Z]\"\
    , x)) - sum(grepl(\"[a-z]\", x))\n  })\n  max_strength <- max(strength)\n  max_strength_index\
    \ <- which(strength == max_strength)\n  paste(class_name, extensions[max_strength_index[1]],\
    \ sep = \".\")\n}\n", "\n  # your code here\n}\n", "\n  # Your code here\n  strength\
    \ <- function(extension) {\n    CAP <- sum(str_detect(extension, \"[A-Z]\"))\n\
    \    SM <- sum(str_detect(extension, \"[a-z]\"))\n    return(CAP - SM)\n  }\n\
    \  extension_strength <- sapply(extensions, strength)\n  strongest_extension <-\
    \ extensions[which.max(extension_strength)]\n  return(paste(class_name, strongest_extension,\
    \ sep = \".\"))\n}\n", "\n  # Your code here\n  return(paste(class_name, '.',\
    \ extensions[which.max(sapply(extensions, function(x) {\n    sum(strsplit(x, '')[[1]]\
    \ %in% LETTERS) - sum(strsplit(x, '')[[1]] %in% letters)\n  }))], sep = ''))\n\
    }\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n", "\n  # your code\
    \ here\n}\n", "\n    # Your code goes here\n    # You will need to use the function\
    \ 'str_count' from the 'stringr' package\n    # The function 'str_count' takes\
    \ a string and a pattern and returns the number\n    # of times the pattern appears\
    \ in the string.\n    # For example:\n    # >>> str_count('Hello', '[A-Z]')\n\
    \    # 1\n    # >>> str_count('Hello', '[a-z]')\n    # 4\n    # >>> str_count('Hello',\
    \ '[A-Za-z]')\n    # 5\n    # >>> str_count('Hello', '[0-9]')\n    # 0\n    #\
    \ >>> str_count('Hello', '[^0-9]')\n    # 5\n    # >>> str_count('Hello', '[^A-Z]')\n\
    \    # 4\n    # >>> str_count('Hello', '[^a-z]')\n    # 1\n    # >>> str_count('Hello',\
    \ '[^A-Za-z]')\n    # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n    # 0\n\
    \    # >>> str_count('Hello', '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello',\
    \ '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n   \
    \ # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello',\
    \ '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n   \
    \ # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello',\
    \ '[^0-9A-Za-z]')\n    # 0\n    # >>> str_count('Hello', '[^0-9A-Za-z]')\n   \
    \ # 0\n    # >>>", "\n  # your code here\n  return(paste(class_name, '.', extensions[which.max(sapply(extensions,\
    \ function(x) {\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n  }))],\
    \ sep = ''))\n}\n", "\n    # Your code goes here\n    return(paste(class_name,\
    \ '.', extensions[which.max(sapply(extensions, function(x) {\n        sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x))\n    }))], sep = ''))\n}\n", "\n  # Your code here\n\
    \  strength <- numeric(length(extensions))\n  for (i in 1:length(extensions))\
    \ {\n    strength[i] <- sum(grepl(\"[A-Z]\", extensions[i])) - sum(grepl(\"[a-z]\"\
    , extensions[i]))\n  }\n  class_name <- paste(class_name, extensions[which.max(strength)],\
    \ sep = \".\")\n  return(class_name)\n}\n "]
stop_tokens:
- "\n#"
- "\n```"
