name: HumanEval_131_digits
language: r
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n\
  # 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- digits\n    if(!identical(candidate(5),\
  \ 5)){quit('no', 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n    if(!identical(candidate(120),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(5014), 5)){quit('no', 1)}\n  \
  \  if(!identical(candidate(98765), 315)){quit('no', 1)}\n    if(!identical(candidate(5576543),\
  \ 2625)){quit('no', 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  if (n == 0) {\n    return(0)\n  } else {\n    if (n %% 2 == 0)\
    \ {\n      return(digits(floor(n / 10)))\n    } else {\n      return(n %% 10 *\
    \ digits(floor(n / 10)))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (n < 10)\
    \ {\n    if (n %% 2 == 1) {\n      return(n)\n    } else {\n      return(0)\n\
    \    }\n  } else {\n    if (n %% 10 %% 2 == 1) {\n      return(n %% 10 * digits(n\
    \ %/% 10))\n    } else {\n      return(digits(n %/% 10))\n    }\n  }\n}\n", "\n\
    \  # YOUR CODE HERE\n  if (n == 0) {\n    return(0)\n  }\n  else {\n    if (n\
    \ %% 2 == 0) {\n      return(digits(floor(n/10)))\n    }\n    else {\n      return(n\
    \ %% 10 * digits(floor(n/10)))\n    }\n  }\n}\ndigits(1)\ndigits(4)\ndigits(235)\n",
  "\n  # YOUR CODE HERE\n  if(n<10){\n    if(n%%2==1){\n      return(n)\n    }else{\n\
    \      return(0)\n    }\n  }else{\n    if(n%%2==1){\n      return(n%%10*digits(n%/%10))\n\
    \    }else{\n      return(digits(n%/%10))\n    }\n  }\n}\n", "\n  n <- as.character(n)\n\
    \  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- n[n %% 2 == 1]\n\
    \  if (length(n) == 0) {\n    return(0)\n  } else {\n    return(prod(n))\n  }\n\
    }\n", "\n  # your code here\n}\n", "\n  if (n < 10) {\n    if (n %% 2 == 1) {\n\
    \      return(n)\n    } else {\n      return(0)\n    }\n  } else {\n    if (n\
    \ %% 10 %% 2 == 1) {\n      return(n %% 10 * digits(n %/% 10))\n    } else {\n\
    \      return(digits(n %/% 10))\n    }\n  }\n}\n", "\n  if (n == 0) {\n    return(0)\n\
    \  }\n  else {\n    if (n %% 2 == 0) {\n      return(digits(floor(n / 10)))\n\
    \    }\n    else {\n      return(n %% 10 * digits(floor(n / 10)))\n    }\n  }\n\
    }\ndigits(1)\ndigits(4)\ndigits(235)\n", "\n  n <- as.character(n)\n  n <- as.numeric(n)\n\
    \  n <- n[n %% 2 != 0]\n  prod(n)\n}\n", "\n  # YOUR CODE HERE\n}\n", "\n  if\
    \ (n == 0) {\n    return(0)\n  }\n  else {\n    if (n %% 2 == 0) {\n      return(digits(floor(n\
    \ / 10)))\n    }\n    else {\n      return(n %% 10 * digits(floor(n / 10)))\n\
    \    }\n  }\n}\n", "\n  if (n == 0) {\n    return(0)\n  }\n  else {\n    if (n\
    \ %% 2 == 0) {\n      return(digits(floor(n / 10)))\n    }\n    else {\n     \
    \ return(n %% 10 * digits(floor(n / 10)))\n    }\n  }\n}\n", "\n    # YOUR CODE\
    \ HERE\n    if(n == 0) return(0)\n    if(n %% 2 == 0) return(digits(floor(n/10)))\n\
    \    return(n %% 10 * digits(floor(n/10)))\n}\n", "\n  # YOUR CODE HERE\n  if(n\
    \ == 0) return(0)\n  if(n %% 2 == 0) return(digits(n %/% 10))\n  return(n %% 10\
    \ * digits(n %/% 10))\n}\ndigits(1)\ndigits(4)\ndigits(235)\n", "\n  # YOUR CODE\
    \ HERE\n  if(n == 0) return(0)\n  if(n %% 2 == 0) return(digits(n %/% 10))\n \
    \ return(n %% 10 * digits(n %/% 10))\n}\n", "\n  # YOUR CODE HERE\n  if (n ==\
    \ 0) {\n    return(0)\n  }\n  if (n %% 2 == 1) {\n    return(n %% 10 * digits(n\
    \ %/% 10))\n  }\n  return(digits(n %/% 10))\n}\n", "\n  if (n < 10) {\n    if\
    \ (n %% 2 == 1) {\n      return(n)\n    } else {\n      return(0)\n    }\n  }\
    \ else {\n    if (n %% 10 %% 2 == 1) {\n      return(n %% 10 * digits(n %/% 10))\n\
    \    } else {\n      return(digits(n %/% 10))\n    }\n  }\n}\n", "\n  # YOUR CODE\
    \ HERE\n  if(n == 0) return(0)\n  if(n %% 2 == 0) return(digits(n %/% 10))\n \
    \ return(n %% 10 * digits(n %/% 10))\n}\n", "\n  # your code here\n}\n", "\n \
    \ # YOUR CODE HERE\n  if(n == 0) {\n    return(0)\n  }\n  else {\n    if(n %%\
    \ 2 == 0) {\n      return(digits(floor(n/10)))\n    }\n    else {\n      return(n\
    \ %% 10 * digits(floor(n/10)))\n    }\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
