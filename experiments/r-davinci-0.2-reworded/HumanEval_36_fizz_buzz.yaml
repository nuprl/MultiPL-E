name: HumanEval_36_fizz_buzz
language: r
prompt: "# Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n\
  # 2\n# >>> fizz_buzz(79)\n# 3\nfizz_buzz <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- fizz_buzz\n    if(!identical(candidate(50),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate(78), 2)){quit('no', 1)}\n    if(!identical(candidate(79),\
  \ 3)){quit('no', 1)}\n    if(!identical(candidate(100), 3)){quit('no', 1)}\n   \
  \ if(!identical(candidate(200), 6)){quit('no', 1)}\n    if(!identical(candidate(4000),\
  \ 192)){quit('no', 1)}\n    if(!identical(candidate(10000), 639)){quit('no', 1)}\n\
  \    if(!identical(candidate(100000), 8026)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  count <- 0\n  for (i in 1:n) {\n    if (i %% 11 == 0 || i %% 13\
    \ == 0) {\n      count <- count + sum(grepl(\"7\", as.character(i)))\n    }\n\
    \  }\n  return(count)\n}\n", "\n  # your code here\n}\n", "\n  # Your code here\n\
    \  count <- 0\n  for (i in 1:n) {\n    if (i %% 11 == 0 || i %% 13 == 0) {\n \
    \     if (grepl(\"7\", i)) {\n        count <- count + 1\n      }\n    }\n  }\n\
    \  return(count)\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in 1:n) {\n\
    \    if (i %% 11 == 0 | i %% 13 == 0) {\n      count = count + sum(grepl(\"7\"\
    , as.character(i)))\n    }\n  }\n  return(count)\n}\n", "\n  count <- 0\n  for\
    \ (i in 1:n) {\n    if (i %% 11 == 0 || i %% 13 == 0) {\n      count <- count\
    \ + sum(grepl(\"7\", as.character(i)))\n    }\n  }\n  return(count)\n}\n", "\n\
    \    # Your code here\n    count <- 0\n    for (i in 1:n) {\n        if (i %%\
    \ 11 == 0 || i %% 13 == 0) {\n            if (grepl(\"7\", i)) {\n           \
    \     count <- count + 1\n            }\n        }\n    }\n    return(count)\n\
    }\n", "\n  # your code here\n  count <- 0\n  for (i in 1:n) {\n    if (i %% 11\
    \ == 0 || i %% 13 == 0) {\n      count <- count + sum(grepl(\"7\", as.character(i)))\n\
    \    }\n  }\n  return(count)\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n  for\
    \ (i in 1:n) {\n    if (i %% 11 == 0 || i %% 13 == 0) {\n      count = count +\
    \ sum(grepl(\"7\", as.character(i)))\n    }\n  }\n  return(count)\n}\n", "\n \
    \ # YOUR CODE HERE\n  count = 0\n  for (i in 1:n) {\n    if (i %% 11 == 0 || i\
    \ %% 13 == 0) {\n      if (grepl(\"7\", as.character(i))) {\n        count = count\
    \ + 1\n      }\n    }\n  }\n  return(count)\n}\n", "\n  # your code here\n}\n",
  "\n  count <- 0\n  for (i in 1:n) {\n    if (i %% 11 == 0 || i %% 13 == 0) {\n \
    \     count <- count + sum(grepl(\"7\", as.character(i)))\n    }\n  }\n  return(count)\n\
    }\n", "\n  # Your code here\n  count = 0\n  for (i in 1:n) {\n    if (i %% 11\
    \ == 0 || i %% 13 == 0) {\n      if (grepl(\"7\", i)) {\n        count = count\
    \ + 1\n      }\n    }\n  }\n  return(count)\n}\n", "\n  count <- 0\n  for (i in\
    \ 1:n) {\n    if (i %% 11 == 0 || i %% 13 == 0) {\n      count <- count + sum(grepl(\"\
    7\", as.character(i)))\n    }\n  }\n  return(count)\n}\n", "\n  count <- 0\n \
    \ for (i in 1:n) {\n    if (i %% 11 == 0 || i %% 13 == 0) {\n      count <- count\
    \ + sum(grepl(\"7\", as.character(i)))\n    }\n  }\n  return(count)\n}\n", "\n\
    \  # your code here\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in 1:n)\
    \ {\n    if (i %% 11 == 0 || i %% 13 == 0) {\n      if (grepl(\"7\", as.character(i)))\
    \ {\n        count = count + 1\n      }\n    }\n  }\n  return(count)\n}\n", "\n\
    \  # YOUR CODE HERE\n}\n", "\n  # your code here\n  count = 0\n  for (i in 1:n)\
    \ {\n    if (i %% 11 == 0 || i %% 13 == 0) {\n      if (grepl(\"7\", i)) {\n \
    \       count = count + 1\n      }\n    }\n  }\n  return(count)\n}\n", "\n   \
    \ count <- 0\n    for (i in 1:n) {\n        if (i %% 11 == 0 || i %% 13 == 0)\
    \ {\n            if (grepl(\"7\", i)) {\n                count <- count + 1\n\
    \            }\n        }\n    }\n    return(count)\n}\n", "\n  # Your code here\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
