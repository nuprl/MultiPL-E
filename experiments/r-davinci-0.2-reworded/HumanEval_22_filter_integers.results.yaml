name: HumanEval_22_filter_integers
language: r
results:
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(Filter(is.integer,\
    \ values))\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n    return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(Filter(is.integer,\
    \ values))\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ function(x) is.integer(x))])\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_integers\n    if(!identical(candidate(c()), c())){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(3, 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  # TODO: implement this\
    \ function\n  return(values[sapply(values, is.integer)])\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_integers\n    if(!identical(candidate(c()),\
    \ c())){quit('no', 1)}\n    if(!identical(candidate(c(4, list(), c(), 23.2, 9,\
    \ 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3, 'c', 3,\
    \ 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n    return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n    return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n    return(Filter(is.integer,\
    \ values))\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
    \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n#\
    \ c(1, 2, 3)\nfilter_integers <- function(values) {\n  return(values[sapply(values,\
    \ is.integer)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_integers\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ list(), c(), 23.2, 9, 'adasd')), c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 'c', 3, 3, 'a', 'b')), c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
