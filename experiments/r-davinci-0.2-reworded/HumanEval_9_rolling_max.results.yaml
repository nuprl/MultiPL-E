name: HumanEval_9_rolling_max
language: r
results:
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max\
    \ <- numbers[1]\n  result <- c()\n  for (number in numbers) {\n    if (number\
    \ > max) {\n      max <- number\n    }\n    result <- c(result, max)\n  }\n  return(result)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n    if(!identical(candidate(c()),\
    \ c())){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4)), c(1, 2, 3,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(4, 3, 2, 1)), c(4, 4, 4,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(3, 2, 3, 100, 3)), c(3, 3,\
    \ 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max_so_far\
    \ <- numbers[1]\n  for (i in 2:length(numbers)) {\n    if (numbers[i] > max_so_far)\
    \ {\n      max_so_far <- numbers[i]\n    }\n    numbers[i] <- max_so_far\n  }\n\
    \  return(numbers)\n}\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in if (numbers[i] > max_so_far) { : argument is of length zero\\\
    nCalls: test_humaneval -> candidate\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max\
    \ <- numbers[1]\n  result <- c()\n  for (number in numbers) {\n    if (number\
    \ > max) {\n      max <- number\n    }\n    result <- c(result, max)\n  }\n  return(result)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n    if(!identical(candidate(c()),\
    \ c())){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4)), c(1, 2, 3,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(4, 3, 2, 1)), c(4, 4, 4,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(3, 2, 3, 100, 3)), c(3, 3,\
    \ 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max_so_far\
    \ <- numbers[1]\n  for (i in 2:length(numbers)) {\n    if (numbers[i] > max_so_far)\
    \ {\n      max_so_far <- numbers[i]\n    }\n    numbers[i] <- max_so_far\n  }\n\
    \  return(numbers)\n}\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in if (numbers[i] > max_so_far) { : argument is of length zero\\\
    nCalls: test_humaneval -> candidate\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  result\
    \ <- c()\n  for (i in 1:length(numbers)) {\n    result <- c(result, max(numbers[1:i]))\n\
    \  }\n  return(result)\n}\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nWarning messages:\\n1: In max(numbers[1:i]) : no non-missing arguments\
    \ to max; returning -Inf\\n2: In max(numbers[1:i]) : no non-missing arguments\
    \ to max; returning -Inf\\n'"
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max_so_far\
    \ <- numbers[1]\n  rolling_max <- c()\n  for (number in numbers) {\n    if (number\
    \ > max_so_far) {\n      max_so_far <- number\n    }\n    rolling_max <- c(rolling_max,\
    \ max_so_far)\n  }\n  return(rolling_max)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- rolling_max\n    if(!identical(candidate(c()), c())){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(3, 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max_so_far\
    \ <- numbers[1]\n  for (i in 2:length(numbers)) {\n    if (numbers[i] > max_so_far)\
    \ {\n      max_so_far <- numbers[i]\n    }\n    numbers[i] <- max_so_far\n  }\n\
    \  return(numbers)\n}\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in if (numbers[i] > max_so_far) { : argument is of length zero\\\
    nCalls: test_humaneval -> candidate\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max\
    \ <- numbers[1]\n  result <- c()\n  for (number in numbers) {\n    if (number\
    \ > max) {\n      max <- number\n    }\n    result <- c(result, max)\n  }\n  return(result)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n    if(!identical(candidate(c()),\
    \ c())){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4)), c(1, 2, 3,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(4, 3, 2, 1)), c(4, 4, 4,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(3, 2, 3, 100, 3)), c(3, 3,\
    \ 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max\
    \ <- numbers[1]\n  result <- c()\n  for (number in numbers) {\n    if (number\
    \ > max) {\n      max <- number\n    }\n    result <- c(result, max)\n  }\n  return(result)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n    if(!identical(candidate(c()),\
    \ c())){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4)), c(1, 2, 3,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(4, 3, 2, 1)), c(4, 4, 4,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(3, 2, 3, 100, 3)), c(3, 3,\
    \ 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max_so_far\
    \ <- numbers[1]\n  rolling_max <- c()\n  for (i in 1:length(numbers)) {\n    if\
    \ (numbers[i] > max_so_far) {\n      max_so_far <- numbers[i]\n    }\n    rolling_max\
    \ <- c(rolling_max, max_so_far)\n  }\n  return(rolling_max)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- rolling_max\n    if(!identical(candidate(c()),\
    \ c())){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4)), c(1, 2, 3,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(4, 3, 2, 1)), c(4, 4, 4,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(3, 2, 3, 100, 3)), c(3, 3,\
    \ 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in if (numbers[i] > max_so_far) { : argument is of length zero\\\
    nCalls: test_humaneval -> candidate\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max\
    \ <- numbers[1]\n  result <- c()\n  for (number in numbers) {\n    if (number\
    \ > max) {\n      max <- number\n    }\n    result <- c(result, max)\n  }\n  return(result)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n    if(!identical(candidate(c()),\
    \ c())){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4)), c(1, 2, 3,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(4, 3, 2, 1)), c(4, 4, 4,\
    \ 4))){quit('no', 1)}\n    if(!identical(candidate(c(3, 2, 3, 100, 3)), c(3, 3,\
    \ 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  #\
    \ TODO: implement the function\n  return(numbers)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- rolling_max\n    if(!identical(candidate(c()), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 2, 3, 4)), c(1, 2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 1)), c(4, 4, 4, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(3, 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max_so_far\
    \ <- numbers[1]\n  for (i in 2:length(numbers)) {\n    if (numbers[i] > max_so_far)\
    \ {\n      max_so_far <- numbers[i]\n    }\n    numbers[i] <- max_so_far\n  }\n\
    \  return(numbers)\n}\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in if (numbers[i] > max_so_far) { : argument is of length zero\\\
    nCalls: test_humaneval -> candidate\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  #\
    \ TODO: Implement me!\n  return(numbers)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- rolling_max\n    if(!identical(candidate(c()), c())){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(3, 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  result\
    \ <- c()\n  for (i in seq_along(numbers)) {\n    result <- c(result, max(numbers[1:i]))\n\
    \  }\n  return(result)\n}\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  result\
    \ <- c()\n  for (i in 1:length(numbers)) {\n    result <- c(result, max(numbers[1:i]))\n\
    \  }\n  return(result)\n}\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nWarning messages:\\n1: In max(numbers[1:i]) : no non-missing arguments\
    \ to max; returning -Inf\\n2: In max(numbers[1:i]) : no non-missing arguments\
    \ to max; returning -Inf\\n'"
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  result\
    \ <- c()\n  for (i in 1:length(numbers)) {\n    result <- c(result, max(numbers[1:i]))\n\
    \  }\n  return(result)\n}\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nWarning messages:\\n1: In max(numbers[1:i]) : no non-missing arguments\
    \ to max; returning -Inf\\n2: In max(numbers[1:i]) : no non-missing arguments\
    \ to max; returning -Inf\\n'"
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  result\
    \ <- c()\n  for (i in 1:length(numbers)) {\n    result <- c(result, max(numbers[1:i]))\n\
    \  }\n  return(result)\n}\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nWarning messages:\\n1: In max(numbers[1:i]) : no non-missing arguments\
    \ to max; returning -Inf\\n2: In max(numbers[1:i]) : no non-missing arguments\
    \ to max; returning -Inf\\n'"
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max_so_far\
    \ <- numbers[1]\n  for (i in 2:length(numbers)) {\n    if (numbers[i] > max_so_far)\
    \ {\n      max_so_far <- numbers[i]\n    }\n    numbers[i] <- max_so_far\n  }\n\
    \  return(numbers)\n}\n\ntest_humaneval <- function() {\ncandidate <- rolling_max\n\
    \    if(!identical(candidate(c()), c())){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
    \ 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in if (numbers[i] > max_so_far) { : argument is of length zero\\\
    nCalls: test_humaneval -> candidate\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
    \ 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max_so_far\
    \ <- numbers[1]\n  rolling_max <- c()\n  for (number in numbers) {\n    if (number\
    \ > max_so_far) {\n      max_so_far <- number\n    }\n    rolling_max <- c(rolling_max,\
    \ max_so_far)\n  }\n  return(rolling_max)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- rolling_max\n    if(!identical(candidate(c()), c())){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 2, 3, 4)), c(1, 2, 3, 4))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, 3, 2, 1)), c(4, 4, 4, 4))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(3, 2, 3, 100, 3)), c(3, 3, 3, 100, 100))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
