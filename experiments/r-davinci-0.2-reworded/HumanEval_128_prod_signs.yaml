name: HumanEval_128_prod_signs
language: r
prompt: "# You are given a vector arr of integers and you need to return\n# sum of\
  \ magnitudes of integers multiplied by product of all signs\n# of each number in\
  \ the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n#\
  \ Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n#\
  \ 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {"
tests: "test_humaneval <- function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1,\
  \ 2, 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no', 1)}\n\
  \    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
  \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1,\
  \ -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)), -4)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if (length(arr) == 0) {\n    return(NULL)\n  }\n  prod <- 1\n \
    \ sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod <- prod * 1\n   \
    \   sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod * -1\n      sum\
    \ <- sum + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n  return(sum *\
    \ prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n  }\n  prod <-\
    \ 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod <- prod * 1\n\
    \      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod * -1\n    \
    \  sum <- sum + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n  return(sum\
    \ * prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n  }\n  prod <-\
    \ 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod <- prod * 1\n\
    \      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod * -1\n    \
    \  sum <- sum + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n  return(sum\
    \ * prod)\n}\n", "\n  if (length(arr) == 0) return(NULL)\n  sum(abs(arr)) * prod(sign(arr))\n\
    }\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n  }\n  prod <- 1\n  sum\
    \ <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod <- prod * 1\n      sum\
    \ <- sum + i\n    } else if (i < 0) {\n      prod <- prod * -1\n      sum <- sum\
    \ + abs(i)\n    } else {\n      prod <- prod * 0\n    }\n  }\n  return(sum * prod)\n\
    }\n", "\n  # your code here\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n\
    \  }\n  prod <- 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod\
    \ <- prod * 1\n      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod\
    \ * -1\n      sum <- sum + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n\
    \  return(sum * prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n\
    \  }\n  else {\n    signs <- sign(arr)\n    signs <- signs[signs != 0]\n    return(sum(abs(arr))\
    \ * prod(signs))\n  }\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n\
    \  }\n  prod <- 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod\
    \ <- prod * 1\n      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod\
    \ * -1\n      sum <- sum + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n\
    \  return(sum * prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n\
    \  }\n  prod <- 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod\
    \ <- prod * 1\n      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod\
    \ * -1\n      sum <- sum + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n\
    \  return(sum * prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n\
    \  }\n  prod <- 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod\
    \ <- prod * 1\n      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod\
    \ * -1\n      sum <- sum + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n\
    \  return(sum * prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n\
    \  }\n  prod <- 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod\
    \ <- prod * 1\n      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod\
    \ * -1\n      sum <- sum + abs(i)\n    } else {\n      prod <- prod * 0\n    }\n\
    \  }\n  return(sum * prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n\
    \  }\n  prod <- 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod\
    \ <- prod * 1\n      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod\
    \ * -1\n      sum <- sum + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n\
    \  return(sum * prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n\
    \  }\n  prod <- 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod\
    \ <- prod * 1\n      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod\
    \ * -1\n      sum <- sum + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n\
    \  return(sum * prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n\
    \  }\n  prod <- 1\n  sum <- 0\n  for (i in arr) {\n    if (i == 0) {\n      prod\
    \ <- 0\n      break\n    }\n    if (i > 0) {\n      prod <- prod * 1\n    } else\
    \ {\n      prod <- prod * -1\n    }\n    sum <- sum + abs(i)\n  }\n  return(sum\
    \ * prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n  }\n  prod <-\
    \ 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod <- prod * 1\n\
    \      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod * -1\n    \
    \  sum <- sum + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n  return(sum\
    \ * prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n  }\n  prod <-\
    \ 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod <- prod * 1\n\
    \      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod * -1\n    \
    \  sum <- sum + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n  return(sum\
    \ * prod)\n}\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n  }\n  prod <-\
    \ 1\n  sum <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod <- prod * 1\n\
    \      sum <- sum + i\n    } else if (i < 0) {\n      prod <- prod * -1\n    \
    \  sum <- sum + abs(i)\n    } else {\n      prod <- prod * 0\n    }\n  }\n  return(sum\
    \ * prod)\n}\n", "\n    if(length(arr) == 0) {\n        return(NULL)\n    }\n\
    \    prod <- 1\n    sum <- 0\n    for(i in arr) {\n        if(i > 0) {\n     \
    \       prod <- prod * 1\n            sum <- sum + i\n        } else if(i < 0)\
    \ {\n            prod <- prod * -1\n            sum <- sum + i * -1\n        }\
    \ else {\n            prod <- prod * 0\n        }\n    }\n    return(sum * prod)\n\
    }\n", "\n  if (length(arr) == 0) {\n    return(NULL)\n  }\n  prod <- 1\n  sum\
    \ <- 0\n  for (i in arr) {\n    if (i > 0) {\n      prod <- prod * 1\n      sum\
    \ <- sum + i\n    } else if (i < 0) {\n      prod <- prod * -1\n      sum <- sum\
    \ + i\n    } else {\n      prod <- prod * 0\n    }\n  }\n  return(sum * prod)\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
