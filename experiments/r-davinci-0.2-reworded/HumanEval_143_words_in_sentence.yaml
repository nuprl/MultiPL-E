name: HumanEval_143_words_in_sentence
language: r
prompt: "# You are given a string representing a sentence,\n# the sentence contains\
  \ some words separated by a space,\n# and you have to return a string that contains\
  \ the words from the original sentence,\n# whose lengths are prime numbers,\n# the\
  \ order of the words in the new string should be the same as the original one.\n\
  # Example 1:\n# >>> words_in_sentence('This is a test')\n# 'is'\n# Example 2:\n\
  # >>> words_in_sentence('lets go for swimming')\n# 'go for'\n# Constraints:\n# *\
  \ 1 <= len(sentence) <= 100\n# * sentence contains only letters\nwords_in_sentence\
  \ <- function(sentence) {"
tests: "test_humaneval <- function() {\ncandidate <- words_in_sentence\n    if(!identical(candidate('This\
  \ is a test'), 'is')){quit('no', 1)}\n    if(!identical(candidate('lets go for swimming'),\
  \ 'go for')){quit('no', 1)}\n    if(!identical(candidate('there is no place available\
  \ here'), 'there is no place')){quit('no', 1)}\n    if(!identical(candidate('Hi\
  \ I am Hussein'), 'Hi am Hussein')){quit('no', 1)}\n    if(!identical(candidate('go\
  \ for it'), 'go for it')){quit('no', 1)}\n    if(!identical(candidate('here'), '')){quit('no',\
  \ 1)}\n    if(!identical(candidate('here is'), 'is')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  words <- strsplit(sentence, \" \")[[1]]\n  words[is_prime(nchar(words))]\n\
    }\n", "\n  words <- strsplit(sentence, \" \")[[1]]\n  prime_words <- words[is_prime(nchar(words))]\n\
    \  paste(prime_words, collapse = \" \")\n}\n\nis_prime <- function(n) {\n  if\
    \ (n == 1) {\n    return(FALSE)\n  }\n  if (n == 2) {\n    return(TRUE)\n  }\n\
    \  for (i in 2:(n-1)) {\n    if (n %% i == 0) {\n      return(FALSE)\n    }\n\
    \  }\n  return(TRUE)\n}\n", "\n  sentence <- strsplit(sentence, \" \")[[1]]\n\
    \  sentence[is.prime(nchar(sentence))]\n}\n", "\n  sentence <- strsplit(sentence,\
    \ ' ')[[1]]\n  sentence[is.prime(nchar(sentence))]\n}\n", "\n  # Your code here\n\
    }", "\n  sentence <- strsplit(sentence, \" \")[[1]]\n  sentence[is.prime(nchar(sentence))]\n\
    }\n", "\n  sentence <- strsplit(sentence, \" \")[[1]]\n  sentence[is_prime(nchar(sentence))]\n\
    }\n\nis_prime <- function(n) {\n  n %% 2 != 0 &\n    all(n %% 3:sqrt(n) != 0)\n\
    }\n\nwords_in_sentence('This is a test')", "\n  # your code here\n}", "\n  # your\
    \ code goes here\n  sentence <- strsplit(sentence, \" \")[[1]]\n  sentence[is.prime(nchar(sentence))]\n\
    }\n", "\n  # your code here\n}\n", "\n  words <- unlist(strsplit(sentence, \"\
    \ \"))\n  words[is_prime(nchar(words))]\n}\n\nis_prime <- function(n) {\n  n >\
    \ 1 && all(n %% 2:(n-1) != 0)\n}\n\nwords_in_sentence('This is a test')", "\n\
    \  # your code here\n}", "\n  # your code here\n}\n", "\n  words <- unlist(strsplit(sentence,\
    \ \" \"))\n  words[is_prime(nchar(words))]\n}\n", "\n  # TODO: Implement this\
    \ function\n  sentence <- strsplit(sentence, \" \")[[1]]\n  sentence <- sentence[is_prime(nchar(sentence))]\n\
    \  paste(sentence, collapse = \" \")\n}\n", "\n  words <- unlist(strsplit(sentence,\
    \ \" \"))\n  words[is_prime(nchar(words))]\n}\n\nis_prime <- function(n) {\n \
    \ n %% 2 != 0 & all(n %% 3:sqrt(n) != 0)\n}\n", "\n  words <- strsplit(sentence,\
    \ \" \")[[1]]\n  words[is_prime(nchar(words))]\n}\n\nis_prime <- function(n) {\n\
    \  if (n <= 1) {\n    return(FALSE)\n  }\n  for (i in 2:(n - 1)) {\n    if (n\
    \ %% i == 0) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\nwords_in_sentence('This\
    \ is a test')", "\n  sentence <- strsplit(sentence, \" \")[[1]]\n  sentence[is.prime(nchar(sentence))]\n\
    }\n", "\n  sentence <- unlist(strsplit(sentence, \" \"))\n  sentence <- sentence[is_prime(nchar(sentence))]\n\
    \  paste(sentence, collapse = \" \")\n}\n", "\n  # Your code here\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
