name: HumanEval_14_all_prefixes
language: r
prompt: "# Return list of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes('abc')\n# c('a', 'ab', 'abc')\nall_prefixes <- function(string)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- all_prefixes\n    if(!identical(candidate(''),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate('asdfgh'), c('a', 'as', 'asd',\
  \ 'asdf', 'asdfg', 'asdfgh'))){quit('no', 1)}\n    if(!identical(candidate('WWW'),\
  \ c('W', 'WW', 'WWW'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  prefixes <- c()\n  for (i in 1:nchar(string)) {\n    prefixes <-\
    \ c(prefixes, substr(string, 1, i))\n  }\n  return(prefixes)\n}\n", "\n  if (nchar(string)\
    \ == 0) {\n    return(c())\n  } else {\n    return(c(all_prefixes(substr(string,\
    \ 1, nchar(string) - 1)), string))\n  }\n}\n", "\n  prefixes <- character(nchar(string))\n\
    \  for (i in 1:nchar(string)) {\n    prefixes[i] <- substr(string, 1, i)\n  }\n\
    \  return(prefixes)\n}\n", "\n  prefixes <- c()\n  for (i in 1:nchar(string))\
    \ {\n    prefixes <- c(prefixes, substr(string, 1, i))\n  }\n  return(prefixes)\n\
    }\n", "\n  if (nchar(string) == 0) {\n    return(c())\n  } else {\n    return(c(substr(string,\
    \ 1, 1), all_prefixes(substr(string, 2, nchar(string)))))\n  }\n}\n", "\n  prefixes\
    \ <- character(nchar(string))\n  for (i in seq_along(string)) {\n    prefixes[i]\
    \ <- substr(string, 1, i)\n  }\n  prefixes\n}\n", "\n  string_length <- nchar(string)\n\
    \  prefixes <- vector(mode = 'character', length = string_length)\n  for (i in\
    \ 1:string_length) {\n    prefixes[i] <- substr(string, 1, i)\n  }\n  return(prefixes)\n\
    }\n", "\n  prefixes <- character(nchar(string))\n  for (i in seq_along(string))\
    \ {\n    prefixes[i] <- substr(string, 1, i)\n  }\n  prefixes\n}\n", "\n  prefixes\
    \ <- c()\n  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes, substr(string,\
    \ 1, i))\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- c()\n  for (i in 1:nchar(string))\
    \ {\n    prefixes <- c(prefixes, substr(string, 1, i))\n  }\n  return(prefixes)\n\
    }\n", "\n  prefixes <- c()\n  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes,\
    \ substr(string, 1, i))\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- c()\n\
    \  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes, substr(string, 1,\
    \ i))\n  }\n  return(prefixes)\n}\n", "\n  if (nchar(string) == 0) {\n    return(character(0))\n\
    \  }\n  else {\n    return(c(substr(string, 1, 1), all_prefixes(substr(string,\
    \ 2, nchar(string)))))\n  }\n}\n", "\n  if (nchar(string) == 0) {\n    return(character(0))\n\
    \  } else {\n    return(c(all_prefixes(substr(string, 1, nchar(string) - 1)),\
    \ string))\n  }\n}\n", "\n  prefixes <- c()\n  for (i in 1:nchar(string)) {\n\
    \    prefixes <- c(prefixes, substr(string, 1, i))\n  }\n  return(prefixes)\n\
    }\n", "\n  prefixes <- c()\n  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes,\
    \ substr(string, 1, i))\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- c()\n\
    \  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes, substr(string, 1,\
    \ i))\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- c()\n  for (i in 1:nchar(string))\
    \ {\n    prefixes <- c(prefixes, substr(string, 1, i))\n  }\n  return(prefixes)\n\
    }\n", "\n  prefixes <- c()\n  for (i in seq_along(string)) {\n    prefixes <-\
    \ c(prefixes, substr(string, 1, i))\n  }\n  return(prefixes)\n}\n", "\n  return(c(string[1],\
    \ string[1:2], string))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
