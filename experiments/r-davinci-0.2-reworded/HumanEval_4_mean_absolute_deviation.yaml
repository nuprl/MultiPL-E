name: HumanEval_4_mean_absolute_deviation
language: r
prompt: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
  # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
  \ difference between each\n# element and a centerpoint (mean in this case):\n# MAD\
  \ = average | x - x_mean |\n# >>> mean_absolute_deviation(c(1.0, 2.0, 3.0, 4.0))\n\
  # 1.0\nmean_absolute_deviation <- function(numbers) {"
tests: "test_humaneval <- function() {\ncandidate <- mean_absolute_deviation\n   \
  \ if(!identical(candidate(c(1.0, 2.0)), 0.5)){quit('no', 1)}\n    if(!identical(candidate(c(1.0,\
  \ 2.0, 3.0, 4.0)), 1.0)){quit('no', 1)}\n    if(!identical(candidate(c(1.0, 2.0,\
  \ 3.0, 4.0, 5.0)), 1.2)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  mean(abs(numbers - mean(numbers)))\n}\n", "\n  mean_absolute_deviation\
    \ <- mean(abs(numbers - mean(numbers)))\n  return(mean_absolute_deviation)\n}\n",
  "\n  mean(abs(numbers - mean(numbers)))\n}\n", "\n  # TODO: Implement this function\n\
    \  # Hint: You can use the abs() function to get the absolute value of a number\n\
    \  # Hint: You can use the mean() function to get the mean of a list of numbers\n\
    \  # Hint: You can use the sum() function to get the sum of a list of numbers\n\
    \  # Hint: You can use the length() function to get the length of a list of numbers\n\
    \  # Hint: You can use the map_dbl() function to apply a function to each element\
    \ of a list\n  # Hint: You can use the abs() function to get the absolute value\
    \ of a number\n  # Hint: You can use the mean() function to get the mean of a\
    \ list of numbers\n  # Hint: You can use the sum() function to get the sum of\
    \ a list of numbers\n  # Hint: You can use the length() function to get the length\
    \ of a list of numbers\n  # Hint: You can use the map_dbl() function to apply\
    \ a function to each element of a list\n  # Hint: You can use the abs() function\
    \ to get the absolute value of a number\n  # Hint: You can use the mean() function\
    \ to get the mean of a list of numbers\n  # Hint: You can use the sum() function\
    \ to get the sum of a list of numbers\n  # Hint: You can use the length() function\
    \ to get the length of a list of numbers\n  # Hint: You can use the map_dbl()\
    \ function to apply a function to each element of a list\n  # Hint: You can use\
    \ the abs() function to get the absolute value of a number\n  # Hint: You can\
    \ use the mean() function to get the mean of a list of numbers\n  # Hint: You\
    \ can use the sum() function to get the sum of a list of numbers\n  # Hint: You\
    \ can use the length() function to get the length of a list of numbers\n  # Hint:\
    \ You can use the map_dbl() function to apply a function to each element of a\
    \ list\n  # Hint: You can use the abs() function to get the absolute value of\
    \ a number\n  # Hint: You can use the mean() function to get the mean of a list\
    \ of numbers\n  # Hint: You", "\n  mean(abs(numbers - mean(numbers)))\n}\n", "\n\
    \  # Your code here\n  mean <- mean(numbers)\n  sum <- 0\n  for (i in 1:length(numbers))\
    \ {\n    sum <- sum + abs(numbers[i] - mean)\n  }\n  return(sum / length(numbers))\n\
    }\n", "\n  mean(abs(numbers - mean(numbers)))\n}\n", "\n  mean_absolute_deviation\
    \ <- mean(abs(numbers - mean(numbers)))\n  return(mean_absolute_deviation)\n}\n",
  "\n  mean(abs(numbers - mean(numbers)))\n}\n", "\n  mean(abs(numbers - mean(numbers)))\n\
    }\n", "\n  mean(abs(numbers - mean(numbers)))\n}\n", "\n  mean(abs(numbers - mean(numbers)))\n\
    }\n", "\n  # Calculate the mean of the input numbers\n  mean <- mean(numbers)\n\
    \  # Calculate the absolute difference between each number and the mean\n  absolute_differences\
    \ <- abs(numbers - mean)\n  # Return the mean of the absolute differences\n  return(mean(absolute_differences))\n\
    }\n", "\n  mean(abs(numbers - mean(numbers)))\n}\n", "\n  mean(abs(numbers - mean(numbers)))\n\
    }\n", "\n  mean(abs(numbers - mean(numbers)))\n}\n", "\n  mean(abs(numbers - mean(numbers)))\n\
    }\n", "\n  mean(abs(numbers - mean(numbers)))\n}\n", "\n  mean(abs(numbers - mean(numbers)))\n\
    }\n", "\n  mean(abs(numbers - mean(numbers)))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
