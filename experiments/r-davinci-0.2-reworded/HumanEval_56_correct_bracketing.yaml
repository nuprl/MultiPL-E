name: HumanEval_56_correct_bracketing
language: r
prompt: "# brackets is a string of \"<\" and \">\".\n# return TRUE if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing('<')\n\
  # FALSE\n# >>> correct_bracketing('<>')\n# TRUE\n# >>> correct_bracketing('<<><>>')\n\
  # TRUE\n# >>> correct_bracketing('><<>')\n# FALSE\ncorrect_bracketing <- function(brackets)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- correct_bracketing\n    if(!identical(candidate('<>'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('<<><>>'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('<><><<><>><>'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('<<<><>>>>'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('><<>'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('<'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('<<<<'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('>'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('<<>'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('<><><<><>><>><<>'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('<><><<><>><>>><>'), FALSE)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  # YOUR CODE HERE\n  open_bracket <- 0\n  close_bracket <- 0\n \
    \ for (i in 1:nchar(brackets)){\n    if (substr(brackets, i, i) == \"<\"){\n \
    \     open_bracket <- open_bracket + 1\n    }\n    if (substr(brackets, i, i)\
    \ == \">\"){\n      close_bracket <- close_bracket + 1\n    }\n  }\n  if (open_bracket\
    \ == close_bracket){\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
  "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    if (substr(brackets, length(brackets), length(brackets))\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 2, length(brackets)\
    \ - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  open <- 0\n  close <- 0\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      open <- open + 1\n    }\
    \ else {\n      close <- close + 1\n    }\n  }\n  if (open == close) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n}\n", "\n  #\
    \ YOUR CODE HERE\n  bracket_stack <- c()\n  for (i in 1:nchar(brackets)) {\n \
    \   if (substr(brackets, i, i) == '<') {\n      bracket_stack <- c(bracket_stack,\
    \ '<')\n    } else {\n      if (length(bracket_stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        bracket_stack <- bracket_stack[-length(bracket_stack)]\n\
    \      }\n    }\n  }\n  if (length(bracket_stack) == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  # check if\
    \ brackets is empty\n  if (nchar(brackets) == 0) {\n    return(TRUE)\n  }\n  #\
    \ check if brackets is only one character\n  if (nchar(brackets) == 1) {\n   \
    \ return(FALSE)\n  }\n  # check if brackets has only one type of bracket\n  if\
    \ (nchar(brackets) == 2) {\n    if (substr(brackets, 1, 1) == substr(brackets,\
    \ 2, 2)) {\n      return(FALSE)\n    } else {\n      return(TRUE)\n    }\n  }\n\
    \  # check if brackets has more than one type of bracket\n  if (nchar(brackets)\
    \ > 2) {\n    if (substr(brackets, 1, 1) == substr(brackets, 2, 2)) {\n      return(FALSE)\n\
    \    } else {\n      if (substr(brackets, 1, 1) == \"<\") {\n        return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n      } else {\n        return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n      }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n\
    \  if (substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    }\n    else {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n  }\n}\n", "\n  if (nchar(brackets) == 0) return(TRUE)\n\
    \  if (substr(brackets, 1, 1) == '<') {\n    if (substr(brackets, nchar(brackets),\
    \ nchar(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\
    \") {\n    return(TRUE)\n  } else if (substr(brackets, 1, 1) == \">\") {\n   \
    \ return(FALSE)\n  } else if (substr(brackets, 1, 1) == \"<\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  if (length(brackets)\
    \ == 0) {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == '<') {\n   \
    \ if (substr(brackets, length(brackets), length(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  if(brackets == \"\"\
    ){\n    return(TRUE)\n  }\n  if(substr(brackets,1,1) == \"<\"){\n    if(substr(brackets,length(brackets),length(brackets))\
    \ == \">\"){\n      return(correct_bracketing(substr(brackets,2,length(brackets)-1)))\n\
    \    }\n    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  # check if the length of brackets is odd\n\
    \  if(length(brackets) %% 2 == 1) {\n    return(FALSE)\n  }\n  # check if the\
    \ first character is '>'\n  if(substr(brackets, 1, 1) == '>') {\n    return(FALSE)\n\
    \  }\n  # check if the last character is '<'\n  if(substr(brackets, length(brackets),\
    \ length(brackets)) == '<') {\n    return(FALSE)\n  }\n  # check if there is a\
    \ '<' before a '>'\n  for(i in 1:(length(brackets) - 1)) {\n    if(substr(brackets,\
    \ i, i) == '<' && substr(brackets, i + 1, i + 1) == '>') {\n      return(FALSE)\n\
    \    }\n  }\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i\
    \ in 1:nchar(brackets)){\n    if (substr(brackets, i, i) == \"<\"){\n      count\
    \ = count + 1\n    }\n    if (substr(brackets, i, i) == \">\"){\n      count =\
    \ count - 1\n    }\n    if (count < 0){\n      return(FALSE)\n    }\n  }\n  if\
    \ (count == 0){\n    return(TRUE)\n  }\n  else{\n    return(FALSE)\n  }\n}\n",
  "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  if (nchar(brackets)\
    \ == 1) {\n    return(FALSE)\n  }\n  if (nchar(brackets) == 2) {\n    if (substr(brackets,\
    \ 1, 1) == '<' & substr(brackets, 2, 2) == '>') {\n      return(TRUE)\n    } else\
    \ {\n      return(FALSE)\n    }\n  }\n  if (nchar(brackets) > 2) {\n    if (substr(brackets,\
    \ 1, 1) == '<' & substr(brackets, nchar(brackets), nchar(brackets)) == '>') {\n\
    \      return(correct_bracketing(substr(brackets, 2, nchar(brackets) - 1)))\n\
    \    } else {\n      return(FALSE)\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n\
    \  if (brackets == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1)\
    \ == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(FALSE)\n    }\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n    if (length(brackets) == 0) {\n        return(TRUE)\n\
    \    }\n    if (substr(brackets, 1, 1) == '<') {\n        if (substr(brackets,\
    \ length(brackets), length(brackets)) == '>') {\n            return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n        } else {\n            return(FALSE)\n  \
    \      }\n    } else {\n        return(FALSE)\n    }\n}\n", "\n  # YOUR CODE HERE\n\
    \  return(TRUE)\n}\n", "\n  # your code here\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
