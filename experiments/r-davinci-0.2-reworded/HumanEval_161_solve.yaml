name: HumanEval_161_solve
language: r
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\n# >>> solve('1234')\n# '4321'\n# >>> solve('ab')\n# 'AB'\n\
  # >>> solve('#a@C')\n# '#A@c'\nsolve <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- solve\n    if(!identical(candidate('AsDf'),\
  \ 'aSdF')){quit('no', 1)}\n    if(!identical(candidate('1234'), '4321')){quit('no',\
  \ 1)}\n    if(!identical(candidate('ab'), 'AB')){quit('no', 1)}\n    if(!identical(candidate('#a@C'),\
  \ '#A@c')){quit('no', 1)}\n    if(!identical(candidate('#AsdfW^45'), '#aSDFw^45')){quit('no',\
  \ 1)}\n    if(!identical(candidate('#6@2'), '2@6#')){quit('no', 1)}\n    if(!identical(candidate('#$a^D'),\
  \ '#$A^d')){quit('no', 1)}\n    if(!identical(candidate('#ccc'), '#CCC')){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  if(grepl(\"[a-zA-Z]\", s)) {\n    return(gsub(\"([a-zA-Z])\", \"\
    \\\\U\\\\1\", s, perl = TRUE))\n  } else {\n    return(rev(s))\n  }\n}\n", "\n\
    \  if(grepl(\"[a-zA-Z]\", s)) {\n    return(gsub(\"([a-zA-Z])\", \"\\\\U\\\\1\"\
    , s, perl = TRUE))\n  } else {\n    return(rev(s))\n  }\n}\n", "\n  if(grepl(\"\
    [a-zA-Z]\", s)) {\n    return(gsub(\"([a-zA-Z])\", \"\\\\U\\\\1\", s, perl = TRUE))\n\
    \  } else {\n    return(rev(s))\n  }\n}\n", "\n  # Your code here\n}\n", "\n \
    \ if (grepl(\"[a-zA-Z]\", s)) {\n    return(chartr(c(\"a-z\", \"A-Z\"), c(\"A-Z\"\
    , \"a-z\"), s))\n  } else {\n    return(rev(s))\n  }\n}\n", "\n  if (grepl(\"\
    [a-zA-Z]\", s)) {\n    return(gsub(\"([a-zA-Z])\", \"\\\\U\\\\1\", s, perl = TRUE))\n\
    \  } else {\n    return(rev(s))\n  }\n}\n", "\n  if (grepl(\"[a-zA-Z]\", s)) {\n\
    \    return(gsub(\"([a-zA-Z])\", \"\\\\U\\\\1\", s, perl = TRUE))\n  } else {\n\
    \    return(rev(s))\n  }\n}\n", "\n  if(grepl(\"[a-zA-Z]\", s)) {\n    return(str_to_title(s))\n\
    \  } else {\n    return(rev(s))\n  }\n}\n", "\n  if (grepl(\"[a-zA-Z]\", s)) {\n\
    \    s <- gsub(\"[a-z]\", \"\\\\U\\\\1\", s)\n    s <- gsub(\"[A-Z]\", \"\\\\\
    L\\\\1\", s)\n  } else {\n    s <- rev(s)\n  }\n  return(s)\n}\n", "\n  if(!grepl(\"\
    [a-zA-Z]\", s)) {\n    return(rev(s))\n  }\n  else {\n    return(gsub(\"([a-zA-Z])\"\
    , \"\\\\U\\\\1\", s, perl = TRUE))\n  }\n}\n", "\n    if (any(grepl(\"[a-zA-Z]\"\
    , s))) {\n        s <- chartr(c(\"a-z\", \"A-Z\"), c(\"A-Z\", \"a-z\"), s)\n \
    \   } else {\n        s <- rev(s)\n    }\n    return(s)\n}\nsolve(\"#a@C\")\n",
  "\n  if (grepl(\"[a-zA-Z]\", s)) {\n    return(tolower(s))\n  } else {\n    return(rev(s))\n\
    \  }\n}\nsolve('1234')\nsolve('ab')\nsolve('#a@C')\n", "\n  if (grepl(\"[a-zA-Z]\"\
    , s)) {\n    s <- chartr(c(\"a-z\", \"A-Z\"), c(\"A-Z\", \"a-z\"), s)\n  } else\
    \ {\n    s <- rev(s)\n  }\n  return(s)\n}\n", "\n  if(!grepl(\"[a-zA-Z]\", s))\
    \ return(rev(s))\n  s <- gsub(\"[a-z]\", \"\\\\U\\\\1\", s)\n  s <- gsub(\"[A-Z]\"\
    , \"\\\\L\\\\1\", s)\n  return(s)\n}\nsolve('1234')\nsolve('ab')\nsolve('#a@C')\n",
  "\n  if (grepl(\"[a-zA-Z]\", s)) {\n    return(gsub(\"([a-zA-Z])\", \"\\\\U\\\\\
    1\", s, perl = TRUE))\n  } else {\n    return(rev(s))\n  }\n}\nsolve(\"1234\"\
    )\nsolve(\"ab\")\nsolve(\"#a@C\")\n", "\n  if (grepl(\"[a-zA-Z]\", s)) {\n   \
    \ return(gsub(\"[a-zA-Z]\", \"[[:lower:]]\", s, perl = TRUE))\n  } else {\n  \
    \  return(rev(s))\n  }\n}\n", "\n  if(grepl(\"[a-zA-Z]\", s)) {\n    s <- chartr(c(\"\
    a-z\", \"A-Z\"), c(\"A-Z\", \"a-z\"), s)\n  } else {\n    s <- rev(s)\n  }\n \
    \ return(s)\n}\n", "\n    if(grepl(\"[a-zA-Z]\", s)) {\n        return(str_to_upper(s))\n\
    \    } else {\n        return(str_reverse(s))\n    }\n}\n", "\n  if(grepl(\"[a-zA-Z]\"\
    , s)) {\n    s <- chartr(c(\"a-z\", \"A-Z\"), c(\"A-Z\", \"a-z\"), s)\n  } else\
    \ {\n    s <- strrev(s)\n  }\n  return(s)\n}\n", "\n  if(!grepl(\"[a-zA-Z]\",\
    \ s)) return(rev(s))\n  s <- gsub(\"[a-z]\", \"\\\\U\\\\1\", s)\n  s <- gsub(\"\
    [A-Z]\", \"\\\\L\\\\1\", s)\n  return(s)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
