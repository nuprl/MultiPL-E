name: HumanEval_59_largest_prime_factor
language: r
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
  largest_prime_factor <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- largest_prime_factor\n    if(!identical(candidate(15),\
  \ 5)){quit('no', 1)}\n    if(!identical(candidate(27), 3)){quit('no', 1)}\n    if(!identical(candidate(63),\
  \ 7)){quit('no', 1)}\n    if(!identical(candidate(330), 11)){quit('no', 1)}\n  \
  \  if(!identical(candidate(13195), 29)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # TODO: Implement me!\n  return(n)\n}\n", "\n  if (n == 1) {\n\
    \    return(1)\n  }\n  if (is.prime(n)) {\n    return(n)\n  }\n  for (i in 2:n)\
    \ {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n    }\n\
    \  }\n}\n\nlargest_prime_factor(600851475143)\n", "\n  for (i in seq(2, n - 1))\
    \ {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n / i))\n    }\n\
    \  }\n  return(n)\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # TODO: Implement\
    \ this function.\n  # Hint: You can use the is_prime function.\n  # Hint: You\
    \ can use the is_divisible function.\n  # Hint: You can use the seq function.\n\
    \  # Hint: You can use the max function.\n  # Hint: You can use the which function.\n\
    \  # Hint: You can use the %in% operator.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.min function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.min function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.min\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.min function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.min function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.min function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.min function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.min\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.min function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.min function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.min function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.min function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.min\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which", "\n  # YOUR CODE HERE\n  return(0)\n}\n", "\n  # YOUR CODE HERE\n\
    \  for (i in seq(2, n-1)) {\n    if (is_prime(i) & n %% i == 0) {\n      return(i)\n\
    \    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  for (i in seq(2, n-1)) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n\
    \    }\n  }\n}\n", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n  # Hint:\
    \ Use the function is_prime()\n  # Hint: Use the function next_prime()\n  # Hint:\
    \ Use the function divisor()\n  # Hint: Use the function max()\n  # Hint: Use\
    \ the function which()\n  # Hint: Use the function c()\n  # Hint: Use the function\
    \ length()\n  # Hint: Use the function seq()\n  # Hint: Use the function rep()\n\
    \  # Hint: Use the function paste()\n  # Hint: Use the function print()\n  # Hint:\
    \ Use the function stop()\n  # Hint: Use the function return()\n  # Hint: Use\
    \ the function if()\n  # Hint: Use the function else()\n  # Hint: Use the function\
    \ for()\n  # Hint: Use the function while()\n  # Hint: Use the function repeat()\n\
    \  # Hint: Use the function break()\n  # Hint: Use the function next()\n  # Hint:\
    \ Use the function switch()\n  # Hint: Use the function function()\n  # Hint:\
    \ Use the function assign()\n  # Hint: Use the function call()\n  # Hint: Use\
    \ the function eval()\n  # Hint: Use the function substitute()\n  # Hint: Use\
    \ the function quote()\n  # Hint: Use the function deparse()\n  # Hint: Use the\
    \ function match()\n  # Hint: Use the function pmatch()\n  # Hint: Use the function\
    \ charmatch()\n  # Hint: Use the function match.call()\n  # Hint: Use the function\
    \ complete.cases()\n  # Hint: Use the function duplicated()\n  # Hint: Use the\
    \ function unique()\n  # Hint: Use the function any()\n  # Hint: Use the function\
    \ all()\n  # Hint: Use the function cumsum()\n  # Hint: Use the function cumprod()\n\
    \  # Hint: Use the function cummax()\n  # Hint: Use the function cummin()\n  #\
    \ Hint: Use the function diff()\n  # Hint: Use the function sort()\n  # Hint:\
    \ Use the function order()\n", "\n  # Your code here\n  factor <- 2\n  while (n\
    \ > 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n    } else {\n \
    \     factor <- factor + 1\n    }\n  }\n  return(factor)\n}\n", "\n    # YOUR\
    \ CODE HERE\n    prime_factors <- function(n) {\n        factors <- c()\n    \
    \    for (i in 2:n) {\n            if (n %% i == 0) {\n                factors\
    \ <- c(factors, i)\n            }\n        }\n        return(factors)\n    }\n\
    \    return(max(prime_factors(n)))\n}\n", "\n  # Your code here\n  if (is.prime(n))\
    \ {\n    return(n)\n  }\n  else {\n    for (i in 2:n) {\n      if (n %% i == 0)\
    \ {\n        return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n", "\n\
    \  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  else {\n    for\
    \ (i in 2:n) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n\
    \    }\n  }\n}\n", "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n))\
    \ {\n    return(n)\n  }\n  else {\n    for (i in 2:n) {\n      if (n %% i == 0)\
    \ {\n        return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n", "\n\
    \  # YOUR CODE HERE\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n   \
    \   n <- n / i\n    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}\n",
  "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  i <- 2\n  while\
    \ (i < n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n / i))\n\
    \    }\n    i <- i + 1\n  }\n}\n", "\n  # YOUR CODE HERE\n  # Hint: use the is_prime\
    \ function\n  # Hint: use the is_divisible function\n  # Hint: use the seq function\n\
    \  # Hint: use the max function\n  # Hint: use the which function\n  # Hint: use\
    \ the %in% operator\n  # Hint: use the %/% operator\n  # Hint: use the %% operator\n\
    \  # Hint: use the & operator\n  # Hint: use the | operator\n  # Hint: use the\
    \ ! operator\n  # Hint: use the ifelse function\n  # Hint: use the if function\n\
    \  # Hint: use the else function\n  # Hint: use the for function\n  # Hint: use\
    \ the while function\n  # Hint: use the repeat function\n  # Hint: use the break\
    \ function\n  # Hint: use the next function\n  # Hint: use the return function\n\
    \  # Hint: use the list function\n  # Hint: use the c function\n  # Hint: use\
    \ the unlist function\n  # Hint: use the length function\n  # Hint: use the seq_along\
    \ function\n  # Hint: use the seq_len function\n  # Hint: use the seq_along function\n\
    \  # Hint: use the seq_len function\n  # Hint: use the seq_along function\n  #\
    \ Hint: use the seq_len function\n  # Hint: use the seq_along function\n  # Hint:\
    \ use the seq_len function\n  # Hint: use the seq_along function\n  # Hint: use\
    \ the seq_len function\n  # Hint: use the seq_along function\n  # Hint: use the\
    \ seq_len function\n  # Hint: use the seq_along function\n  # Hint: use the seq_len\
    \ function\n  # Hint: use the seq_along function\n  # Hint: use the seq_len function\n\
    \  # Hint: use the seq_along function\n  # Hint: use the seq_len function\n  #\
    \ Hint: use the seq_along function\n  # Hint: use the seq_len function\n  # Hint:\
    \ use the seq_along function\n ", "\n  # YOUR CODE HERE\n  # Hint: You may find\
    \ the function is.prime() useful.\n  # Hint: You may find the function which()\
    \ useful.\n  # Hint: You may find the function max() useful.\n  # Hint: You may\
    \ find the function seq() useful.\n  # Hint: You may find the function c() useful.\n\
    \  # Hint: You may find the function %/% useful.\n  # Hint: You may find the function\
    \ %% useful.\n  # Hint: You may find the function is.na() useful.\n  # Hint: You\
    \ may find the function is.nan() useful.\n  # Hint: You may find the function\
    \ is.null() useful.\n  # Hint: You may find the function is.integer() useful.\n\
    \  # Hint: You may find the function is.double() useful.\n  # Hint: You may find\
    \ the function is.numeric() useful.\n  # Hint: You may find the function is.finite()\
    \ useful.\n  # Hint: You may find the function is.infinite() useful.\n  # Hint:\
    \ You may find the function is.complex() useful.\n  # Hint: You may find the function\
    \ is.character() useful.\n  # Hint: You may find the function is.logical() useful.\n\
    \  # Hint: You may find the function is.matrix() useful.\n  # Hint: You may find\
    \ the function is.array() useful.\n  # Hint: You may find the function is.atomic()\
    \ useful.\n  # Hint: You may find the function is.recursive() useful.\n  # Hint:\
    \ You may find the function is.call() useful.\n  # Hint: You may find the function\
    \ is.expression() useful.\n  # Hint: You may find the function is.environment()\
    \ useful.\n  # Hint: You may find the function is.list() useful.\n  # Hint: You\
    \ may find the function is.pairlist() useful.\n  # Hint: You may find the function\
    \ is.language() useful.\n  # Hint: You may find the function is.function() useful.\n\
    \  # Hint: You may find the function is.single() useful.", "\n  # Your code here\n\
    }\n", "\n    # YOUR CODE HERE\n    if (is.prime(n)) {\n        return(n)\n   \
    \ }\n    else {\n        for (i in 2:n) {\n            if (n %% i == 0) {\n  \
    \              return(largest_prime_factor(n / i))\n            }\n        }\n\
    \    }\n}\n", "\n  # TODO\n}\n", "\n  # Your code here\n  i <- 2\n  while (i <\
    \ n) {\n    if (n %% i == 0) {\n      n <- n / i\n    } else {\n      i <- i +\
    \ 1\n    }\n  }\n  return(n)\n}\n", "\n  # Your code here\n  # Find the largest\
    \ prime factor of n.\n  # Assume n > 1 and is not a prime.\n  # >>> largest_prime_factor(13195)\n\
    \  # 29\n  # >>> largest_prime_factor(2048)\n  # 2\n  # Your code here\n  # Find\
    \ the largest prime factor of n.\n  # Assume n > 1 and is not a prime.\n  # >>>\
    \ largest_prime_factor(13195)\n  # 29\n  # >>> largest_prime_factor(2048)\n  #\
    \ 2\n  # Your code here\n  # Find the largest prime factor of n.\n  # Assume n\
    \ > 1 and is not a prime.\n  # >>> largest_prime_factor(13195)\n  # 29\n  # >>>\
    \ largest_prime_factor(2048)\n  # 2\n  # Your code here\n  # Find the largest\
    \ prime factor of n.\n  # Assume n > 1 and is not a prime.\n  # >>> largest_prime_factor(13195)\n\
    \  # 29\n  # >>> largest_prime_factor(2048)\n  # 2\n  # Your code here\n  # Find\
    \ the largest prime factor of n.\n  # Assume n > 1 and is not a prime.\n  # >>>\
    \ largest_prime_factor(13195)\n  # 29\n  # >>> largest_prime_factor(2048)\n  #\
    \ 2\n  # Your code here\n  # Find the largest prime factor of n.\n  # Assume n\
    \ > 1 and is not a prime.\n  # >>> largest_prime_factor(13195)\n  # 29\n  # >>>\
    \ largest_prime_factor(2048)\n  # 2\n  # Your code here\n  # Find the largest\
    \ prime factor of n.\n  # Assume n > 1 and is not a prime.\n  # >>> largest_prime_factor(13195)\n\
    \  # 29\n  # >>> largest_prime_factor(2048)\n  # 2\n  # Your code here\n  # Find\
    \ the largest prime factor of n.\n  # Assume n > 1 and is not a prime.\n  # >>>\
    \ largest_prime_factor(13195)\n  # 29\n  # >>> largest_prime_", "\n  # Your code\
    \ here\n  return(n)\n}\n", "\n  # Your code here\n}\n", "\n  if (is.prime(n))\
    \ {\n    return(n)\n  }\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n\
    \ / i))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(1)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  i = 2\n  while (i < n)\
    \ {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n / i))\n    }\n\
    \    i = i + 1\n  }\n}\n", "\n  # Your code here\n  # Your code here\n  if(is.prime(n)){\n\
    \    return(n)\n  }\n  else{\n    for(i in 2:n){\n      if(n %% i == 0){\n   \
    \     return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n", "\n  # Your\
    \ code here\n  # Hint: use the is_prime function\n  # Hint: use the seq function\n\
    \  # Hint: use the which function\n  # Hint: use the max function\n  # Hint: use\
    \ the %% function\n  # Hint: use the isTRUE function\n  # Hint: use the any function\n\
    \  # Hint: use the & function\n  # Hint: use the == function\n  # Hint: use the\
    \ is.na function\n  # Hint: use the is.nan function\n  # Hint: use the is.finite\
    \ function\n  # Hint: use the is.infinite function\n  # Hint: use the is.integer\
    \ function\n  # Hint: use the is.double function\n  # Hint: use the is.numeric\
    \ function\n  # Hint: use the is.complex function\n  # Hint: use the is.character\
    \ function\n  # Hint: use the is.logical function\n  # Hint: use the is.raw function\n\
    \  # Hint: use the is.list function\n  # Hint: use the is.vector function\n  #\
    \ Hint: use the is.matrix function\n  # Hint: use the is.array function\n  # Hint:\
    \ use the is.data.frame function\n  # Hint: use the is.factor function\n  # Hint:\
    \ use the is.function function\n  # Hint: use the is.environment function\n  #\
    \ Hint: use the is.null function\n  # Hint: use the is.na.numeric function\n \
    \ # Hint: use the is.na.character function\n  # Hint: use the is.na.complex function\n\
    \  # Hint: use the is.na.logical function\n  # Hint: use the is.na.data.frame\
    \ function\n  # Hint: use the is.na.list function\n  # Hint: use the is.na.factor\
    \ function\n  # Hint: use the is.na.vector function\n  # Hint: use the is.na.matrix\
    \ function\n  # Hint: use the is.na.array function\n  # Hint: use the is.na.environment\
    \ function\n  # Hint", "\n  # YOUR CODE HERE\n  i <- 2\n  while (i <= n) {\n \
    \   if (n %% i == 0) {\n      n <- n / i\n    } else {\n      i <- i + 1\n   \
    \ }\n  }\n  return(i)\n}\n", "\n  # Your code here\n}\n", "\n    # YOUR CODE HERE\n\
    \    if (is.prime(n)) {\n        return(n)\n    }\n    else {\n        for (i\
    \ in 2:n) {\n            if (n %% i == 0) {\n                return(largest_prime_factor(n/i))\n\
    \            }\n        }\n    }\n}\n", "\n  # Your code here\n}\n", "\n  # YOUR\
    \ CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  else {\n    for (i in\
    \ 2:n) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n  }\n  for\
    \ (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n /\
    \ i))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n\
    \ / i))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  # Hint: Use the is_prime function.\n\
    \  # Hint: Use the is_divisible function.\n  # Hint: Use the seq function.\n \
    \ # Hint: Use the max function.\n  # Hint: Use the which function.\n  # Hint:\
    \ Use the is_prime function.\n  # Hint: Use the is_divisible function.\n  # Hint:\
    \ Use the seq function.\n  # Hint: Use the max function.\n  # Hint: Use the which\
    \ function.\n  # Hint: Use the is_prime function.\n  # Hint: Use the is_divisible\
    \ function.\n  # Hint: Use the seq function.\n  # Hint: Use the max function.\n\
    \  # Hint: Use the which function.\n  # Hint: Use the is_prime function.\n  #\
    \ Hint: Use the is_divisible function.\n  # Hint: Use the seq function.\n  # Hint:\
    \ Use the max function.\n  # Hint: Use the which function.\n  # Hint: Use the\
    \ is_prime function.\n  # Hint: Use the is_divisible function.\n  # Hint: Use\
    \ the seq function.\n  # Hint: Use the max function.\n  # Hint: Use the which\
    \ function.\n  # Hint: Use the is_prime function.\n  # Hint: Use the is_divisible\
    \ function.\n  # Hint: Use the seq function.\n  # Hint: Use the max function.\n\
    \  # Hint: Use the which function.\n  # Hint: Use the is_prime function.\n  #\
    \ Hint: Use the is_divisible function.\n  # Hint: Use the seq function.\n  # Hint:\
    \ Use the max function.\n  # Hint: Use the which function.\n  # Hint: Use the\
    \ is_prime function.\n  # Hint: Use the is_divisible function.\n  # Hint: Use\
    \ the seq function.\n  # Hint: Use the max function.\n  # Hint: Use the which\
    \ function.\n  # Hint: Use the is_prime function.\n  # Hint: Use the is_divisible",
  "\n  # YOUR CODE HERE\n  stop(\"Not yet implemented\")\n}\n", "\n  # TODO\n}\n",
  "\n    # YOUR CODE HERE\n    x <- 2\n    while (n > 1) {\n        if (n %% x ==\
    \ 0) {\n            n <- n / x\n        } else {\n            x <- x + 1\n   \
    \     }\n    }\n    return(x)\n}\n", "\n  # YOUR CODE HERE\n  prime_factors <-\
    \ c()\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      prime_factors <- c(prime_factors,\
    \ i)\n    }\n  }\n  return(max(prime_factors))\n}\n", "\n    # YOUR CODE HERE\n\
    \    if (is.prime(n)) {\n        return(n)\n    }\n    for (i in 2:n) {\n    \
    \    if (n %% i == 0) {\n            return(largest_prime_factor(n / i))\n   \
    \     }\n    }\n}\n", "\n  # TODO: implement this function\n  return(n)\n}\n",
  "\n  # Your code here\n  n\n}\n", "\n  # TODO: implement this function\n  return(1)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(NULL)\n}\n", "\n  # Your code here\n}\n",
  "\n  if (is.prime(n)) {\n    return(n)\n  }\n  for (i in seq(2, n/2)) {\n    if\
    \ (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n    }\n  }\n}\n",
  "\n  # YOUR CODE HERE\n  return(0)\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n))\
    \ {\n    return(n)\n  }\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n\
    \ / i))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(1)\n}\n", "\n  # Your\
    \ code here\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n  }\n  for (i in seq(2,\
    \ n)) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n / i))\n \
    \   }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  else {\n    for (i in 2:n) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n    # YOUR CODE HERE\n    return(n)\n}\n", "\n\
    \    # YOUR CODE HERE\n    factor <- function(n) {\n        factors <- c()\n \
    \       for (i in 1:n) {\n            if (n %% i == 0) {\n                factors\
    \ <- c(factors, i)\n            }\n        }\n        return(factors)\n    }\n\
    \    factors <- factor(n)\n    for (i in length(factors):1) {\n        if (is_prime(factors[i]))\
    \ {\n            return(factors[i])\n        }\n    }\n}\n", "\n  # YOUR CODE\
    \ HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  else {\n    for (i in seq(2,\
    \ n, by = 1)) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # TODO: implement me\n}\n", "\n  # YOUR CODE\
    \ HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  else {\n    for (i in 2:n)\
    \ {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n   \
    \   }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  factor <- 2\n  while (n > 1)\
    \ {\n    if (n %% factor == 0) {\n      n <- n / factor\n    } else {\n      factor\
    \ <- factor + 1\n    }\n  }\n  factor\n}\n", "\n  # Your code here\n  # You may\
    \ find the is_prime function useful\n  # You may find the is_divisible function\
    \ useful\n  # You may find the seq function useful\n  # You may find the max function\
    \ useful\n  # You may find the which function useful\n  # You may find the %in%\
    \ function useful\n  # You may find the c function useful\n  # You may find the\
    \ append function useful\n  # You may find the unique function useful\n  # You\
    \ may find the length function useful\n  # You may find the sort function useful\n\
    \  # You may find the rev function useful\n  # You may find the head function\
    \ useful\n  # You may find the tail function useful\n  # You may find the rep\
    \ function useful\n  # You may find the sum function useful\n  # You may find\
    \ the prod function useful\n  # You may find the diff function useful\n  # You\
    \ may find the cumsum function useful\n  # You may find the cumprod function useful\n\
    \  # You may find the cummax function useful\n  # You may find the cummin function\
    \ useful\n  # You may find the cumany function useful\n  # You may find the cumall\
    \ function useful\n  # You may find the cummean function useful\n  # You may find\
    \ the cumprod function useful\n  # You may find the cummax function useful\n \
    \ # You may find the cummin function useful\n  # You may find the cumany function\
    \ useful\n  # You may find the cumall function useful\n  # You may find the cummean\
    \ function useful\n  # You may find the cummedian function useful\n  # You may\
    \ find the cumvar function useful\n  # You may find the cumstd function useful\n\
    \  # You may find the cummin function useful\n  # You may find the cummax function\
    \ useful\n  # You may find the cumany function useful\n  # You may find the cumall\
    \ function useful\n  # You may find the cummean function useful\n  # You may find\
    \ the cummedian function useful\n  # You may find the cumvar function useful\n\
    \  # You may find the cumstd function useful\n  # You may find the cummin function\
    \ useful\n  # You may find the cummax function useful\n  # You may find the cumany\
    \ function useful\n  # You may find the cumall function useful\n  # You may",
  "\n  # YOUR CODE HERE\n  factor(n)\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  else {\n    for (i in 2:n) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n\
    \ / i))\n      }\n    }\n  }\n}\n", "\n  # TODO: Implement me!\n}\n", "\n  # Your\
    \ code here\n}\n", "\n  # YOUR CODE HERE\n  return(n)\n}\n", "\n  if (is.prime(n))\
    \ return(n)\n  for (i in seq(2, n-1)) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n\
    \ / i))\n    }\n  }\n}\n", "\n  # Your code here\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  for (i in seq(2, n)) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n\
    \ / i))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  prime_factors <- function(n)\
    \ {\n    factors <- c()\n    i <- 2\n    while (n > 1) {\n      if (n %% i ==\
    \ 0) {\n        factors <- c(factors, i)\n        n <- n / i\n      } else {\n\
    \        i <- i + 1\n      }\n    }\n    return(factors)\n  }\n  return(max(prime_factors(n)))\n\
    }\n", "\n  # Your code here\n  return(n)\n}\n", "\n  # Your code here\n}\n", "\n\
    \  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  } else {\n    for\
    \ (i in 2:n) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n\
    \ / i))\n      }\n    }\n  }\n}\n", "\n    # YOUR CODE HERE\n    if (is.prime(n))\
    \ {\n        return(n)\n    }\n    for (i in seq(2, n-1)) {\n        if (n %%\
    \ i == 0) {\n            return(largest_prime_factor(n/i))\n        }\n    }\n\
    }\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  for (i\
    \ in seq(2, n)) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n\
    \    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n\
    \ / i))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  else {\n    for (i in seq(2, n-1)) {\n      if (n %% i == 0) {\n     \
    \   return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n", "\n  # YOUR\
    \ CODE HERE\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n      n <- n\
    \ / i\n    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}\n", "\n  # TODO:\
    \ Implement this function.\n  return(0)\n}\n", "\n  # Your code here\n}\n", "\n\
    \  # Your code here\n}\n", "\n  # Your code here\n  for (i in seq(n, 1, -1)) {\n\
    \    if (is_prime(i) & n %% i == 0) {\n      return(i)\n    }\n  }\n}\n", "\n\
    \  if (is.prime(n)) {\n    return(n)\n  }\n  else {\n    for (i in 2:n) {\n  \
    \    if (n %% i == 0) {\n        return(largest_prime_factor(n / i))\n      }\n\
    \    }\n  }\n}\n", "\n  # TODO: Fill in this function.\n  return(n)\n}\n", "\n\
    \  # Your code here\n  if (is.prime(n)) {\n    return(n)\n  } else {\n    for\
    \ (i in seq(2, n)) {\n      if (is.prime(i) && n %% i == 0) {\n        return(largest_prime_factor(n\
    \ / i))\n      }\n    }\n  }\n}\n", "\n  # TODO: Implement this function.\n  return(0)\n\
    }\n", "\n  # YOUR CODE HERE\n  # Hint: Use the function is_prime()\n  # Hint:\
    \ Use the function factors()\n  # Hint: Use the function max()\n  # Hint: Use\
    \ the function filter()\n  # Hint: Use the function is_prime()\n  # Hint: Use\
    \ the function factors()\n  # Hint: Use the function max()\n  # Hint: Use the\
    \ function filter()\n  # Hint: Use the function is_prime()\n  # Hint: Use the\
    \ function factors()\n  # Hint: Use the function max()\n  # Hint: Use the function\
    \ filter()\n  # Hint: Use the function is_prime()\n  # Hint: Use the function\
    \ factors()\n  # Hint: Use the function max()\n  # Hint: Use the function filter()\n\
    \  # Hint: Use the function is_prime()\n  # Hint: Use the function factors()\n\
    \  # Hint: Use the function max()\n  # Hint: Use the function filter()\n  # Hint:\
    \ Use the function is_prime()\n  # Hint: Use the function factors()\n  # Hint:\
    \ Use the function max()\n  # Hint: Use the function filter()\n  # Hint: Use the\
    \ function is_prime()\n  # Hint: Use the function factors()\n  # Hint: Use the\
    \ function max()\n  # Hint: Use the function filter()\n  # Hint: Use the function\
    \ is_prime()\n  # Hint: Use the function factors()\n  # Hint: Use the function\
    \ max()\n  # Hint: Use the function filter()\n  # Hint: Use the function is_prime()\n\
    \  # Hint: Use the function factors()\n  # Hint: Use the function max()\n  # Hint:\
    \ Use the function filter()\n  # Hint: Use the function is_prime()\n  # Hint:\
    \ Use the function factors()\n  # Hint: Use the function max()\n  # Hint: Use\
    \ the function filter()\n  # Hint: Use the function is_prime()\n  # Hint: Use\
    \ the function factors()\n  # Hint: Use the function max()\n  # Hint: Use the\
    \ function filter", "\n  # TODO: Implement this function.\n  return(2)\n}\n",
  "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  else {\n    for\
    \ (i in seq(2, n-1)) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n\
    \    }\n  }\n}\n", "\n  # Your code here\n  # Hint: Use the is_prime function\n\
    \  # Hint: Use the seq function\n  # Hint: Use the which function\n  # Hint: Use\
    \ the max function\n  # Hint: Use the %% function\n  # Hint: Use the == function\n\
    \  # Hint: Use the sum function\n  # Hint: Use the & function\n  # Hint: Use the\
    \ | function\n  # Hint: Use the ! function\n  # Hint: Use the all function\n \
    \ # Hint: Use the any function\n  # Hint: Use the as.logical function\n  # Hint:\
    \ Use the ifelse function\n  # Hint: Use the if function\n  # Hint: Use the else\
    \ function\n  # Hint: Use the for function\n  # Hint: Use the while function\n\
    \  # Hint: Use the repeat function\n  # Hint: Use the break function\n  # Hint:\
    \ Use the next function\n  # Hint: Use the return function\n  # Hint: Use the\
    \ switch function\n  # Hint: Use the case function\n  # Hint: Use the default\
    \ function\n  # Hint: Use the stop function\n  # Hint: Use the warning function\n\
    \  # Hint: Use the message function\n  # Hint: Use the cat function\n  # Hint:\
    \ Use the print function\n  # Hint: Use the paste function\n  # Hint: Use the\
    \ paste0 function\n  # Hint: Use the sprintf function\n  # Hint: Use the format\
    \ function\n  # Hint: Use the formatC function\n  # Hint: Use the format.info\
    \ function\n  # Hint: Use the format.pval function\n  # Hint: Use the format.default\
    \ function\n  # Hint: Use the format.data.frame function\n  # Hint: Use the format.POSIXct\
    \ function\n  # Hint: Use the format.POSIXlt function\n  # Hint: Use the format.difftime\
    \ function\n  # Hint: Use the format.summaryDefault function\n  # Hint: Use the\
    \ format.summary.data.frame function\n  # Hint: Use the format.summary.table function\n\
    \  # Hint: Use the format.", "\n  # Your code here\n  i <- 2\n  while (i < n)\
    \ {\n    if (n %% i == 0) {\n      n <- n / i\n    } else {\n      i <- i + 1\n\
    \    }\n  }\n  return(n)\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n\
    \    return(n)\n  }\n  for (i in seq(2, n/2, by = 1)) {\n    if (n %% i == 0)\
    \ {\n      return(largest_prime_factor(n/i))\n    }\n  }\n}\n", "\n  # Your code\
    \ here\n}\n", "\n  # Your code here\n  factor(n)\n}\n", "\n    # YOUR CODE HERE\n\
    \    return(n)\n}\n", "\n  # Your code here\n}\n", "\n  if (is.prime(n)) {\n \
    \   return(n)\n  }\n  for (i in seq(2, n)) {\n    if (is.prime(i) && n %% i ==\
    \ 0) {\n      return(largest_prime_factor(n / i))\n    }\n  }\n}\n", "\n  if (is.prime(n))\
    \ return(n)\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n\
    \ / i))\n    }\n  }\n}\n", "\n  # Your code here\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  else {\n    for (i in seq(2, n)) {\n      if (n %% i == 0) {\n       \
    \ return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n", "\n  # your code\
    \ here\n}\n", "\n  # YOUR CODE HERE\n  # Hint: Use the is_prime function.\n  #\
    \ Hint: Use the seq function.\n  # Hint: Use the max function.\n  # Hint: Use\
    \ the which function.\n  # Hint: Use the %% function.\n  # Hint: Use the & operator.\n\
    \  # Hint: Use the | operator.\n  # Hint: Use the ! operator.\n  # Hint: Use the\
    \ any function.\n  # Hint: Use the all function.\n  # Hint: Use the length function.\n\
    \  # Hint: Use the %/% function.\n  # Hint: Use the == operator.\n  # Hint: Use\
    \ the != operator.\n  # Hint: Use the > operator.\n  # Hint: Use the < operator.\n\
    \  # Hint: Use the >= operator.\n  # Hint: Use the <= operator.\n  # Hint: Use\
    \ the : operator.\n  # Hint: Use the ifelse function.\n  # Hint: Use the if function.\n\
    \  # Hint: Use the else function.\n  # Hint: Use the for function.\n  # Hint:\
    \ Use the while function.\n  # Hint: Use the repeat function.\n  # Hint: Use the\
    \ break function.\n  # Hint: Use the next function.\n  # Hint: Use the return\
    \ function.\n  # Hint: Use the c function.\n  # Hint: Use the list function.\n\
    \  # Hint: Use the matrix function.\n  # Hint: Use the data.frame function.\n\
    \  # Hint: Use the cbind function.\n  # Hint: Use the rbind function.\n  # Hint:\
    \ Use the apply function.\n  # Hint: Use the sapply function.\n  # Hint: Use the\
    \ lapply function.\n  # Hint: Use the vapply function.\n  # Hint: Use the tapply\
    \ function.\n  # Hint: Use the mapply function.\n  # Hint: Use the aggregate function.\n\
    \  # Hint: Use the by function.\n  # Hint: Use the merge function.\n  # Hint:\
    \ Use the order function.\n  # Hint:", "\n  # YOUR CODE HERE\n  return(n)\n}\n",
  "\n  # Your code here\n}\n", "\n    # YOUR CODE HERE\n    factor <- n\n    while(factor\
    \ > 1){\n        if(n %% factor == 0){\n            if(is_prime(factor)){\n  \
    \              return(factor)\n            }\n        }\n        factor <- factor\
    \ - 1\n    }\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n  }\n  for (i in seq(2,\
    \ n)) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n   \
    \ }\n  }\n}\n\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n", "\n\
    \  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  for (i in 2:n)\
    \ {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n    }\n\
    \  }\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n  }\n  else {\n    for (i\
    \ in 1:n) {\n      if (n %% i == 0 && is.prime(i)) {\n        return(i)\n    \
    \  }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  i <- 2\n  while (i < n) {\n \
    \   if (n %% i == 0) {\n      n <- n / i\n    } else {\n      i <- i + 1\n   \
    \ }\n  }\n  return(n)\n}\n", "\n  # Your code here\n}\n", "\n  # TODO: implement\
    \ this function\n  return(n)\n}\n", "\n  # YOUR CODE HERE\n  prime_factors <-\
    \ function(n) {\n    factors <- c()\n    for (i in 2:n) {\n      if (n %% i ==\
    \ 0) {\n        factors <- c(factors, i)\n      }\n    }\n    return(factors)\n\
    \  }\n  return(max(prime_factors(n)))\n}\n", "\n  # your code here\n}\n", "\n\
    \  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n\
    \    }\n  }\n}\n", "\n  # TODO: implement this function\n  # Hint: use the is_prime\
    \ function\n  # Hint: use the is_divisible function\n  # Hint: use the seq function\n\
    \  # Hint: use the max function\n  # Hint: use the which function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  # Hint: use the which.min function\n  # Hint: use\
    \ the which.max function\n  #", "\n  # YOUR CODE HERE\n  factor <- 2\n  while\
    \ (n > 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n    } else {\n\
    \      factor <- factor + 1\n    }\n  }\n  return(factor)\n}\n", "\n  # YOUR CODE\
    \ HERE\n  factor <- 2\n  while (n > 1) {\n    if (n %% factor == 0) {\n      n\
    \ <- n / factor\n    } else {\n      factor <- factor + 1\n    }\n  }\n  return(factor)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(n)\n}\n", "\n  # YOUR CODE HERE\n  stop(\"\
    Not yet implemented\")\n}\n", "\n    # TODO: Implement this function\n    return(0)\n\
    }\n", "\n  # Your code here\n  for (i in seq(2, n)) {\n    if (n %% i == 0) {\n\
    \      n <- n / i\n    }\n  }\n  return(n)\n}\n", "\n  # YOUR CODE HERE\n  factor\
    \ <- 2\n  while (n > 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n\
    \    } else {\n      factor <- factor + 1\n    }\n  }\n  factor\n}\n", "\n  #\
    \ YOUR CODE HERE\n  return(n)\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n))\
    \ {\n    return(n)\n  }\n  else {\n    for (i in 2:n) {\n      if (n %% i == 0)\
    \ {\n        return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n", "\n\
    \  # Your code here\n  if (is.prime(n)) {\n    return(n)\n  }\n  for (i in 2:n)\
    \ {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n    }\n\
    \  }\n}\n", "\n  # Your code here\n  x <- 2\n  while (n > 1) {\n    if (n %% x\
    \ == 0) {\n      n <- n / x\n    } else {\n      x <- x + 1\n    }\n  }\n  return(x)\n\
    }\n", "\n  # TODO: implement this function\n  return(n)\n}\n", "\n  # Your code\
    \ here\n  for (i in seq(n, 1, -1)) {\n    if (is_prime(i) && n %% i == 0) {\n\
    \      return(i)\n    }\n  }\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n \
    \ }\n  else {\n    for (i in seq(2, n)) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n\
    \ / i))\n      }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(n)\n}\n",
  "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  else {\n    for\
    \ (i in seq(2, n-1)) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n\
    \ / i))\n      }\n    }\n  }\n}\n", "\n  # Your code here\n}\n", "\n  # YOUR CODE\
    \ HERE\n  factor(n)\n}\n", "\n  # YOUR CODE HERE\n  factors <- factor(n)\n  factors[length(factors)]\n\
    }\n", "\n  # Your code here\n  return(n)\n}\n", "\n  # Your code here\n}\n", "\n\
    \  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  factor <- function(n) {\n\
    \    if (n == 1) {\n      return(1)\n    }\n    for (i in 2:n) {\n      if (n\
    \ %% i == 0) {\n        return(i)\n      }\n    }\n  }\n  while (n > 1) {\n  \
    \  f <- factor(n)\n    if (f == n) {\n      return(n)\n    }\n    n <- n / f\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  return(1)\n}\n", "\n  # TODO\n}\n", "\n \
    \ # YOUR CODE HERE\n  return(0)\n}\n", "\n  # YOUR CODE HERE\n  return(n)\n}\n",
  "\n  # Your code here\n  if (is.prime(n)) {\n    return(n)\n  } else {\n    for\
    \ (i in seq(2, n-1)) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  else {\n    for (i in 2:n) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # Your code here\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  else {\n    for (i in seq(2, n - 1)) {\n      if (n %% i == 0) {\n   \
    \     return(largest_prime_factor(n / i))\n      }\n    }\n  }\n}\n", "\n  # YOUR\
    \ CODE HERE\n  return(n)\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n\
    \    return(n)\n  } else {\n    for (i in 2:n) {\n      if (is.prime(i) && n %%\
    \ i == 0) {\n        return(largest_prime_factor(n / i))\n      }\n    }\n  }\n\
    }\n", "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  factor <- function(n)\
    \ {\n    factors <- c()\n    for (i in 1:n) {\n      if (n %% i == 0) {\n    \
    \    factors <- c(factors, i)\n      }\n    }\n    return(factors)\n  }\n  prime\
    \ <- function(n) {\n    if (n == 1) {\n      return(FALSE)\n    }\n    for (i\
    \ in 2:(n-1)) {\n      if (n %% i == 0) {\n        return(FALSE)\n      }\n  \
    \  }\n    return(TRUE)\n  }\n  factors <- factor(n)\n  primes <- c()\n  for (i\
    \ in factors) {\n    if (prime(i)) {\n      primes <- c(primes, i)\n    }\n  }\n\
    \  return(max(primes))\n}\n", "\n  # YOUR CODE HERE\n  factor <- function(n) {\n\
    \    factors <- c()\n    for (i in 1:n) {\n      if (n %% i == 0) {\n        factors\
    \ <- c(factors, i)\n      }\n    }\n    return(factors)\n  }\n  factors <- factor(n)\n\
    \  for (i in factors) {\n    if (is_prime(i)) {\n      return(i)\n    }\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  else\
    \ {\n    for (i in 2:n) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n\
    \  return(n)\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n\
    \    }\n  }\n}\n", "\n  # your code here\n}\n", "\n  # Your code here\n  if (is.prime(n))\
    \ {\n    return(n)\n  } else {\n    for (i in 2:n) {\n      if (n %% i == 0) {\n\
    \        return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n", "\n  #\
    \ Your code here\n  # Hint: use the is_prime function\n  # Hint: use the seq function\n\
    \  # Hint: use the which function\n  # Hint: use the max function\n}\n", "\n \
    \ # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  for (i in seq(2,\
    \ n - 1)) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n / i))\n\
    \    }\n  }\n}\n", "\n  # Your code here\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  for (i in 2:n) {\n    if (is.prime(i) && n %% i == 0) {\n      return(largest_prime_factor(n/i))\n\
    \    }\n  }\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n  }\n  for (i in seq(2,\
    \ n - 1)) {\n    if (n %% i == 0 && is.prime(i)) {\n      return(i)\n    }\n \
    \ }\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n  }\n  else {\n    for (i in\
    \ 2:n) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # Your code here\n}\n", "\n  # Your code here\n\
    \  return(n)\n}\n", "\n  # Your code here\n  # Hint: use the is_prime function\n\
    \  # Hint: use the seq function\n  # Hint: use the which function\n  # Hint: use\
    \ the max function\n  # Hint: use the %% operator\n  # Hint: use the %/% operator\n\
    }\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)){\n    return(n)\n  }\n  for (i\
    \ in 2:n){\n    if (n %% i == 0){\n      return(largest_prime_factor(n/i))\n \
    \   }\n  }\n}\n", "\n  # Your code here\n  # Hint: You can use the `is_prime`\
    \ function from the previous exercise.\n  # Hint: You can use the `%/%` operator\
    \ to find the largest integer divisor.\n  # Hint: You can use the `seq` function\
    \ to generate a sequence of integers.\n  # Hint: You can use the `max` function\
    \ to find the largest element of a vector.\n  # Hint: You can use the `which`\
    \ function to find the index of the largest element of a vector.\n}\n", "\n  #\
    \ Your code here\n  if (is.prime(n)) {\n    return(n)\n  }\n  for (i in 2:n) {\n\
    \    if (n %% i == 0) {\n      return(largest_prime_factor(n / i))\n    }\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n  else\
    \ {\n    for (i in seq(2, n-1)) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # TODO: Implement this function.\n  # Hint: You\
    \ can use the is_prime function.\n  # Hint: You can use the is_divisible function.\n\
    \  # Hint: You can use the seq function.\n  # Hint: You can use the max function.\n\
    \  # Hint: You can use the which function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.min function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.min function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.min\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.min function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.min function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.min function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.min function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.min\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.min function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.min function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.min function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.min function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.min\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.min function.\n  # Hint: You can use the which", "\n    # YOUR\
    \ CODE HERE\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n    # return(n)\n\
    \    # return(n)\n    # return(n)\n    # return(n)\n", "\n  # TODO: implement\
    \ this function\n  return(n)\n}\n", "\n  # YOUR CODE HERE\n  factor <- 2\n  while\
    \ (n > 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n    } else {\n\
    \      factor <- factor + 1\n    }\n  }\n  return(factor)\n}\n", "\n    # YOUR\
    \ CODE HERE\n    factor <- 2\n    while (n > 1) {\n        if (n %% factor ==\
    \ 0) {\n            n <- n / factor\n        } else {\n            factor <- factor\
    \ + 1\n        }\n    }\n    return(factor)\n}\n", "\n  # Your code here\n  return(n)\n\
    }\n", "\n  # TODO: implement this function\n  return(n)\n}\n", "\n  # Your code\
    \ here\n}\n", "\n  # TODO: implement this function\n  # Hint: you can use the\
    \ is_prime function\n  # Hint: you can use the seq function\n  # Hint: you can\
    \ use the %% operator\n  # Hint: you can use the max function\n  # Hint: you can\
    \ use the which function\n  # Hint: you can use the which.max function\n  # Hint:\
    \ you can use the is.na function\n  # Hint: you can use the is.na.rm argument\n\
    \  # Hint: you can use the any function\n  # Hint: you can use the all function\n\
    \  # Hint: you can use the & operator\n  # Hint: you can use the | operator\n\
    \  # Hint: you can use the ! operator\n  # Hint: you can use the isTRUE function\n\
    \  # Hint: you can use the is.numeric function\n  # Hint: you can use the is.integer\
    \ function\n  # Hint: you can use the is.double function\n  # Hint: you can use\
    \ the is.complex function\n  # Hint: you can use the is.logical function\n  #\
    \ Hint: you can use the is.character function\n  # Hint: you can use the is.factor\
    \ function\n  # Hint: you can use the is.list function\n  # Hint: you can use\
    \ the is.atomic function\n  # Hint: you can use the is.recursive function\n  #\
    \ Hint: you can use the is.null function\n  # Hint: you can use the is.na function\n\
    \  # Hint: you can use the is.nan function\n  # Hint: you can use the is.finite\
    \ function\n  # Hint: you can use the is.infinite function\n  # Hint: you can\
    \ use the is.matrix function\n  # Hint: you can use the is.array function\n  #\
    \ Hint: you can use the is.vector function\n  # Hint: you can use the is.data.frame\
    \ function\n  # Hint: you can use the is.table function\n  # Hint: you can use\
    \ the is.function function\n  # Hint: you can use the is.environment function\n\
    \  # Hint:", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n  }\n\
    \  for (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n\
    \    }\n  }\n}\n", "\n  # Your code here\n  # Hint: Use the is_prime function\n\
    }\n", "\n  # Your code here\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n  }\n\
    \  for (i in seq(2, n)) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n\
    \ / i))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  else {\n    for (i in 2:n) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # TODO: Implement this function\n  return(n)\n\
    }\n", "\n  # Your code here\n  i <- 2\n  while (i <= n) {\n    if (n %% i == 0)\
    \ {\n      n <- n / i\n    } else {\n      i <- i + 1\n    }\n  }\n  return(i)\n\
    }\n", "\n  if (is.prime(n)) {\n    return(n)\n  }\n  for (i in seq(2, n)) {\n\
    \    if (n %% i == 0) {\n      return(largest_prime_factor(n / i))\n    }\n  }\n\
    }\n", "\n  # TODO: Implement me!\n  return(n)\n}\n", "\n  # Your code here\n}\n",
  "\n  # YOUR CODE HERE\n  return(n)\n}\n", "\n  # TODO: Fill in the body of this\
    \ function.\n  return(n)\n}\n", "\n  # Your code here\n  # Hint: use the function\
    \ is.prime()\n}\n", "\n  factors <- factor(n)\n  factors[length(factors)]\n}\n",
  "\n    # Your code here\n    return(n)\n}\n", "\n  # YOUR CODE HERE\n  return(1)\n\
    }\n", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n", "\n  # YOUR CODE\
    \ HERE\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n      n <- n / i\n\
    \    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}\n", "\n  # Your code\
    \ here\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
