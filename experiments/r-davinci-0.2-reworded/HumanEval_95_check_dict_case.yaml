name: HumanEval_95_check_dict_case
language: r
prompt: "# Given a named list, return TRUE if all keys are strings in lower \n# case\
  \ or all keys are strings in upper case, else return FALSE.\n# The function should\
  \ return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a'\
  \ = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple',\
  \ 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple',\
  \ 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John',\
  \ 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE'\
  \ = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {"
tests: "test_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
  \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
  \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
  \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
  \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if (length(dict)\
    \ == 1) {\n    return(TRUE)\n  }\n  if (all(names(dict) == tolower(names(dict))))\
    \ {\n    return(TRUE)\n  }\n  if (all(names(dict) == toupper(names(dict)))) {\n\
    \    return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n  if (length(dict) == 0) {\n\
    \    return(FALSE)\n  }\n  if (all(names(dict) == tolower(names(dict)))) {\n \
    \   return(TRUE)\n  }\n  if (all(names(dict) == toupper(names(dict)))) {\n   \
    \ return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n  # check if the given named list\
    \ is empty\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  # check if all\
    \ keys are strings in lower case\n  if (all(sapply(names(dict), function(x) {\n\
    \    return(x == tolower(x))\n  }))) {\n    return(TRUE)\n  }\n  # check if all\
    \ keys are strings in upper case\n  if (all(sapply(names(dict), function(x) {\n\
    \    return(x == toupper(x))\n  }))) {\n    return(TRUE)\n  }\n  # otherwise return\
    \ FALSE\n  return(FALSE)\n}\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  if (all(names(dict) == tolower(names(dict)))) {\n    return(TRUE)\n  }\n\
    \  if (all(names(dict) == toupper(names(dict)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  lower = TRUE\n\
    \  upper = TRUE\n  for (key in names(dict)) {\n    if (grepl(\"[[:upper:]]\",\
    \ key)) {\n      lower = FALSE\n    }\n    if (grepl(\"[[:lower:]]\", key)) {\n\
    \      upper = FALSE\n    }\n  }\n  return(lower | upper)\n}\n", "\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  keys <- names(dict)\n  if (is.null(keys))\
    \ {\n    return(FALSE)\n  }\n  if (all(tolower(keys) == keys)) {\n    return(TRUE)\n\
    \  }\n  if (all(toupper(keys) == keys)) {\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if (all(names(dict)\
    \ == tolower(names(dict)))) {\n    return(TRUE)\n  }\n  if (all(names(dict) ==\
    \ toupper(names(dict)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n\
    \  # check if the dict is empty\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  # check if all keys are strings\n  if (all(sapply(dict, is.character)))\
    \ {\n    # check if all keys are in lower case\n    if (all(sapply(dict, tolower)\
    \ == names(dict))) {\n      return(TRUE)\n    }\n    # check if all keys are in\
    \ upper case\n    if (all(sapply(dict, toupper) == names(dict))) {\n      return(TRUE)\n\
    \    }\n  }\n  return(FALSE)\n}\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  if (all(names(dict) == tolower(names(dict)))) {\n    return(TRUE)\n  }\n\
    \  if (all(names(dict) == toupper(names(dict)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\n", "\n  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  if(all(names(dict)\
    \ == tolower(names(dict)))) {\n    return(TRUE)\n  }\n  if(all(names(dict) ==\
    \ toupper(names(dict)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n\
    \  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if (all(names(dict) ==\
    \ tolower(names(dict)))) {\n    return(TRUE)\n  }\n  if (all(names(dict) == toupper(names(dict))))\
    \ {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n  if (length(dict) == 0)\
    \ {\n    return(FALSE)\n  }\n  if (all(names(dict) == tolower(names(dict)))) {\n\
    \    return(TRUE)\n  }\n  if (all(names(dict) == toupper(names(dict)))) {\n  \
    \  return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n  if (length(dict) == 0) {\n \
    \   return(FALSE)\n  }\n  keys <- names(dict)\n  if (all(str_detect(keys, \"[[:lower:]]\"\
    )) || all(str_detect(keys, \"[[:upper:]]\"))) {\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\n", "\n  # check if the dictionary is empty\n  if (length(dict) == 0) {\n  \
    \  return(FALSE)\n  }\n  # check if all keys are strings\n  if (!all(sapply(dict,\
    \ is.character))) {\n    return(FALSE)\n  }\n  # check if all keys are in lower\
    \ case\n  if (all(sapply(dict, function(x) x == tolower(x)))) {\n    return(TRUE)\n\
    \  }\n  # check if all keys are in upper case\n  if (all(sapply(dict, function(x)\
    \ x == toupper(x)))) {\n    return(TRUE)\n  }\n  # if none of the above conditions\
    \ are met, return FALSE\n  return(FALSE)\n}\n", "\n  if(length(dict) == 0) {\n\
    \    return(FALSE)\n  }\n  if(all(names(dict) == tolower(names(dict)))) {\n  \
    \  return(TRUE)\n  }\n  if(all(names(dict) == toupper(names(dict)))) {\n    return(TRUE)\n\
    \  }\n  return(FALSE)\n}\n", "\n  if(length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  if(all(names(dict) == tolower(names(dict)))) {\n    return(TRUE)\n  }\n\
    \  if(all(names(dict) == toupper(names(dict)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if (length(dict)\
    \ == 1) {\n    return(TRUE)\n  }\n  if (is.null(dict)) {\n    return(FALSE)\n\
    \  }\n  if (is.na(dict)) {\n    return(FALSE)\n  }\n  if (is.nan(dict)) {\n  \
    \  return(FALSE)\n  }\n  if (is.infinite(dict)) {\n    return(FALSE)\n  }\n  if\
    \ (is.integer(dict)) {\n    return(FALSE)\n  }\n  if (is.double(dict)) {\n   \
    \ return(FALSE)\n  }\n  if (is.complex(dict)) {\n    return(FALSE)\n  }\n  if\
    \ (is.character(dict)) {\n    return(FALSE)\n  }\n  if (is.logical(dict)) {\n\
    \    return(FALSE)\n  }\n  if (is.raw(dict)) {\n    return(FALSE)\n  }\n  if (is.list(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.vector(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.matrix(dict)) {\n    return(FALSE)\n  }\n  if (is.array(dict)) {\n \
    \   return(FALSE)\n  }\n  if (is.data.frame(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.factor(dict)) {\n    return(FALSE)\n  }\n  if (is.numeric(dict)) {\n\
    \    return(FALSE)\n  }\n  if (is.complex(dict)) {\n    return(FALSE)\n  }\n \
    \ if (is.character(dict)) {\n    return(FALSE)\n  }\n  if (is.function(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.environment(dict)) {\n    return(FALSE)\n\
    \  }\n  if (is.call(dict)) {\n    return(FALSE)\n ", "\n  # check if the dictionary\
    \ is empty\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  # check if all\
    \ keys are strings in lower case\n  if (all(sapply(names(dict), function(x) {\n\
    \    is.character(x) && x == tolower(x)\n  }))) {\n    return(TRUE)\n  }\n  #\
    \ check if all keys are strings in upper case\n  if (all(sapply(names(dict), function(x)\
    \ {\n    is.character(x) && x == toupper(x)\n  }))) {\n    return(TRUE)\n  }\n\
    \  # otherwise, return FALSE\n  return(FALSE)\n}\n", "\n  if (length(dict) ==\
    \ 0) {\n    return(FALSE)\n  }\n  if (all(names(dict) == tolower(names(dict))))\
    \ {\n    return(TRUE)\n  }\n  if (all(names(dict) == toupper(names(dict)))) {\n\
    \    return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n  if (length(dict) == 0) {\n\
    \    return(FALSE)\n  }\n  keys <- names(dict)\n  if (all(tolower(keys) == keys))\
    \ {\n    return(TRUE)\n  }\n  if (all(toupper(keys) == keys)) {\n    return(TRUE)\n\
    \  }\n  return(FALSE)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
