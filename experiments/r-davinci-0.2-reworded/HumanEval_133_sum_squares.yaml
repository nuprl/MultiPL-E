name: HumanEval_133_sum_squares
language: r
prompt: "# You are given a list of numbers.\n# You need to return the sum of squared\
  \ numbers in the given list,\n# round each element in the list to the upper int(Ceiling)\
  \ first.\n# Examples:\n# >>> lst(c(1.0, 2.0, 3.0))\n# 14\n# >>> lst(c(1.0, 4.0,\
  \ 9.0))\n# 98\n# >>> lst(c(1.0, 3.0, 5.0, 7.0))\n# 84\n# >>> lst(c(1.4, 4.2, 0.0))\n\
  # 29\n# >>> lst(c(-2.4, 1.0, 1.0))\n# 6\nsum_squares <- function(lst) {"
tests: "test_humaneval <- function() {\ncandidate <- sum_squares\n    if(!identical(candidate(c(1.0,\
  \ 2.0, 3.0)), 14)){quit('no', 1)}\n    if(!identical(candidate(c(1.0, 2.0, 3.0)),\
  \ 14)){quit('no', 1)}\n    if(!identical(candidate(c(1.0, 3.0, 5.0, 7.0)), 84)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1.4, 4.2, 0.0)), 29)){quit('no', 1)}\n    if(!identical(candidate(c(-2.4,\
  \ 1.0, 1.0)), 6)){quit('no', 1)}\n    if(!identical(candidate(c(100.0, 1.0, 15.0,\
  \ 2.0)), 10230)){quit('no', 1)}\n    if(!identical(candidate(c(10000.0, 10000.0)),\
  \ 200000000)){quit('no', 1)}\n    if(!identical(candidate(c(-1.4, 4.6, 6.3)), 75)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(-1.4, 17.9, 18.9, 19.9)), 1086)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(0.0)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(-1.0)),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(c(-1.0, 1.0, 0.0)), 2)){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  sum(lapply(lst, function(x) ceiling(x)^2))\n}\n", "\n  sum(ceiling(lst)^2)\n\
    }\n", "\n  sum(ceiling(lst)^2)\n}\n", "\n  sum(ceiling(lst)^2)\n}\n", "\n  sum(ceiling(lst)^2)\n\
    }\n", "\n  sum(ceiling(lst)^2)\n}\n", "\n  sum(ceiling(lst)^2)\n}\n", "\n  lst\
    \ <- ceiling(lst)\n  sum(lst^2)\n}\n", "\n  sum(ceiling(lst)^2)\n}\n", "\n  lst\
    \ <- ceiling(lst)\n  sum(lst^2)\n}\n", "\n  sum(ceiling(lst)^2)\n}\n", "\n  sum(ceiling(lst)^2)\n\
    }\n", "\n  sum(ceiling(lst)^2)\n}\n", "\n  sum(ceiling(lst)^2)\n}\n", "\n  sum(ceiling(lst)^2)\n\
    }\n", "\n  sum(ceiling(lst)^2)\n}\n", "\n  return(sum(ceiling(lst)^2))\n}\n",
  "\n  sum(ceiling(lst)^2)\n}\n", "\n  lst <- ceiling(lst)\n  sum(lst^2)\n}\n", "\n\
    \  sum(ceiling(lst)^2)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
