name: HumanEval_22_filter_integers
language: r
prompt: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
  \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n# c(1,\
  \ 2, 3)\nfilter_integers <- function(values) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_integers\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate(c(4, list(), c(), 23.2, 9, 'adasd')),\
  \ c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3, 'c', 3, 3, 'a', 'b')),\
  \ c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  return(values[sapply(values, is.integer)])\n}\n", "\n  return(values[sapply(values,\
    \ is.integer)])\n}\n", "\n  return(values[sapply(values, is.integer)])\n}\n",
  "\n  return(Filter(is.integer, values))\n}\n", "\n  return(values[sapply(values,\
    \ is.integer)])\n}\n", "\n  return(values[sapply(values, is.integer)])\n}\n",
  "\n  return(values[sapply(values, is.integer)])\n}\n", "\n  return(values[sapply(values,\
    \ is.integer)])\n}\n", "\n    return(values[sapply(values, is.integer)])\n}\n",
  "\n  return(values[sapply(values, is.integer)])\n}\n", "\n  return(values[sapply(values,\
    \ is.integer)])\n}\n", "\n  return(Filter(is.integer, values))\n}\n", "\n  return(values[sapply(values,\
    \ function(x) is.integer(x))])\n}\n", "\n  # TODO: implement this function\n \
    \ return(values[sapply(values, is.integer)])\n}\n", "\n  return(values[sapply(values,\
    \ is.integer)])\n}\n", "\n    return(values[sapply(values, is.integer)])\n}\n",
  "\n    return(values[sapply(values, is.integer)])\n}\n", "\n    return(Filter(is.integer,\
    \ values))\n}\n", "\n  return(values[sapply(values, is.integer)])\n}\n", "\n \
    \ return(values[sapply(values, is.integer)])\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
