name: HumanEval_61_correct_bracketing
language: r
prompt: "# brackets is a string of \"(\" and \")\".\n# return TRUE if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing('(')\n\
  # FALSE\n# >>> correct_bracketing('()')\n# TRUE\n# >>> correct_bracketing('(()())')\n\
  # TRUE\n# >>> correct_bracketing(')(()')\n# FALSE\ncorrect_bracketing <- function(brackets)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- correct_bracketing\n    if(!identical(candidate('()'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('(()())'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('()()(()())()'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('()()((()()())())(()()(()))'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('((()())))'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(')(()'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('('),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('(((('), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(')'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('(()'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('()()(()())())(()'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('()()(()())()))()'), FALSE)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  # YOUR CODE HERE\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n\
    }\n", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n",
  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ your code here\n}\n", "\n    # YOUR CODE HERE\n    if (brackets == \"\") {\n\
    \        return(TRUE)\n    }\n    if (substr(brackets, 1, 1) == \"(\") {\n   \
    \     if (substr(brackets, 2, 2) == \")\") {\n            return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n        } else {\n            return(FALSE)\n       \
    \ }\n    } else {\n        return(FALSE)\n    }\n}\n", "\n  # YOUR CODE HERE\n\
    \  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  # return(TRUE)\n  n <- length(brackets)\n\
    \  if (n == 0) {\n    return(TRUE)\n  }\n  if (brackets[1] == ')') {\n    return(FALSE)\n\
    \  }\n  if (brackets[n] == '(') {\n    return(FALSE)\n  }\n  if (n == 1) {\n \
    \   return(FALSE)\n  }\n  if (n == 2) {\n    return(TRUE)\n  }\n  if (brackets[1]\
    \ == '(' && brackets[n] == ')') {\n    return(correct_bracketing(substr(brackets,\
    \ 2, n-1)))\n  }\n  return(FALSE)\n}\n", "\n    # YOUR CODE HERE\n    count <-\
    \ 0\n    for (i in 1:nchar(brackets)){\n        if (substr(brackets, i, i) ==\
    \ \"(\"){\n            count <- count + 1\n        }\n        else if (substr(brackets,\
    \ i, i) == \")\"){\n            count <- count - 1\n        }\n        if (count\
    \ < 0){\n            return(FALSE)\n        }\n    }\n    if (count == 0){\n \
    \       return(TRUE)\n    }\n    else{\n        return(FALSE)\n    }\n}\n", "\n\
    \    # YOUR CODE HERE\n    return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # your code here\n  return(TRUE)\n}\n", "\n    # YOUR CODE HERE\n \
    \   return(TRUE)\n}\n", "\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n\
    \  if (substr(brackets, 1, 1) == \"(\") {\n    if (substr(brackets, 2, 2) == \"\
    )\") {\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  if (brackets == \"\")\
    \ {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == \"(\") {\n    if (substr(brackets,\
    \ 2, 2) == \")\") {\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
