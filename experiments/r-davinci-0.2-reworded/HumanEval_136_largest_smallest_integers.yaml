name: HumanEval_136_largest_smallest_integers
language: r
prompt: "# Create a function that returns a list (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n\
  # If there is no negative or positive integers, return them as NULL.\n# Examples:\n\
  # >>> largest_smallest_integers(c(2, 4, 1, 3, 5, 7))\n# c(NULL, 1)\n# >>> largest_smallest_integers(c())\n\
  # c(NULL, NULL)\n# >>> largest_smallest_integers(c(0))\n# c(NULL, NULL)\nlargest_smallest_integers\
  \ <- function(lst) {"
tests: "test_humaneval <- function() {\ncandidate <- largest_smallest_integers\n \
  \   if(!identical(candidate(c(2, 4, 1, 3, 5, 7)), c(NULL, 1))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(2, 4, 1, 3, 5, 7, 0)), c(NULL, 1))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(1, 3, 2, 4, 5, 6, -2)), c(-2, 1))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(4, 5, 3, 6, 2, 7, -7)), c(-7, 2))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(7, 3, 8, 4, 9, 2, 5, -9)), c(-9, 2))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c()), c(NULL, NULL))){quit('no', 1)}\n    if(!identical(candidate(c(0)),\
  \ c(NULL, NULL))){quit('no', 1)}\n    if(!identical(candidate(c(-1, -3, -5, -6)),\
  \ c(-1, NULL))){quit('no', 1)}\n    if(!identical(candidate(c(-1, -3, -5, -6, 0)),\
  \ c(-1, NULL))){quit('no', 1)}\n    if(!identical(candidate(c(-6, -4, -4, -3, 1)),\
  \ c(-3, 1))){quit('no', 1)}\n    if(!identical(candidate(c(-6, -4, -4, -3, -100,\
  \ 1)), c(-3, 1))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n \
    \ neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) ==\
    \ 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <-\
    \ NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  neg <- NULL\n\
    \  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      if (is.null(neg) ||\
    \ i > neg) {\n        neg <- i\n      }\n    } else if (i > 0) {\n      if (is.null(pos)\
    \ || i < pos) {\n        pos <- i\n      }\n    }\n  }\n  return(c(neg, pos))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  negs <-\
    \ lst[lst < 0]\n  poss <- lst[lst > 0]\n  if (length(negs) == 0) {\n    negs <-\
    \ NULL\n  }\n  if (length(poss) == 0) {\n    poss <- NULL\n  }\n  return(c(max(negs),\
    \ min(poss)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg <- lst[lst < 0]\n  pos <- lst[lst > 0]\n  if (length(neg)\
    \ == 0) {\n    neg <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n\
    \  }\n  return(c(max(neg), min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n  \
    \  return(c(NULL, NULL))\n  }\n  else {\n    neg <- lst[lst < 0]\n    pos <- lst[lst\
    \ > 0]\n    if (length(neg) == 0) {\n      neg <- NULL\n    }\n    if (length(pos)\
    \ == 0) {\n      pos <- NULL\n    }\n    return(c(max(neg), min(pos)))\n  }\n\
    }\n", "\n  # Write your code here\n  return(c(NULL, NULL))\n}\n", "\n  neg <-\
    \ NULL\n  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      if (is.null(neg)\
    \ || i > neg) {\n        neg <- i\n      }\n    } else if (i > 0) {\n      if\
    \ (is.null(pos) || i < pos) {\n        pos <- i\n      }\n    }\n  }\n  return(c(neg,\
    \ pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n\
    \  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) ==\
    \ 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <-\
    \ NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg = NULL\n  pos = NULL\n\
    \  for (i in 1:length(lst)) {\n    if (lst[i] < 0) {\n      if (is.null(neg))\
    \ {\n        neg = lst[i]\n      } else {\n        if (lst[i] > neg) {\n     \
    \     neg = lst[i]\n        }\n      }\n    }\n    if (lst[i] > 0) {\n      if\
    \ (is.null(pos)) {\n        pos = lst[i]\n      } else {\n        if (lst[i] <\
    \ pos) {\n          pos = lst[i]\n        }\n      }\n    }\n  }\n  return(c(neg,\
    \ pos))\n}\n", "\n  # YOUR CODE HERE\n  a <- NULL\n  b <- NULL\n  for (i in lst)\
    \ {\n    if (i < 0) {\n      if (is.null(a)) {\n        a <- i\n      } else {\n\
    \        if (i > a) {\n          a <- i\n        }\n      }\n    } else {\n  \
    \    if (is.null(b)) {\n        b <- i\n      } else {\n        if (i < b) {\n\
    \          b <- i\n        }\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n\
    \  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  negatives <- lst[lst\
    \ < 0]\n  positives <- lst[lst > 0]\n  if (length(negatives) == 0) {\n    negatives\
    \ <- NULL\n  }\n  if (length(positives) == 0) {\n    positives <- NULL\n  }\n\
    \  return(c(max(negatives), min(positives)))\n}\n", "\n  if (length(lst) == 0)\
    \ {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  if (length(lst) == 1) {\n\
    \    if (lst[1] > 0) {\n      return(c(NULL, lst[1]))\n    }\n    if (lst[1] <\
    \ 0) {\n      return(c(lst[1], NULL))\n    }\n  }\n  if (length(lst) == 2) {\n\
    \    if (lst[1] > 0 && lst[2] > 0) {\n      return(c(NULL, min(lst)))\n    }\n\
    \    if (lst[1] < 0 && lst[2] < 0) {\n      return(c(max(lst), NULL))\n    }\n\
    \    if (lst[1] > 0 && lst[2] < 0) {\n      return(c(lst[2], lst[1]))\n    }\n\
    \    if (lst[1] < 0 && lst[2] > 0) {\n      return(c(lst[1], lst[2]))\n    }\n\
    \  }\n  if (length(lst) > 2) {\n    if (lst[1] > 0 && lst[2] > 0) {\n      return(c(NULL,\
    \ min(lst)))\n    }\n    if (lst[1] < 0 && lst[2] < 0) {\n      return(c(max(lst),\
    \ NULL))\n    }\n    if (lst[1] > 0 && lst[2] < 0) {\n      return(c(lst[2], lst[1]))\n\
    \    }\n    if (lst[1] < 0 && lst[2] > 0) {\n      return(c(lst[1], lst[2]))\n\
    \    }\n  }\n}\n", "\n  # Your code here\n  a = NULL\n  b = NULL\n  for (i in\
    \ lst) {\n    if (i < 0) {\n      if (is.null(a)) {\n        a = i\n      } else\
    \ {\n        if (i > a) {\n          a = i\n        }\n      }\n    } else {\n\
    \      if (is.null(b)) {\n        b = i\n      } else {\n        if (i < b) {\n\
    \          b = i\n        }\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n\
    \  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n \
    \ neg <- NULL\n  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      neg\
    \ <- c(neg, i)\n    }\n    if (i > 0) {\n      pos <- c(pos, i)\n    }\n  }\n\
    \  if (length(neg) == 0) {\n    neg <- NULL\n  }\n  if (length(pos) == 0) {\n\
    \    pos <- NULL\n  }\n  return(c(max(neg), min(pos)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ > 0) {\n      return(c(NULL, lst[1]))\n    } else if (lst[1] < 0) {\n      return(c(lst[1],\
    \ NULL))\n    } else {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_max <-\
    \ NULL\n  pos_min <- NULL\n  for (i in 1:length(lst)) {\n    if (lst[i] > 0) {\n\
    \      if (is.null(pos_min)) {\n        pos_min <- lst[i]\n      } else {\n  \
    \      if (lst[i] < pos_min) {\n          pos_min <- lst[i]\n        }\n     \
    \ }\n    } else if (lst[i] < 0) {\n      if (is.null(neg_max)) {\n        neg_max\
    \ <- lst[i]\n      } else {\n        if (lst[i] > neg_max) {\n          neg_max\
    \ <- lst[i]\n        }\n      }\n    }\n  }\n  return(c(neg_max, pos_min))\n}\n",
  "\n  neg_max <- NULL\n  pos_min <- NULL\n  for (i in lst) {\n    if (i < 0) {\n\
    \      if (is.null(neg_max) || i > neg_max) {\n        neg_max <- i\n      }\n\
    \    } else if (i > 0) {\n      if (is.null(pos_min) || i < pos_min) {\n     \
    \   pos_min <- i\n      }\n    }\n  }\n  return(c(neg_max, pos_min))\n}\n", "\n\
    \  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  min_pos = NULL\n\
    \  max_neg = NULL\n  for (i in lst) {\n    if (i > 0) {\n      if (is.null(min_pos)\
    \ || i < min_pos) {\n        min_pos = i\n      }\n    } else if (i < 0) {\n \
    \     if (is.null(max_neg) || i > max_neg) {\n        max_neg = i\n      }\n \
    \   }\n  }\n  return(c(max_neg, min_pos))\n}\n", "\n  if (length(lst) == 0) {\n\
    \    return(c(NULL, NULL))\n  }\n  max_neg <- NULL\n  min_pos <- NULL\n  for (i\
    \ in lst) {\n    if (i < 0) {\n      if (is.null(max_neg) || i > max_neg) {\n\
    \        max_neg <- i\n      }\n    } else if (i > 0) {\n      if (is.null(min_pos)\
    \ || i < min_pos) {\n        min_pos <- i\n      }\n    }\n  }\n  return(c(max_neg,\
    \ min_pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n \
    \ }\n  neg <- NULL\n  pos <- NULL\n  for (i in 1:length(lst)) {\n    if (lst[i]\
    \ < 0) {\n      if (is.null(neg) || lst[i] > neg) {\n        neg <- lst[i]\n \
    \     }\n    } else if (lst[i] > 0) {\n      if (is.null(pos) || lst[i] < pos)\
    \ {\n        pos <- lst[i]\n      }\n    }\n  }\n  return(c(neg, pos))\n}\n",
  "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- NULL\n  pos\
    \ <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n    }\
    \ else if (i > 0) {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg) ==\
    \ 0) {\n    neg <- NULL\n  } else {\n    neg <- max(neg)\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  } else {\n    pos <- min(pos)\n  }\n  return(c(neg,\
    \ pos))\n}\n", "\n  a <- NULL\n  b <- NULL\n  if (length(lst) > 0) {\n    a <-\
    \ max(lst[lst < 0])\n    b <- min(lst[lst > 0])\n  }\n  return(c(a, b))\n}\n",
  "\n  # Your code here\n  a <- NULL\n  b <- NULL\n  for (i in lst) {\n    if (i <\
    \ 0) {\n      if (a == NULL) {\n        a <- i\n      } else {\n        if (i\
    \ > a) {\n          a <- i\n        }\n      }\n    } else {\n      if (b == NULL)\
    \ {\n        b <- i\n      } else {\n        if (i < b) {\n          b <- i\n\
    \        }\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n  neg <- NULL\n \
    \ pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      if (is.null(neg) ||\
    \ i > neg) {\n        neg <- i\n      }\n    } else if (i > 0) {\n      if (is.null(pos)\
    \ || i < pos) {\n        pos <- i\n      }\n    }\n  }\n  return(c(neg, pos))\n\
    }\n", "\n  a <- NULL\n  b <- NULL\n  for (i in lst) {\n    if (i < 0) {\n    \
    \  if (a == NULL) {\n        a <- i\n      } else if (i > a) {\n        a <- i\n\
    \      }\n    } else if (i > 0) {\n      if (b == NULL) {\n        b <- i\n  \
    \    } else if (i < b) {\n        b <- i\n      }\n    }\n  }\n  return(c(a, b))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n \
    \ neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) ==\
    \ 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <-\
    \ NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  # YOUR CODE HERE\n\
    \  neg <- NULL\n  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      if\
    \ (is.null(neg)) {\n        neg <- i\n      } else {\n        if (i > neg) {\n\
    \          neg <- i\n        }\n      }\n    } else if (i > 0) {\n      if (is.null(pos))\
    \ {\n        pos <- i\n      } else {\n        if (i < pos) {\n          pos <-\
    \ i\n        }\n      }\n    }\n  }\n  return(c(neg, pos))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst\
    \ <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n \
    \ if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst\
    \ <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n \
    \ if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg <- NULL\n  pos <- NULL\n  for (i in lst) {\n    if\
    \ (i < 0) {\n      neg <- c(neg, i)\n    }\n    if (i > 0) {\n      pos <- c(pos,\
    \ i)\n    }\n  }\n  if (length(neg) == 0) {\n    neg <- NULL\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg), min(pos)))\n}\n", "\n  max_neg\
    \ <- max(lst[lst < 0])\n  min_pos <- min(lst[lst > 0])\n  if (is.na(max_neg))\
    \ {\n    max_neg <- NULL\n  }\n  if (is.na(min_pos)) {\n    min_pos <- NULL\n\
    \  }\n  return(c(max_neg, min_pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  else {\n    neg <- lst[lst < 0]\n    pos <- lst[lst > 0]\n  \
    \  if (length(neg) == 0) {\n      neg <- NULL\n    }\n    if (length(pos) == 0)\
    \ {\n      pos <- NULL\n    }\n    return(c(max(neg), min(pos)))\n  }\n}\n", "\n\
    \    if (length(lst) == 0) {\n        return(c(NULL, NULL))\n    }\n    neg_lst\
    \ <- lst[lst < 0]\n    pos_lst <- lst[lst > 0]\n    if (length(neg_lst) == 0)\
    \ {\n        neg_lst <- NULL\n    }\n    if (length(pos_lst) == 0) {\n       \
    \ pos_lst <- NULL\n    }\n    return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n\
    \  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg_lst <- lst[lst\
    \ < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst\
    \ <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n \
    \ if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst)\
    \ == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- NULL\n\
    \  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n\
    \    } else if (i > 0) {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg)\
    \ == 0) {\n    neg <- NULL\n  } else {\n    neg <- max(neg)\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  } else {\n    pos <- min(pos)\n  }\n  return(c(neg,\
    \ pos))\n}\n", "\n  neg <- NULL\n  pos <- NULL\n  for (i in lst) {\n    if (i\
    \ < 0) {\n      if (is.null(neg) || i > neg) {\n        neg <- i\n      }\n  \
    \  } else if (i > 0) {\n      if (is.null(pos) || i < pos) {\n        pos <- i\n\
    \      }\n    }\n  }\n  c(neg, pos)\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg <- NULL\n  pos <- NULL\n  for (i in 1:length(lst))\
    \ {\n    if (lst[i] < 0) {\n      neg <- c(neg, lst[i])\n    }\n    if (lst[i]\
    \ > 0) {\n      pos <- c(pos, lst[i])\n    }\n  }\n  if (length(neg) == 0) {\n\
    \    neg <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg),\
    \ min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  else {\n    negs <- lst[lst < 0]\n    poss <- lst[lst > 0]\n    if (length(negs)\
    \ == 0) {\n      negs <- NULL\n    }\n    if (length(poss) == 0) {\n      poss\
    \ <- NULL\n    }\n    return(c(max(negs), min(poss)))\n  }\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n\
    \  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n\
    \  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n \
    \ if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst)\
    \ == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg_lst\
    \ <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n\
    \    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n\
    \  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst) == 0)\
    \ {\n    return(c(NULL, NULL))\n  }\n  negatives <- lst[lst < 0]\n  positives\
    \ <- lst[lst > 0]\n  if (length(negatives) == 0) {\n    negatives <- NULL\n  }\n\
    \  if (length(positives) == 0) {\n    positives <- NULL\n  }\n  return(c(max(negatives),\
    \ min(positives)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n\
    \  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    return(c(NULL,\
    \ min(pos_lst)))\n  }\n  if (length(pos_lst) == 0) {\n    return(c(max(neg_lst),\
    \ NULL))\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n\
    \  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n\
    \  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  negs <- lst[lst < 0]\n  pos <- lst[lst > 0]\n  if (length(negs)\
    \ == 0) {\n    negs <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n\
    \  }\n  return(c(max(negs), min(pos)))\n}\n", "\n  # YOUR CODE HERE\n  a <- max(lst[lst\
    \ < 0])\n  b <- min(lst[lst > 0])\n  if (is.na(a)) {\n    a <- NULL\n  }\n  if\
    \ (is.na(b)) {\n    b <- NULL\n  }\n  return(c(a, b))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  if (length(lst) > 1) {\n\
    \    neg <- lst[lst < 0]\n    pos <- lst[lst > 0]\n    if (length(neg) == 0) {\n\
    \      neg <- NULL\n    }\n    if (length(pos) == 0) {\n      pos <- NULL\n  \
    \  }\n    return(c(max(neg), min(pos)))\n  }\n}\n", "\n  if (length(lst) == 0)\
    \ {\n    return(c(NULL, NULL))\n  }\n  max_neg <- NULL\n  min_pos <- NULL\n  for\
    \ (i in lst) {\n    if (i < 0) {\n      if (is.null(max_neg) || i > max_neg) {\n\
    \        max_neg <- i\n      }\n    } else if (i > 0) {\n      if (is.null(min_pos)\
    \ || i < min_pos) {\n        min_pos <- i\n      }\n    }\n  }\n  return(c(max_neg,\
    \ min_pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n \
    \ }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ > 0) {\n      return(c(NULL, lst[1]))\n    } else if (lst[1] < 0) {\n      return(c(lst[1],\
    \ NULL))\n    } else {\n      return(c(NULL, NULL))\n    }\n  }\n  max_neg <-\
    \ NULL\n  min_pos <- NULL\n  for (i in 1:length(lst)) {\n    if (lst[i] > 0) {\n\
    \      if (is.null(min_pos)) {\n        min_pos <- lst[i]\n      } else {\n  \
    \      if (lst[i] < min_pos) {\n          min_pos <- lst[i]\n        }\n     \
    \ }\n    } else if (lst[i] < 0) {\n      if (is.null(max_neg)) {\n        max_neg\
    \ <- lst[i]\n      } else {\n        if (lst[i] > max_neg) {\n          max_neg\
    \ <- lst[i]\n        }\n      }\n    }\n  }\n  return(c(max_neg, min_pos))\n}\n",
  "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n \
    \ negatives <- lst[lst < 0]\n  positives <- lst[lst > 0]\n  if (length(negatives)\
    \ == 0) {\n    negatives <- NULL\n  }\n  if (length(positives) == 0) {\n    positives\
    \ <- NULL\n  }\n  return(c(max(negatives), min(positives)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg <- NULL\n  pos <- NULL\n\
    \  for (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n    }\n    if (i\
    \ > 0) {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg) == 0) {\n    neg\
    \ <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg),\
    \ min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  negs <- lst[lst < 0]\n  pos <- lst[lst > 0]\n  if (length(negs) == 0)\
    \ {\n    negs <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  }\n\
    \  return(c(max(negs), min(pos)))\n}\n", "\n  if(length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  if(length(lst) == 1) {\n    if(lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg <- lst[lst < 0]\n  pos <- lst[lst > 0]\n  if(length(neg)\
    \ == 0) {\n    neg <- NULL\n  }\n  if(length(pos) == 0) {\n    pos <- NULL\n \
    \ }\n  return(c(max(neg), min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n   \
    \ return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0)\
    \ {\n      return(c(NULL, NULL))\n    }\n  }\n  max_neg <- NULL\n  min_pos <-\
    \ NULL\n  for (i in 1:length(lst)) {\n    if (lst[i] < 0) {\n      if (is.null(max_neg))\
    \ {\n        max_neg <- lst[i]\n      } else {\n        if (lst[i] > max_neg)\
    \ {\n          max_neg <- lst[i]\n        }\n      }\n    }\n    if (lst[i] >\
    \ 0) {\n      if (is.null(min_pos)) {\n        min_pos <- lst[i]\n      } else\
    \ {\n        if (lst[i] < min_pos) {\n          min_pos <- lst[i]\n        }\n\
    \      }\n    }\n  }\n  return(c(max_neg, min_pos))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  else {\n    negs <- lst[lst < 0]\n\
    \    pos <- lst[lst > 0]\n    if (length(negs) == 0) {\n      negs <- NULL\n \
    \   }\n    if (length(pos) == 0) {\n      pos <- NULL\n    }\n    return(c(max(negs),\
    \ min(pos)))\n  }\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n \
    \ if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst)\
    \ == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg = NULL\n\
    \  pos = NULL\n  for (i in lst) {\n    if (i < 0) {\n      if (is.null(neg) ||\
    \ i > neg) {\n        neg = i\n      }\n    } else if (i > 0) {\n      if (is.null(pos)\
    \ || i < pos) {\n        pos = i\n      }\n    }\n  }\n  return(c(neg, pos))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n \
    \ neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) ==\
    \ 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <-\
    \ NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  # YOUR CODE HERE\n\
    \  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] > 0) {\n      return(c(NULL, lst[1]))\n    } else if\
    \ (lst[1] < 0) {\n      return(c(lst[1], NULL))\n    } else {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  max_neg <- NULL\n  min_pos <- NULL\n  for (i in 1:length(lst))\
    \ {\n    if (lst[i] > 0) {\n      if (is.null(min_pos)) {\n        min_pos <-\
    \ lst[i]\n      } else {\n        if (lst[i] < min_pos) {\n          min_pos <-\
    \ lst[i]\n        }\n      }\n    } else if (lst[i] < 0) {\n      if (is.null(max_neg))\
    \ {\n        max_neg <- lst[i]\n      } else {\n        if (lst[i] > max_neg)\
    \ {\n          max_neg <- lst[i]\n        }\n      }\n    }\n  }\n  return(c(max_neg,\
    \ min_pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n \
    \ }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n\
    \    }\n  }\n  neg <- NULL\n  pos <- NULL\n  for (i in 1:length(lst)) {\n    if\
    \ (lst[i] < 0) {\n      neg <- c(neg, lst[i])\n    }\n    if (lst[i] > 0) {\n\
    \      pos <- c(pos, lst[i])\n    }\n  }\n  if (length(neg) == 0) {\n    neg <-\
    \ NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg),\
    \ min(pos)))\n}\n", "\n  negs <- lst[lst < 0]\n  poss <- lst[lst > 0]\n  if (length(negs)\
    \ == 0) {\n    negs <- NULL\n  }\n  if (length(poss) == 0) {\n    poss <- NULL\n\
    \  }\n  return(c(max(negs), min(poss)))\n}\n", "\n  if (length(lst) == 0) {\n\
    \    return(c(NULL, NULL))\n  }\n  else {\n    neg_lst <- lst[lst < 0]\n    pos_lst\
    \ <- lst[lst > 0]\n    if (length(neg_lst) == 0) {\n      neg_lst <- NULL\n  \
    \  }\n    if (length(pos_lst) == 0) {\n      pos_lst <- NULL\n    }\n    return(c(max(neg_lst),\
    \ min(pos_lst)))\n  }\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  # Your code here\n}\n", "\n  if (length(lst) == 0)\
    \ {\n    return(c(NULL, NULL))\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst\
    \ > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst)\
    \ == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- NULL\n\
    \  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n\
    \    } else if (i > 0) {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg)\
    \ == 0) {\n    neg <- NULL\n  } else {\n    neg <- max(neg)\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  } else {\n    pos <- min(pos)\n  }\n  return(c(neg,\
    \ pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n\
    \  neg <- lst[lst < 0]\n  pos <- lst[lst > 0]\n  if (length(neg) == 0) {\n   \
    \ neg <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg),\
    \ min(pos)))\n}\n", "\n  # Your code here\n  a <- NULL\n  b <- NULL\n  for (i\
    \ in lst) {\n    if (i < 0) {\n      if (is.null(a)) {\n        a <- i\n     \
    \ } else {\n        if (i > a) {\n          a <- i\n        }\n      }\n    }\
    \ else {\n      if (is.null(b)) {\n        b <- i\n      } else {\n        if\
    \ (i < b) {\n          b <- i\n        }\n      }\n    }\n  }\n  return(c(a, b))\n\
    }\n", "\n  negs <- lst[lst < 0]\n  pos <- lst[lst > 0]\n  if (length(negs) ==\
    \ 0) {\n    negs <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  }\n\
    \  return(c(max(negs), min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  # YOUR CODE\
    \ HERE\n  a <- NULL\n  b <- NULL\n  for (i in lst) {\n    if (i < 0) {\n     \
    \ if (a == NULL) {\n        a <- i\n      } else {\n        if (i > a) {\n   \
    \       a <- i\n        }\n      }\n    } else {\n      if (b == NULL) {\n   \
    \     b <- i\n      } else {\n        if (i < b) {\n          b <- i\n       \
    \ }\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n  if (length(lst) == 0)\
    \ {\n    return(c(NULL, NULL))\n  }\n  negative_integers <- lst[lst < 0]\n  positive_integers\
    \ <- lst[lst > 0]\n  if (length(negative_integers) == 0) {\n    negative_integers\
    \ <- NULL\n  }\n  if (length(positive_integers) == 0) {\n    positive_integers\
    \ <- NULL\n  }\n  return(c(max(negative_integers), min(positive_integers)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg_lst\
    \ <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n\
    \    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n\
    \  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst) == 0)\
    \ {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg = NULL\n  pos = NULL\n\
    \  for (i in 1:length(lst)) {\n    if (lst[i] < 0) {\n      if (is.null(neg))\
    \ {\n        neg = lst[i]\n      } else {\n        if (lst[i] > neg) {\n     \
    \     neg = lst[i]\n        }\n      }\n    }\n    if (lst[i] > 0) {\n      if\
    \ (is.null(pos)) {\n        pos = lst[i]\n      } else {\n        if (lst[i] <\
    \ pos) {\n          pos = lst[i]\n        }\n      }\n    }\n  }\n  return(c(neg,\
    \ pos))\n}\n", "\n  # Write your code here\n  return(c(NULL, NULL))\n}\n", "\n\
    \  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  min_pos <- NULL\n\
    \  max_neg <- NULL\n  for (i in lst) {\n    if (i > 0) {\n      if (is.null(min_pos)\
    \ || i < min_pos) {\n        min_pos <- i\n      }\n    } else if (i < 0) {\n\
    \      if (is.null(max_neg) || i > max_neg) {\n        max_neg <- i\n      }\n\
    \    }\n  }\n  return(c(max_neg, min_pos))\n}\n", "\n  a <- NULL\n  b <- NULL\n\
    \  for (i in lst) {\n    if (i < 0) {\n      if (is.null(a)) {\n        a <- i\n\
    \      } else {\n        if (i > a) {\n          a <- i\n        }\n      }\n\
    \    } else {\n      if (is.null(b)) {\n        b <- i\n      } else {\n     \
    \   if (i < b) {\n          b <- i\n        }\n      }\n    }\n  }\n  return(c(a,\
    \ b))\n}\n", "\n  # YOUR CODE HERE\n  a <- NULL\n  b <- NULL\n  for (i in lst)\
    \ {\n    if (i < 0) {\n      if (a == NULL) {\n        a <- i\n      } else {\n\
    \        if (i > a) {\n          a <- i\n        }\n      }\n    } else {\n  \
    \    if (b == NULL) {\n        b <- i\n      } else {\n        if (i < b) {\n\
    \          b <- i\n        }\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n\
    \  # YOUR CODE HERE\n  a = NULL\n  b = NULL\n  for (i in lst) {\n    if (i < 0)\
    \ {\n      if (is.null(a)) {\n        a = i\n      } else {\n        if (i > a)\
    \ {\n          a = i\n        }\n      }\n    } else {\n      if (is.null(b))\
    \ {\n        b = i\n      } else {\n        if (i < b) {\n          b = i\n  \
    \      }\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n  if (length(lst) ==\
    \ 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg <- NULL\n  pos <- NULL\n\
    \  for (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n    }\n    if (i\
    \ > 0) {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg) == 0) {\n    neg\
    \ <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg),\
    \ min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg <- NULL\n  pos <- NULL\n  for (i in 1:length(lst))\
    \ {\n    if (lst[i] < 0) {\n      neg <- c(neg, lst[i])\n    }\n    if (lst[i]\
    \ > 0) {\n      pos <- c(pos, lst[i])\n    }\n  }\n  if (length(neg) == 0) {\n\
    \    neg <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg),\
    \ min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  neg <- NULL\n  pos <- NULL\n  for (i in 1:length(lst)) {\n    if (lst[i]\
    \ < 0) {\n      if (is.null(neg) || lst[i] > neg) {\n        neg <- lst[i]\n \
    \     }\n    } else if (lst[i] > 0) {\n      if (is.null(pos) || lst[i] < pos)\
    \ {\n        pos <- lst[i]\n      }\n    }\n  }\n  return(c(neg, pos))\n}\n",
  "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  negatives <- lst[lst\
    \ < 0]\n  positives <- lst[lst > 0]\n  return(c(max(negatives, na.rm = TRUE),\
    \ min(positives, na.rm = TRUE)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  negatives <- lst[lst < 0]\n  positives <- lst[lst > 0]\n  if\
    \ (length(negatives) == 0) {\n    negatives <- NULL\n  }\n  if (length(positives)\
    \ == 0) {\n    positives <- NULL\n  }\n  return(c(max(negatives), min(positives)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- NULL\n\
    \  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n\
    \    } else if (i > 0) {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg)\
    \ == 0) {\n    neg <- NULL\n  } else {\n    neg <- max(neg)\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  } else {\n    pos <- min(pos)\n  }\n  return(c(neg,\
    \ pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n\
    \  neg <- NULL\n  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      neg\
    \ <- c(neg, i)\n    } else if (i > 0) {\n      pos <- c(pos, i)\n    }\n  }\n\
    \  if (length(neg) == 0) {\n    neg <- NULL\n  } else {\n    neg <- max(neg)\n\
    \  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  } else {\n    pos <- min(pos)\n\
    \  }\n  return(c(neg, pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  max_neg <- NULL\n  min_pos <- NULL\n  for (i in 1:length(lst))\
    \ {\n    if (lst[i] < 0) {\n      if (is.null(max_neg)) {\n        max_neg <-\
    \ lst[i]\n      } else {\n        if (lst[i] > max_neg) {\n          max_neg <-\
    \ lst[i]\n        }\n      }\n    }\n    if (lst[i] > 0) {\n      if (is.null(min_pos))\
    \ {\n        min_pos <- lst[i]\n      } else {\n        if (lst[i] < min_pos)\
    \ {\n          min_pos <- lst[i]\n        }\n      }\n    }\n  }\n  return(c(max_neg,\
    \ min_pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n \
    \ }\n  negatives <- lst[lst < 0]\n  positives <- lst[lst > 0]\n  if (length(negatives)\
    \ == 0) {\n    negatives <- NULL\n  }\n  if (length(positives) == 0) {\n    positives\
    \ <- NULL\n  }\n  return(c(max(negatives), min(positives)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  else {\n    neg <- NULL\n    pos\
    \ <- NULL\n    for (i in lst) {\n      if (i < 0) {\n        neg <- c(neg, i)\n\
    \      }\n      else if (i > 0) {\n        pos <- c(pos, i)\n      }\n    }\n\
    \    if (length(neg) == 0) {\n      neg <- NULL\n    }\n    else {\n      neg\
    \ <- max(neg)\n    }\n    if (length(pos) == 0) {\n      pos <- NULL\n    }\n\
    \    else {\n      pos <- min(pos)\n    }\n    return(c(neg, pos))\n  }\n}\n",
  "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- NULL\n  pos\
    \ <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n    }\
    \ else if (i > 0) {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg) ==\
    \ 0) {\n    neg <- NULL\n  } else {\n    neg <- max(neg)\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  } else {\n    pos <- min(pos)\n  }\n  return(c(neg,\
    \ pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n\
    \  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n\
    \    }\n  }\n  negs <- lst[lst < 0]\n  if (length(negs) == 0) {\n    negs <- NULL\n\
    \  } else {\n    negs <- max(negs)\n  }\n  poss <- lst[lst > 0]\n  if (length(poss)\
    \ == 0) {\n    poss <- NULL\n  } else {\n    poss <- min(poss)\n  }\n  return(c(negs,\
    \ poss))\n}\n", "\n  # Your code here\n  a = NULL\n  b = NULL\n  for (i in lst)\
    \ {\n    if (i < 0) {\n      if (is.null(a)) {\n        a = i\n      } else {\n\
    \        if (i > a) {\n          a = i\n        }\n      }\n    } else {\n   \
    \   if (is.null(b)) {\n        b = i\n      } else {\n        if (i < b) {\n \
    \         b = i\n        }\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n\
    \  # Your code here\n  if(length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n\
    \  if(length(lst) == 1) {\n    if(lst[1] == 0) {\n      return(c(NULL, NULL))\n\
    \    }\n  }\n  max_neg <- max(lst[lst < 0])\n  min_pos <- min(lst[lst > 0])\n\
    \  return(c(max_neg, min_pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  negs <- lst[lst < 0]\n  pos <- lst[lst > 0]\n  if (length(negs)\
    \ == 0) {\n    negs <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n\
    \  }\n  return(c(max(negs), min(pos)))\n}\n", "\n  a <- NULL\n  b <- NULL\n  for\
    \ (i in lst) {\n    if (i < 0) {\n      if (a == NULL) {\n        a <- i\n   \
    \   } else if (i > a) {\n        a <- i\n      }\n    } else if (i > 0) {\n  \
    \    if (b == NULL) {\n        b <- i\n      } else if (i < b) {\n        b <-\
    \ i\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n  if (length(lst) == 0)\
    \ {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n\
    \  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n\
    \  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n\
    \  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n\
    \  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  # YOUR CODE HERE\n  neg_int <- NULL\n  pos_int <-\
    \ NULL\n  for (i in lst) {\n    if (i < 0) {\n      if (is.null(neg_int)) {\n\
    \        neg_int <- i\n      } else {\n        if (i > neg_int) {\n          neg_int\
    \ <- i\n        }\n      }\n    } else if (i > 0) {\n      if (is.null(pos_int))\
    \ {\n        pos_int <- i\n      } else {\n        if (i < pos_int) {\n      \
    \    pos_int <- i\n        }\n      }\n    }\n  }\n  return(c(neg_int, pos_int))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg = NULL\n\
    \  pos = NULL\n  for (i in lst) {\n    if (i < 0) {\n      if (is.null(neg) ||\
    \ i > neg) {\n        neg = i\n      }\n    } else if (i > 0) {\n      if (is.null(pos)\
    \ || i < pos) {\n        pos = i\n      }\n    }\n  }\n  return(c(neg, pos))\n\
    }\n", "\n  # your code here\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg <- c()\n  pos <- c()\n  for (i in lst) {\n    if (i\
    \ < 0) {\n      neg <- c(neg, i)\n    }\n    if (i > 0) {\n      pos <- c(pos,\
    \ i)\n    }\n  }\n  if (length(neg) == 0) {\n    neg <- NULL\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg), min(pos)))\n}\n", "\n  if\
    \ (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1)\
    \ {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_lst\
    \ <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n\
    \    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n\
    \  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst) == 0)\
    \ {\n    return(c(NULL, NULL))\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst\
    \ > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst)\
    \ == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n \
    \ neg <- lst[lst < 0]\n  pos <- lst[lst > 0]\n  if (length(neg) == 0) {\n    neg\
    \ <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg),\
    \ min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  else {\n    neg_lst <- lst[lst < 0]\n    pos_lst <- lst[lst > 0]\n   \
    \ if (length(neg_lst) == 0) {\n      neg_lst <- NULL\n    }\n    if (length(pos_lst)\
    \ == 0) {\n      pos_lst <- NULL\n    }\n    return(c(max(neg_lst), min(pos_lst)))\n\
    \  }\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if\
    \ (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n\
    \    }\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg <- lst[lst < 0]\n  pos\
    \ <- lst[lst > 0]\n  if (length(neg) == 0) {\n    neg <- NULL\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg), min(pos)))\n}\n", "\n  #\
    \ your code here\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  negs <- lst[lst < 0]\n  poss <- lst[lst > 0]\n  if (length(negs)\
    \ == 0) {\n    negs <- NULL\n  }\n  if (length(poss) == 0) {\n    poss <- NULL\n\
    \  }\n  return(c(max(negs), min(poss)))\n}\n", "\n  if (length(lst) == 0) {\n\
    \    return(c(NULL, NULL))\n  }\n  else {\n    neg_lst <- lst[lst < 0]\n    pos_lst\
    \ <- lst[lst > 0]\n    if (length(neg_lst) == 0) {\n      neg_lst <- NULL\n  \
    \  }\n    if (length(pos_lst) == 0) {\n      pos_lst <- NULL\n    }\n    return(c(max(neg_lst),\
    \ min(pos_lst)))\n  }\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n \
    \ if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst)\
    \ == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n\
    }\n", "\n  # YOUR CODE HERE\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  if (length(lst) > 1) {\n    if (length(lst[lst < 0]) ==\
    \ 0) {\n      return(c(NULL, min(lst[lst > 0])))\n    }\n    if (length(lst[lst\
    \ > 0]) == 0) {\n      return(c(max(lst[lst < 0]), NULL))\n    }\n    if (length(lst[lst\
    \ < 0]) > 0 & length(lst[lst > 0]) > 0) {\n      return(c(max(lst[lst < 0]), min(lst[lst\
    \ > 0])))\n    }\n  }\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  else {\n    neg <- lst[lst < 0]\n    pos <- lst[lst > 0]\n  \
    \  if (length(neg) == 0) {\n      neg <- NULL\n    }\n    if (length(pos) == 0)\
    \ {\n      pos <- NULL\n    }\n    return(c(max(neg), min(pos)))\n  }\n}\n", "\n\
    \  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg_lst <- lst[lst\
    \ < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst\
    \ <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  # your code\
    \ here\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- NULL\n  pos <- NULL\n  for\
    \ (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n    } else if (i > 0)\
    \ {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg) == 0) {\n    neg <-\
    \ NULL\n  } else {\n    neg <- max(neg)\n  }\n  if (length(pos) == 0) {\n    pos\
    \ <- NULL\n  } else {\n    pos <- min(pos)\n  }\n  return(c(neg, pos))\n}\n",
  "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- NULL\n  pos\
    \ <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n    }\
    \ else if (i > 0) {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg) ==\
    \ 0) {\n    neg <- NULL\n  } else {\n    neg <- max(neg)\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  } else {\n    pos <- min(pos)\n  }\n  return(c(neg,\
    \ pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n\
    \  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n\
    \    }\n  }\n  if (length(lst) == 1) {\n    if (lst[1] > 0) {\n      return(c(NULL,\
    \ lst[1]))\n    }\n    if (lst[1] < 0) {\n      return(c(lst[1], NULL))\n    }\n\
    \  }\n  if (length(lst) > 1) {\n    if (all(lst > 0)) {\n      return(c(NULL,\
    \ min(lst)))\n    }\n    if (all(lst < 0)) {\n      return(c(max(lst), NULL))\n\
    \    }\n    if (all(lst == 0)) {\n      return(c(NULL, NULL))\n    }\n    if (all(lst\
    \ != 0)) {\n      return(c(max(lst[lst < 0]), min(lst[lst > 0])))\n    }\n  }\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- NULL\n\
    \  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n\
    \    } else if (i > 0) {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg)\
    \ == 0) {\n    neg <- NULL\n  } else {\n    neg <- max(neg)\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  } else {\n    pos <- min(pos)\n  }\n  return(c(neg,\
    \ pos))\n}\n", "\n    if (length(lst) == 0) {\n        return(c(NULL, NULL))\n\
    \    }\n    if (length(lst) == 1) {\n        if (lst[1] == 0) {\n            return(c(NULL,\
    \ NULL))\n        }\n    }\n    if (length(lst) == 1) {\n        if (lst[1] >\
    \ 0) {\n            return(c(NULL, lst[1]))\n        }\n        if (lst[1] < 0)\
    \ {\n            return(c(lst[1], NULL))\n        }\n    }\n    neg <- NULL\n\
    \    pos <- NULL\n    for (i in lst) {\n        if (i < 0) {\n            neg\
    \ <- c(neg, i)\n        }\n        if (i > 0) {\n            pos <- c(pos, i)\n\
    \        }\n    }\n    if (length(neg) == 0) {\n        neg <- NULL\n    }\n \
    \   if (length(pos) == 0) {\n        pos <- NULL\n    }\n    return(c(max(neg),\
    \ min(pos)))\n}\n", "\n  # Create a vector of negative integers\n  neg_ints <-\
    \ lst[lst < 0]\n  # Create a vector of positive integers\n  pos_ints <- lst[lst\
    \ > 0]\n  # Create a vector of NULL values\n  null_vec <- c(NULL, NULL)\n  # If\
    \ there are no negative integers, return the null vector\n  if (length(neg_ints)\
    \ == 0) {\n    return(null_vec)\n  }\n  # If there are no positive integers, return\
    \ the null vector\n  if (length(pos_ints) == 0) {\n    return(null_vec)\n  }\n\
    \  # Return the largest negative integer and the smallest positive integer\n \
    \ return(c(max(neg_ints), min(pos_ints)))\n}\n", "\n  # YOUR CODE HERE\n  a <-\
    \ NULL\n  b <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      if (is.null(a))\
    \ {\n        a <- i\n      } else {\n        if (i > a) {\n          a <- i\n\
    \        }\n      }\n    } else {\n      if (is.null(b)) {\n        b <- i\n \
    \     } else {\n        if (i < b) {\n          b <- i\n        }\n      }\n \
    \   }\n  }\n  return(c(a, b))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  negative_integers <- lst[lst < 0]\n  positive_integers\
    \ <- lst[lst > 0]\n  if (length(negative_integers) == 0) {\n    negative_integers\
    \ <- NULL\n  }\n  if (length(positive_integers) == 0) {\n    positive_integers\
    \ <- NULL\n  }\n  return(c(max(negative_integers), min(positive_integers)))\n\
    }\n", "\n  # YOUR CODE HERE\n  a <- NULL\n  b <- NULL\n  for (i in lst) {\n  \
    \  if (i < 0) {\n      if (a == NULL) {\n        a <- i\n      } else {\n    \
    \    if (i > a) {\n          a <- i\n        }\n      }\n    } else {\n      if\
    \ (b == NULL) {\n        b <- i\n      } else {\n        if (i < b) {\n      \
    \    b <- i\n        }\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n  if\
    \ (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1)\
    \ {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  if (length(lst)\
    \ > 1) {\n    if (all(lst > 0)) {\n      return(c(NULL, min(lst)))\n    }\n  \
    \  if (all(lst < 0)) {\n      return(c(max(lst), NULL))\n    }\n    if (all(lst\
    \ == 0)) {\n      return(c(NULL, NULL))\n    }\n  }\n  return(c(max(lst[lst <\
    \ 0]), min(lst[lst > 0])))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n \
    \ if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst)\
    \ == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n \
    \ neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) ==\
    \ 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <-\
    \ NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- NULL\n  pos <- NULL\n  for\
    \ (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n    } else if (i > 0)\
    \ {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg) == 0) {\n    neg <-\
    \ NULL\n  } else {\n    neg <- max(neg)\n  }\n  if (length(pos) == 0) {\n    pos\
    \ <- NULL\n  } else {\n    pos <- min(pos)\n  }\n  return(c(neg, pos))\n}\n",
  "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  else {\n    neg_lst\
    \ <- lst[lst < 0]\n    pos_lst <- lst[lst > 0]\n    if (length(neg_lst) == 0)\
    \ {\n      neg_lst <- NULL\n    }\n    if (length(pos_lst) == 0) {\n      pos_lst\
    \ <- NULL\n    }\n    return(c(max(neg_lst), min(pos_lst)))\n  }\n}\n", "\n  \
    \  # YOUR CODE HERE\n    a = NULL\n    b = NULL\n    for (i in lst) {\n      \
    \  if (i < 0) {\n            if (a == NULL) {\n                a = i\n       \
    \     } else if (i > a) {\n                a = i\n            }\n        } else\
    \ if (i > 0) {\n            if (b == NULL) {\n                b = i\n        \
    \    } else if (i < b) {\n                b = i\n            }\n        }\n  \
    \  }\n    return(c(a, b))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  else {\n    neg_lst <- lst[lst < 0]\n    pos_lst <- lst[lst >\
    \ 0]\n    if (length(neg_lst) == 0) {\n      neg_lst <- NULL\n    }\n    if (length(pos_lst)\
    \ == 0) {\n      pos_lst <- NULL\n    }\n    return(c(max(neg_lst), min(pos_lst)))\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  if(length(lst) == 0){\n    return(c(NULL,\
    \ NULL))\n  }\n  if(length(lst) == 1){\n    if(lst[1] > 0){\n      return(c(NULL,\
    \ lst[1]))\n    }\n    else if(lst[1] < 0){\n      return(c(lst[1], NULL))\n \
    \   }\n    else{\n      return(c(NULL, NULL))\n    }\n  }\n  else{\n    if(length(lst[lst\
    \ < 0]) == 0){\n      return(c(NULL, min(lst[lst > 0])))\n    }\n    else if(length(lst[lst\
    \ > 0]) == 0){\n      return(c(max(lst[lst < 0]), NULL))\n    }\n    else{\n \
    \     return(c(max(lst[lst < 0]), min(lst[lst > 0])))\n    }\n  }\n}\n", "\n \
    \ if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- lst[lst <\
    \ 0]\n  pos <- lst[lst > 0]\n  if (length(neg) == 0) {\n    neg <- NULL\n  }\n\
    \  if (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg), min(pos)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n \
    \ neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) ==\
    \ 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <-\
    \ NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n\
    \  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n\
    \  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  neg <- lst[lst < 0]\n  pos <- lst[lst > 0]\n  if (length(neg) == 0) {\n\
    \    neg <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg),\
    \ min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  neg <- NULL\n\
    \  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      if (is.null(neg) ||\
    \ i > neg) {\n        neg <- i\n      }\n    } else if (i > 0) {\n      if (is.null(pos)\
    \ || i < pos) {\n        pos <- i\n      }\n    }\n  }\n  return(c(neg, pos))\n\
    }\n", "\n  negative_numbers <- lst[lst < 0]\n  positive_numbers <- lst[lst > 0]\n\
    \  if (length(negative_numbers) == 0) {\n    negative_numbers <- NULL\n  }\n \
    \ if (length(positive_numbers) == 0) {\n    positive_numbers <- NULL\n  }\n  return(c(max(negative_numbers),\
    \ min(positive_numbers)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst\
    \ <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n \
    \ if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg <- NULL\n  pos <- NULL\n  for (i in lst) {\n    if\
    \ (i < 0) {\n      neg <- c(neg, i)\n    }\n    if (i > 0) {\n      pos <- c(pos,\
    \ i)\n    }\n  }\n  if (length(neg) == 0) {\n    neg <- NULL\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg), min(pos)))\n}\n", "\n  #\
    \ YOUR CODE HERE\n  a <- NULL\n  b <- NULL\n  for (i in lst) {\n    if (i < 0)\
    \ {\n      if (is.null(a)) {\n        a <- i\n      } else {\n        if (i >\
    \ a) {\n          a <- i\n        }\n      }\n    } else {\n      if (is.null(b))\
    \ {\n        b <- i\n      } else {\n        if (i < b) {\n          b <- i\n\
    \        }\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n\
    \  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n\
    \  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  neg <- NULL\n  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n   \
    \   neg <- c(neg, i)\n    } else if (i > 0) {\n      pos <- c(pos, i)\n    }\n\
    \  }\n  if (length(neg) == 0) {\n    neg <- NULL\n  } else {\n    neg <- max(neg)\n\
    \  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  } else {\n    pos <- min(pos)\n\
    \  }\n  return(c(neg, pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  neg <- lst[lst < 0]\n  pos <- lst[lst > 0]\n  if (length(neg)\
    \ == 0) {\n    neg <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n\
    \  }\n  return(c(max(neg), min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n  \
    \  return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0)\
    \ {\n      return(c(NULL, NULL))\n    }\n  }\n  if (length(lst) == 1) {\n    if\
    \ (lst[1] > 0) {\n      return(c(NULL, lst[1]))\n    }\n    if (lst[1] < 0) {\n\
    \      return(c(lst[1], NULL))\n    }\n  }\n  if (length(lst) > 1) {\n    if (length(lst[lst\
    \ < 0]) == 0) {\n      return(c(NULL, min(lst[lst > 0])))\n    }\n    if (length(lst[lst\
    \ > 0]) == 0) {\n      return(c(max(lst[lst < 0]), NULL))\n    }\n    if (length(lst[lst\
    \ < 0]) > 0 && length(lst[lst > 0]) > 0) {\n      return(c(max(lst[lst < 0]),\
    \ min(lst[lst > 0])))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  neg = NULL\n  pos = NULL\n  for (i\
    \ in lst) {\n    if (i < 0) {\n      if (is.null(neg)) {\n        neg = i\n  \
    \    } else {\n        neg = max(neg, i)\n      }\n    } else if (i > 0) {\n \
    \     if (is.null(pos)) {\n        pos = i\n      } else {\n        pos = min(pos,\
    \ i)\n      }\n    }\n  }\n  return(c(neg, pos))\n}\n", "\n  if (length(lst) ==\
    \ 0) {\n    return(c(NULL, NULL))\n  }\n  else {\n    neg_lst <- lst[lst < 0]\n\
    \    pos_lst <- lst[lst > 0]\n    if (length(neg_lst) == 0) {\n      neg_lst <-\
    \ NULL\n    }\n    if (length(pos_lst) == 0) {\n      pos_lst <- NULL\n    }\n\
    \    return(c(max(neg_lst), min(pos_lst)))\n  }\n}\n", "\n  if (length(lst) ==\
    \ 0) {\n    return(c(NULL, NULL))\n  }\n  negatives <- lst[lst < 0]\n  positives\
    \ <- lst[lst > 0]\n  if (length(negatives) == 0) {\n    negatives <- NULL\n  }\n\
    \  if (length(positives) == 0) {\n    positives <- NULL\n  }\n  return(c(max(negatives),\
    \ min(positives)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n \
    \ if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst)\
    \ == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- lst[lst\
    \ < 0]\n  pos <- lst[lst > 0]\n  if (length(neg) == 0) {\n    neg <- NULL\n  }\n\
    \  if (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg), min(pos)))\n\
    }\n", "\n  # YOUR CODE HERE\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  if (length(lst) == 1) {\n    if (lst[1] != 0) {\n    \
    \  return(c(NULL, lst[1]))\n    }\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ != 0) {\n      return(c(lst[1], NULL))\n    }\n  }\n  if (length(lst) == 1)\
    \ {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] != 0) {\n      return(c(NULL, lst[1]))\n    }\n  }\n\
    \  if (length(lst) == 1) {\n    if (lst[1] != 0) {\n      return(c(lst[1], NULL))\n\
    \    }\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  if (length(lst) == 1) {\n    if (lst[1] != 0) {\n    \
    \  return(c(NULL, lst[1]))\n    }\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ != 0) {\n      return(c(lst[1], NULL))\n    }\n  }\n  if (length(lst) == 1)\
    \ {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] != 0) {\n      return(c(NULL, lst[1", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg <- lst[lst < 0]\n  pos\
    \ <- lst[lst > 0]\n  if (length(neg) == 0) {\n    neg <- NULL\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg), min(pos)))\n}\n", "\n  if\
    \ (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg_lst <- lst[lst <\
    \ 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <-\
    \ NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  max_neg <- NULL\n  min_pos <- NULL\n  for (i in 1:length(lst))\
    \ {\n    if (lst[i] < 0) {\n      if (is.null(max_neg)) {\n        max_neg <-\
    \ lst[i]\n      } else {\n        if (lst[i] > max_neg) {\n          max_neg <-\
    \ lst[i]\n        }\n      }\n    }\n    if (lst[i] > 0) {\n      if (is.null(min_pos))\
    \ {\n        min_pos <- lst[i]\n      } else {\n        if (lst[i] < min_pos)\
    \ {\n          min_pos <- lst[i]\n        }\n      }\n    }\n  }\n  return(c(max_neg,\
    \ min_pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n \
    \ }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  max_neg <- NULL\n  min_pos\
    \ <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      if (is.null(max_neg)) {\n\
    \        max_neg <- i\n      } else {\n        if (i > max_neg) {\n          max_neg\
    \ <- i\n        }\n      }\n    }\n    if (i > 0) {\n      if (is.null(min_pos))\
    \ {\n        min_pos <- i\n      } else {\n        if (i < min_pos) {\n      \
    \    min_pos <- i\n        }\n      }\n    }\n  }\n  return(c(max_neg, min_pos))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- NULL\n\
    \  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n\
    \    } else if (i > 0) {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg)\
    \ == 0) {\n    neg <- NULL\n  } else {\n    neg <- max(neg)\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  } else {\n    pos <- min(pos)\n  }\n  return(c(neg,\
    \ pos))\n}\n", "\n  # YOUR CODE HERE\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  if (length(lst) == 1) {\n    if (lst[1] > 0) {\n     \
    \ return(c(NULL, lst[1]))\n    }\n    if (lst[1] < 0) {\n      return(c(lst[1],\
    \ NULL))\n    }\n  }\n  if (length(lst) == 2) {\n    if (lst[1] > 0 && lst[2]\
    \ > 0) {\n      return(c(NULL, min(lst)))\n    }\n    if (lst[1] < 0 && lst[2]\
    \ < 0) {\n      return(c(max(lst), NULL))\n    }\n    if (lst[1] > 0 && lst[2]\
    \ < 0) {\n      return(c(lst[2], lst[1]))\n    }\n    if (lst[1] < 0 && lst[2]\
    \ > 0) {\n      return(c(lst[1], lst[2]))\n    }\n  }\n  if (length(lst) > 2)\
    \ {\n    if (lst[1] > 0 && lst[2] > 0) {\n      return(c(NULL, min(lst)))\n  \
    \  }\n    if (lst[1] < 0 && lst[2] < 0) {\n      return(c(max(lst), NULL))\n \
    \   }\n    if (lst[1] > 0 && lst[2] < 0) {\n      return(c(lst[2], lst[1]))\n\
    \    }\n    if (lst[1] < 0 && lst[2] > 0) {\n      return(c(lst[1], lst[2]))\n\
    \    }\n  }\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n \
    \ }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n\
    \    }\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n\
    \  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n\
    \  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  else {\n    neg <- lst[lst < 0]\n    pos <- lst[lst > 0]\n    if (length(neg)\
    \ == 0) {\n      neg <- NULL\n    }\n    if (length(pos) == 0) {\n      pos <-\
    \ NULL\n    }\n    return(c(max(neg), min(pos)))\n  }\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  negs <- lst[lst < 0]\n \
    \ pos <- lst[lst > 0]\n  if (length(negs) == 0) {\n    negs <- NULL\n  }\n  if\
    \ (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(negs), min(pos)))\n\
    }\n", "\n  # your code here\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  neg <- lst[lst < 0]\n  pos <- lst[lst > 0]\n  if (length(neg)\
    \ == 0) {\n    neg <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n\
    \  }\n  return(c(max(neg), min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n  \
    \  return(c(NULL, NULL))\n  }\n  negatives <- lst[lst < 0]\n  positives <- lst[lst\
    \ > 0]\n  if (length(negatives) == 0) {\n    negatives <- NULL\n  }\n  if (length(positives)\
    \ == 0) {\n    positives <- NULL\n  }\n  return(c(max(negatives), min(positives)))\n\
    }\n", "\n  # YOUR CODE HERE\n  if(length(lst)==0){\n    return(c(NULL,NULL))\n\
    \  }\n  else{\n    neg=NULL\n    pos=NULL\n    for(i in 1:length(lst)){\n    \
    \  if(lst[i]<0){\n        neg=c(neg,lst[i])\n      }\n      else if(lst[i]>0){\n\
    \        pos=c(pos,lst[i])\n      }\n    }\n    if(length(neg)==0){\n      neg=NULL\n\
    \    }\n    if(length(pos)==0){\n      pos=NULL\n    }\n    return(c(max(neg),min(pos)))\n\
    \  }\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if\
    \ (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n\
    \    }\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst)\
    \ == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst\
    \ <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n\
    \  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n\
    \  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  # Your code here\n  a = NULL\n  b = NULL\n  for (i\
    \ in lst) {\n    if (i < 0) {\n      if (a == NULL) {\n        a = i\n      }\
    \ else {\n        if (i > a) {\n          a = i\n        }\n      }\n    } else\
    \ {\n      if (b == NULL) {\n        b = i\n      } else {\n        if (i < b)\
    \ {\n          b = i\n        }\n      }\n    }\n  }\n  return(c(a, b))\n}\n",
  "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n \
    \ neg <- NULL\n  pos <- NULL\n  for (i in 1:length(lst)) {\n    if (lst[i] < 0)\
    \ {\n      neg <- c(neg, lst[i])\n    }\n    if (lst[i] > 0) {\n      pos <- c(pos,\
    \ lst[i])\n    }\n  }\n  if (length(neg) == 0) {\n    neg <- NULL\n  }\n  if (length(pos)\
    \ == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg), min(pos)))\n}\n", "\n  if\
    \ (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1)\
    \ {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg_lst\
    \ <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n\
    \    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n\
    \  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst) == 0)\
    \ {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst ==\
    \ 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  if (length(lst) > 1) {\n  \
    \  if (all(lst > 0)) {\n      return(c(NULL, min(lst)))\n    }\n    if (all(lst\
    \ < 0)) {\n      return(c(max(lst), NULL))\n    }\n    if (any(lst > 0) && any(lst\
    \ < 0)) {\n      return(c(max(lst[lst < 0]), min(lst[lst > 0])))\n    }\n  }\n\
    }\n", "\n  neg <- NULL\n  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n\
    \      if (is.null(neg) || i > neg) {\n        neg <- i\n      }\n    } else if\
    \ (i > 0) {\n      if (is.null(pos) || i < pos) {\n        pos <- i\n      }\n\
    \    }\n  }\n  return(c(neg, pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  max_neg <- NULL\n  min_pos <- NULL\n  for (i in lst) {\n    if\
    \ (i < 0) {\n      if (is.null(max_neg) || i > max_neg) {\n        max_neg <-\
    \ i\n      }\n    } else if (i > 0) {\n      if (is.null(min_pos) || i < min_pos)\
    \ {\n        min_pos <- i\n      }\n    }\n  }\n  return(c(max_neg, min_pos))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  min_pos\
    \ <- NULL\n  max_neg <- NULL\n  for (i in lst) {\n    if (i > 0) {\n      if (is.null(min_pos)\
    \ || i < min_pos) {\n        min_pos <- i\n      }\n    } else if (i < 0) {\n\
    \      if (is.null(max_neg) || i > max_neg) {\n        max_neg <- i\n      }\n\
    \    }\n  }\n  return(c(max_neg, min_pos))\n}\n", "\n  if (length(lst) == 0) {\n\
    \    return(c(NULL, NULL))\n  }\n  negatives <- lst[lst < 0]\n  positives <- lst[lst\
    \ > 0]\n  if (length(negatives) == 0) {\n    negatives <- NULL\n  }\n  if (length(positives)\
    \ == 0) {\n    positives <- NULL\n  }\n  return(c(max(negatives), min(positives)))\n\
    }\n", "\n  # Your code here\n  a <- NULL\n  b <- NULL\n  for (i in lst) {\n  \
    \  if (i < 0) {\n      if (a == NULL) {\n        a <- i\n      } else {\n    \
    \    if (i > a) {\n          a <- i\n        }\n      }\n    } else {\n      if\
    \ (b == NULL) {\n        b <- i\n      } else {\n        if (i < b) {\n      \
    \    b <- i\n        }\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n  if\
    \ (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  neg_lst <- lst[lst <\
    \ 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <-\
    \ NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  else {\n    neg <- min(lst[lst < 0])\n    pos <- max(lst[lst > 0])\n \
    \   if (is.na(neg)) {\n      neg <- NULL\n    }\n    if (is.na(pos)) {\n     \
    \ pos <- NULL\n    }\n    return(c(neg, pos))\n  }\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  neg <- NULL\n  pos <- NULL\n\
    \  for (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n    }\n    if (i\
    \ > 0) {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg) == 0) {\n    neg\
    \ <- NULL\n  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  }\n  return(c(max(neg),\
    \ min(pos)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  neg <- NULL\n  pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n   \
    \   neg <- c(neg, i)\n    } else if (i > 0) {\n      pos <- c(pos, i)\n    }\n\
    \  }\n  if (length(neg) == 0) {\n    neg <- NULL\n  } else {\n    neg <- max(neg)\n\
    \  }\n  if (length(pos) == 0) {\n    pos <- NULL\n  } else {\n    pos <- min(pos)\n\
    \  }\n  return(c(neg, pos))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL,\
    \ NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n \
    \ if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst)\
    \ == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n \
    \ neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) ==\
    \ 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <-\
    \ NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  neg <- NULL\n  pos <- NULL\n  for\
    \ (i in lst) {\n    if (i < 0) {\n      neg <- c(neg, i)\n    } else if (i > 0)\
    \ {\n      pos <- c(pos, i)\n    }\n  }\n  if (length(neg) == 0) {\n    neg <-\
    \ NULL\n  } else {\n    neg <- max(neg)\n  }\n  if (length(pos) == 0) {\n    pos\
    \ <- NULL\n  } else {\n    pos <- min(pos)\n  }\n  return(c(neg, pos))\n}\n",
  "\n  # YOUR CODE HERE\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n\
    \  else {\n    if (all(lst >= 0)) {\n      return(c(NULL, min(lst)))\n    }\n\
    \    else if (all(lst <= 0)) {\n      return(c(max(lst), NULL))\n    }\n    else\
    \ {\n      return(c(max(lst[lst < 0]), min(lst[lst > 0])))\n    }\n  }\n}\n",
  "\n  max_neg <- NULL\n  min_pos <- NULL\n  for (i in lst) {\n    if (i < 0) {\n\
    \      if (is.null(max_neg) || i > max_neg) {\n        max_neg <- i\n      }\n\
    \    } else if (i > 0) {\n      if (is.null(min_pos) || i < min_pos) {\n     \
    \   min_pos <- i\n      }\n    }\n  }\n  return(c(max_neg, min_pos))\n}\n", "\n\
    \  # YOUR CODE HERE\n  a <- NULL\n  b <- NULL\n  for (i in lst) {\n    if (i <\
    \ 0) {\n      if (a == NULL) {\n        a <- i\n      } else {\n        if (i\
    \ > a) {\n          a <- i\n        }\n      }\n    } else {\n      if (b == NULL)\
    \ {\n        b <- i\n      } else {\n        if (i < b) {\n          b <- i\n\
    \        }\n      }\n    }\n  }\n  return(c(a, b))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst) == 1) {\n    if (lst[1]\
    \ == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n  max_neg <- NULL\n  min_pos\
    \ <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      if (is.null(max_neg)) {\n\
    \        max_neg <- i\n      } else {\n        if (i > max_neg) {\n          max_neg\
    \ <- i\n        }\n      }\n    }\n    if (i > 0) {\n      if (is.null(min_pos))\
    \ {\n        min_pos <- i\n      } else {\n        if (i < min_pos) {\n      \
    \    min_pos <- i\n        }\n      }\n    }\n  }\n  return(c(max_neg, min_pos))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  negatives\
    \ <- lst[lst < 0]\n  positives <- lst[lst > 0]\n  return(c(max(negatives), min(positives)))\n\
    }\n", "\n    if (length(lst) == 0) {\n        return(c(NULL, NULL))\n    }\n \
    \   if (length(lst) == 1) {\n        if (lst[1] == 0) {\n            return(c(NULL,\
    \ NULL))\n        }\n    }\n    neg_lst <- lst[lst < 0]\n    pos_lst <- lst[lst\
    \ > 0]\n    if (length(neg_lst) == 0) {\n        neg_lst <- NULL\n    }\n    if\
    \ (length(pos_lst) == 0) {\n        pos_lst <- NULL\n    }\n    return(c(max(neg_lst),\
    \ min(pos_lst)))\n}\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n\
    \  }\n  if (length(lst) == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL,\
    \ NULL))\n    }\n  }\n  if (length(lst) == 1) {\n    if (lst[1] > 0) {\n     \
    \ return(c(NULL, lst[1]))\n    }\n    if (lst[1] < 0) {\n      return(c(lst[1],\
    \ NULL))\n    }\n  }\n  if (length(lst) == 2) {\n    if (lst[1] > 0 && lst[2]\
    \ > 0) {\n      return(c(NULL, min(lst)))\n    }\n    if (lst[1] < 0 && lst[2]\
    \ < 0) {\n      return(c(max(lst), NULL))\n    }\n    if (lst[1] < 0 && lst[2]\
    \ > 0) {\n      return(c(lst[1], lst[2]))\n    }\n    if (lst[1] > 0 && lst[2]\
    \ < 0) {\n      return(c(lst[2], lst[1]))\n    }\n  }\n  if (length(lst) > 2)\
    \ {\n    if (lst[1] > 0 && lst[2] > 0) {\n      return(c(NULL, min(lst)))\n  \
    \  }\n    if (lst[1] < 0 && lst[2] < 0) {\n      return(c(max(lst), NULL))\n \
    \   }\n    if (lst[1] < 0 && lst[2] > 0) {\n      return(c(max(lst[lst < 0]),\
    \ min(lst[lst > 0])))\n    }\n    if (lst[1] > 0 && lst[2] < 0) {\n      return(c(max(lst[lst\
    \ < 0]), min(lst[lst > 0])))\n    }\n  }\n}\n\n", "\n  if (length(lst) == 0) {\n\
    \    return(c(NULL, NULL))\n  }\n  neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst\
    \ > 0]\n  if (length(neg_lst) == 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst)\
    \ == 0) {\n    pos_lst <- NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n\
    }\n", "\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (length(lst)\
    \ == 1) {\n    if (lst[1] == 0) {\n      return(c(NULL, NULL))\n    }\n  }\n \
    \ neg_lst <- lst[lst < 0]\n  pos_lst <- lst[lst > 0]\n  if (length(neg_lst) ==\
    \ 0) {\n    neg_lst <- NULL\n  }\n  if (length(pos_lst) == 0) {\n    pos_lst <-\
    \ NULL\n  }\n  return(c(max(neg_lst), min(pos_lst)))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
