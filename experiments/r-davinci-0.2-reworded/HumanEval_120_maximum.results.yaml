name: HumanEval_120_maximum
language: r
results:
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    arr[order(arr, decreasing\
    \ = TRUE)[1:k]]\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n \
    \   if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n  # Your code here\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4,\
    \ 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4,\
    \ 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2,\
    \ -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123, -123,\
    \ 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\n\ntest_humaneval <- function() {\ncandidate <- maximum\n\
    \    if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1]  5 -3 -4\n[1] 4 4\n[1] 2\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    arr[order(arr, decreasing\
    \ = TRUE)[1:k]]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\n\ntest_humaneval <- function() {\ncandidate <- maximum\n\
    \    if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1]  5 -3 -4\n[1] 4 4\n[1] 2\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n  # Your code here\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4,\
    \ 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4,\
    \ 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2,\
    \ -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123, -123,\
    \ 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n  # Write your code here\n\
    \  arr[order(arr, decreasing = TRUE)][1:k]\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4, 5), 3), c(-4,\
    \ -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(123, -123, 20, 0, 1, 2, -3), 3), c(2, 20,\
    \ 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123, 20, 0, 1, 2, -3),\
    \ 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5, 15, 0,\
    \ 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4),\
    \ 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10), 2), c(-10,\
    \ 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23, 243, -400,\
    \ 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    # Write your code here\n\
    \    arr[order(arr, decreasing = TRUE)][1:k]\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4, 5), 3), c(-4,\
    \ -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(123, -123, 20, 0, 1, 2, -3), 3), c(2, 20,\
    \ 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123, 20, 0, 1, 2, -3),\
    \ 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5, 15, 0,\
    \ 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4),\
    \ 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10), 2), c(-10,\
    \ 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23, 243, -400,\
    \ 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    if (k == 0) {\n       \
    \ return(c())\n    }\n    if (k == 1) {\n        return(c(max(arr)))\n    }\n\
    \    if (k == length(arr)) {\n        return(sort(arr))\n    }\n    if (k > length(arr))\
    \ {\n        return(sort(arr))\n    }\n    if (k < length(arr)) {\n        return(sort(arr)[length(arr)-k+1:length(arr)])\n\
    \    }\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n  # Your code here\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4,\
    \ 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4,\
    \ 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2,\
    \ -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123, -123,\
    \ 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\n\ntest_humaneval <- function() {\ncandidate <- maximum\n\
    \    if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1]  5 -3 -4\n[1] 4 4\n[1] 2\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n  # Write your code here\n\
    \  # Sort the vector in descending order\n  # Return the first k elements\n  sort(arr,\
    \ decreasing = TRUE)[1:k]\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n\
    \    if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    # Write your code here\n\
    \    return(sort(arr, decreasing = TRUE)[1:k])\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4, 5), 3), c(-4,\
    \ -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(123, -123, 20, 0, 1, 2, -3), 3), c(2, 20,\
    \ 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123, 20, 0, 1, 2, -3),\
    \ 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5, 15, 0,\
    \ 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4),\
    \ 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10), 2), c(-10,\
    \ 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23, 243, -400,\
    \ 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    # Write your code here\n\
    \    # Sort the vector in descending order\n    arr <- sort(arr, decreasing =\
    \ TRUE)\n    # Return the first k elements\n    return(arr[1:k])\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4,\
    \ 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4,\
    \ 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2,\
    \ -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123, -123,\
    \ 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
