name: HumanEval_23_strlen
language: r
prompt: "# Return length of given string\n# >>> strlen('')\n# 0\n# >>> strlen('abc')\n\
  # 3\nstrlen <- function(string) {"
tests: "test_humaneval <- function() {\ncandidate <- strlen\n    if(!identical(candidate(''),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('x'), 1)){quit('no', 1)}\n   \
  \ if(!identical(candidate('asdasnakj'), 9)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  return(nchar(string))\n}\n", "\n  # TODO: Implement this function\n\
    \  return(nchar(string))\n}\n", "\n  length(string)\n}\n", "\n  length(strsplit(string,\
    \ '')[[1]])\n}\n", "\n  if (string == '') {\n    return(0)\n  } else {\n    return(1\
    \ + strlen(substr(string, 2, nchar(string))))\n  }\n}\n", "\n  if (string == '')\
    \ {\n    return(0)\n  } else {\n    return(1 + strlen(substr(string, 2, nchar(string))))\n\
    \  }\n}\n", "\n  return(nchar(string))\n}\n", "\n  if (string == '') {\n    return(0)\n\
    \  } else {\n    return(1 + strlen(substr(string, 2, nchar(string))))\n  }\n}\n",
  "\n    length(string)\n}\n", "\n  if (string == '') {\n    return(0)\n  } else {\n\
    \    return(1 + strlen(substr(string, 2, nchar(string))))\n  }\n}\n", "\n  if\
    \ (string == '') {\n    return(0)\n  } else {\n    return(1 + strlen(substr(string,\
    \ 2, nchar(string))))\n  }\n}\n", "\n    return(nchar(string))\n}\n", "\n  if\
    \ (string == '') {\n    return(0)\n  } else {\n    return(1 + strlen(substr(string,\
    \ 2, nchar(string))))\n  }\n}\n", "\n  string <- as.character(string)\n  if (length(string)\
    \ == 0) {\n    return(0)\n  }\n  return(nchar(string))\n}\n", "\n  return(nchar(string))\n\
    }\n", "\n  if (string == '') {\n    return(0)\n  } else {\n    return(1 + strlen(substr(string,\
    \ 2, nchar(string))))\n  }\n}\n", "\n  return(nchar(string))\n}\n", "\n    length(string)\n\
    }\n", "\n  if (string == '') {\n    return(0)\n  } else {\n    return(1 + strlen(substr(string,\
    \ 2, nchar(string))))\n  }\n}\n", "\n  if (string == '') {\n    return(0)\n  }\
    \ else {\n    return(1 + strlen(substr(string, 2, nchar(string))))\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
