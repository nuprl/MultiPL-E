name: HumanEval_149_sorted_list_sum
language: r
prompt: "# Write a function that accepts a list of strings as a parameter,\n# deletes\
  \ the strings that have odd lengths from it,\n# and returns the resulted list with\
  \ a sorted order,\n# The list is always a list of strings and never a vector of\
  \ numbers,\n# and it may contain duplicates.\n# The order of the list should be\
  \ ascending by length of each word, and you\n# should return the list sorted by\
  \ that rule.\n# If two words have the same length, sort the list alphabetically.\n\
  # The function should return a list of strings in sorted order.\n# You may assume\
  \ that all words will have the same length.\n# For example:\n# >>> list_sort(c('aa',\
  \ 'a', 'aaa'))\n# c('aa')\n# >>> list_sort(c('ab', 'a', 'aaa', 'cd'))\n# c('ab',\
  \ 'cd')\nsorted_list_sum <- function(lst) {"
tests: "test_humaneval <- function() {\ncandidate <- sorted_list_sum\n    if(!identical(candidate(c('aa',\
  \ 'a', 'aaa')), c('aa'))){quit('no', 1)}\n    if(!identical(candidate(c('school',\
  \ 'AI', 'asdf', 'b')), c('AI', 'asdf', 'school'))){quit('no', 1)}\n    if(!identical(candidate(c('d',\
  \ 'b', 'c', 'a')), c())){quit('no', 1)}\n    if(!identical(candidate(c('d', 'dcba',\
  \ 'abcd', 'a')), c('abcd', 'dcba'))){quit('no', 1)}\n    if(!identical(candidate(c('AI',\
  \ 'ai', 'au')), c('AI', 'ai', 'au'))){quit('no', 1)}\n    if(!identical(candidate(c('a',\
  \ 'b', 'b', 'c', 'c', 'a')), c())){quit('no', 1)}\n    if(!identical(candidate(c('aaaa',\
  \ 'bbbb', 'dd', 'cc')), c('cc', 'dd', 'aaaa', 'bbbb'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  lst <- lst[sapply(lst, nchar) %% 2 == 0]\n  lst <- sort(lst, decreasing\
    \ = FALSE)\n  return(lst)\n}\n", "\n  lst <- lst[nchar(lst) %% 2 == 0]\n  lst\
    \ <- sort(lst, decreasing = FALSE, na.last = NA)\n  return(lst)\n}\n", "\n   \
    \ lst <- lst[!(nchar(lst) %% 2)]\n    lst <- sort(lst, decreasing = FALSE, na.last\
    \ = NA,\n                partial = NULL, method = c(\"auto\", \"shell\", \"radix\"\
    ),\n                order = NULL)\n    return(lst)\n}\n", "\n    lst <- lst[nchar(lst)\
    \ %% 2 == 0]\n    lst <- sort(lst, decreasing = FALSE, na.last = NA)\n    return(lst)\n\
    }\n", "\n  lst <- lst[nchar(lst) %% 2 == 0]\n  lst <- sort(lst, decreasing = FALSE,\
    \ na.last = NA)\n  return(lst)\n}\n", "\n  lst <- lst[nchar(lst) %% 2 == 0]\n\
    \  lst <- sort(lst, decreasing = FALSE, na.last = TRUE)\n  return(lst)\n}\n",
  "\n    lst <- lst[nchar(lst) %% 2 == 0]\n    lst <- sort(lst, decreasing = TRUE)\n\
    \    return(lst)\n}\n", "\n  lst <- lst[!(nchar(lst) %% 2)]\n  lst <- sort(lst,\
    \ decreasing = FALSE, na.last = NA,\n              partial = NA, method = c(\"\
    auto\", \"shell\", \"radix\"),\n              order = NULL)\n  return(lst)\n}\n",
  "\n  lst <- lst[nchar(lst) %% 2 == 0]\n  lst <- sort(lst, decreasing = FALSE, na.last\
    \ = NA)\n  return(lst)\n}\n", "\n  lst <- lst[sapply(lst, nchar) %% 2 == 0]\n\
    \  lst <- sort(lst, decreasing = FALSE, na.last = NA,\n              partial =\
    \ NA, method = c(\"auto\", \"shell\", \"radix\"),\n              order = c(\"\
    ascending\", \"descending\"),\n              ...)\n  return(lst)\n}\n", "\n  \
    \  lst <- lst[!(nchar(lst) %% 2)]\n    lst <- sort(lst, decreasing = FALSE, na.last\
    \ = NA,\n                partial = NULL, method = c(\"auto\", \"shell\", \"radix\"\
    ),\n                order = NULL)\n    return(lst)\n}\n", "\n  lst <- lst[nchar(lst)\
    \ %% 2 == 0]\n  lst <- sort(lst, decreasing = FALSE, na.last = NA)\n  return(lst)\n\
    }\n", "\n    lst <- lst[nchar(lst) %% 2 == 0]\n    lst <- sort(lst, decreasing\
    \ = FALSE, na.last = NA)\n    return(lst)\n}\n", "\n  lst <- lst[nchar(lst) %%\
    \ 2 == 0]\n  lst <- sort(lst, decreasing = FALSE, na.last = NA)\n  return(lst)\n\
    }\n", "\n    lst <- lst[nchar(lst) %% 2 == 0]\n    return(sort(lst))\n}\n", "\n\
    \    lst <- lst[order(nchar(lst), lst)]\n    lst <- lst[seq(1, length(lst), 2)]\n\
    \    return(lst)\n}\n", "\n  lst <- lst[nchar(lst) %% 2 == 0]\n  lst <- sort(lst,\
    \ decreasing = FALSE, na.last = NA)\n  return(lst)\n}\n", "\n    lst <- lst[!(nchar(lst)\
    \ %% 2)]\n    lst <- sort(lst, decreasing = FALSE, na.last = NA,\n           \
    \     decreasing = FALSE, na.last = NA,\n                decreasing = FALSE, na.last\
    \ = NA)\n    return(lst)\n}\n", "\n  lst <- lst[!is.na(lst)]\n  if (length(lst)\
    \ == 0) {\n    return(NULL)\n  }\n  lst <- lst[lst %% 2 == 0]\n  lst <- sort(lst)\n\
    \  return(lst)\n}\n", "\n    lst <- lst[nchar(lst) %% 2 == 0]\n    lst <- sort(lst,\
    \ decreasing = FALSE, na.last = TRUE)\n    return(lst)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
