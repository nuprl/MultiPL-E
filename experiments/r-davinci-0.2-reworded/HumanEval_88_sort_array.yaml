name: HumanEval_88_sort_array
language: r
prompt: "# Given a vector of non-negative integers, return a cor of the given vector\
  \ after sorting,\n# you will sort the given vector in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given vector.\n# Examples:\n# >>> sort_array(c())\n# c()\n# >>> sort_array(c(5))\n\
  # c(5)\n# >>> sort_array(c(2, 4, 3, 0, 1, 5))\n# c(0, 1, 2, 3, 4, 5)\n# >>> sort_array(c(2,\
  \ 4, 3, 0, 1, 5, 6))\n# c(6, 5, 4, 3, 2, 1, 0)\nsort_array <- function(array) {"
tests: "test_humaneval <- function() {\ncandidate <- sort_array\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate(c(5)), c(5))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(2, 4, 3, 0, 1, 5)), c(0, 1, 2, 3, 4, 5))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(2, 4, 3, 0, 1, 5, 6)), c(6, 5, 4, 3, 2, 1,\
  \ 0))){quit('no', 1)}\n    if(!identical(candidate(c(2, 1)), c(1, 2))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(15, 42, 87, 32, 11, 0)), c(0, 11, 15, 32, 42,\
  \ 87))){quit('no', 1)}\n    if(!identical(candidate(c(21, 14, 23, 11)), c(23, 21,\
  \ 14, 11))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  if\
    \ (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing\
    \ = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n\
    \  } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\n", "\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  if\
    \ (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing\
    \ = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n\
    \  } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\n", "\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  if\
    \ (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing\
    \ = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n\
    \  } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n    sort(array, decreasing = TRUE)\n  } else {\n    sort(array)\n\
    \  }\n}\n", "\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  if\
    \ (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing\
    \ = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n\
    \  } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\n", "\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  if\
    \ (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing\
    \ = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(c(1,\
    \ length(array))) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n \
    \ } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n    sort(array, decreasing = TRUE)\n  } else {\n    sort(array)\n\
    \  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
