name: HumanEval_6_parse_nested_parens
language: r
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
  # c(2, 3, 1, 3)\nparse_nested_parens <- function(paren_string) {"
tests: "test_humaneval <- function() {\ncandidate <- parse_nested_parens\n    if(!identical(candidate('(()())\
  \ ((())) () ((())()())'), c(2, 3, 1, 3))){quit('no', 1)}\n    if(!identical(candidate('()\
  \ (()) ((())) (((())))'), c(1, 2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate('(()(())((())))'),\
  \ c(4))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # TODO: Write code here\n  # Hint: Use strsplit() to split the\
    \ string into a list of strings, one for each group of parentheses.\n  # Hint:\
    \ Use str_count() to count the number of left and right parentheses in each string.\n\
    \  # Hint: Use str_replace_all() to remove the outermost layer of parentheses.\n\
    \  # Hint: Use str_replace_all() to remove the innermost layer of parentheses.\n\
    \  # Hint: Use str_count() to count the number of left and right parentheses in\
    \ each string.\n  # Hint: Use recursion to keep repeating the above steps until\
    \ there are no more parentheses.\n  # Hint: Use unlist() to convert the list of\
    \ results into a vector.\n  # Hint: Use c() to combine the results into a single\
    \ vector.\n  # Hint: Use return() to return the results.\n}\n", "\n  # Split the\
    \ string into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # For each\
    \ group, count the number of opening parentheses\n  # and the number of closing\
    \ parentheses.\n  # The difference between the two is the number of levels of\
    \ nesting.\n  sapply(groups, function(group) {\n    sum(grepl('\\\\(', group))\
    \ - sum(grepl('\\\\)', group))\n  })\n}\nparse_nested_parens('(()()) ((())) ()\
    \ ((())()())')\n", "\n    paren_string <- strsplit(paren_string, ' ')[[1]]\n \
    \   paren_string <- sapply(paren_string, function(x) {\n        x <- strsplit(x,\
    \ '')[[1]]\n        x <- x[x != '']\n        x <- paste(x, collapse = '')\n  \
    \      x\n    })\n    paren_string <- sapply(paren_string, function(x) {\n   \
    \     x <- strsplit(x, '\\\\(|\\\\)')[[1]]\n        x <- x[x != '']\n        x\
    \ <- paste(x, collapse = '')\n        x\n    })\n    paren_string <- sapply(paren_string,\
    \ function(x) {\n        x <- strsplit(x, '')[[1]]\n        x <- x[x != '']\n\
    \        x <- paste(x, collapse = '')\n        x\n    })\n    paren_string <-\
    \ sapply(paren_string, function(x) {\n        x <- strsplit(x, '\\\\(|\\\\)')[[1]]\n\
    \        x <- x[x != '']\n        x <- paste(x, collapse = '')\n        x\n  \
    \  })\n    paren_string <- sapply(paren_string, function(x) {\n        x <- strsplit(x,\
    \ '')[[1]]\n        x <- x[x != '']\n        x <- paste(x, collapse = '')\n  \
    \      x\n    })\n    paren_string <- sapply(paren_string, function(x) {\n   \
    \     x <- strsplit(x, '\\\\(|\\\\)')[[1]]\n        x <- x[x != '']\n        x\
    \ <- paste(x, collapse = '')\n        x\n    })\n    paren_string <- sapply(paren_string,\
    \ function(x) {\n        x <- strsplit(x, '')[[1]]\n        x <- x[x != '']\n\
    \        x <- paste(x, collapse = '')\n        x\n    })\n    paren_string <-\
    \ sapply(paren_string, function(x) {\n        x <- strsplit(x, '\\\\(|\\\\)')[[1]]\n\
    \        x", "\n  # TODO: Write your code here\n}\n", "\n  # TODO: Your code here\n\
    \  # Hint: You can use the function parse_parens() defined above.\n  # Hint: You\
    \ can use the function max() defined in base R.\n  # Hint: You can use the function\
    \ strsplit() defined in base R.\n  # Hint: You can use the function unlist() defined\
    \ in base R.\n  # Hint: You can use the function as.numeric() defined in base\
    \ R.\n  # Hint: You can use the function c() defined in base R.\n  # Hint: You\
    \ can use the function length() defined in base R.\n  # Hint: You can use the\
    \ function sapply() defined in base R.\n  # Hint: You can use the function lapply()\
    \ defined in base R.\n  # Hint: You can use the function vapply() defined in base\
    \ R.\n  # Hint: You can use the function Reduce() defined in base R.\n  # Hint:\
    \ You can use the function Reduce() defined in base R.\n  # Hint: You can use\
    \ the function Reduce() defined in base R.\n  # Hint: You can use the function\
    \ Reduce() defined in base R.\n  # Hint: You can use the function Reduce() defined\
    \ in base R.\n  # Hint: You can use the function Reduce() defined in base R.\n\
    \  # Hint: You can use the function Reduce() defined in base R.\n  # Hint: You\
    \ can use the function Reduce() defined in base R.\n  # Hint: You can use the\
    \ function Reduce() defined in base R.\n  # Hint: You can use the function Reduce()\
    \ defined in base R.\n  # Hint: You can use the function Reduce() defined in base\
    \ R.\n  # Hint: You can use the function Reduce() defined in base R.\n  # Hint:\
    \ You can use the function Reduce() defined in base R.\n  # Hint: You can use\
    \ the function Reduce() defined in base R.\n  # Hint: You can use the function\
    \ Reduce() defined in base R.\n  # Hint: You can use the function Reduce() defined\
    \ in base R.\n  # Hint: You can use the function Reduce() defined in base R.\n\
    \  # Hint:", "\n  # YOUR CODE HERE\n  # Hint: use strsplit to split the string\
    \ into a vector of strings\n  # Hint: use str_count to count the number of parentheses\
    \ in each string\n  # Hint: use str_count to count the number of parentheses in\
    \ each string\n  # Hint: use str_count to count the number of parentheses in each\
    \ string\n  # Hint: use str_count to count the number of parentheses in each string\n\
    \  # Hint: use str_count to count the number of parentheses in each string\n \
    \ # Hint: use str_count to count the number of parentheses in each string\n  #\
    \ Hint: use str_count to count the number of parentheses in each string\n  # Hint:\
    \ use str_count to count the number of parentheses in each string\n  # Hint: use\
    \ str_count to count the number of parentheses in each string\n  # Hint: use str_count\
    \ to count the number of parentheses in each string\n  # Hint: use str_count to\
    \ count the number of parentheses in each string\n  # Hint: use str_count to count\
    \ the number of parentheses in each string\n  # Hint: use str_count to count the\
    \ number of parentheses in each string\n  # Hint: use str_count to count the number\
    \ of parentheses in each string\n  # Hint: use str_count to count the number of\
    \ parentheses in each string\n  # Hint: use str_count to count the number of parentheses\
    \ in each string\n  # Hint: use str_count to count the number of parentheses in\
    \ each string\n  # Hint: use str_count to count the number of parentheses in each\
    \ string\n  # Hint: use str_count to count the number of parentheses in each string\n\
    \  # Hint: use str_count to count the number of parentheses in each string\n \
    \ # Hint: use str_count to count the number of parentheses in each string\n  #\
    \ Hint: use str_count to count the number of parentheses in each string\n  # Hint:\
    \ use str_count to count the number of parentheses in each string\n  # Hint: use\
    \ str_count to count the number of parentheses in each string\n  # Hint: use str_count\
    \ to count the number of parentheses in each string\n  # Hint: use str_count to\
    \ count", "\n  paren_string <- strsplit(paren_string, ' ')[[1]]\n  paren_string\
    \ <- sapply(paren_string, function(x) {\n    x <- strsplit(x, '')[[1]]\n    x\
    \ <- x[x %in% c('(', ')')]\n    x <- paste(x, collapse = '')\n    x <- strsplit(x,\
    \ '\\\\)\\\\(')[[1]]\n    x <- sapply(x, function(y) {\n      y <- strsplit(y,\
    \ '')[[1]]\n      y <- y[y %in% c('(', ')')]\n      y <- paste(y, collapse = '')\n\
    \      y <- strsplit(y, '\\\\)\\\\(')[[1]]\n      y <- sapply(y, function(z) {\n\
    \        z <- strsplit(z, '')[[1]]\n        z <- z[z %in% c('(', ')')]\n     \
    \   z <- paste(z, collapse = '')\n        z <- strsplit(z, '\\\\)\\\\(')[[1]]\n\
    \        z <- sapply(z, function(w) {\n          w <- strsplit(w, '')[[1]]\n \
    \         w <- w[w %in% c('(', ')')]\n          w <- paste(w, collapse = '')\n\
    \          w <- strsplit(w, '\\\\)\\\\(')[[1]]\n          w <- sapply(w, function(v)\
    \ {\n            v <- strsplit(v, '')[[1]]\n            v <- v[v %in% c('(', ')')]\n\
    \            v <- paste(v, collapse = '')\n            v <- strsplit(v, '\\\\\
    )\\\\(')[[1]]\n            v <- sapply(v, function(u) {\n              u <- strsplit(u,\
    \ '')[[1]]\n              u <- u[u %in% c('(', ')')]\n              u <- paste(u,\
    \ collapse = '')\n              u <- strsplit(u, '\\\\)\\\\(')[[1]]\n        \
    \      u <- sapply(u, function(t) {\n                t <- strsplit(t,", "\n  #\
    \ Split the string into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n\
    \  # Initialize a vector to store the results\n  results <- vector('integer',\
    \ length(groups))\n  # Loop through each group\n  for (i in seq_along(groups))\
    \ {\n    # Initialize a counter for the current group\n    counter <- 0\n    #\
    \ Initialize a vector to store the maximum counter for each group\n    max_counter\
    \ <- vector('integer', 1)\n    # Loop through each character in the current group\n\
    \    for (j in seq_along(groups[i])) {\n      # If the character is an opening\
    \ parenthesis, increment the counter\n      if (groups[i][j] == '(') {\n     \
    \   counter <- counter + 1\n      }\n      # If the character is a closing parenthesis,\
    \ decrement the counter\n      if (groups[i][j] == ')') {\n        counter <-\
    \ counter - 1\n      }\n      # If the counter is greater than the maximum counter,\
    \ replace the maximum counter\n      if (counter > max_counter) {\n        max_counter\
    \ <- counter\n      }\n    }\n    # Store the maximum counter for the current\
    \ group\n    results[i] <- max_counter\n  }\n  # Return the results\n  return(results)\n\
    }\n", "\n  # TODO: Implement this function.\n  # Hint: Use the parse_parens function.\n\
    \  # Hint: Use the max function.\n  # Hint: Use the sapply function.\n  # Hint:\
    \ Use the strsplit function.\n  # Hint: Use the unlist function.\n  # Hint: Use\
    \ the as.numeric function.\n  # Hint: Use the c function.\n}\n", "\n  # TODO:\
    \ Write your code here\n  paren_string <- strsplit(paren_string, \" \")[[1]]\n\
    \  paren_string <- gsub(\"\\\\(\", \"( \", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \" )\", paren_string)\n  paren_string <- unlist(strsplit(paren_string,\
    \ \"\"))\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paste(paren_string, collapse = \"\")\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- unlist(strsplit(paren_string, \"\"))\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paste(paren_string, collapse = \"\")\n  paren_string\
    \ <- strsplit(paren_string, \" \")[[1]]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- unlist(strsplit(paren_string, \"\"))\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paste(paren_string,\
    \ collapse = \"\")\n  paren_string <- strsplit(paren_string, \" \")[[1]]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- unlist(strsplit(paren_string,\
    \ \"\"))\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paste(paren_string, collapse = \"\")\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- unlist(strsplit(paren_string, \"\"))\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paste(paren_string, collapse = \"\")\n  paren_string\
    \ <- strsplit(paren_string, \" \")[[1", "\n  # Split the string into groups\n\
    \  groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number\
    \ of left parentheses and right parentheses\n  # and take the difference.\n  #\
    \ The difference is the number of nested parentheses.\n  # If the difference is\
    \ negative, it means the parentheses are not balanced.\n  # In that case, return\
    \ 0.\n  sapply(groups, function(group) {\n    left_count <- sum(strsplit(group,\
    \ '')[[1]] == '(')\n    right_count <- sum(strsplit(group, '')[[1]] == ')')\n\
    \    if (left_count - right_count < 0) {\n      return(0)\n    } else {\n    \
    \  return(left_count - right_count)\n    }\n  })\n}\n", "\n  # Your code here\n\
    }\n", "\n  # Split the string into individual groups\n  paren_groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of left and right parentheses\n\
    \  paren_counts <- sapply(paren_groups, function(x) {\n    sum(strsplit(x, '')[[1]]\
    \ == '(') - sum(strsplit(x, '')[[1]] == ')')\n  })\n  # If the number of left\
    \ and right parentheses are equal, the group is balanced\n  balanced_groups <-\
    \ paren_groups[paren_counts == 0]\n  # For each balanced group, count the number\
    \ of left parentheses\n  paren_counts <- sapply(balanced_groups, function(x) {\n\
    \    sum(strsplit(x, '')[[1]] == '(')\n  })\n  return(paren_counts)\n}\n", "\n\
    \  # Write your code here\n}\n", "\n  # Split the string by spaces\n  paren_groups\
    \ <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number of\
    \ opening parentheses\n  # and subtract the number of closing parentheses\n  #\
    \ The result is the number of nested parentheses\n  paren_counts <- sapply(paren_groups,\
    \ function(x) {\n    sum(strsplit(x, '')[[1]] == '(') - sum(strsplit(x, '')[[1]]\
    \ == ')')\n  })\n  # Return the result as a vector\n  return(paren_counts)\n}\n",
  "\n  # Split the input string into a vector of strings, each representing a group\
    \ of nested parentheses.\n  paren_groups <- strsplit(paren_string, ' ')[[1]]\n\
    \  # Initialize a vector to store the output.\n  paren_levels <- vector(mode =\
    \ 'integer', length = length(paren_groups))\n  # Loop through each group of nested\
    \ parentheses.\n  for (i in seq_along(paren_groups)) {\n    # Initialize a counter\
    \ to store the current level of nesting.\n    level <- 0\n    # Initialize a counter\
    \ to store the maximum level of nesting.\n    max_level <- 0\n    # Loop through\
    \ each character in the current group of nested parentheses.\n    for (j in seq_along(paren_groups[i]))\
    \ {\n      # If the current character is an opening parenthesis, increment the\
    \ level counter.\n      if (paren_groups[i][j] == '(') {\n        level <- level\
    \ + 1\n      }\n      # If the current character is a closing parenthesis, decrement\
    \ the level counter.\n      if (paren_groups[i][j] == ')') {\n        level <-\
    \ level - 1\n      }\n      # If the current level of nesting is greater than\
    \ the maximum level of nesting, update the maximum level of nesting.\n      if\
    \ (level > max_level) {\n        max_level <- level\n      }\n    }\n    # Store\
    \ the maximum level of nesting for the current group of nested parentheses.\n\
    \    paren_levels[i] <- max_level\n  }\n  # Return the output vector.\n  return(paren_levels)\n\
    }\n", "\n  # Split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening parentheses\n  #\
    \ and the number of closing parentheses\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parenthesis\n  # and the maximum number of closing\
    \ parentheses without an opening parenthesis\n  # and the maximum number of opening\
    \ parentheses without a closing parent", "\n  # TODO: Implement this function\n\
    \  # Hint: Use strsplit() and str_count()\n  # Hint: Use str_match() to get the\
    \ first match of a regex\n  # Hint: Use str_replace() to remove the first match\
    \ of a regex\n  # Hint: Use str_replace_all() to remove all matches of a regex\n\
    \  # Hint: Use str_replace_all() to remove all matches of a regex\n  # Hint: Use\
    \ str_replace_all() to remove all matches of a regex\n  # Hint: Use str_replace_all()\
    \ to remove all matches of a regex\n  # Hint: Use str_replace_all() to remove\
    \ all matches of a regex\n  # Hint: Use str_replace_all() to remove all matches\
    \ of a regex\n  # Hint: Use str_replace_all() to remove all matches of a regex\n\
    \  # Hint: Use str_replace_all() to remove all matches of a regex\n  # Hint: Use\
    \ str_replace_all() to remove all matches of a regex\n  # Hint: Use str_replace_all()\
    \ to remove all matches of a regex\n  # Hint: Use str_replace_all() to remove\
    \ all matches of a regex\n  # Hint: Use str_replace_all() to remove all matches\
    \ of a regex\n  # Hint: Use str_replace_all() to remove all matches of a regex\n\
    \  # Hint: Use str_replace_all() to remove all matches of a regex\n  # Hint: Use\
    \ str_replace_all() to remove all matches of a regex\n  # Hint: Use str_replace_all()\
    \ to remove all matches of a regex\n  # Hint: Use str_replace_all() to remove\
    \ all matches of a regex\n  # Hint: Use str_replace_all() to remove all matches\
    \ of a regex\n  # Hint: Use str_replace_all() to remove all matches of a regex\n\
    \  # Hint: Use str_replace_all() to remove all matches of a regex\n  # Hint: Use\
    \ str_replace_all() to remove all matches of a regex\n  # Hint: Use str_replace_all()\
    \ to remove all matches of a regex\n  # Hint: Use str_", "\n  # TODO: Write code\
    \ here\n}\n", "\n    # TODO: Your code here\n    # Hint: Use strsplit to split\
    \ the string into groups of parentheses.\n    # Hint: Use str_count to count the\
    \ number of parentheses in each group.\n    # Hint: Use str_count to count the\
    \ number of left parentheses in each group.\n    # Hint: Use str_count to count\
    \ the number of right parentheses in each group.\n    # Hint: Use str_count to\
    \ count the number of left parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of right parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of left parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of right parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of left parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of right parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of left parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of right parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of left parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of right parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of left parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of right parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of left parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of right parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of left parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of right parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of left parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of right parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of left parentheses in each group.\n    # Hint: Use str_count\
    \ to count the number of right parentheses in each group.\n   ", "\n  # Your code\
    \ here\n}\n", "\n  # Split the string by spaces\n  paren_groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of open parentheses\n  # and\
    \ the number of close parentheses\n  # and return the maximum of the two\n  return(max(sapply(paren_groups,\
    \ function(x) {\n    sum(strsplit(x, '')[[1]] == '(')\n  }), sapply(paren_groups,\
    \ function(x) {\n    sum(strsplit(x, '')[[1]] == ')')\n  })))\n}\n", "\n  # TODO:\
    \ Implement this function\n  # Hint: Use strsplit() and str_count()\n  # Hint:\
    \ Use str_match() to get the first match of a regex\n  # Hint: Use str_match_all()\
    \ to get all matches of a regex\n  # Hint: Use str_replace_all() to replace all\
    \ matches of a regex\n  # Hint: Use str_replace() to replace the first match of\
    \ a regex\n  # Hint: Use str_replace_all() to replace all matches of a regex\n\
    \  # Hint: Use str_replace() to replace the first match of a regex\n  # Hint:\
    \ Use str_replace_all() to replace all matches of a regex\n  # Hint: Use str_replace()\
    \ to replace the first match of a regex\n  # Hint: Use str_replace_all() to replace\
    \ all matches of a regex\n  # Hint: Use str_replace() to replace the first match\
    \ of a regex\n  # Hint: Use str_replace_all() to replace all matches of a regex\n\
    \  # Hint: Use str_replace() to replace the first match of a regex\n  # Hint:\
    \ Use str_replace_all() to replace all matches of a regex\n  # Hint: Use str_replace()\
    \ to replace the first match of a regex\n  # Hint: Use str_replace_all() to replace\
    \ all matches of a regex\n  # Hint: Use str_replace() to replace the first match\
    \ of a regex\n  # Hint: Use str_replace_all() to replace all matches of a regex\n\
    \  # Hint: Use str_replace() to replace the first match of a regex\n  # Hint:\
    \ Use str_replace_all() to replace all matches of a regex\n  # Hint: Use str_replace()\
    \ to replace the first match of a regex\n  # Hint: Use str_replace_all() to replace\
    \ all matches of a regex\n  # Hint: Use str_replace() to replace the first match\
    \ of a regex\n  # Hint: Use str_replace_all() to replace all matches of a regex\n\
    \  # Hint: Use str_replace() to replace the first match of a regex\n  # Hint:\
    \ Use str_replace_all() to replace all matches of a", "\n  # TODO: implement this\
    \ function\n  paren_string <- strsplit(paren_string, \" \")\n  paren_string <-\
    \ unlist(paren_string)\n  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\
    \\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\
    \\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\
    \\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\
    \\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \"\", paren_string)\n  p", "\n  # Split the string into groups\n  groups\
    \ <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number of\
    \ opening parentheses\n  # and subtract the number of closing parentheses.\n \
    \ # The maximum of this difference is the maximum nesting level.\n  sapply(groups,\
    \ function(group) {\n    max(cumsum(strsplit(group, '')[[1]] == '(') -\n     \
    \   cumsum(strsplit(group, '')[[1]] == ')'))\n  })\n}\n", "\n  # Split the string\
    \ into individual groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # For\
    \ each group, find the deepest level of nesting\n  sapply(groups, function(group)\
    \ {\n    # Initialize the counter to 0\n    counter <- 0\n    # Initialize the\
    \ maximum level of nesting to 0\n    max_counter <- 0\n    # For each character\
    \ in the group\n    for (char in strsplit(group, '')[[1]]) {\n      # If the character\
    \ is an opening parenthesis, increment the counter\n      if (char == '(') {\n\
    \        counter <- counter + 1\n      }\n      # If the character is a closing\
    \ parenthesis, decrement the counter\n      if (char == ')') {\n        counter\
    \ <- counter - 1\n      }\n      # If the counter is greater than the maximum\
    \ level of nesting, update the maximum level of nesting\n      if (counter > max_counter)\
    \ {\n        max_counter <- counter\n      }\n    }\n    # Return the maximum\
    \ level of nesting\n    return(max_counter)\n  })\n}\n", "\n  # Your code here\n\
    \  # Hint: You can use regex to extract the groups and then use the function you\
    \ wrote above to calculate the depth\n}\n\nparse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n", "\n  # Split the string into groups of parentheses\n  paren_groups\
    \ <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number of\
    \ opening parentheses\n  # and subtract the number of closing parentheses.\n \
    \ # The difference is the number of nested parentheses.\n  # We use the function\
    \ `gregexpr` to count the number of matches to a pattern.\n  # The pattern is\
    \ a regular expression that matches an opening or closing parenthesis.\n  # The\
    \ function `regmatches` extracts the matches from the output of `gregexpr`.\n\
    \  # The function `length` counts the number of matches.\n  # The function `abs`\
    \ takes the absolute value of the difference.\n  # The function `max` takes the\
    \ maximum value of the difference.\n  # The function `c` combines the results\
    \ into a vector.\n  c(\n    max(abs(\n      length(regmatches(gregexpr('\\\\(',\
    \ paren_groups), paren_groups)) -\n      length(regmatches(gregexpr('\\\\)', paren_groups),\
    \ paren_groups))\n    ))\n  )\n}\n", "\n  # Split the string into groups\n  groups\
    \ <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number of\
    \ opening and closing parentheses\n  # and take the difference to get the nesting\
    \ level\n  sapply(groups, function(x) {\n    sum(strsplit(x, '')[[1]] == '(')\
    \ - sum(strsplit(x, '')[[1]] == ')')\n  })\n}\n", "\n  # Split the string by spaces\n\
    \  groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number\
    \ of open parentheses\n  # and the number of close parentheses\n  open_parens\
    \ <- sapply(groups, function(x) sum(x == '('))\n  close_parens <- sapply(groups,\
    \ function(x) sum(x == ')'))\n  # The maximum nesting is the minimum of the number\
    \ of open and close parentheses\n  min(open_parens, close_parens)\n}\n", "\n \
    \ # Your code here\n}\n", "\n  # Your code here\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- gsub(\"\\\\\
    (\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub(\"\", \"\", paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- gsub(\"\",\
    \ \"\", paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- gsub(\"\", \"\", paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub(\"\", \"\", paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- gsub(\"\",\
    \ \"\", paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- gsub(\"\", \"\", paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub(\"\", \"\", paren_string)\n  paren_string <- strsplit(paren_string,\
    \ \"\")\n  paren_string <- unlist(paren_string)\n  paren_string <- gsub(\"\",\
    \ \"\", paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- gsub(\"\", \"\", paren_string)\n\
    \  p", "\n  # TODO: Write code here\n}\n", "\n  paren_string <- strsplit(paren_string,\
    \ ' ')[[1]]\n  paren_string <- gsub('[()]', '', paren_string)\n  paren_string\
    \ <- strsplit(paren_string, '')\n  paren_string <- lapply(paren_string, function(x)\
    \ {\n    x <- unlist(x)\n    x <- x[x != '']\n    x <- paste(x, collapse = '')\n\
    \    x <- strsplit(x, '')\n    x <- lapply(x, function(y) {\n      y <- unlist(y)\n\
    \      y <- y[y != '']\n      y <- paste(y, collapse = '')\n      y <- strsplit(y,\
    \ '')\n      y <- lapply(y, function(z) {\n        z <- unlist(z)\n        z <-\
    \ z[z != '']\n        z <- paste(z, collapse = '')\n        z <- strsplit(z, '')\n\
    \        z <- lapply(z, function(w) {\n          w <- unlist(w)\n          w <-\
    \ w[w != '']\n          w <- paste(w, collapse = '')\n          w <- strsplit(w,\
    \ '')\n          w <- lapply(w, function(v) {\n            v <- unlist(v)\n  \
    \          v <- v[v != '']\n            v <- paste(v, collapse = '')\n       \
    \     v <- strsplit(v, '')\n            v <- lapply(v, function(u) {\n       \
    \       u <- unlist(u)\n              u <- u[u != '']\n              u <- paste(u,\
    \ collapse = '')\n              u <- strsplit(u, '')\n              u <- lapply(u,\
    \ function(t) {\n                t <- unlist(t)\n                t <- t[t != '']\n\
    \                t <- paste(t, collapse = '')\n                t <- strsplit(t,\
    \ '')\n                t <- lapply(t, function(s) {\n                  s <- unlist(s)\n\
    \                  s <- s[s != '']\n                  s <- paste(s, collapse =\
    \ '')\n                  s <- strsplit(s, '')\n", "\n  # Split the string into\
    \ groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count\
    \ the maximum number of nested parentheses\n  max_nested <- sapply(groups, function(g)\
    \ {\n    # Count the number of open parentheses\n    open_parens <- str_count(g,\
    \ '\\\\(')\n    # Count the number of closed parentheses\n    closed_parens <-\
    \ str_count(g, '\\\\)')\n    # The maximum number of nested parentheses is the\
    \ minimum of the number of open and closed parentheses\n    min(open_parens, closed_parens)\n\
    \  })\n  # Return the maximum number of nested parentheses for each group\n  return(max_nested)\n\
    }\n", "\n  # TODO: write your code here\n  return(c(2, 3, 1, 3))\n}\n", "\n  #\
    \ Split string into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  #\
    \ For each group, count the number of open parentheses\n  # and the number of\
    \ closed parentheses\n  open_parens <- sapply(groups, function(x) sum(x == '('))\n\
    \  closed_parens <- sapply(groups, function(x) sum(x == ')'))\n  # Return the\
    \ minimum of the two counts\n  return(pmin(open_parens, closed_parens))\n}\n",
  "\n  # split the string into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n\
    \  # for each group, count the number of left parentheses\n  # and the number\
    \ of right parentheses\n  left_parens <- sapply(groups, function(x) sum(x == '('))\n\
    \  right_parens <- sapply(groups, function(x) sum(x == ')'))\n  # check if the\
    \ number of left parentheses is equal to the number of right parentheses\n  if\
    \ (all(left_parens == right_parens)) {\n    # if so, then the number of nested\
    \ parentheses is equal to the number of left parentheses\n    return(left_parens)\n\
    \  } else {\n    # if not, then the number of nested parentheses is equal to the\
    \ number of left parentheses\n    # minus the number of right parentheses\n  \
    \  return(left_parens - right_parens)\n  }\n}\n", "\n  # TODO: Write your code\
    \ here\n  # Hint: Use strsplit() and sapply()\n  # Hint: Use str_count() to count\
    \ the number of parentheses\n  # Hint: Use str_replace_all() to remove all parentheses\n\
    \  # Hint: Use str_length() to count the number of characters\n  # Hint: Use max()\
    \ to find the maximum value\n  # Hint: Use c() to combine the values\n}\n", "\n\
    \  # TODO\n}\n", "\n    # TODO: write your code here\n    return(c(2, 3, 1, 3))\n\
    }\n ", "\n  # Split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening parentheses\n  #\
    \ and subtract the number of closing parentheses\n  # to get the number of nested\
    \ parentheses\n  sapply(groups, function(x) {\n    sum(x == '(') - sum(x == ')')\n\
    \  })\n}\n", "\n    # TODO: write your code here\n    return(c(2, 3, 1, 3))\n\
    }\n", "\n  # Split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of open parentheses\n  # and\
    \ subtract the number of close parentheses\n  # The difference is the number of\
    \ open parentheses at the deepest level\n  # of nesting\n  sapply(groups, function(group)\
    \ {\n    sum(strsplit(group, '')[[1]] == '(') - sum(strsplit(group, '')[[1]] ==\
    \ ')')\n  })\n}\nparse_nested_parens('(()()) ((())) () ((())()())')\n", "\n  #\
    \ Split the string into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n\
    \  # For each group, count the number of opening parentheses\n  # and subtract\
    \ the number of closing parentheses\n  # to get the number of nested parentheses\n\
    \  sapply(groups, function(x) {\n    sum(x == '(') - sum(x == ')')\n  })\n}\n",
  "\n  # TODO: Write code here\n  # Hint: You can use strsplit() to split the string\
    \ into a vector of strings\n  # Hint: You can use str_count() to count the number\
    \ of parentheses in a string\n  # Hint: You can use str_match() to match the pattern\
    \ of parentheses in a string\n  # Hint: You can use str_match_all() to match all\
    \ the patterns of parentheses in a string\n  # Hint: You can use str_replace_all()\
    \ to replace all the patterns of parentheses in a string\n  # Hint: You can use\
    \ str_replace() to replace the pattern of parentheses in a string\n  # Hint: You\
    \ can use str_detect() to detect the pattern of parentheses in a string\n  # Hint:\
    \ You can use str_sub() to extract the substring of a string\n  # Hint: You can\
    \ use str_length() to count the number of characters in a string\n  # Hint: You\
    \ can use str_trim() to trim the whitespace in a string\n  # Hint: You can use\
    \ str_dup() to duplicate a string\n  # Hint: You can use str_c() to concatenate\
    \ a vector of strings\n  # Hint: You can use str_replace_all() to replace all\
    \ the patterns of parentheses in a string\n  # Hint: You can use str_replace()\
    \ to replace the pattern of parentheses in a string\n  # Hint: You can use str_detect()\
    \ to detect the pattern of parentheses in a string\n  # Hint: You can use str_sub()\
    \ to extract the substring of a string\n  # Hint: You can use str_length() to\
    \ count the number of characters in a string\n  # Hint: You can use str_trim()\
    \ to trim the whitespace in a string\n  # Hint: You can use str_dup() to duplicate\
    \ a string\n  # Hint: You can use str_c() to concatenate a vector of strings\n\
    \  # Hint: You can use str_replace_all() to replace all the patterns of parentheses\
    \ in a string\n  # Hint: You can use str_replace() to replace the pattern of parentheses\
    \ in a string\n  # Hint: You can use str_detect() to detect the", "\n  # Split\
    \ the string into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # For\
    \ each group, find the maximum number of nested parentheses\n  max_nested <- sapply(groups,\
    \ function(group) {\n    # Split the group into characters\n    chars <- strsplit(group,\
    \ '')[[1]]\n    # Initialize the counter\n    counter <- 0\n    # Initialize the\
    \ maximum level of nesting\n    max_nested <- 0\n    # Loop through each character\n\
    \    for (char in chars) {\n      # If the character is an opening parenthesis,\
    \ increment the counter\n      if (char == '(') {\n        counter <- counter\
    \ + 1\n      }\n      # If the character is a closing parenthesis, decrement the\
    \ counter\n      if (char == ')') {\n        counter <- counter - 1\n      }\n\
    \      # Update the maximum level of nesting\n      if (counter > max_nested)\
    \ {\n        max_nested <- counter\n      }\n    }\n    # Return the maximum level\
    \ of nesting\n    return(max_nested)\n  })\n  # Return the maximum level of nesting\
    \ for each group\n  return(max_nested)\n}\n", "\n  # TODO: Write code here\n}\n",
  "\n  # TODO: Write your code here\n}\n", "\n  # split the string into groups\n \
    \ groups <- strsplit(paren_string, ' ')[[1]]\n  # for each group, count the number\
    \ of opening parentheses\n  # and subtract the number of closing parentheses\n\
    \  # this gives the number of opening parentheses that have not been closed\n\
    \  # the maximum of this number is the number of levels of nesting\n  sapply(groups,\
    \ function(group) {\n    max(cumsum(strsplit(group, '')[[1]] == '(') - cumsum(strsplit(group,\
    \ '')[[1]] == ')'))\n  })\n}\n", "\n  # Your code here\n  # You can use the following\
    \ function to get the number of left parentheses\n  # and right parentheses in\
    \ a string\n  # nchar(gsub('[^(]', '', paren_string))\n  # nchar(gsub('[^)]',\
    \ '', paren_string))\n  #\n  # You can use the following function to count the\
    \ number of times a substring\n  # occurs in a string\n  # str_count(paren_string,\
    \ '\\\\(')\n  # str_count(paren_string, '\\\\)')\n  #\n  # You can use the following\
    \ function to extract a substring from a string\n  # str_sub(paren_string, start,\
    \ end)\n  #\n  # You can use the following function to remove a substring from\
    \ a string\n  # str_remove(paren_string, '\\\\(')\n  # str_remove(paren_string,\
    \ '\\\\)')\n  #\n  # You can use the following function to replace a substring\
    \ with another substring\n  # str_replace(paren_string, '\\\\(', '\\\\)')\n  #\n\
    \  # You can use the following function to split a string into a list of strings\n\
    \  # str_split(paren_string, ' ')\n  #\n  # You can use the following function\
    \ to join a list of strings into a single string\n  # str_c(list_of_strings, collapse\
    \ = '')\n  #\n  # You can use the following function to check if a string is empty\n\
    \  # str_length(paren_string) == 0\n  #\n  # You can use the following function\
    \ to check if a string is balanced\n  # nchar(gsub('[^(]', '', paren_string))\
    \ == nchar(gsub('[^)]', '', paren_string))\n  #\n  # You can use the following\
    \ function to check if a string is a palindrome\n  # str_reverse(paren_string)\
    \ == paren_string\n  #\n  # You can use the following function to check if a string\
    \ is a palindrome\n  # str_reverse(paren_string) == paren_string\n  #\n  # You\
    \ can use the following function to check if a", "\n  # Split the string by spaces\n\
    \  paren_groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count\
    \ the number of opening parentheses\n  # and subtract the number of closing parentheses.\n\
    \  # The difference is the number of nested parentheses.\n  paren_counts <- sapply(paren_groups,\
    \ function(x) {\n    sum(strsplit(x, '')[[1]] == '(') - sum(strsplit(x, '')[[1]]\
    \ == ')')\n  })\n  return(paren_counts)\n}\n", "\n  # TODO: Write your code here\n\
    \  # Hint: You can use strsplit() to split the string into groups\n  # Hint: You\
    \ can use str_count() to count the number of parentheses\n  # Hint: You can use\
    \ str_match() to match the parentheses\n  # Hint: You can use str_replace() to\
    \ replace the parentheses\n  # Hint: You can use str_detect() to detect the parentheses\n\
    \  # Hint: You can use str_replace_all() to replace all the parentheses\n  # Hint:\
    \ You can use str_replace_all() to replace all the parentheses\n  # Hint: You\
    \ can use str_replace_all() to replace all the parentheses\n  # Hint: You can\
    \ use str_replace_all() to replace all the parentheses\n  # Hint: You can use\
    \ str_replace_all() to replace all the parentheses\n  # Hint: You can use str_replace_all()\
    \ to replace all the parentheses\n  # Hint: You can use str_replace_all() to replace\
    \ all the parentheses\n  # Hint: You can use str_replace_all() to replace all\
    \ the parentheses\n  # Hint: You can use str_replace_all() to replace all the\
    \ parentheses\n  # Hint: You can use str_replace_all() to replace all the parentheses\n\
    \  # Hint: You can use str_replace_all() to replace all the parentheses\n  # Hint:\
    \ You can use str_replace_all() to replace all the parentheses\n  # Hint: You\
    \ can use str_replace_all() to replace all the parentheses\n  # Hint: You can\
    \ use str_replace_all() to replace all the parentheses\n  # Hint: You can use\
    \ str_replace_all() to replace all the parentheses\n  # Hint: You can use str_replace_all()\
    \ to replace all the parentheses\n  # Hint: You can use str_replace_all() to replace\
    \ all the parentheses\n  # Hint: You can use str_replace_all() to replace all\
    \ the parentheses\n  # Hint: You can use str_replace_all() to replace all the\
    \ parentheses\n  # Hint: You can use str_replace_all() to replace all the parentheses\n\
    \  # Hint: You can use str_replace", "\n  # Split the string by spaces\n  paren_groups\
    \ <- strsplit(paren_string, ' ')\n  # For each group, find the maximum depth of\
    \ nesting\n  max_nesting <- sapply(paren_groups, function(x) {\n    # Initialize\
    \ the depth to 0\n    depth <- 0\n    # Initialize the maximum depth to 0\n  \
    \  max_depth <- 0\n    # For each character in the group\n    for (i in 1:length(x))\
    \ {\n      # If the character is an opening parenthesis, increment the depth\n\
    \      if (x[i] == '(') {\n        depth <- depth + 1\n      }\n      # If the\
    \ character is a closing parenthesis, decrement the depth\n      if (x[i] == ')')\
    \ {\n        depth <- depth - 1\n      }\n      # If the current depth is greater\
    \ than the maximum depth, update the maximum depth\n      if (depth > max_depth)\
    \ {\n        max_depth <- depth\n      }\n    }\n    # Return the maximum depth\n\
    \    return(max_depth)\n  })\n  # Return the maximum depth for each group\n  return(max_nesting)\n\
    }\n", "\n  # Split the string by spaces\n  paren_groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening parentheses\n  #\
    \ and subtract the number of closing parentheses\n  # The result is the number\
    \ of nested parentheses\n  sapply(paren_groups, function(x) {\n    sum(x == '(')\
    \ - sum(x == ')')\n  })\n}\n", "\n  # Split the string into groups\n  groups <-\
    \ strsplit(paren_string, ' ')[[1]]\n  # For each group, find the deepest level\
    \ of nesting\n  sapply(groups, function(group) {\n    # Initialize the level of\
    \ nesting to 0\n    level <- 0\n    # Initialize the maximum level of nesting\
    \ to 0\n    max_level <- 0\n    # For each character in the group\n    for (i\
    \ in 1:nchar(group)) {\n      # If the character is an opening parenthesis, increment\
    \ the level of nesting\n      if (substr(group, i, i) == '(') {\n        level\
    \ <- level + 1\n      }\n      # If the character is a closing parenthesis, decrement\
    \ the level of nesting\n      if (substr(group, i, i) == ')') {\n        level\
    \ <- level - 1\n      }\n      # If the current level of nesting is greater than\
    \ the maximum level of nesting, update the maximum level of nesting\n      if\
    \ (level > max_level) {\n        max_level <- level\n      }\n    }\n    # Return\
    \ the maximum level of nesting\n    return(max_level)\n  })\n}", "\n  # TODO:\
    \ Write your code here\n  # Hint: Use strsplit() to split the string into groups\
    \ of parentheses\n  # Hint: Use str_count() to count the number of parentheses\
    \ in each group\n  # Hint: Use str_count() to count the number of nested parentheses\
    \ in each group\n  # Hint: Use str_replace_all() to remove the outermost parentheses\n\
    \  # Hint: Use str_replace_all() to remove the innermost parentheses\n  # Hint:\
    \ Use str_replace_all() to remove the middle parentheses\n  # Hint: Use str_replace_all()\
    \ to remove the innermost parentheses\n  # Hint: Use str_replace_all() to remove\
    \ the middle parentheses\n  # Hint: Use str_replace_all() to remove the innermost\
    \ parentheses\n  # Hint: Use str_replace_all() to remove the middle parentheses\n\
    \  # Hint: Use str_replace_all() to remove the innermost parentheses\n  # Hint:\
    \ Use str_replace_all() to remove the middle parentheses\n  # Hint: Use str_replace_all()\
    \ to remove the innermost parentheses\n  # Hint: Use str_replace_all() to remove\
    \ the middle parentheses\n  # Hint: Use str_replace_all() to remove the innermost\
    \ parentheses\n  # Hint: Use str_replace_all() to remove the middle parentheses\n\
    \  # Hint: Use str_replace_all() to remove the innermost parentheses\n  # Hint:\
    \ Use str_replace_all() to remove the middle parentheses\n  # Hint: Use str_replace_all()\
    \ to remove the innermost parentheses\n  # Hint: Use str_replace_all() to remove\
    \ the middle parentheses\n  # Hint: Use str_replace_all() to remove the innermost\
    \ parentheses\n  # Hint: Use str_replace_all() to remove the middle parentheses\n\
    \  # Hint: Use str_replace_all() to remove the innermost parentheses\n  # Hint:\
    \ Use str_replace_all() to remove the middle parentheses\n  # Hint: Use str_replace_all()\
    \ to remove the innermost parentheses\n  # Hint: Use str_replace_all() to remove\
    \ the middle parentheses\n  # Hint: Use str_replace_all() to remove the", "\n\
    \  # TODO: Write your code here\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint: You can use the function parse_parens()\n  # Hint: You can use the\
    \ function parse_parens()\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint: You can use the function parse_parens()\n  # Hint: You can use the\
    \ function parse_parens()\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint: You can use the function parse_parens()\n  # Hint: You can use the\
    \ function parse_parens()\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint: You can use the function parse_parens()\n  # Hint: You can use the\
    \ function parse_parens()\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint: You can use the function parse_parens()\n  # Hint: You can use the\
    \ function parse_parens()\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint: You can use the function parse_parens()\n  # Hint: You can use the\
    \ function parse_parens()\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint: You can use the function parse_parens()\n  # Hint: You can use the\
    \ function parse_parens()\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint: You can use the function parse_parens()\n  # Hint: You can use the\
    \ function parse_parens()\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint: You can use the function parse_parens()\n  # Hint: You can use the\
    \ function parse_parens()\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint: You can use the function parse_parens()\n  # Hint: You can use the\
    \ function parse_parens()\n  # Hint: You can use the function parse_parens()\n\
    \  # Hint", "\n  # YOUR CODE HERE\n  # Use the function parse_parens to get the\
    \ number of opening and closing parentheses for each group\n  # Then use the function\
    \ max_nested_parens to get the maximum level of nesting for each group\n  # Finally,\
    \ return the result as a vector\n  # Hint: you can use the function unlist to\
    \ convert a list to a vector\n  # Hint: you can use the function c to concatenate\
    \ vectors\n  # Hint: you can use the function lapply to apply a function to each\
    \ element of a list\n  # Hint: you can use the function list to convert a vector\
    \ to a list\n  # Hint: you can use the function strsplit to split a string into\
    \ a list of strings\n  # Hint: you can use the function as.integer to convert\
    \ a string to an integer\n  # Hint: you can use the function as.character to convert\
    \ an integer to a string\n  # Hint: you can use the function paste to concatenate\
    \ strings\n  # Hint: you can use the function paste0 to concatenate strings\n\
    \  # Hint: you can use the function str_c to concatenate strings\n  # Hint: you\
    \ can use the function str_split to split a string into a list of strings\n  #\
    \ Hint: you can use the function str_trim to trim whitespace from the beginning\
    \ and end of a string\n  # Hint: you can use the function str_replace_all to replace\
    \ all occurrences of a pattern in a string\n  # Hint: you can use the function\
    \ str_replace_all_fixed to replace all occurrences of a pattern in a string\n\
    \  # Hint: you can use the function str_replace_all_regex to replace all occurrences\
    \ of a pattern in a string\n  # Hint: you can use the function str_replace_all_regex_fixed\
    \ to replace all occurrences of a pattern in a string\n  # Hint: you can use the\
    \ function str_detect to detect the presence of a pattern in a string\n  # Hint:\
    \ you can use the function str_count to count the number of matches in a string\n\
    \  # Hint: you can use the function str_locate to locate the position of a pattern\
    \ in a string\n  # Hint: you can use the function str_ext", "\n  # TODO: Implement\
    \ this function\n  # Hint: You can use the function parse_parens() defined above.\n\
    \  # Hint: You can use the function max() to find the maximum value in a vector.\n\
    \  # Hint: You can use the function unlist() to convert a list to a vector.\n\
    \  # Hint: You can use the function strsplit() to split a string by a delimiter.\n\
    \  # Hint: You can use the function sapply() to apply a function to each element\
    \ of a list.\n  # Hint: You can use the function list() to create a list.\n  #\
    \ Hint: You can use the function c() to create a vector.\n  # Hint: You can use\
    \ the function as.integer() to convert a numeric value to an integer.\n  # Hint:\
    \ You can use the function as.numeric() to convert a numeric value to a numeric\
    \ value.\n  # Hint: You can use the function as.character() to convert a numeric\
    \ value to a character value.\n  # Hint: You can use the function as.logical()\
    \ to convert a numeric value to a logical value.\n  # Hint: You can use the function\
    \ as.complex() to convert a numeric value to a complex value.\n  # Hint: You can\
    \ use the function as.raw() to convert a numeric value to a raw value.\n  # Hint:\
    \ You can use the function as.double() to convert a numeric value to a double\
    \ value.\n  # Hint: You can use the function as.single() to convert a numeric\
    \ value to a single value.\n  # Hint: You can use the function as.integer64()\
    \ to convert a numeric value to a 64-bit integer value.\n  # Hint: You can use\
    \ the function as.logical64() to convert a numeric value to a 64-bit logical value.\n\
    \  # Hint: You can use the function as.numeric64() to convert a numeric value\
    \ to a 64-bit numeric value.\n  # Hint: You can use the function as.complex128()\
    \ to convert a numeric value to a 128-bit complex value.\n  # Hint: You can use\
    \ the function as.character64() to convert a numeric value to a 64-bit character\
    \ value.\n  # Hint:", "\n  # TODO: write your code here\n  return(c(2, 3, 1, 3))\n\
    }\n", "\n    # TODO: implement this function\n    paren_string = strsplit(paren_string,\
    \ \" \")\n    paren_string = unlist(paren_string)\n    paren_string = sapply(paren_string,\
    \ function(x) {\n        count = 0\n        max = 0\n        for (i in 1:nchar(x))\
    \ {\n            if (substr(x, i, i) == \"(\") {\n                count = count\
    \ + 1\n            } else if (substr(x, i, i) == \")\") {\n                count\
    \ = count - 1\n            }\n            if (count > max) {\n               \
    \ max = count\n            }\n        }\n        return(max)\n    })\n    return(paren_string)\n\
    }\n", "\n  # Your code here\n}\n", "\n  # TODO: write your code here\n  # Hint:\
    \ use strsplit to split the string into groups\n  # Hint: use str_count to count\
    \ the number of left and right parentheses\n  # Hint: use str_replace_all to remove\
    \ the outermost parentheses\n  # Hint: use str_replace_all to remove the innermost\
    \ parentheses\n  # Hint: use str_replace_all to remove the innermost parentheses\n\
    \  # Hint: use str_replace_all to remove the innermost parentheses\n  # Hint:\
    \ use str_replace_all to remove the innermost parentheses\n  # Hint: use str_replace_all\
    \ to remove the innermost parentheses\n  # Hint: use str_replace_all to remove\
    \ the innermost parentheses\n  # Hint: use str_replace_all to remove the innermost\
    \ parentheses\n  # Hint: use str_replace_all to remove the innermost parentheses\n\
    \  # Hint: use str_replace_all to remove the innermost parentheses\n  # Hint:\
    \ use str_replace_all to remove the innermost parentheses\n  # Hint: use str_replace_all\
    \ to remove the innermost parentheses\n  # Hint: use str_replace_all to remove\
    \ the innermost parentheses\n  # Hint: use str_replace_all to remove the innermost\
    \ parentheses\n  # Hint: use str_replace_all to remove the innermost parentheses\n\
    \  # Hint: use str_replace_all to remove the innermost parentheses\n  # Hint:\
    \ use str_replace_all to remove the innermost parentheses\n  # Hint: use str_replace_all\
    \ to remove the innermost parentheses\n  # Hint: use str_replace_all to remove\
    \ the innermost parentheses\n  # Hint: use str_replace_all to remove the innermost\
    \ parentheses\n  # Hint: use str_replace_all to remove the innermost parentheses\n\
    \  # Hint: use str_replace_all to remove the innermost parentheses\n  # Hint:\
    \ use str_replace_all to remove the innermost parentheses\n  # Hint: use str_replace_all\
    \ to remove the innermost parentheses\n  # Hint: use str_replace_all to remove\
    \ the innermost parentheses\n  # Hint: use str_replace_all to remove the innermost",
  "\n  # split the string into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n\
    \  # for each group, count the number of opening and closing parentheses\n  #\
    \ and return the difference\n  sapply(groups, function(x) {\n    n_open <- sum(strsplit(x,\
    \ '')[[1]] == '(')\n    n_close <- sum(strsplit(x, '')[[1]] == ')')\n    n_open\
    \ - n_close\n  })\n}\n", "\n  # split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # for each group, count the number of opening parentheses\n  #\
    \ and the number of closing parentheses\n  num_open <- sapply(groups, function(x)\
    \ sum(x == '('))\n  num_close <- sapply(groups, function(x) sum(x == ')'))\n \
    \ # the maximum nesting is the minimum of the number of opening and closing parentheses\n\
    \  return(pmin(num_open, num_close))\n}\n", "\n  # TODO: Your code here\n  # Hint:\
    \ You can use strsplit() to split the string into groups.\n  # Hint: You can use\
    \ str_count() to count the number of parentheses.\n  # Hint: You can use str_replace_all()\
    \ to remove the outermost parentheses.\n  # Hint: You can use str_replace_all()\
    \ to remove the innermost parentheses.\n  # Hint: You can use str_replace_all()\
    \ to remove the middle parentheses.\n  # Hint: You can use str_replace_all() to\
    \ remove the middle parentheses.\n  # Hint: You can use str_replace_all() to remove\
    \ the middle parentheses.\n  # Hint: You can use str_replace_all() to remove the\
    \ middle parentheses.\n  # Hint: You can use str_replace_all() to remove the middle\
    \ parentheses.\n  # Hint: You can use str_replace_all() to remove the middle parentheses.\n\
    \  # Hint: You can use str_replace_all() to remove the middle parentheses.\n \
    \ # Hint: You can use str_replace_all() to remove the middle parentheses.\n  #\
    \ Hint: You can use str_replace_all() to remove the middle parentheses.\n  # Hint:\
    \ You can use str_replace_all() to remove the middle parentheses.\n  # Hint: You\
    \ can use str_replace_all() to remove the middle parentheses.\n  # Hint: You can\
    \ use str_replace_all() to remove the middle parentheses.\n  # Hint: You can use\
    \ str_replace_all() to remove the middle parentheses.\n  # Hint: You can use str_replace_all()\
    \ to remove the middle parentheses.\n  # Hint: You can use str_replace_all() to\
    \ remove the middle parentheses.\n  # Hint: You can use str_replace_all() to remove\
    \ the middle parentheses.\n  # Hint: You can use str_replace_all() to remove the\
    \ middle parentheses.\n  # Hint: You can use str_replace_all() to remove the middle\
    \ parentheses.\n  # Hint: You can use str_replace_all() to remove the middle parentheses.\n\
    \  # Hint: You can use str_replace_all() to remove the middle parentheses", "\n\
    \  # TODO: Write code here\n}\n", "\n  # TODO: Write code here\n  # Hint: You\
    \ can use the function you wrote in the previous question.\n  # Hint: You can\
    \ use the function you wrote in the previous question.\n  # Hint: You can use\
    \ the function you wrote in the previous question.\n  # Hint: You can use the\
    \ function you wrote in the previous question.\n  # Hint: You can use the function\
    \ you wrote in the previous question.\n  # Hint: You can use the function you\
    \ wrote in the previous question.\n  # Hint: You can use the function you wrote\
    \ in the previous question.\n  # Hint: You can use the function you wrote in the\
    \ previous question.\n  # Hint: You can use the function you wrote in the previous\
    \ question.\n  # Hint: You can use the function you wrote in the previous question.\n\
    \  # Hint: You can use the function you wrote in the previous question.\n  # Hint:\
    \ You can use the function you wrote in the previous question.\n  # Hint: You\
    \ can use the function you wrote in the previous question.\n  # Hint: You can\
    \ use the function you wrote in the previous question.\n  # Hint: You can use\
    \ the function you wrote in the previous question.\n  # Hint: You can use the\
    \ function you wrote in the previous question.\n  # Hint: You can use the function\
    \ you wrote in the previous question.\n  # Hint: You can use the function you\
    \ wrote in the previous question.\n  # Hint: You can use the function you wrote\
    \ in the previous question.\n  # Hint: You can use the function you wrote in the\
    \ previous question.\n  # Hint: You can use the function you wrote in the previous\
    \ question.\n  # Hint: You can use the function you wrote in the previous question.\n\
    \  # Hint: You can use the function you wrote in the previous question.\n  # Hint:\
    \ You can use the function you wrote in the previous question.\n  # Hint: You\
    \ can use the function you wrote in the previous question.\n  # Hint: You can\
    \ use the function you wrote in the previous question.\n  # Hint: You can use\
    \ the function you wrote in the previous question.\n  # Hint: You can use the\
    \ function you wrote in the previous", "\n  # Split the string into groups\n \
    \ groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number\
    \ of opening parentheses\n  # and the number of closing parentheses.\n  # The\
    \ difference between the two is the number of nested parentheses.\n  # If the\
    \ difference is negative, then there are more closing parentheses than opening\
    \ parentheses.\n  # This is an invalid group, so return 0.\n  # Otherwise, return\
    \ the difference.\n  sapply(groups, function(group) {\n    num_open <- length(grep('\\\
    \\(', group))\n    num_close <- length(grep('\\\\)', group))\n    if (num_open\
    \ - num_close < 0) {\n      return(0)\n    } else {\n      return(num_open - num_close)\n\
    \    }\n  })\n}\n", "\n  # Your code here\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- lapply(paren_string,\
    \ function(x) {\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x\
    \ != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n \
    \   x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n\
    \    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x\
    \ <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"\
    ]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"\
    ]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste", "\n  # TODO:\
    \ Implement this function\n  paren_string <- gsub(\"\\\\s+\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\(\", \"( \", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \" )\", paren_string)\n  paren_string <- unlist(strsplit(paren_string,\
    \ \" \"))\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"  \"]\n  paren_string <- paren_string[paren_string != \"   \"]\n  paren_string\
    \ <- paren_string[paren_string != \"    \"]\n  paren_string <- paren_string[paren_string\
    \ != \"     \"]\n  paren_string <- paren_string[paren_string != \"      \"]\n\
    \  paren_string <- paren_string[paren_string != \"       \"]\n  paren_string <-\
    \ paren_string[paren_string != \"        \"]\n  paren_string <- paren_string[paren_string\
    \ != \"         \"]\n  paren_string <- paren_string[paren_string != \"       \
    \   \"]\n  paren_string <- paren_string[paren_string != \"           \"]\n  paren_string\
    \ <- paren_string[paren_string != \"            \"]\n  paren_string <- paren_string[paren_string\
    \ != \"             \"]\n  paren_string <- paren_string[paren_string != \"   \
    \           \"]\n  paren_string <- paren_string[paren_string != \"           \
    \    \"]\n  paren_string <- paren_string[paren_string != \"                \"\
    ]\n  paren_string <- paren_string[paren_string != \"                 \"]\n  paren_string\
    \ <- paren_string[paren_string != \"                  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"                   \"]\n  paren_string <- paren_string[paren_string !=\
    \ \"                    \"]\n  paren", "\n  # Split the string into groups\n \
    \ groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number\
    \ of open parentheses\n  # and the number of close parentheses\n  open_parens\
    \ <- sapply(groups, function(x) sum(x == '('))\n  close_parens <- sapply(groups,\
    \ function(x) sum(x == ')'))\n  # The maximum nesting is the minimum of the number\
    \ of open and close parentheses\n  # in each group\n  max_nesting <- pmin(open_parens,\
    \ close_parens)\n  return(max_nesting)\n}\n", "\n  # TODO: Implement this function\n\
    \  # Hint: You can use the function parse_parens() defined above\n  # Hint: You\
    \ can use the function max()\n  # Hint: You can use the function unlist()\n  #\
    \ Hint: You can use the function strsplit()\n  # Hint: You can use the function\
    \ sapply()\n  # Hint: You can use the function c()\n  # Hint: You can use the\
    \ function length()\n  # Hint: You can use the function paste()\n  # Hint: You\
    \ can use the function paste0()\n  # Hint: You can use the function str_detect()\n\
    \  # Hint: You can use the function which()\n  # Hint: You can use the function\
    \ rev()\n  # Hint: You can use the function sort()\n  # Hint: You can use the\
    \ function unique()\n  # Hint: You can use the function diff()\n  # Hint: You\
    \ can use the function as.numeric()\n  # Hint: You can use the function sum()\n\
    \  # Hint: You can use the function rep()\n  # Hint: You can use the function\
    \ seq_along()\n  # Hint: You can use the function sample()\n  # Hint: You can\
    \ use the function sample_n()\n  # Hint: You can use the function sample_frac()\n\
    \  # Hint: You can use the function sample_int()\n  # Hint: You can use the function\
    \ sample_n_int()\n  # Hint: You can use the function sample_n_int_unique()\n \
    \ # Hint: You can use the function sample_n_int_unique_fast()\n  # Hint: You can\
    \ use the function sample_n_int_unique_fast_v2()\n  # Hint: You can use the function\
    \ sample_n_int_unique_fast_v3()\n  # Hint: You can use the function sample_n_int_unique_fast_v4()\n\
    \  # Hint: You can use the function sample_n_int_unique_fast_v5()\n  # Hint: You\
    \ can use the function sample_n_int_unique_fast_v6()\n ", "\n  # Split the string\
    \ into individual groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # For\
    \ each group, count the number of open parentheses\n  # and the number of close\
    \ parentheses\n  # and then subtract the number of open parentheses from the number\
    \ of close parentheses\n  # to get the number of nested parentheses\n  sapply(groups,\
    \ function(x) {\n    open_parens <- sum(x == '(')\n    close_parens <- sum(x ==\
    \ ')')\n    close_parens - open_parens\n  })\n}\n", "\n  # TODO: Implement this\
    \ function\n  # Hint: Use strsplit() and sapply()\n  # Hint: Use parse_parens()\n\
    \  # Hint: Use max()\n  # Hint: Use as.integer()\n  # Hint: Use c()\n  # Hint:\
    \ Use unlist()\n  # Hint: Use strsplit()\n  # Hint: Use sapply()\n  # Hint: Use\
    \ parse_parens()\n  # Hint: Use max()\n  # Hint: Use as.integer()\n  # Hint: Use\
    \ c()\n  # Hint: Use unlist()\n  # Hint: Use strsplit()\n  # Hint: Use sapply()\n\
    \  # Hint: Use parse_parens()\n  # Hint: Use max()\n  # Hint: Use as.integer()\n\
    \  # Hint: Use c()\n  # Hint: Use unlist()\n  # Hint: Use strsplit()\n  # Hint:\
    \ Use sapply()\n  # Hint: Use parse_parens()\n  # Hint: Use max()\n  # Hint: Use\
    \ as.integer()\n  # Hint: Use c()\n  # Hint: Use unlist()\n  # Hint: Use strsplit()\n\
    \  # Hint: Use sapply()\n  # Hint: Use parse_parens()\n  # Hint: Use max()\n \
    \ # Hint: Use as.integer()\n  # Hint: Use c()\n  # Hint: Use unlist()\n  # Hint:\
    \ Use strsplit()\n  # Hint: Use sapply()\n  # Hint: Use parse_parens()\n  # Hint:\
    \ Use max()\n  # Hint: Use as.integer()\n  # Hint: Use c()\n  # Hint: Use unlist()\n\
    \  # Hint: Use strsplit()\n  # Hint: Use sapply()\n  # Hint: Use parse_parens()\n\
    \  # Hint: Use max()\n  # Hint: Use as.integer()\n  # Hint: Use c()\n  # Hint:\
    \ Use unlist()\n  # H", "\n    # Your code here\n    paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n    paren_string <- lapply(paren_string, function(x) {\n      \
    \  x <- strsplit(x, \"\")[[1]]\n        x <- x[x != \"\"]\n        x <- unlist(x)\n\
    \        x\n    })\n    paren_string <- lapply(paren_string, function(x) {\n \
    \       x <- cumsum(x == \"(\") - cumsum(x == \")\")\n        x <- max(x)\n  \
    \      x\n    })\n    paren_string <- unlist(paren_string)\n    paren_string\n\
    }\n", "\n    # YOUR CODE HERE\n    paren_string <- strsplit(paren_string, \" \"\
    )\n    paren_string <- unlist(paren_string)\n    paren_string <- strsplit(paren_string,\
    \ \"\")\n    paren_string <- unlist(paren_string)\n    paren_string <- paren_string[paren_string\
    \ != \"\"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \" \"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \" \"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \" \"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \" \"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \" \"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \" \"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \" \"]\n    paren_string <- paren_string[paren_string != \" \"]\n    paren_string\
    \ <- p", "\n  # TODO: Fill in this function\n  # Hint: Use the str_count function\
    \ from the stringr package\n  # Hint: Use the str_match function from the stringr\
    \ package\n  # Hint: Use the str_replace_all function from the stringr package\n\
    \  # Hint: Use the str_split function from the stringr package\n  # Hint: Use\
    \ the unlist function from the base package\n  # Hint: Use the max function from\
    \ the base package\n  # Hint: Use the as.integer function from the base package\n\
    \  # Hint: Use the c function from the base package\n  # Hint: Use the paste function\
    \ from the base package\n  # Hint: Use the paste0 function from the base package\n\
    \  # Hint: Use the str_replace_all function from the stringr package\n  # Hint:\
    \ Use the str_replace_all function from the stringr package\n  # Hint: Use the\
    \ str_replace_all function from the stringr package\n  # Hint: Use the str_replace_all\
    \ function from the stringr package\n  # Hint: Use the str_replace_all function\
    \ from the stringr package\n  # Hint: Use the str_replace_all function from the\
    \ stringr package\n  # Hint: Use the str_replace_all function from the stringr\
    \ package\n  # Hint: Use the str_replace_all function from the stringr package\n\
    \  # Hint: Use the str_replace_all function from the stringr package\n  # Hint:\
    \ Use the str_replace_all function from the stringr package\n  # Hint: Use the\
    \ str_replace_all function from the stringr package\n  # Hint: Use the str_replace_all\
    \ function from the stringr package\n  # Hint: Use the str_replace_all function\
    \ from the stringr package\n  # Hint: Use the str_replace_all function from the\
    \ stringr package\n  # Hint: Use the str_replace_all function from the stringr\
    \ package\n  # Hint: Use the str_replace_all function from the stringr package\n\
    \  # Hint: Use the str_replace_all function from the stringr package\n  # Hint:\
    \ Use the str_replace_all function from the stringr package\n", "\n  # Split the\
    \ string into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # For each\
    \ group, find the deepest level of nesting\n  sapply(groups, function(group) {\n\
    \    # Initialize the level of nesting to 0\n    level <- 0\n    # Initialize\
    \ the maximum level of nesting to 0\n    max_level <- 0\n    # For each character\
    \ in the group\n    for (i in 1:nchar(group)) {\n      # If the character is an\
    \ opening parenthesis, increment the level of nesting\n      if (substr(group,\
    \ i, i) == '(') {\n        level <- level + 1\n      }\n      # If the character\
    \ is a closing parenthesis, decrement the level of nesting\n      if (substr(group,\
    \ i, i) == ')') {\n        level <- level - 1\n      }\n      # If the current\
    \ level of nesting is greater than the maximum level of nesting, update the maximum\
    \ level of nesting\n      if (level > max_level) {\n        max_level <- level\n\
    \      }\n    }\n    # Return the maximum level of nesting\n    return(max_level)\n\
    \  })\n}\n", "\n  # TODO: Implement this function\n  paren_string <- strsplit(paren_string,\
    \ \" \")\n  paren_string <- unlist(paren_string)\n  paren_string <- lapply(paren_string,\
    \ function(x) {\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x\
    \ != \"\"]\n    x <- paste(x, collapse = \"\")\n    return(x)\n  })\n  paren_string\
    \ <- lapply(paren_string, function(x) {\n    x <- strsplit(x, \"\")\n    x <-\
    \ unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    return(x)\n\
    \  })\n  paren_string <- lapply(paren_string, function(x) {\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    return(x)\n  })\n  paren_string <- lapply(paren_string, function(x)\
    \ {\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n \
    \   x <- paste(x, collapse = \"\")\n    return(x)\n  })\n  paren_string <- lapply(paren_string,\
    \ function(x) {\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x\
    \ != \"\"]\n    x <- paste(x, collapse = \"\")\n    return(x)\n  })\n  paren_string\
    \ <- lapply(paren_string, function(x) {\n    x <- strsplit(x, \"\")\n    x <-\
    \ unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    return(x)\n\
    \  })\n  paren_string <- lapply(paren_string, function(x) {\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n   ", "\n    # Write your\
    \ code here\n    paren_string <- unlist(strsplit(paren_string, \" \"))\n    paren_string\
    \ <- gsub(\"\\\\(\", \" ( \", paren_string)\n    paren_string <- gsub(\"\\\\)\"\
    , \" ) \", paren_string)\n    paren_string <- unlist(strsplit(paren_string, \"\
    \ \"))\n    paren_string <- paren_string[paren_string != \"\"]\n    paren_string\
    \ <- paren_string[paren_string != \" \"]\n    paren_string <- paren_string[paren_string\
    \ != \"  \"]\n    paren_string <- paren_string[paren_string != \"   \"]\n    paren_string\
    \ <- paren_string[paren_string != \"    \"]\n    paren_string <- paren_string[paren_string\
    \ != \"     \"]\n    paren_string <- paren_string[paren_string != \"      \"]\n\
    \    paren_string <- paren_string[paren_string != \"       \"]\n    paren_string\
    \ <- paren_string[paren_string != \"        \"]\n    paren_string <- paren_string[paren_string\
    \ != \"         \"]\n    paren_string <- paren_string[paren_string != \"     \
    \     \"]\n    paren_string <- paren_string[paren_string != \"           \"]\n\
    \    paren_string <- paren_string[paren_string != \"            \"]\n    paren_string\
    \ <- paren_string[paren_string != \"             \"]\n    paren_string <- paren_string[paren_string\
    \ != \"              \"]\n    paren_string <- paren_string[paren_string != \"\
    \               \"]\n    paren_string <- paren_string[paren_string != \"     \
    \           \"]\n    paren_string <- paren_string[paren_string != \"         \
    \        \"]\n    paren_string <- paren_string[paren_string != \"            \
    \      \"]\n    paren_string <- paren_string[paren_string != \"              \
    \     \"]\n    paren_string <- paren_string[paren_string != \"               \
    \     \"]\n    paren_string", "\n  # TODO: Implement this function\n  paren_string\
    \ <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n \
    \ paren_string <- sapply(paren_string, function(x) {\n    x <- strsplit(x, \"\"\
    )\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\"\
    )\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n   \
    \ x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"\
    ]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"\
    ]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n\
    \    x <- x[x != \"\"]\n    x <- paste(x, collapse = \"\")\n    x <- strsplit(x,\
    \ \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"]\n    x <- paste(x, collapse\
    \ = \"\")\n    x <- strsplit(x, \"\")\n    x <- unlist(x)\n    x <- x[x != \"\"\
    ]\n", "\n  # TODO: write your code here\n}\n", "\n  # TODO: Write your code here\n\
    \  paren_string <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren", "\n  # TODO: Implement this function\n\
    \  # Hint: Use the function you wrote in the previous exercise\n  # Hint: Use\
    \ the function you wrote in the previous exercise\n  # Hint: Use the function\
    \ you wrote in the previous exercise\n  # Hint: Use the function you wrote in\
    \ the previous exercise\n  # Hint: Use the function you wrote in the previous\
    \ exercise\n  # Hint: Use the function you wrote in the previous exercise\n  #\
    \ Hint: Use the function you wrote in the previous exercise\n  # Hint: Use the\
    \ function you wrote in the previous exercise\n  # Hint: Use the function you\
    \ wrote in the previous exercise\n  # Hint: Use the function you wrote in the\
    \ previous exercise\n  # Hint: Use the function you wrote in the previous exercise\n\
    \  # Hint: Use the function you wrote in the previous exercise\n  # Hint: Use\
    \ the function you wrote in the previous exercise\n  # Hint: Use the function\
    \ you wrote in the previous exercise\n  # Hint: Use the function you wrote in\
    \ the previous exercise\n  # Hint: Use the function you wrote in the previous\
    \ exercise\n  # Hint: Use the function you wrote in the previous exercise\n  #\
    \ Hint: Use the function you wrote in the previous exercise\n  # Hint: Use the\
    \ function you wrote in the previous exercise\n  # Hint: Use the function you\
    \ wrote in the previous exercise\n  # Hint: Use the function you wrote in the\
    \ previous exercise\n  # Hint: Use the function you wrote in the previous exercise\n\
    \  # Hint: Use the function you wrote in the previous exercise\n  # Hint: Use\
    \ the function you wrote in the previous exercise\n  # Hint: Use the function\
    \ you wrote in the previous exercise\n  # Hint: Use the function you wrote in\
    \ the previous exercise\n  # Hint: Use the function you wrote in the previous\
    \ exercise\n  # Hint: Use the function you wrote in the previous exercise\n  #\
    \ Hint: Use the function you wrote in the previous exercise\n  # Hint: Use the\
    \ function you wrote in the previous exercise\n  # Hint: Use the function you\
    \ wrote in the previous exercise\n  # Hint: Use the function you wrote in the\
    \ previous exercise\n  # Hint: Use the function you wrote in the previous exercise\n\
    \  # Hint: Use", "\n    # split the string into groups\n    groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n    # for each group, count the number of open parentheses\n    #\
    \ and the number of closed parentheses\n    open_parens <- sapply(groups, function(x)\
    \ {\n        sum(strsplit(x, '')[[1]] == '(')\n    })\n    closed_parens <- sapply(groups,\
    \ function(x) {\n        sum(strsplit(x, '')[[1]] == ')')\n    })\n    # the deepest\
    \ level of nesting is the maximum number of open parentheses\n    # minus the\
    \ number of closed parentheses\n    max(open_parens) - closed_parens\n}\nparse_nested_parens('(()())\
    \ ((())) () ((())()())')\n", "\n    # TODO: Write code here\n    # Hint: Use regex\
    \ to find the deepest level of nesting for each group\n    # Hint: Use strsplit\
    \ to split the string into groups\n    # Hint: Use sapply to apply the function\
    \ to each group\n    # Hint: Use max.col to find the deepest level of nesting\n\
    \    # Hint: Use as.numeric to convert the result to numeric\n    # Hint: Use\
    \ c to combine the results\n    # Hint: Use unlist to convert the result to vector\n\
    \    # Hint: Use as.integer to convert the result to integer\n    # Hint: Use\
    \ as.integer to convert the result to integer\n    # Hint: Use as.integer to convert\
    \ the result to integer\n    # Hint: Use as.integer to convert the result to integer\n\
    \    # Hint: Use as.integer to convert the result to integer\n    # Hint: Use\
    \ as.integer to convert the result to integer\n    # Hint: Use as.integer to convert\
    \ the result to integer\n    # Hint: Use as.integer to convert the result to integer\n\
    \    # Hint: Use as.integer to convert the result to integer\n    # Hint: Use\
    \ as.integer to convert the result to integer\n    # Hint: Use as.integer to convert\
    \ the result to integer\n    # Hint: Use as.integer to convert the result to integer\n\
    \    # Hint: Use as.integer to convert the result to integer\n    # Hint: Use\
    \ as.integer to convert the result to integer\n    # Hint: Use as.integer to convert\
    \ the result to integer\n    # Hint: Use as.integer to convert the result to integer\n\
    \    # Hint: Use as.integer to convert the result to integer\n    # Hint: Use\
    \ as.integer to convert the result to integer\n    # Hint: Use as.integer to convert\
    \ the result to integer\n    # Hint: Use as.integer to convert the result to integer\n\
    \    # Hint: Use as.integer to convert the result to integer\n    # Hint: Use\
    \ as.integer to convert the result to integer\n    # Hint: Use as.integer to convert\
    \ the result to integer\n    # Hint: Use as.integer to convert the result to integer\n\
    \    # Hint: Use", "\n  # Your code here\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- lapply(paren_string, function(x) {\n    x <-\
    \ strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x <- unlist(lapply(x, function(y)\
    \ {\n      if (y == \"(\") {\n        return(1)\n      } else {\n        return(-1)\n\
    \      }\n    }))\n    return(x)\n  })\n  paren_string <- lapply(paren_string,\
    \ function(x) {\n    x <- cumsum(x)\n    return(max(x))\n  })\n  return(unlist(paren_string))\n\
    }\n", "\n  # TODO: Write your code here\n}\n", "\n  # Split the string into groups\n\
    \  groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number\
    \ of left and right parentheses\n  counts <- lapply(groups, function(group) {\n\
    \    count_left <- sum(strsplit(group, '')[[1]] == '(')\n    count_right <- sum(strsplit(group,\
    \ '')[[1]] == ')')\n    # Return the minimum of the two counts\n    min(count_left,\
    \ count_right)\n  })\n  # Return the result as a vector\n  unlist(counts)\n}\n",
  "\n  # TODO: Fill in this function\n  # Hint: You can use strsplit() to split the\
    \ string into a vector of strings\n  # Hint: You can use str_count() to count\
    \ the number of parentheses in each string\n  # Hint: You can use str_match()\
    \ to find the location of the first closing parenthesis\n  # Hint: You can use\
    \ str_sub() to extract the substring between the first and second closing parentheses\n\
    \  # Hint: You can use str_replace() to replace the substring with an empty string\n\
    \  # Hint: You can use str_length() to count the number of parentheses in the\
    \ remaining string\n  # Hint: You can use the max() function to find the maximum\
    \ of the two numbers\n  # Hint: You can use the c() function to combine the numbers\
    \ into a vector\n  # Hint: You can use the unlist() function to convert the vector\
    \ into a list\n  # Hint: You can use the as.integer() function to convert the\
    \ list into an integer vector\n  # Hint: You can use the return() function to\
    \ return the integer vector\n  return(c(2, 3, 1, 3))\n}\n", "\n  # TODO: implement\
    \ this function\n  # Hint: use strsplit to split the string into groups, and use\
    \ parse_parens to parse each group.\n  # Hint: use sapply to apply parse_parens\
    \ to each group.\n  # Hint: use max to find the maximum level of nesting.\n  return(sapply(strsplit(paren_string,\
    \ \" \"), parse_parens))\n}\n", "\n  # TODO: Write your code here\n  # Hint: Use\
    \ strsplit() to split the string into groups\n  # Hint: Use str_count() to count\
    \ the number of parentheses\n  # Hint: Use str_match() to match the parentheses\n\
    \  # Hint: Use str_replace() to replace the parentheses\n  # Hint: Use str_length()\
    \ to count the number of parentheses\n  # Hint: Use str_sub() to extract the parentheses\n\
    \  # Hint: Use str_replace_all() to replace the parentheses\n  # Hint: Use str_split()\
    \ to split the parentheses\n  # Hint: Use str_sub() to extract the parentheses\n\
    \  # Hint: Use str_replace_all() to replace the parentheses\n  # Hint: Use str_split()\
    \ to split the parentheses\n  # Hint: Use str_sub() to extract the parentheses\n\
    \  # Hint: Use str_replace_all() to replace the parentheses\n  # Hint: Use str_split()\
    \ to split the parentheses\n  # Hint: Use str_sub() to extract the parentheses\n\
    \  # Hint: Use str_replace_all() to replace the parentheses\n  # Hint: Use str_split()\
    \ to split the parentheses\n  # Hint: Use str_sub() to extract the parentheses\n\
    \  # Hint: Use str_replace_all() to replace the parentheses\n  # Hint: Use str_split()\
    \ to split the parentheses\n  # Hint: Use str_sub() to extract the parentheses\n\
    \  # Hint: Use str_replace_all() to replace the parentheses\n  # Hint: Use str_split()\
    \ to split the parentheses\n  # Hint: Use str_sub() to extract the parentheses\n\
    \  # Hint: Use str_replace_all() to replace the parentheses\n  # Hint: Use str_split()\
    \ to split the parentheses\n  # Hint: Use str_sub() to extract the parentheses\n\
    \  # Hint: Use str_replace_all() to replace the parentheses\n  # Hint: Use str_split()\
    \ to split the parentheses\n  # Hint: Use str_sub() to extract the parentheses\n\
    \  # Hint: Use str_replace_all() to replace the parentheses\n  # Hint: Use str_split()\
    \ to split", "\n  # Split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening parentheses\n  #\
    \ and the number of closing parentheses\n  # and subtract the two to get the maximum\
    \ nesting\n  sapply(groups, function(group) {\n    sum(group == '(') - sum(group\
    \ == ')')\n  })\n}\nparse_nested_parens('(()()) ((())) () ((())()())')\n", "\n\
    \  # TODO: Fill in the function body\n  # Hint: Use regex to find the groups of\
    \ parentheses\n  # Hint: Use regex to find the deepest level of nesting of parentheses\n\
    \  # Hint: Use strsplit to split the string into groups of parentheses\n  # Hint:\
    \ Use sapply to apply the function to each group of parentheses\n  # Hint: Use\
    \ unlist to convert the list to a vector\n  # Hint: Use as.integer to convert\
    \ the vector to an integer vector\n}\n", "\n  # TODO: Implement this function\n\
    \  # Hint: Use strsplit() to split the string into groups\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint: Use str_count()\
    \ to count the number of parentheses in each group\n  # Hint:", "\n  # Your code\
    \ here\n  # Hint: Use regular expression to find the pattern of nested parentheses\n\
    \  # Hint: Use stringr::str_count() to count the number of parenthesis\n  # Hint:\
    \ Use stringr::str_extract() to extract the pattern of nested parentheses\n  #\
    \ Hint: Use stringr::str_replace() to replace the pattern of nested parentheses\
    \ with empty string\n  # Hint: Use stringr::str_length() to count the number of\
    \ parenthesis\n  # Hint: Use stringr::str_sub() to extract the pattern of nested\
    \ parentheses\n  # Hint: Use stringr::str_split() to split the string by space\n\
    \  # Hint: Use purrr::map() to apply the function to each group\n  # Hint: Use\
    \ purrr::map_int() to convert the result to integer\n  # Hint: Use base::c() to\
    \ combine the result\n}\n", "\n  # TODO\n}\n", "\n  # TODO: Implement this function\n\
    \  # Hint: Use the function you wrote in the previous exercise\n  # Hint: Use\
    \ the function you wrote in the previous exercise\n  # Hint: Use the function\
    \ you wrote in the previous exercise\n  # Hint: Use the function you wrote in\
    \ the previous exercise\n  # Hint: Use the function you wrote in the previous\
    \ exercise\n  # Hint: Use the function you wrote in the previous exercise\n  #\
    \ Hint: Use the function you wrote in the previous exercise\n  # Hint: Use the\
    \ function you wrote in the previous exercise\n  # Hint: Use the function you\
    \ wrote in the previous exercise\n  # Hint: Use the function you wrote in the\
    \ previous exercise\n  # Hint: Use the function you wrote in the previous exercise\n\
    \  # Hint: Use the function you wrote in the previous exercise\n  # Hint: Use\
    \ the function you wrote in the previous exercise\n  # Hint: Use the function\
    \ you wrote in the previous exercise\n  # Hint: Use the function you wrote in\
    \ the previous exercise\n  # Hint: Use the function you wrote in the previous\
    \ exercise\n  # Hint: Use the function you wrote in the previous exercise\n  #\
    \ Hint: Use the function you wrote in the previous exercise\n  # Hint: Use the\
    \ function you wrote in the previous exercise\n  # Hint: Use the function you\
    \ wrote in the previous exercise\n  # Hint: Use the function you wrote in the\
    \ previous exercise\n  # Hint: Use the function you wrote in the previous exercise\n\
    \  # Hint: Use the function you wrote in the previous exercise\n  # Hint: Use\
    \ the function you wrote in the previous exercise\n  # Hint: Use the function\
    \ you wrote in the previous exercise\n  # Hint: Use the function you wrote in\
    \ the previous exercise\n  # Hint: Use the function you wrote in the previous\
    \ exercise\n  # Hint: Use the function you wrote in the previous exercise\n  #\
    \ Hint: Use the function you wrote in the previous exercise\n  # Hint: Use the\
    \ function you wrote in the previous exercise\n  # Hint: Use the function you\
    \ wrote in the previous exercise\n  # Hint: Use the function you wrote in the\
    \ previous exercise\n  # Hint: Use the function you wrote in the previous exercise\n\
    \  # Hint: Use", "\n  # TODO: Write your code here\n  return(c(2, 3, 1, 3))\n\
    }\n", "\n  # TODO: write code here\n}\n", "\n  # Your code here\n  # Hint: use\
    \ strsplit() and str_count()\n  # Hint: use str_match() to extract the innermost\
    \ parentheses\n  # Hint: use str_count() to count the number of nested parentheses\n\
    \  # Hint: use sapply() to apply str_count() to each group\n  # Hint: use unlist()\
    \ to convert the result to a vector\n  # Hint: use as.integer() to convert the\
    \ result to integers\n}\n", "\n  # Split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening parentheses\n  #\
    \ and the number of closing parentheses.\n  # The difference between the two is\
    \ the nesting level.\n  # If the difference is negative, then the nesting level\
    \ is 0.\n  # If the difference is positive, then the nesting level is the difference.\n\
    \  # If the difference is 0, then the nesting level is 1.\n  nesting_levels <-\
    \ sapply(groups, function(group) {\n    num_open <- sum(group == '(')\n    num_close\
    \ <- sum(group == ')')\n    nesting_level <- num_open - num_close\n    if (nesting_level\
    \ < 0) {\n      return(0)\n    } else if (nesting_level == 0) {\n      return(1)\n\
    \    } else {\n      return(nesting_level)\n    }\n  })\n  return(nesting_levels)\n\
    }\n", "\n  # split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # for each group, count the number of opening and closing parentheses\n\
    \  num_open <- sapply(groups, function(x) sum(strsplit(x, '')[[1]] == '('))\n\
    \  num_close <- sapply(groups, function(x) sum(strsplit(x, '')[[1]] == ')'))\n\
    \  # the deepest level of nesting is the minimum of the number of opening and\
    \ closing parentheses\n  return(min(num_open, num_close))\n}\n", "\n  # TODO:\
    \ Write your code here\n  return(c(2, 3, 1, 3))\n}\n", "\n  # Write your code\
    \ here\n  return(c(2, 3, 1, 3))\n}\n", "\n  # Split the string into groups\n \
    \ groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number\
    \ of opening parentheses\n  # and the number of closing parentheses\n  # and return\
    \ the maximum of the two\n  sapply(groups, function(x) {\n    max(count_parens(x,\
    \ '('), count_parens(x, ')'))\n  })\n}\n", "\n  # Your code here\n  paren_string\
    \ <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n \
    \ paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- p", "\n    # Your code here\n    # Hint: Use strsplit()\
    \ and str_count()\n    # Hint: Use str_match() to extract the string between the\
    \ parentheses\n    # Hint: Use str_count() to count the number of parentheses\
    \ in the extracted string\n    # Hint: Use str_replace() to remove the parentheses\
    \ from the extracted string\n    # Hint: Use str_count() to count the number of\
    \ parentheses in the string without parentheses\n    # Hint: Use str_replace()\
    \ to remove the parentheses from the string without parentheses\n    # Hint: Use\
    \ str_count() to count the number of parentheses in the string without parentheses\n\
    \    # Hint: Use str_replace() to remove the parentheses from the string without\
    \ parentheses\n    # Hint: Use str_count() to count the number of parentheses\
    \ in the string without parentheses\n    # Hint: Use str_replace() to remove the\
    \ parentheses from the string without parentheses\n    # Hint: Use str_count()\
    \ to count the number of parentheses in the string without parentheses\n    #\
    \ Hint: Use str_replace() to remove the parentheses from the string without parentheses\n\
    \    # Hint: Use str_count() to count the number of parentheses in the string\
    \ without parentheses\n    # Hint: Use str_replace() to remove the parentheses\
    \ from the string without parentheses\n    # Hint: Use str_count() to count the\
    \ number of parentheses in the string without parentheses\n    # Hint: Use str_replace()\
    \ to remove the parentheses from the string without parentheses\n    # Hint: Use\
    \ str_count() to count the number of parentheses in the string without parentheses\n\
    \    # Hint: Use str_replace() to remove the parentheses from the string without\
    \ parentheses\n    # Hint: Use str_count() to count the number of parentheses\
    \ in the string without parentheses\n    # Hint: Use str_replace() to remove the\
    \ parentheses from the string without parentheses\n    # Hint: Use str_count()\
    \ to count the number of parentheses in the string without parentheses\n    #\
    \ Hint: Use str_replace() to remove the parentheses from the string without parentheses\n\
    \    # Hint: Use str_count() to count the number of parentheses in the string\
    \ without parentheses\n    # Hint: Use str_replace() to remove the parentheses\
    \ from the string without parentheses\n    # Hint: Use str_count() to", "\n  #\
    \ Split the string into groups\n  paren_groups <- strsplit(paren_string, ' ')[[1]]\n\
    \  # For each group, count the number of opening and closing parentheses\n  paren_counts\
    \ <- sapply(paren_groups, function(x) {\n    count_open <- sum(strsplit(x, '')[[1]]\
    \ == '(')\n    count_close <- sum(strsplit(x, '')[[1]] == ')')\n    # Return the\
    \ minimum of the two counts\n    min(count_open, count_close)\n  })\n  return(paren_counts)\n\
    }\n", "\n  # Your code here\n}\n", "\n  # TODO: Write your code here\n  # Hint:\
    \ You can use the function parse_parens() defined above.\n  # Hint: You can use\
    \ the function max() to find the maximum value in a vector.\n  # Hint: You can\
    \ use the function unlist() to convert a list to a vector.\n  # Hint: You can\
    \ use the function strsplit() to split a string by a separator.\n  # Hint: You\
    \ can use the function sapply() to apply a function to each element of a list.\n\
    \  # Hint: You can use the function as.integer() to convert a character to an\
    \ integer.\n  # Hint: You can use the function c() to concatenate vectors.\n \
    \ # Hint: You can use the function list() to create a list.\n  # Hint: You can\
    \ use the function length() to get the length of a vector.\n  # Hint: You can\
    \ use the function rep() to create a vector of repeated values.\n  # Hint: You\
    \ can use the function which() to find the indices of a vector that satisfy a\
    \ condition.\n  # Hint: You can use the function sum() to sum the elements of\
    \ a vector.\n  # Hint: You can use the function unique() to find the unique elements\
    \ of a vector.\n  # Hint: You can use the function sort() to sort a vector.\n\
    \  # Hint: You can use the function rev() to reverse a vector.\n  # Hint: You\
    \ can use the function diff() to find the difference between adjacent elements\
    \ of a vector.\n  # Hint: You can use the function cumsum() to find the cumulative\
    \ sum of a vector.\n  # Hint: You can use the function which.max() to find the\
    \ index of the maximum element of a vector.\n  # Hint: You can use the function\
    \ which.min() to find the index of the minimum element of a vector.\n  # Hint:\
    \ You can use the function which.max() to find the index of the maximum element\
    \ of a vector.\n  # Hint: You can use the function which.min() to find the index\
    \ of the minimum element of a vector.\n  # Hint: You can use the function which.max()\
    \ to find the index of the maximum element of a vector.", "\n  # Split the string\
    \ into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group,\
    \ count the number of opening parentheses\n  # and subtract the number of closing\
    \ parentheses.\n  # The difference is the number of nested parentheses.\n  # The\
    \ maximum of this difference is the maximum number of nested parentheses.\n  sapply(groups,\
    \ function(group) {\n    max(cumsum(c(0, strsplit(group, '')[[1]]) == '(') -\n\
    \        cumsum(c(0, strsplit(group, '')[[1]]) == ')'))\n  })\n}\n", "\n  # Split\
    \ the string by spaces\n  paren_groups <- strsplit(paren_string, ' ')[[1]]\n \
    \ # For each group, count the number of opening parentheses\n  # and the number\
    \ of closing parentheses\n  paren_counts <- lapply(paren_groups, function(group)\
    \ {\n    count_open <- sum(strsplit(group, '')[[1]] == '(')\n    count_close <-\
    \ sum(strsplit(group, '')[[1]] == ')')\n    # Return the maximum of the two counts\n\
    \    max(count_open, count_close)\n  })\n  # Return the result as a vector\n \
    \ unlist(paren_counts)\n}\n", "\n  # YOUR CODE HERE\n  # Hint: Use regular expression\
    \ to find the number of opening and closing parentheses.\n  # Use the number of\
    \ opening and closing parentheses to calculate the depth of nesting.\n  # You\
    \ may use the function 'gregexpr' to find the number of opening and closing parentheses.\n\
    \  # You may use the function 'gsub' to remove the parentheses.\n  # You may use\
    \ the function 'nchar' to count the number of characters.\n  # You may use the\
    \ function 'strsplit' to split the string into groups.\n  # You may use the function\
    \ 'unlist' to convert a list to a vector.\n  # You may use the function 'as.integer'\
    \ to convert a character to an integer.\n  # You may use the function 'c' to create\
    \ a vector.\n  # You may use the function 'max' to find the maximum value.\n \
    \ # You may use the function 'paste' to concatenate strings.\n  # You may use\
    \ the function 'rev' to reverse a vector.\n  # You may use the function 'sort'\
    \ to sort a vector.\n  # You may use the function 'unique' to find unique values.\n\
    \  # You may use the function 'which' to find the index of a value.\n  # You may\
    \ use the function 'length' to find the length of a vector.\n  # You may use the\
    \ function 'rep' to repeat a value.\n  # You may use the function 'diff' to find\
    \ the difference between consecutive elements.\n  # You may use the function 'cumsum'\
    \ to find the cumulative sum.\n  # You may use the function 'rle' to find the\
    \ run length encoding.\n  # You may use the function 'attr' to get the attribute\
    \ of an object.\n  # You may use the function 'names' to get the names of an object.\n\
    \  # You may use the function 'as.numeric' to convert a character to a numeric.\n\
    \  # You may use the function 'as.character' to convert a numeric to a character.\n\
    \  # You may use the function 'as.data.frame' to convert a vector to a data frame.\n\
    \  # You may use the function 'as.matrix' to convert a data frame to a matrix.\n\
    \  # You may use the function 't' to", "\n  # TODO\n}\n", "\n  paren_string <-\
    \ strsplit(paren_string, ' ')[[1]]\n  paren_string <- gsub('[^()]', '', paren_string)\n\
    \  paren_string <- strsplit(paren_string, '')\n  paren_string <- lapply(paren_string,\
    \ function(x) {\n    x <- cumsum(x == '(') - cumsum(x == ')')\n    max(x[x >=\
    \ 0])\n  })\n  return(unlist(paren_string))\n}\n", "\n    # TODO: Write code here\n\
    }\n", "\n  # Split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening parentheses\n  #\
    \ and the number of closing parentheses\n  # and return the difference\n  sapply(groups,\
    \ function(group) {\n    sum(group == '(') - sum(group == ')')\n  })\n}\n", "\n\
    \  # Split the string into multiple groups\n  paren_groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, find the deepest level of nesting\n  sapply(paren_groups,\
    \ function(group) {\n    # Find the positions of opening and closing parentheses\n\
    \    open_paren_pos <- grep('\\\\(', group)\n    close_paren_pos <- grep('\\\\\
    )', group)\n    # Find the deepest level of nesting\n    max(cumsum(open_paren_pos\
    \ - close_paren_pos))\n  })\n}\n", "\n  # Your code here\n}\n", "\n  # Split the\
    \ string into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # Initialize\
    \ the result vector\n  result <- integer(length(groups))\n  # Loop through each\
    \ group\n  for (i in seq_along(groups)) {\n    # Initialize the stack\n    stack\
    \ <- integer(0)\n    # Loop through each character in the group\n    for (j in\
    \ seq_along(groups[i])) {\n      # If the character is an opening parenthesis,\
    \ push it to the stack\n      if (groups[i][j] == '(') {\n        stack <- c(stack,\
    \ 1)\n      } else {\n        # If the character is a closing parenthesis, pop\
    \ the stack\n        stack <- stack[-length(stack)]\n      }\n      # Update the\
    \ result vector\n      result[i] <- length(stack)\n    }\n  }\n  # Return the\
    \ result vector\n  return(result)\n}\n", "\n  # split the string by spaces\n \
    \ groups <- strsplit(paren_string, ' ')[[1]]\n  # for each group, count the number\
    \ of open and close parentheses\n  # and return the difference\n  sapply(groups,\
    \ function(x) {\n    sum(strsplit(x, '')[[1]] == '(') - sum(strsplit(x, '')[[1]]\
    \ == ')')\n  })\n}\n", "\n  # Your code here\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- gsub(\"\\\\(\", \" ( \", paren_string)\n  paren_string\
    \ <- gsub(\"\\\\)\", \" ) \", paren_string)\n  paren_string <- unlist(strsplit(paren_string,\
    \ \" \"))\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"  \"]\n  paren_string <- paren_string[paren_string != \"   \"]\n  paren_string\
    \ <- paren_string[paren_string != \"    \"]\n  paren_string <- paren_string[paren_string\
    \ != \"     \"]\n  paren_string <- paren_string[paren_string != \"      \"]\n\
    \  paren_string <- paren_string[paren_string != \"       \"]\n  paren_string <-\
    \ paren_string[paren_string != \"        \"]\n  paren_string <- paren_string[paren_string\
    \ != \"         \"]\n  paren_string <- paren_string[paren_string != \"       \
    \   \"]\n  paren_string <- paren_string[paren_string != \"           \"]\n  paren_string\
    \ <- paren_string[paren_string != \"            \"]\n  paren_string <- paren_string[paren_string\
    \ != \"             \"]\n  paren_string <- paren_string[paren_string != \"   \
    \           \"]\n  paren_string <- paren_string[paren_string != \"           \
    \    \"]\n  paren_string <- paren_string[paren_string != \"                \"\
    ]\n  paren_string <- paren_string[paren_string != \"                 \"]\n  paren_string\
    \ <- paren_string[paren_string != \"                  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"                   \"]\n  paren_string <- paren_string[paren_string !=\
    \ \"                    \"]\n  paren_string <-", "\n  # TODO: Implement this function\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous question.\n\
    \  # Hint: You can use the function you implemented in the previous", "\n  # TODO:\
    \ Write your code here\n  # Hint: Use the function parse_parens()\n  # Hint: Use\
    \ the function max()\n  # Hint: Use the function unlist()\n  # Hint: Use the function\
    \ strsplit()\n  # Hint: Use the function sapply()\n  # Hint: Use the function\
    \ c()\n  # Hint: Use the function as.integer()\n  # Hint: Use the function as.numeric()\n\
    \  # Hint: Use the function length()\n  # Hint: Use the function rev()\n  # Hint:\
    \ Use the function which()\n  # Hint: Use the function tail()\n  # Hint: Use the\
    \ function head()\n  # Hint: Use the function diff()\n  # Hint: Use the function\
    \ sum()\n  # Hint: Use the function sort()\n  # Hint: Use the function unique()\n\
    \  # Hint: Use the function match()\n  # Hint: Use the function table()\n  # Hint:\
    \ Use the function sort()\n  # Hint: Use the function rev()\n  # Hint: Use the\
    \ function names()\n  # Hint: Use the function as.character()\n  # Hint: Use the\
    \ function as.integer()\n  # Hint: Use the function as.numeric()\n  # Hint: Use\
    \ the function as.vector()\n  # Hint: Use the function as.list()\n  # Hint: Use\
    \ the function as.data.frame()\n  # Hint: Use the function as.matrix()\n  # Hint:\
    \ Use the function as.array()\n  # Hint: Use the function as.logical()\n  # Hint:\
    \ Use the function as.factor()\n  # Hint: Use the function as.character()\n  #\
    \ Hint: Use the function as.numeric()\n  # Hint: Use the function as.integer()\n\
    \  # Hint: Use the function as.logical()\n  # Hint: Use the function as.complex()\n\
    \  # Hint: Use the function as.raw()\n  # Hint: Use the function as.double()\n\
    \  # Hint: Use the function as.single()\n  # Hint:", "\n  # Split the string into\
    \ groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count\
    \ the number of opening parentheses\n  # and subtract the number of closing parentheses.\n\
    \  # The difference is the number of nested parentheses.\n  sapply(groups, function(group)\
    \ {\n    sum(strsplit(group, '')[[1]] == '(') - sum(strsplit(group, '')[[1]] ==\
    \ ')')\n  })\n}\n", "\n  # TODO: Write your code here\n  # Hint: Use regular expressions\n\
    \  # Hint: Use stringr::str_count()\n  # Hint: Use stringr::str_match()\n  # Hint:\
    \ Use stringr::str_extract()\n  # Hint: Use stringr::str_replace()\n  # Hint:\
    \ Use stringr::str_split()\n  # Hint: Use stringr::str_trim()\n  # Hint: Use stringr::str_detect()\n\
    \  # Hint: Use stringr::str_sub()\n  # Hint: Use stringr::str_length()\n  # Hint:\
    \ Use stringr::str_dup()\n  # Hint: Use stringr::str_c()\n  # Hint: Use stringr::str_replace_all()\n\
    \  # Hint: Use stringr::str_replace_na()\n  # Hint: Use stringr::str_replace_all()\n\
    \  # Hint: Use stringr::str_replace_na()\n  # Hint: Use stringr::str_replace_all()\n\
    \  # Hint: Use stringr::str_replace_na()\n  # Hint: Use stringr::str_replace_all()\n\
    \  # Hint: Use stringr::str_replace_na()\n  # Hint: Use stringr::str_replace_all()\n\
    \  # Hint: Use stringr::str_replace_na()\n  # Hint: Use stringr::str_replace_all()\n\
    \  # Hint: Use stringr::str_replace_na()\n  # Hint: Use stringr::str_replace_all()\n\
    \  # Hint: Use stringr::str_replace_na()\n  # Hint: Use stringr::str_replace_all()\n\
    \  # Hint: Use stringr::str_replace_na()\n  # Hint: Use stringr::str_replace_all()\n\
    \  # Hint: Use stringr::str_replace_na()\n  # Hint: Use stringr::str_replace_all()\n\
    \  # Hint: Use stringr::str_replace_na()\n  # Hint: Use stringr::str_replace_",
  "\n  # Your code goes here\n  paren_string <- strsplit(paren_string, \" \")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- as.character(paren_string)\n  paren_string\
    \ <- gsub(\"\\\\(\", \"1\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\
    0\", paren_string)\n  paren_string <- as.numeric(paren_string)\n  paren_string\
    \ <- cumsum(paren_string)\n  paren_string <- as.character(paren_string)\n  paren_string\
    \ <- gsub(\"1\", \"\\\\(\", paren_string)\n  paren_string <- gsub(\"0\", \"\\\\\
    )\", paren_string)\n  paren_string <- gsub(\"\\\\(\\\\)\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\(\\\\(\\\\)\", \"\\\\(\", paren_string)\n  paren_string\
    \ <- gsub(\"\\\\)\\\\)\\\\)\", \"\\\\)\", paren_string)\n  paren_string <- gsub(\"\
    \\\\(\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\\\\(\", \"\"\
    , paren_string)\n  paren_string <- gsub(\"\\\\(\\\\)\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\)\\\\(\", \"\", paren_string)\n  paren_string <-\
    \ gsub(\"\\\\(\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\\\\\
    (\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\(\\\\)\", \"\", paren_string)\n\
    \  paren_string <- gsub(\"\\\\)\\\\(\", \"\", paren_string)\n  paren_string <-\
    \ gsub(\"\\\\(\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\\\\\
    (\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\(\\\\)\", \"", "\n  # TODO:\
    \ Implement this function\n  # Hint: Use strsplit() to split the string into a\
    \ list of strings.\n  # Hint: Use str_count() to count the number of parentheses\
    \ in a string.\n  # Hint: Use str_sub() to extract the substring between the first\
    \ and last parentheses.\n  # Hint: Use str_detect() to detect if a string contains\
    \ parentheses.\n  # Hint: Use str_replace() to remove the outermost parentheses.\n\
    \  # Hint: Use str_c() to concatenate strings.\n  # Hint: Use paste() to concatenate\
    \ strings.\n  # Hint: Use as.numeric() to convert a string to a number.\n  # Hint:\
    \ Use as.integer() to convert a number to an integer.\n  # Hint: Use as.character()\
    \ to convert a number to a string.\n  # Hint: Use unlist() to convert a list to\
    \ a vector.\n  # Hint: Use c() to create a vector.\n  # Hint: Use length() to\
    \ get the length of a vector.\n  # Hint: Use sapply() to apply a function to each\
    \ element of a vector.\n  # Hint: Use lapply() to apply a function to each element\
    \ of a list.\n  # Hint: Use list() to create a list.\n  # Hint: Use is.null()\
    \ to check if an object is NULL.\n  # Hint: Use is.na() to check if an object\
    \ is NA.\n  # Hint: Use is.nan() to check if an object is NaN.\n  # Hint: Use\
    \ is.numeric() to check if an object is numeric.\n  # Hint: Use is.integer() to\
    \ check if an object is an integer.\n  # Hint: Use is.character() to check if\
    \ an object is a character.\n  # Hint: Use is.list() to check if an object is\
    \ a list.\n  # Hint: Use is.vector() to check if an object is a vector.\n  # Hint:\
    \ Use is.function() to check if an object is a function.\n  # Hint: Use is.environment()\
    \ to check if an object is an environment.\n  # Hint:", "\n  # Split the string\
    \ into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # For each group,\
    \ count the number of opening parentheses\n  # and the number of closing parentheses.\n\
    \  # The difference between the two is the number of nested parentheses.\n  #\
    \ The maximum of the difference is the deepest level of nesting.\n  sapply(groups,\
    \ function(group) {\n    max(c(0, sum(group == '(') - sum(group == ')')))\n  })\n\
    }\n", "\n  # Split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening parentheses\n  #\
    \ and subtract the number of closing parentheses\n  # The difference is the number\
    \ of nested parentheses\n  # The maximum of this difference is the deepest level\
    \ of nesting\n  sapply(groups, function(group) {\n    max(cumsum(strsplit(group,\
    \ '')[[1]] == '(') - cumsum(strsplit(group, '')[[1]] == ')'))\n  })\n}\n", "\n\
    \  # TODO: Write your code here\n  # Hint: You can use the function `str_count`\
    \ from the `stringr` package to count the number of parentheses\n  # Hint: You\
    \ can use the function `str_split` from the `stringr` package to split the string\
    \ into groups\n  # Hint: You can use the function `str_match` from the `stringr`\
    \ package to extract the parentheses from each group\n  # Hint: You can use the\
    \ function `str_count` from the `stringr` package to count the number of parentheses\
    \ in each group\n  # Hint: You can use the function `max` to find the maximum\
    \ number of parentheses in each group\n  # Hint: You can use the function `c`\
    \ to combine the results into a vector\n  # Hint: You can use the function `unlist`\
    \ to convert a list into a vector\n  # Hint: You can use the function `as.integer`\
    \ to convert a character vector into an integer vector\n  # Hint: You can use\
    \ the function `as.numeric` to convert a character vector into a numeric vector\n\
    \  # Hint: You can use the function `as.integer` to convert a numeric vector into\
    \ an integer vector\n  # Hint: You can use the function `as.numeric` to convert\
    \ a integer vector into a numeric vector\n}\n ", "\n  # TODO: complete this function\n\
    \  # Hint: use strsplit() and str_count()\n  # Hint: use sapply() to apply a function\
    \ to each element of a list\n  # Hint: use max() to find the maximum value in\
    \ a vector\n  # Hint: use unlist() to convert a list to a vector\n  # Hint: use\
    \ as.integer() to convert a character to an integer\n}\n", "\n  # TODO: Write\
    \ your code here\n  # Hint: Use strsplit() to split the string into groups\n \
    \ # Hint: Use str_count() to count the number of parentheses in each group\n \
    \ # Hint: Use str_match() to match the deepest level of nesting\n  # Hint: Use\
    \ str_replace() to remove the deepest level of nesting\n  # Hint: Use str_replace()\
    \ to remove the deepest level of nesting\n  # Hint: Use str_replace() to remove\
    \ the deepest level of nesting\n  # Hint: Use str_replace() to remove the deepest\
    \ level of nesting\n  # Hint: Use str_replace() to remove the deepest level of\
    \ nesting\n  # Hint: Use str_replace() to remove the deepest level of nesting\n\
    \  # Hint: Use str_replace() to remove the deepest level of nesting\n  # Hint:\
    \ Use str_replace() to remove the deepest level of nesting\n  # Hint: Use str_replace()\
    \ to remove the deepest level of nesting\n  # Hint: Use str_replace() to remove\
    \ the deepest level of nesting\n  # Hint: Use str_replace() to remove the deepest\
    \ level of nesting\n  # Hint: Use str_replace() to remove the deepest level of\
    \ nesting\n  # Hint: Use str_replace() to remove the deepest level of nesting\n\
    \  # Hint: Use str_replace() to remove the deepest level of nesting\n  # Hint:\
    \ Use str_replace() to remove the deepest level of nesting\n  # Hint: Use str_replace()\
    \ to remove the deepest level of nesting\n  # Hint: Use str_replace() to remove\
    \ the deepest level of nesting\n  # Hint: Use str_replace() to remove the deepest\
    \ level of nesting\n  # Hint: Use str_replace() to remove the deepest level of\
    \ nesting\n  # Hint: Use str_replace() to remove the deepest level of nesting\n\
    \  # Hint: Use str_replace() to remove the deepest level of nesting\n  # Hint:\
    \ Use str_replace() to remove the deepest level of nesting\n  # Hint: Use str_replace()\
    \ to remove the deepest level of nesting\n  # Hint: Use str_replace() to remove\
    \ the deepest level of nesting\n  # Hint: Use str_replace() to remove the deepest",
  "\n  # TODO: write your code here\n}\n", "\n    # split the string into groups\n\
    \    groups <- strsplit(paren_string, ' ')[[1]]\n    # for each group, count the\
    \ number of left and right parentheses\n    left_parens <- sapply(groups, function(x)\
    \ sum(strsplit(x, '')[[1]] == '('))\n    right_parens <- sapply(groups, function(x)\
    \ sum(strsplit(x, '')[[1]] == ')'))\n    # the number of nested parentheses is\
    \ the minimum of the number of left and right parentheses\n    return(min(left_parens,\
    \ right_parens))\n}\n", "\n  # Your code here\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- gsub(\"\\\\(\", \" ( \", paren_string)\n  paren_string\
    \ <- gsub(\"\\\\)\", \" ) \", paren_string)\n  paren_string <- unlist(strsplit(paren_string,\
    \ \" \"))\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"  \"]\n  paren_string <- paren_string[paren_string != \"   \"]\n  paren_string\
    \ <- paren_string[paren_string != \"    \"]\n  paren_string <- paren_string[paren_string\
    \ != \"     \"]\n  paren_string <- paren_string[paren_string != \"      \"]\n\
    \  paren_string <- paren_string[paren_string != \"       \"]\n  paren_string <-\
    \ paren_string[paren_string != \"        \"]\n  paren_string <- paren_string[paren_string\
    \ != \"         \"]\n  paren_string <- paren_string[paren_string != \"       \
    \   \"]\n  paren_string <- paren_string[paren_string != \"           \"]\n  paren_string\
    \ <- paren_string[paren_string != \"            \"]\n  paren_string <- paren_string[paren_string\
    \ != \"             \"]\n  paren_string <- paren_string[paren_string != \"   \
    \           \"]\n  paren_string <- paren_string[paren_string != \"           \
    \    \"]\n  paren_string <- paren_string[paren_string != \"                \"\
    ]\n  paren_string <- paren_string[paren_string != \"                 \"]\n  paren_string\
    \ <- paren_string[paren_string != \"                  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"                   \"]\n  paren_string <- paren_string[paren_string !=\
    \ \"                    \"]\n  paren_string <-", "\n  # TODO: Implement this function\n\
    \  # Hint: Use the function parse_parens() defined above\n  # Hint: Use the function\
    \ max()\n  # Hint: Use the function unlist()\n  # Hint: Use the function strsplit()\n\
    \  paren_string_split <- strsplit(paren_string, \" \")\n  paren_string_split <-\
    \ unlist(paren_string_split)\n  paren_string_split <- lapply(paren_string_split,\
    \ parse_parens)\n  paren_string_split <- lapply(paren_string_split, max)\n  paren_string_split\
    \ <- unlist(paren_string_split)\n  return(paren_string_split)\n}\n", "\n    #\
    \ TODO: Write code here\n    # Hint: Use regular expressions to find the deepest\
    \ level of nesting\n    # Hint: Use strsplit to split the string into groups\n\
    \    # Hint: Use sapply to apply a function to each group\n    # Hint: Use gsub\
    \ to remove the outermost parentheses\n    # Hint: Use gsub to remove all parentheses\n\
    \    # Hint: Use nchar to count the number of characters\n    # Hint: Use sum\
    \ to count the number of parentheses\n    # Hint: Use max to find the maximum\
    \ number of parentheses\n    # Hint: Use paste to create a string that can be\
    \ converted to a numeric vector\n    # Hint: Use as.numeric to convert a string\
    \ to a numeric vector\n    # Hint: Use c to create a numeric vector\n    # Hint:\
    \ Use strsplit to split the string into groups\n    # Hint: Use sapply to apply\
    \ a function to each group\n    # Hint: Use gsub to remove the outermost parentheses\n\
    \    # Hint: Use gsub to remove all parentheses\n    # Hint: Use nchar to count\
    \ the number of characters\n    # Hint: Use sum to count the number of parentheses\n\
    \    # Hint: Use max to find the maximum number of parentheses\n    # Hint: Use\
    \ paste to create a string that can be converted to a numeric vector\n    # Hint:\
    \ Use as.numeric to convert a string to a numeric vector\n    # Hint: Use c to\
    \ create a numeric vector\n    # Hint: Use strsplit to split the string into groups\n\
    \    # Hint: Use sapply to apply a function to each group\n    # Hint: Use gsub\
    \ to remove the outermost parentheses\n    # Hint: Use gsub to remove all parentheses\n\
    \    # Hint: Use nchar to count the number of characters\n    # Hint: Use sum\
    \ to count the number of parentheses\n    # Hint: Use max to find the maximum\
    \ number of parentheses\n    # Hint: Use paste to create a string that can be\
    \ converted to a numeric vector\n    # Hint: Use as.numeric to convert a string\
    \ to a numeric vector\n    # Hint: Use c to create a numeric vector\n    # Hint:\
    \ Use strsplit to split the string into groups\n    #", "\n  # your code here\n\
    }\n ", "\n  # Your code here\n  paren_string <- strsplit(paren_string, \" \")[[1]]\n\
    \  paren_string <- gsub(\"\\\\(\", \" ( \", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \" ) \", paren_string)\n  paren_string <- unlist(strsplit(paren_string,\
    \ \" \"))\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"  \"]\n  paren_string <- paren_string[paren_string != \"   \"]\n  paren_string\
    \ <- paren_string[paren_string != \"    \"]\n  paren_string <- paren_string[paren_string\
    \ != \"     \"]\n  paren_string <- paren_string[paren_string != \"      \"]\n\
    \  paren_string <- paren_string[paren_string != \"       \"]\n  paren_string <-\
    \ paren_string[paren_string != \"        \"]\n  paren_string <- paren_string[paren_string\
    \ != \"         \"]\n  paren_string <- paren_string[paren_string != \"       \
    \   \"]\n  paren_string <- paren_string[paren_string != \"           \"]\n  paren_string\
    \ <- paren_string[paren_string != \"            \"]\n  paren_string <- paren_string[paren_string\
    \ != \"             \"]\n  paren_string <- paren_string[paren_string != \"   \
    \           \"]\n  paren_string <- paren_string[paren_string != \"           \
    \    \"]\n  paren_string <- paren_string[paren_string != \"                \"\
    ]\n  paren_string <- paren_string[paren_string != \"                 \"]\n  paren_string\
    \ <- paren_string[paren_string != \"                  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"                   \"]\n  paren_string <- paren_string[paren_string !=\
    \ \"                    \"]\n  paren_string <-", "\n  # TODO: Fill in this function\n\
    \  # Hint: Use the function you wrote in the previous question\n  # Hint: Use\
    \ the function you wrote in the previous question\n  # Hint: Use the function\
    \ you wrote in the previous question\n  # Hint: Use the function you wrote in\
    \ the previous question\n  # Hint: Use the function you wrote in the previous\
    \ question\n  # Hint: Use the function you wrote in the previous question\n  #\
    \ Hint: Use the function you wrote in the previous question\n  # Hint: Use the\
    \ function you wrote in the previous question\n  # Hint: Use the function you\
    \ wrote in the previous question\n  # Hint: Use the function you wrote in the\
    \ previous question\n  # Hint: Use the function you wrote in the previous question\n\
    \  # Hint: Use the function you wrote in the previous question\n  # Hint: Use\
    \ the function you wrote in the previous question\n  # Hint: Use the function\
    \ you wrote in the previous question\n  # Hint: Use the function you wrote in\
    \ the previous question\n  # Hint: Use the function you wrote in the previous\
    \ question\n  # Hint: Use the function you wrote in the previous question\n  #\
    \ Hint: Use the function you wrote in the previous question\n  # Hint: Use the\
    \ function you wrote in the previous question\n  # Hint: Use the function you\
    \ wrote in the previous question\n  # Hint: Use the function you wrote in the\
    \ previous question\n  # Hint: Use the function you wrote in the previous question\n\
    \  # Hint: Use the function you wrote in the previous question\n  # Hint: Use\
    \ the function you wrote in the previous question\n  # Hint: Use the function\
    \ you wrote in the previous question\n  # Hint: Use the function you wrote in\
    \ the previous question\n  # Hint: Use the function you wrote in the previous\
    \ question\n  # Hint: Use the function you wrote in the previous question\n  #\
    \ Hint: Use the function you wrote in the previous question\n  # Hint: Use the\
    \ function you wrote in the previous question\n  # Hint: Use the function you\
    \ wrote in the previous question\n  # Hint: Use the function you wrote in the\
    \ previous question\n  # Hint: Use the function you wrote in the previous question\n\
    \  # Hint:", "\n  # Split the string into a vector of individual groups\n  paren_groups\
    \ <- strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number of\
    \ opening parentheses\n  # and subtract the number of closing parentheses\n  #\
    \ The result is the number of levels of nesting\n  sapply(paren_groups, function(x)\
    \ {\n    sum(strsplit(x, '')[[1]] == '(') - sum(strsplit(x, '')[[1]] == ')')\n\
    \  })\n}\nparse_nested_parens('(()()) ((())) () ((())()())')\n", "\n  # TODO:\
    \ Write the function\n  # Hint: Use strsplit to split the string into a list of\
    \ strings\n  # Hint: Use str_count to count the number of parentheses in each\
    \ string\n  # Hint: Use str_count to count the number of parentheses in each string\n\
    \  # Hint: Use str_count to count the number of parentheses in each string\n \
    \ # Hint: Use str_count to count the number of parentheses in each string\n  #\
    \ Hint: Use str_count to count the number of parentheses in each string\n  # Hint:\
    \ Use str_count to count the number of parentheses in each string\n  # Hint: Use\
    \ str_count to count the number of parentheses in each string\n  # Hint: Use str_count\
    \ to count the number of parentheses in each string\n  # Hint: Use str_count to\
    \ count the number of parentheses in each string\n  # Hint: Use str_count to count\
    \ the number of parentheses in each string\n  # Hint: Use str_count to count the\
    \ number of parentheses in each string\n  # Hint: Use str_count to count the number\
    \ of parentheses in each string\n  # Hint: Use str_count to count the number of\
    \ parentheses in each string\n  # Hint: Use str_count to count the number of parentheses\
    \ in each string\n  # Hint: Use str_count to count the number of parentheses in\
    \ each string\n  # Hint: Use str_count to count the number of parentheses in each\
    \ string\n  # Hint: Use str_count to count the number of parentheses in each string\n\
    \  # Hint: Use str_count to count the number of parentheses in each string\n \
    \ # Hint: Use str_count to count the number of parentheses in each string\n  #\
    \ Hint: Use str_count to count the number of parentheses in each string\n  # Hint:\
    \ Use str_count to count the number of parentheses in each string\n  # Hint: Use\
    \ str_count to count the number of parentheses in each string\n  # Hint: Use str_count\
    \ to count the number of parentheses in each string\n  # Hint: Use str_count to\
    \ count the number of parentheses in each string\n  # Hint: Use str_count to count\
    \ the number of parentheses in each string\n  # Hint: Use str_", "\n  # TODO:\
    \ Write your code here\n  return(c(2, 3, 1, 3))\n}\n", "\n  # TODO: Write your\
    \ code here\n  # Hint: Use strsplit and sapply\n  # Hint: Use regular expression\
    \ to match parentheses\n  # Hint: Use stringr::str_count to count the number of\
    \ parentheses\n  # Hint: Use stringr::str_match to extract the deepest level of\
    \ nesting\n  # Hint: Use stringr::str_replace to replace the deepest level of\
    \ nesting with empty string\n  # Hint: Use stringr::str_length to count the number\
    \ of parentheses\n  # Hint: Use stringr::str_replace to replace the deepest level\
    \ of nesting with empty string\n  # Hint: Use stringr::str_length to count the\
    \ number of parentheses\n  # Hint: Use stringr::str_replace to replace the deepest\
    \ level of nesting with empty string\n  # Hint: Use stringr::str_length to count\
    \ the number of parentheses\n  # Hint: Use stringr::str_replace to replace the\
    \ deepest level of nesting with empty string\n  # Hint: Use stringr::str_length\
    \ to count the number of parentheses\n  # Hint: Use stringr::str_replace to replace\
    \ the deepest level of nesting with empty string\n  # Hint: Use stringr::str_length\
    \ to count the number of parentheses\n  # Hint: Use stringr::str_replace to replace\
    \ the deepest level of nesting with empty string\n  # Hint: Use stringr::str_length\
    \ to count the number of parentheses\n  # Hint: Use stringr::str_replace to replace\
    \ the deepest level of nesting with empty string\n  # Hint: Use stringr::str_length\
    \ to count the number of parentheses\n  # Hint: Use stringr::str_replace to replace\
    \ the deepest level of nesting with empty string\n  # Hint: Use stringr::str_length\
    \ to count the number of parentheses\n  # Hint: Use stringr::str_replace to replace\
    \ the deepest level of nesting with empty string\n  # Hint: Use stringr::str_length\
    \ to count the number of parentheses\n  # Hint: Use stringr::str_replace to replace\
    \ the deepest level of nesting with empty string\n  # Hint: Use stringr::str_length\
    \ to count the number of parentheses\n  # Hint: Use stringr::str_replace to replace\
    \ the deepest", "\n  # Your code here\n  # Hint: Use strsplit() and str_count()\n\
    \  # Hint: Use str_match() to extract the parentheses\n  # Hint: Use str_count()\
    \ to count the number of nested parentheses\n  # Hint: Use str_replace() to remove\
    \ the parentheses\n  # Hint: Use str_length() to count the number of nested parentheses\n\
    \  # Hint: Use str_replace() to remove the parentheses\n  # Hint: Use str_length()\
    \ to count the number of nested parentheses\n  # Hint: Use str_replace() to remove\
    \ the parentheses\n  # Hint: Use str_length() to count the number of nested parentheses\n\
    \  # Hint: Use str_replace() to remove the parentheses\n  # Hint: Use str_length()\
    \ to count the number of nested parentheses\n  # Hint: Use str_replace() to remove\
    \ the parentheses\n  # Hint: Use str_length() to count the number of nested parentheses\n\
    \  # Hint: Use str_replace() to remove the parentheses\n  # Hint: Use str_length()\
    \ to count the number of nested parentheses\n  # Hint: Use str_replace() to remove\
    \ the parentheses\n  # Hint: Use str_length() to count the number of nested parentheses\n\
    \  # Hint: Use str_replace() to remove the parentheses\n  # Hint: Use str_length()\
    \ to count the number of nested parentheses\n  # Hint: Use str_replace() to remove\
    \ the parentheses\n  # Hint: Use str_length() to count the number of nested parentheses\n\
    \  # Hint: Use str_replace() to remove the parentheses\n  # Hint: Use str_length()\
    \ to count the number of nested parentheses\n  # Hint: Use str_replace() to remove\
    \ the parentheses\n  # Hint: Use str_length() to count the number of nested parentheses\n\
    \  # Hint: Use str_replace() to remove the parentheses\n  # Hint: Use str_length()\
    \ to count the number of nested parentheses\n  # Hint: Use str_replace() to remove\
    \ the parentheses\n  # Hint: Use str_length() to count the number of nested parentheses\n\
    \  # Hint: Use str_replace() to remove the parentheses\n  # Hint: Use str_length()\
    \ to count", "\n  # TODO\n}\n", "\n  # TODO: Write your code here\n  # Hint: Use\
    \ strsplit() to split the string into groups\n  # Hint: Use str_count() to count\
    \ the number of parentheses in each group\n  # Hint: Use str_match() to match\
    \ the deepest level of parentheses\n}\n", "\n  # TODO: Fill in the function body\n\
    \  # Hint: You can use the function parse_parens() from the previous question.\n\
    \  # Hint: You can use the function max() to get the maximum value of a vector.\n\
    \  # Hint: You can use the function unlist() to convert a list to a vector.\n\
    \  # Hint: You can use the function strsplit() to split a string by a delimiter.\n\
    \  # Hint: You can use the function sapply() to apply a function to each element\
    \ of a list.\n  # Hint: You can use the function list() to create a list.\n  #\
    \ Hint: You can use the function c() to create a vector.\n  # Hint: You can use\
    \ the function length() to get the length of a vector.\n  # Hint: You can use\
    \ the function which.max() to get the index of the maximum value of a vector.\n\
    \  # Hint: You can use the function which.min() to get the index of the minimum\
    \ value of a vector.\n  # Hint: You can use the function rev() to reverse a vector.\n\
    \  # Hint: You can use the function sort() to sort a vector.\n  # Hint: You can\
    \ use the function unique() to remove duplicates from a vector.\n  # Hint: You\
    \ can use the function diff() to get the difference between adjacent elements\
    \ of a vector.\n  # Hint: You can use the function sum() to get the sum of a vector.\n\
    \  # Hint: You can use the function mean() to get the mean of a vector.\n  # Hint:\
    \ You can use the function median() to get the median of a vector.\n  # Hint:\
    \ You can use the function quantile() to get the quantiles of a vector.\n  # Hint:\
    \ You can use the function table() to get the frequency table of a vector.\n \
    \ # Hint: You can use the function which() to get the indices of a vector that\
    \ satisfy a condition.\n  # Hint: You can use the function any() to check if any\
    \ element of a vector satisfies a condition.\n  # Hint: You can use the function\
    \ all() to check if all elements of a vector satisfy a condition.\n  # Hint: You\
    \ can use the function", "\n  # Your code here\n  paren_string <- strsplit(paren_string,\
    \ \" \")[[1]]\n  paren_string <- sapply(paren_string, function(x) {\n    x <-\
    \ strsplit(x, \"\")[[1]]\n    x <- x[x != \"\"]\n    x\n  })\n  paren_string <-\
    \ sapply(paren_string, function(x) {\n    x <- unlist(strsplit(x, \"\"))\n   \
    \ x <- x[x != \"\"]\n    x\n  })\n  paren_string <- sapply(paren_string, function(x)\
    \ {\n    x <- unlist(strsplit(x, \"\"))\n    x <- x[x != \"\"]\n    x\n  })\n\
    \  paren_string <- sapply(paren_string, function(x) {\n    x <- unlist(strsplit(x,\
    \ \"\"))\n    x <- x[x != \"\"]\n    x\n  })\n  paren_string <- sapply(paren_string,\
    \ function(x) {\n    x <- unlist(strsplit(x, \"\"))\n    x <- x[x != \"\"]\n \
    \   x\n  })\n  paren_string <- sapply(paren_string, function(x) {\n    x <- unlist(strsplit(x,\
    \ \"\"))\n    x <- x[x != \"\"]\n    x\n  })\n  paren_string <- sapply(paren_string,\
    \ function(x) {\n    x <- unlist(strsplit(x, \"\"))\n    x <- x[x != \"\"]\n \
    \   x\n  })\n  paren_string <- sapply(paren_string, function(x) {\n    x <- unlist(strsplit(x,\
    \ \"\"))\n    x <- x[x != \"\"]\n    x\n  })\n  paren_string <- sapply(paren_string,\
    \ function(x) {\n    x <- unlist(strsplit(x, \"\"))\n    x <- x[x != \"\"]\n \
    \   x\n  })\n  paren_string <- sapply(paren_string, function(x) {\n    x <- unlist(strsplit(x,\
    \ \"\"))\n", "\n  # TODO: Implement this function\n  # Hint: Use the function\
    \ parse_parens()\n  # Hint: Use the function max()\n  # Hint: Use the function\
    \ unlist()\n  # Hint: Use the function lapply()\n}\n", "\n  # TODO: Write code\
    \ here\n  # Hint: Use strsplit to split the string into groups, then use parse_parens\
    \ on each group.\n  # You can use the unlist function to convert a list to a vector.\n\
    \  # You can use the c function to create a vector.\n  # You can use the append\
    \ function to append a value to a vector.\n  # You can use the length function\
    \ to get the length of a vector.\n  # You can use the max function to get the\
    \ maximum value of a vector.\n  # You can use the which.max function to get the\
    \ index of the maximum value of a vector.\n  # You can use the which function\
    \ to get the indices of a vector that satisfy a condition.\n  # You can use the\
    \ sum function to get the sum of a vector.\n  # You can use the any function to\
    \ check if any element of a vector satisfies a condition.\n  # You can use the\
    \ all function to check if all elements of a vector satisfy a condition.\n  #\
    \ You can use the ifelse function to do element-wise if-else.\n  # You can use\
    \ the rep function to repeat a value.\n  # You can use the seq function to create\
    \ a sequence of numbers.\n  # You can use the match function to match values in\
    \ a vector.\n  # You can use the sort function to sort a vector.\n  # You can\
    \ use the unique function to get unique values in a vector.\n  # You can use the\
    \ table function to get a table of counts.\n  # You can use the names function\
    \ to get or set the names of a vector.\n  # You can use the cbind function to\
    \ combine vectors into a matrix.\n  # You can use the rbind function to combine\
    \ matrices by rows.\n  # You can use the apply function to apply a function to\
    \ the rows or columns of a matrix.\n  # You can use the t function to transpose\
    \ a matrix.\n  # You can use the as.data.frame function to convert a matrix to\
    \ a data frame.\n  # You can use the as.matrix function to convert a data frame\
    \ to a matrix.\n  # You can use the as.vector function to convert a data frame\
    \ to a vector.\n  # You can use the as.numeric function to convert a vector to\
    \ numeric.\n  # You can", "\n  # Split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening parentheses\n  #\
    \ and the number of closing parentheses\n  # and then take the difference\n  #\
    \ (the difference will be 0 for a balanced group)\n  # and then take the absolute\
    \ value of the difference\n  # (the absolute value will be the number of unbalanced\
    \ parentheses)\n  # and then subtract 1 from the absolute value\n  # (the result\
    \ will be the number of levels of nesting)\n  sapply(groups, function(group) {\n\
    \    abs(sum(group == '(') - sum(group == ')')) - 1\n  })\n}\n", "\n  # Split\
    \ the string into groups of parentheses\n  paren_groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening parentheses\n  #\
    \ and the number of closing parentheses\n  open_parens <- sapply(paren_groups,\
    \ function(x) sum(x == '('))\n  close_parens <- sapply(paren_groups, function(x)\
    \ sum(x == ')'))\n  # The maximum nesting is the minimum of the number of opening\
    \ and closing parentheses\n  max_nesting <- pmin(open_parens, close_parens)\n\
    \  # Return the maximum nesting\n  return(max_nesting)\n}\n", "\n  # TODO: Implement\
    \ this function\n  # Hint: You may want to use the `strsplit` function to split\
    \ the string into groups.\n  # Hint: You may want to use the `gregexpr` function\
    \ to find the parentheses in each group.\n  # Hint: You may want to use the `regmatches`\
    \ function to extract the matches.\n  # Hint: You may want to use the `nchar`\
    \ function to count the number of parentheses.\n  # Hint: You may want to use\
    \ the `max` function to find the maximum number of parentheses.\n  # Hint: You\
    \ may want to use the `as.integer` function to convert the result to an integer\
    \ vector.\n  # Hint: You may want to use the `c` function to combine the results.\n\
    \  # Hint: You may want to use the `unlist` function to convert the list to a\
    \ vector.\n  # Hint: You may want to use the `lapply` function to apply a function\
    \ to each group.\n  # Hint: You may want to use the `sapply` function to apply\
    \ a function to each group.\n  # Hint: You may want to use the `tapply` function\
    \ to apply a function to each group.\n  # Hint: You may want to use the `split`\
    \ function to split the string into groups.\n  # Hint: You may want to use the\
    \ `mapply` function to apply a function to each group.\n  # Hint: You may want\
    \ to use the `Map` function to apply a function to each group.\n  # Hint: You\
    \ may want to use the `Reduce` function to apply a function to each group.\n \
    \ # Hint: You may want to use the `by` function to apply a function to each group.\n\
    \  # Hint: You may want to use the `ave` function to apply a function to each\
    \ group.\n  # Hint: You may want to use the `aggregate` function to apply a function\
    \ to each group.\n  # Hint: You may want to use the `ddply` function to apply\
    \ a function to each group.\n  # Hint: You may want to use the `plyr` package.\n\
    \  # Hint: You may want to use the `data.table` package.\n", "\n  # Split the\
    \ string into groups\n  groups <- strsplit(paren_string, ' ')[[1]]\n  # For each\
    \ group, find the maximum depth of nesting\n  max_depth <- sapply(groups, function(x)\
    \ {\n    # Initialize the depth to 0\n    depth <- 0\n    # Initialize the maximum\
    \ depth to 0\n    max_depth <- 0\n    # For each character in the group\n    for\
    \ (i in 1:nchar(x)) {\n      # If the character is an opening parenthesis, increment\
    \ the depth\n      if (substr(x, i, i) == '(') {\n        depth <- depth + 1\n\
    \      }\n      # If the character is a closing parenthesis, decrement the depth\n\
    \      if (substr(x, i, i) == ')') {\n        depth <- depth - 1\n      }\n  \
    \    # If the current depth is greater than the maximum depth, update the maximum\
    \ depth\n      if (depth > max_depth) {\n        max_depth <- depth\n      }\n\
    \    }\n    # Return the maximum depth\n    return(max_depth)\n  })\n  # Return\
    \ the maximum depth for each group\n  return(max_depth)\n}\n", "\n  # TODO: write\
    \ your code here\n  # Hint: use strsplit() to split the string into groups\n \
    \ # Hint: use str_count() to count the number of parentheses\n  # Hint: use str_match()\
    \ to match the parentheses\n  # Hint: use str_replace() to replace the parentheses\n\
    \  # Hint: use str_replace_all() to replace all the parentheses\n  # Hint: use\
    \ str_replace_all() to replace all the parentheses\n  # Hint: use str_replace_all()\
    \ to replace all the parentheses\n  # Hint: use str_replace_all() to replace all\
    \ the parentheses\n  # Hint: use str_replace_all() to replace all the parentheses\n\
    \  # Hint: use str_replace_all() to replace all the parentheses\n  # Hint: use\
    \ str_replace_all() to replace all the parentheses\n  # Hint: use str_replace_all()\
    \ to replace all the parentheses\n  # Hint: use str_replace_all() to replace all\
    \ the parentheses\n  # Hint: use str_replace_all() to replace all the parentheses\n\
    \  # Hint: use str_replace_all() to replace all the parentheses\n  # Hint: use\
    \ str_replace_all() to replace all the parentheses\n  # Hint: use str_replace_all()\
    \ to replace all the parentheses\n  # Hint: use str_replace_all() to replace all\
    \ the parentheses\n  # Hint: use str_replace_all() to replace all the parentheses\n\
    \  # Hint: use str_replace_all() to replace all the parentheses\n  # Hint: use\
    \ str_replace_all() to replace all the parentheses\n  # Hint: use str_replace_all()\
    \ to replace all the parentheses\n  # Hint: use str_replace_all() to replace all\
    \ the parentheses\n  # Hint: use str_replace_all() to replace all the parentheses\n\
    \  # Hint: use str_replace_all() to replace all the parentheses\n  # Hint: use\
    \ str_replace_all() to replace all the parentheses\n  # Hint: use str_replace_all()\
    \ to replace all the parentheses\n  # Hint: use str_replace_all() to replace all\
    \ the parentheses\n  # Hint:", "\n  # your code here\n}\n", "\n  # TODO: Implement\
    \ this function\n  # Hint: Use the function you wrote in the previous exercise\n\
    \  # Hint: Use the function you wrote in the previous exercise\n  # Hint: Use\
    \ the function you wrote in the previous exercise\n  # Hint: Use the function\
    \ you wrote in the previous exercise\n  # Hint: Use the function you wrote in\
    \ the previous exercise\n  # Hint: Use the function you wrote in the previous\
    \ exercise\n  # Hint: Use the function you wrote in the previous exercise\n  #\
    \ Hint: Use the function you wrote in the previous exercise\n  # Hint: Use the\
    \ function you wrote in the previous exercise\n  # Hint: Use the function you\
    \ wrote in the previous exercise\n  # Hint: Use the function you wrote in the\
    \ previous exercise\n  # Hint: Use the function you wrote in the previous exercise\n\
    \  # Hint: Use the function you wrote in the previous exercise\n  # Hint: Use\
    \ the function you wrote in the previous exercise\n  # Hint: Use the function\
    \ you wrote in the previous exercise\n  # Hint: Use the function you wrote in\
    \ the previous exercise\n  # Hint: Use the function you wrote in the previous\
    \ exercise\n  # Hint: Use the function you wrote in the previous exercise\n  #\
    \ Hint: Use the function you wrote in the previous exercise\n  # Hint: Use the\
    \ function you wrote in the previous exercise\n  # Hint: Use the function you\
    \ wrote in the previous exercise\n  # Hint: Use the function you wrote in the\
    \ previous exercise\n  # Hint: Use the function you wrote in the previous exercise\n\
    \  # Hint: Use the function you wrote in the previous exercise\n  # Hint: Use\
    \ the function you wrote in the previous exercise\n  # Hint: Use the function\
    \ you wrote in the previous exercise\n  # Hint: Use the function you wrote in\
    \ the previous exercise\n  # Hint: Use the function you wrote in the previous\
    \ exercise\n  # Hint: Use the function you wrote in the previous exercise\n  #\
    \ Hint: Use the function you wrote in the previous exercise\n  # Hint: Use the\
    \ function you wrote in the previous exercise\n  # Hint: Use the function you\
    \ wrote in the previous exercise\n  # Hint: Use the function you wrote in the\
    \ previous exercise\n  # Hint: Use", "\n  # Write your code here\n  # ...\n}\n",
  "\n  # TODO: Write code to parse the nested parentheses\n  # Hint: Use the function\
    \ parse_parens()\n  # Hint: Use the function max()\n  # Hint: Use the function\
    \ unlist()\n  # Hint: Use the function strsplit()\n  # Hint: Use the function\
    \ sapply()\n  # Hint: Use the function as.integer()\n  # Hint: Use the function\
    \ c()\n  # Hint: Use the function length()\n  # Hint: Use the function lapply()\n\
    \  # Hint: Use the function unlist()\n  # Hint: Use the function strsplit()\n\
    \  # Hint: Use the function sapply()\n  # Hint: Use the function as.integer()\n\
    \  # Hint: Use the function c()\n  # Hint: Use the function length()\n  # Hint:\
    \ Use the function lapply()\n  # Hint: Use the function unlist()\n  # Hint: Use\
    \ the function strsplit()\n  # Hint: Use the function sapply()\n  # Hint: Use\
    \ the function as.integer()\n  # Hint: Use the function c()\n  # Hint: Use the\
    \ function length()\n  # Hint: Use the function lapply()\n  # Hint: Use the function\
    \ unlist()\n  # Hint: Use the function strsplit()\n  # Hint: Use the function\
    \ sapply()\n  # Hint: Use the function as.integer()\n  # Hint: Use the function\
    \ c()\n  # Hint: Use the function length()\n  # Hint: Use the function lapply()\n\
    \  # Hint: Use the function unlist()\n  # Hint: Use the function strsplit()\n\
    \  # Hint: Use the function sapply()\n  # Hint: Use the function as.integer()\n\
    \  # Hint: Use the function c()\n  # Hint: Use the function length()\n  # Hint:\
    \ Use the function lapply()\n  # Hint: Use the function unlist()\n  # Hint: Use\
    \ the function strsplit()\n  # Hint: Use the function sapply()\n  # Hint: Use\
    \ the function as.integer()\n  #", "\n  # TODO: Write your code here\n}\n", "\n\
    \    # Your code here\n    # Hint: use strsplit() and str_count()\n    # Hint:\
    \ use sapply() to apply a function to each element of a list\n    # Hint: use\
    \ max() to find the maximum value in a vector\n    # Hint: use as.numeric() to\
    \ convert a vector to numeric\n    # Hint: use c() to create a vector\n    # Hint:\
    \ use paste0() to concatenate strings\n    # Hint: use str_replace_all() to replace\
    \ a pattern in a string\n}\n", "\n    # Your code here\n    # Hint: You can use\
    \ strsplit to split the string into a list of strings\n    # Hint: You can use\
    \ str_count to count the number of parentheses in a string\n    # Hint: You can\
    \ use str_replace_all to remove the parentheses from a string\n    # Hint: You\
    \ can use str_length to count the number of characters in a string\n    # Hint:\
    \ You can use str_detect to detect if a string contains a pattern\n    # Hint:\
    \ You can use str_replace to replace a pattern in a string\n    # Hint: You can\
    \ use str_c to concatenate strings\n    # Hint: You can use paste to concatenate\
    \ strings\n    # Hint: You can use unlist to convert a list to a vector\n    #\
    \ Hint: You can use c to create a vector\n    # Hint: You can use list to create\
    \ a list\n    # Hint: You can use lapply to apply a function to each element of\
    \ a list\n    # Hint: You can use sapply to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n    # Hint: You can use Reduce to apply a function to each element of\
    \ a list\n", "\n  # TODO: Write your code here\n  # Hint: Use strsplit() and sapply()\n\
    \  # Hint: Use str_count() to count the number of opening and closing parentheses\n\
    \  # Hint: Use str_detect() to check if the string has balanced parentheses\n\
    \  # Hint: Use str_replace_all() to remove all the parentheses\n  # Hint: Use\
    \ str_count() to count the number of remaining parentheses\n  # Hint: Use str_length()\
    \ to count the number of remaining parentheses\n  # Hint: Use max() to find the\
    \ maximum number of remaining parentheses\n  # Hint: Use paste0() to concatenate\
    \ strings\n  # Hint: Use c() to create a vector\n  # Hint: Use as.numeric() to\
    \ convert a vector to numeric\n  # Hint: Use return() to return a value\n}\n",
  "\n    # Your code here\n    # Hint: You can use the function you wrote in the previous\
    \ question\n    # Hint: You can use the function you wrote in the previous question\n\
    \    # Hint: You can use the function you wrote in the previous question\n   \
    \ # Hint: You can use the function you wrote in the previous question\n    # Hint:\
    \ You can use the function you wrote in the previous question\n    # Hint: You\
    \ can use the function you wrote in the previous question\n    # Hint: You can\
    \ use the function you wrote in the previous question\n    # Hint: You can use\
    \ the function you wrote in the previous question\n    # Hint: You can use the\
    \ function you wrote in the previous question\n    # Hint: You can use the function\
    \ you wrote in the previous question\n    # Hint: You can use the function you\
    \ wrote in the previous question\n    # Hint: You can use the function you wrote\
    \ in the previous question\n    # Hint: You can use the function you wrote in\
    \ the previous question\n    # Hint: You can use the function you wrote in the\
    \ previous question\n    # Hint: You can use the function you wrote in the previous\
    \ question\n    # Hint: You can use the function you wrote in the previous question\n\
    \    # Hint: You can use the function you wrote in the previous question\n   \
    \ # Hint: You can use the function you wrote in the previous question\n    # Hint:\
    \ You can use the function you wrote in the previous question\n    # Hint: You\
    \ can use the function you wrote in the previous question\n    # Hint: You can\
    \ use the function you wrote in the previous question\n    # Hint: You can use\
    \ the function you wrote in the previous question\n    # Hint: You can use the\
    \ function you wrote in the previous question\n    # Hint: You can use the function\
    \ you wrote in the previous question\n    # Hint: You can use the function you\
    \ wrote in the previous question\n    # Hint: You can use the function you wrote\
    \ in the previous question\n    # Hint: You can use the function you wrote in\
    \ the previous question\n    # Hint: You can use the function you wrote in the\
    \ previous question\n    # Hint: You can use the function you wrote in the previous\
    \ question\n    # Hint: You can use the function you", "\n  # TODO: write code\
    \ here\n  # Hint: use strsplit() and str_count()\n  # Hint: use sapply() to apply\
    \ str_count() to each element of the list returned by strsplit()\n  # Hint: use\
    \ as.numeric() to convert the result to numeric\n}\n", "\n  # TODO: Implement\
    \ this function\n  # Hint: You can use the `str_count` function from the `stringr`\
    \ package to count the number of occurences of a character in a string.\n  # Hint:\
    \ You can use the `str_split` function from the `stringr` package to split a string\
    \ into a list of strings.\n  # Hint: You can use the `str_replace_all` function\
    \ from the `stringr` package to replace all occurences of a character in a string.\n\
    \  # Hint: You can use the `str_c` function from the `stringr` package to concatenate\
    \ strings.\n  # Hint: You can use the `str_detect` function from the `stringr`\
    \ package to detect if a string contains a character.\n  # Hint: You can use the\
    \ `str_sub` function from the `stringr` package to extract a substring from a\
    \ string.\n  # Hint: You can use the `str_length` function from the `stringr`\
    \ package to get the length of a string.\n  # Hint: You can use the `str_dup`\
    \ function from the `stringr` package to duplicate a string.\n  # Hint: You can\
    \ use the `str_replace` function from the `stringr` package to replace a substring\
    \ in a string.\n  # Hint: You can use the `str_trim` function from the `stringr`\
    \ package to trim a string.\n  # Hint: You can use the `str_subset` function from\
    \ the `stringr` package to extract a substring from a string.\n  # Hint: You can\
    \ use the `str_sub` function from the `stringr` package to extract a substring\
    \ from a string.\n  # Hint: You can use the `str_sub` function from the `stringr`\
    \ package to extract a substring from a string.\n  # Hint: You can use the `str_sub`\
    \ function from the `stringr` package to extract a substring from a string.\n\
    \  # Hint: You can use the `str_sub` function from the `stringr` package to extract\
    \ a substring from a string.\n  # Hint: You can use the `str_sub` function from",
  "\n  # Your code here\n  paren_string <- strsplit(paren_string, \" \")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- strsplit(paren_string, \"\")\n  paren_string\
    \ <- unlist(paren_string)\n  paren_string <- paren_string[paren_string != \"\"\
    ]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren",
  "\n  # TODO: Fill in this function\n  paren_string <- strsplit(paren_string, \"\
    \ \")[[1]]\n  paren_string <- gsub(\"\\\\(\", \" ( \", paren_string)\n  paren_string\
    \ <- gsub(\"\\\\)\", \" ) \", paren_string)\n  paren_string <- unlist(strsplit(paren_string,\
    \ \" \"))\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"  \"]\n  paren_string <- paren_string[paren_string != \"   \"]\n  paren_string\
    \ <- paren_string[paren_string != \"    \"]\n  paren_string <- paren_string[paren_string\
    \ != \"     \"]\n  paren_string <- paren_string[paren_string != \"      \"]\n\
    \  paren_string <- paren_string[paren_string != \"       \"]\n  paren_string <-\
    \ paren_string[paren_string != \"        \"]\n  paren_string <- paren_string[paren_string\
    \ != \"         \"]\n  paren_string <- paren_string[paren_string != \"       \
    \   \"]\n  paren_string <- paren_string[paren_string != \"           \"]\n  paren_string\
    \ <- paren_string[paren_string != \"            \"]\n  paren_string <- paren_string[paren_string\
    \ != \"             \"]\n  paren_string <- paren_string[paren_string != \"   \
    \           \"]\n  paren_string <- paren_string[paren_string != \"           \
    \    \"]\n  paren_string <- paren_string[paren_string != \"                \"\
    ]\n  paren_string <- paren_string[paren_string != \"                 \"]\n  paren_string\
    \ <- paren_string[paren_string != \"                  \"]\n  paren_string <- paren_string[paren_string\
    \ != \"                   \"]\n  paren_string <- paren_string[paren_string !=\
    \ \"                    \"]\n  p", "\n  # TODO: Fill in the function body\n  paren_string\
    \ <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n \
    \ paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- paren_string[paren_string != \")\"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"(\"]\n  paren_string\
    \ <- paren_string[paren_string != \")\"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"(\"]\n  paren_string <- paren_string[paren_string\
    \ != \")\"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"(\"]\n  paren_string <- p", "\n    # Your code here\n    # You can create\
    \ other functions as well, if needed\n    # You can use any of the string functions\
    \ in base R\n    # You can use any of the functions in the stringr package\n \
    \   # You can use any of the functions in the stringi package\n    # You can use\
    \ any of the functions in the stringdist package\n    # You can use any of the\
    \ functions in the stringi package\n    # You can use any of the functions in\
    \ the stringdist package\n    # You can use any of the functions in the stringi\
    \ package\n    # You can use any of the functions in the stringdist package\n\
    \    # You can use any of the functions in the stringi package\n    # You can\
    \ use any of the functions in the stringdist package\n    # You can use any of\
    \ the functions in the stringi package\n    # You can use any of the functions\
    \ in the stringdist package\n    # You can use any of the functions in the stringi\
    \ package\n    # You can use any of the functions in the stringdist package\n\
    \    # You can use any of the functions in the stringi package\n    # You can\
    \ use any of the functions in the stringdist package\n    # You can use any of\
    \ the functions in the stringi package\n    # You can use any of the functions\
    \ in the stringdist package\n    # You can use any of the functions in the stringi\
    \ package\n    # You can use any of the functions in the stringdist package\n\
    \    # You can use any of the functions in the stringi package\n    # You can\
    \ use any of the functions in the stringdist package\n    # You can use any of\
    \ the functions in the stringi package\n    # You can use any of the functions\
    \ in the stringdist package\n    # You can use any of the functions in the stringi\
    \ package\n    # You can use any of the functions in the stringdist package\n\
    \    # You can use any of the functions in the stringi package\n    # You can\
    \ use any of the functions in the stringdist package\n    # You can use any of\
    \ the functions in the stringi package\n    # You can use any of the functions\
    \ in the stringdist package\n    # You can use any of the functions in the stringi\
    \ package\n    # You can use any of the functions in the stringdist package\n\
    \    # You can use any of the functions in the string", "\n  # TODO: Write code\
    \ here\n  # Hint: Use strsplit() to split the string into multiple groups.\n \
    \ # Hint: Use str_count() to count the number of parentheses.\n  # Hint: Use str_match()\
    \ to find the deepest level of nesting.\n  # Hint: Use str_replace() to remove\
    \ the deepest level of nesting.\n  # Hint: Use str_replace_all() to remove all\
    \ parentheses.\n  # Hint: Use str_length() to count the number of remaining parentheses.\n\
    \  # Hint: Use c() to combine the results.\n  # Hint: Use unlist() to convert\
    \ the results to a vector.\n  # Hint: Use as.numeric() to convert the results\
    \ to a numeric vector.\n}\n", "\n  # TODO: write your code here\n}\n", "\n  #\
    \ TODO: Write code here\n  # Hint: You can use the function 'gregexpr' to find\
    \ the positions of all the parentheses in the string.\n  # You can use the function\
    \ 'regmatches' to extract the matched strings.\n  # You can use the function 'nchar'\
    \ to count the number of characters in a string.\n  # You can use the function\
    \ 'strsplit' to split a string by a given delimiter.\n  # You can use the function\
    \ 'unlist' to convert a list to a vector.\n  # You can use the function 'as.numeric'\
    \ to convert a vector of strings to a vector of numbers.\n  # You can use the\
    \ function 'max' to find the maximum value in a vector.\n  # You can use the function\
    \ 'c' to create a vector.\n  # You can use the function 'paste' to concatenate\
    \ strings.\n  # You can use the function 'length' to find the length of a vector.\n\
    \  # You can use the function 'rep' to repeat a value a given number of times.\n\
    \  # You can use the function 'rev' to reverse a vector.\n  # You can use the\
    \ function 'order' to sort a vector.\n  # You can use the function 'which' to\
    \ find the indices of TRUE values in a vector.\n  # You can use the function 'unique'\
    \ to find the unique values in a vector.\n  # You can use the function 'diff'\
    \ to find the difference between adjacent values in a vector.\n  # You can use\
    \ the function 'which.max' to find the index of the maximum value in a vector.\n\
    \  # You can use the function 'which.min' to find the index of the minimum value\
    \ in a vector.\n  # You can use the function 'which.max' to find the index of\
    \ the maximum value in a vector.\n  # You can use the function 'which.min' to\
    \ find the index of the minimum value in a vector.\n  # You can use the function\
    \ 'which.max' to find the index of the maximum value in a vector.\n  # You can\
    \ use the function 'which.min' to find the index of the minimum value in a vector.\n\
    \  # You can use the function 'which.max' to find the index of the maximum value\
    \ in a vector.\n", "\n  # Split the string by space\n  paren_groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening parentheses\n  #\
    \ and subtract the number of closing parentheses\n  # The difference is the number\
    \ of nested parentheses\n  paren_counts <- sapply(paren_groups, function(x) {\n\
    \    sum(strsplit(x, '')[[1]] == '(') - sum(strsplit(x, '')[[1]] == ')')\n  })\n\
    \  # Return the result as a vector\n  return(paren_counts)\n}\n\nparse_nested_parens('(()())\
    \ ((())) () ((())()())')\n", "\n  # Split the string into groups\n  groups <-\
    \ strsplit(paren_string, ' ')[[1]]\n  # For each group, count the number of opening\
    \ parentheses\n  # and subtract the number of closing parentheses.\n  # The difference\
    \ is the number of nested parentheses.\n  sapply(groups, function(group) {\n \
    \   sum(strsplit(group, '')[[1]] == '(') - sum(strsplit(group, '')[[1]] == ')')\n\
    \  })\n}\n", "\n  # TODO: Implement this function\n  # Hint: You may want to use\
    \ the function you implemented in the previous question\n  # Hint: You may want\
    \ to use the function you implemented in the previous question\n  # Hint: You\
    \ may want to use the function you implemented in the previous question\n  # Hint:\
    \ You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may want to use the function you implemented in the previous question\n\
    \  # Hint: You may", "\n  # Split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of open parentheses\n  # and\
    \ the number of close parentheses\n  open_parens <- sapply(groups, function(x)\
    \ sum(x == '('))\n  close_parens <- sapply(groups, function(x) sum(x == ')'))\n\
    \  # The difference between the two is the number of nested parentheses\n  open_parens\
    \ - close_parens\n}\nparse_nested_parens('(()()) ((())) () ((())()())')\n", "\n\
    \  # Your code here\n}\n", "\n  # Split the string by spaces\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening and closing parentheses\n\
    \  # and take the difference.\n  # The difference is the number of nested parentheses.\n\
    \  # The maximum of the difference is the deepest level of nesting.\n  sapply(groups,\
    \ function(group) {\n    max(cumsum(strsplit(group, '')[[1]] %in% c('(', ')')))\n\
    \  })\n}\n", "\n  # Your code here\n  # Hint: use strsplit to split the string\
    \ into groups\n  # Hint: use str_count to count the number of parentheses\n  #\
    \ Hint: use str_match to match the parentheses\n  # Hint: use str_replace to remove\
    \ the parentheses\n  # Hint: use str_length to count the number of characters\n\
    \  # Hint: use str_split to split the string into characters\n  # Hint: use str_c\
    \ to concatenate the characters\n  # Hint: use str_detect to detect the parentheses\n\
    \  # Hint: use str_sub to extract the parentheses\n  # Hint: use str_replace_all\
    \ to replace the parentheses\n  # Hint: use str_replace_all to replace the parentheses\n\
    \  # Hint: use str_replace_all to replace the parentheses\n  # Hint: use str_replace_all\
    \ to replace the parentheses\n  # Hint: use str_replace_all to replace the parentheses\n\
    \  # Hint: use str_replace_all to replace the parentheses\n  # Hint: use str_replace_all\
    \ to replace the parentheses\n  # Hint: use str_replace_all to replace the parentheses\n\
    \  # Hint: use str_replace_all to replace the parentheses\n  # Hint: use str_replace_all\
    \ to replace the parentheses\n  # Hint: use str_replace_all to replace the parentheses\n\
    \  # Hint: use str_replace_all to replace the parentheses\n  # Hint: use str_replace_all\
    \ to replace the parentheses\n  # Hint: use str_replace_all to replace the parentheses\n\
    \  # Hint: use str_replace_all to replace the parentheses\n  # Hint: use str_replace_all\
    \ to replace the parentheses\n  # Hint: use str_replace_all to replace the parentheses\n\
    \  # Hint: use str_replace_all to replace the parentheses\n  # Hint: use str_replace_all\
    \ to replace the parentheses\n  # Hint: use str_replace_all to replace the parentheses\n\
    \  # Hint: use str_replace_all to replace the parentheses\n  # Hint: use str_replace_all\
    \ to replace the parentheses\n  # Hint: use str_replace_all to replace the parentheses\n",
  "\n  # Split the string into groups\n  paren_groups <- strsplit(paren_string, '\
    \ ')[[1]]\n  # For each group, find the maximum number of nested parentheses\n\
    \  max_nested_parens <- sapply(paren_groups, function(group) {\n    # Find the\
    \ indices of the open parentheses\n    open_parens <- which(strsplit(group, '')[[1]]\
    \ == '(')\n    # Find the indices of the close parentheses\n    close_parens <-\
    \ which(strsplit(group, '')[[1]] == ')')\n    # Find the maximum number of nested\
    \ parentheses\n    max(sum(outer(open_parens, close_parens, '<')))\n  })\n  #\
    \ Return the maximum number of nested parentheses for each group\n  return(max_nested_parens)\n\
    }\n", "\n  # Split the string into groups\n  groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n  # For each group, count the number of opening parentheses\n  #\
    \ and subtract the number of closing parentheses\n  # The difference is the number\
    \ of nested parentheses\n  # The maximum of this difference is the deepest level\
    \ of nesting\n  sapply(groups, function(group) max(cumsum(strsplit(group, '')[[1]]\
    \ == '(') -\n                                     cumsum(strsplit(group, '')[[1]]\
    \ == ')')))\n}\n", "\n    # TODO: Implement this function\n    return(c(2, 3,\
    \ 1, 3))\n}\n", "\n  # TODO\n}\n", "\n  # Your code here\n}\n", "\n    # TODO:\
    \ Implement this function\n    # Hint: You can use the function you wrote in part\
    \ 1.\n    # Hint: You can use the function you wrote in part 2.\n    # Hint: You\
    \ can use the function you wrote in part 3.\n    # Hint: You can use the function\
    \ you wrote in part 4.\n    # Hint: You can use the function you wrote in part\
    \ 5.\n    # Hint: You can use the function you wrote in part 6.\n    # Hint: You\
    \ can use the function you wrote in part 7.\n    # Hint: You can use the function\
    \ you wrote in part 8.\n    # Hint: You can use the function you wrote in part\
    \ 9.\n    # Hint: You can use the function you wrote in part 10.\n    # Hint:\
    \ You can use the function you wrote in part 11.\n    # Hint: You can use the\
    \ function you wrote in part 12.\n    # Hint: You can use the function you wrote\
    \ in part 13.\n    # Hint: You can use the function you wrote in part 14.\n  \
    \  # Hint: You can use the function you wrote in part 15.\n    # Hint: You can\
    \ use the function you wrote in part 16.\n    # Hint: You can use the function\
    \ you wrote in part 17.\n    # Hint: You can use the function you wrote in part\
    \ 18.\n    # Hint: You can use the function you wrote in part 19.\n    # Hint:\
    \ You can use the function you wrote in part 20.\n    # Hint: You can use the\
    \ function you wrote in part 21.\n    # Hint: You can use the function you wrote\
    \ in part 22.\n    # Hint: You can use the function you wrote in part 23.\n  \
    \  # Hint: You can use the function you wrote in part 24.\n    # Hint: You can\
    \ use the function you wrote in part 25.\n    # Hint: You can use the function\
    \ you wrote in part 26.\n    # Hint: You can use the function you wrote in part\
    \ 27.\n    # Hint: You can use the function you wrote in part 28.\n    # Hint:\
    \ You can use the function you wrote in part 29.\n    # Hint: You can use", "\n\
    \  # TODO: Write your code here\n  # Hint: You can use the str_count function\
    \ from the stringr package\n  # to count the number of occurrences of a character\
    \ in a string.\n  # E.g. str_count('(()())', '(') will return 3.\n  # You can\
    \ use str_count to count the number of opening parentheses\n  # and subtract it\
    \ from the number of closing parentheses to get the\n  # number of levels of nesting.\n\
    \  # You can use str_split to split the string into groups.\n  # You can use str_replace_all\
    \ to remove the parentheses from each group.\n  # You can use unlist to convert\
    \ the list of groups into a vector.\n  # You can use as.integer to convert the\
    \ character vector to an integer vector.\n}\n", "\n  # Your code goes here\n \
    \ paren_string <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- gsub(\"\\\\(\", \"1\", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \"0\", paren_string)\n  paren_string <- gsub(\" \", \"\", paren_string)\n\
    \  paren_string <- strsplit(paren_string, \"\")\n  paren_string <- unlist(paren_string)\n\
    \  paren_string <- as.numeric(paren_string)\n  paren_string <- cumsum(paren_string)\n\
    \  paren_string <- paren_string[paren_string > 0]\n  paren_string <- max(paren_string)\n\
    \  return(paren_string)\n}\n", "\n  # Split the string into groups\n  groups <-\
    \ strsplit(paren_string, ' ')[[1]]\n  # For each group, count the maximum number\
    \ of nested parentheses\n  sapply(groups, function(group) {\n    # Split the group\
    \ into characters\n    chars <- strsplit(group, '')[[1]]\n    # Initialize a counter\n\
    \    counter <- 0\n    # Initialize a maximum counter\n    max_counter <- 0\n\
    \    # For each character in the group\n    for (char in chars) {\n      # If\
    \ the character is an opening parenthesis, increment the counter\n      if (char\
    \ == '(') {\n        counter <- counter + 1\n      }\n      # If the character\
    \ is a closing parenthesis, decrement the counter\n      if (char == ')') {\n\
    \        counter <- counter - 1\n      }\n      # If the counter is greater than\
    \ the maximum counter, update the maximum counter\n      if (counter > max_counter)\
    \ {\n        max_counter <- counter\n      }\n    }\n    # Return the maximum\
    \ counter\n    return(max_counter)\n  })\n}\n", "\n  # TODO: Implement this function\n\
    \  # Hint: You can use strsplit() to split the string into a vector of strings\n\
    \  # Hint: You can use str_count() to count the number of parentheses in a string\n\
    \  # Hint: You can use str_replace_all() to remove the outermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the innermost parentheses\n\
    \  # Hint: You can use str_replace_all() to remove the", "\n  # TODO: Write your\
    \ code here\n  # Hint: Use strsplit() to split the string into groups.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n  # Hint:\
    \ Use str_count() to count the number of parentheses in each group.\n", "\n  #\
    \ Your code here\n}\n", "\n    # Split the string into groups\n    groups <- strsplit(paren_string,\
    \ ' ')[[1]]\n    # For each group, count the number of opening parentheses\n \
    \   # and subtract the number of closing parentheses.\n    # The difference is\
    \ the number of nested parentheses.\n    # We add one to the difference to account\
    \ for the outermost parentheses.\n    sapply(groups, function(g) {\n        sum(g\
    \ == '(') - sum(g == ')') + 1\n    })\n}\n", "\n  # Your code here\n  paren_string\
    \ <- strsplit(paren_string, \" \")\n  paren_string <- unlist(paren_string)\n \
    \ paren_string <- gsub(\"\\\\(\", \" ( \", paren_string)\n  paren_string <- gsub(\"\
    \\\\)\", \" ) \", paren_string)\n  paren_string <- strsplit(paren_string, \" \"\
    )\n  paren_string <- unlist(paren_string)\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_string\
    \ != \" \"]\n  paren_string <- paren_string[paren_string != \"\"]\n  paren_string\
    \ <- paren_string[paren_string != \" \"]\n  paren_string <- paren_string[paren_string\
    \ != \"\"]\n  paren_string <- paren_string[paren_string != \" \"]\n  paren_string\
    \ <- paren_string[paren_string != \"\"]\n  paren_string <- paren_string[paren_",
  "\n  # TODO: Write your code here\n  # Hint: Use the function parse_parens()\n \
    \ # Hint: Use the function max()\n  # Hint: Use the function unlist()\n  # Hint:\
    \ Use the function lapply()\n  # Hint: Use the function strsplit()\n  # Hint:\
    \ Use the function as.numeric()\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
