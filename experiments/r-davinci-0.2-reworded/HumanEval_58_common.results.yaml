name: HumanEval_58_common
language: r
results:
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  sort(unique(c(l1,\
    \ l2)))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
