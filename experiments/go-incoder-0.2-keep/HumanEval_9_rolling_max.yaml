name: HumanEval_9_rolling_max
language: go_test.go
prompt: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // From a given list of integers, generate a list of rolling maximum element found\
  \ until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4,\
  \ 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers []int) []int {\n"
tests: "func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2,\
  \ 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    max := numbers[0]\n    result := make([]int, 0, len(numbers))\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n", "    max := numbers[0]\n\
    \    result := make([]int, 0)\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        if number > result[i-1] {\n            i++\n        }\n  \
    \  }\n    return result\n}\n", "    result := make([]int, len(numbers))\n    i\
    \ := 0\n    for _, number := range numbers {\n        result[i] = number\n   \
    \     i++\n    }\n    for i := 0; i < len(numbers); i++ {\n        result[i] =\
    \ numbers[len(numbers)-i-1]\n    }\n    return result\n}\n", "    var result []int\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        if number > max {\n            result = append(result, max)\n\
    \            max = number\n        }\n    }\n    return append(result, max)\n\
    }\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n           \
    \ max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers); i++ {\n\
    \        result[i] = max\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    for i := 0; i < len(numbers); i++\
    \ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n\
    \    }\n    for i := 0; i < len(numbers); i++ {\n        result[i] = max\n   \
    \ }\n    return result\n}\n", "    var result []int\n    var max int\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return append(result, max)\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    for i := 0; i < len(numbers); i++\
    \ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n\
    \    }\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n\
    \            result[i] = max\n        } else {\n            result[i] = numbers[i]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    rolling_max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n    \
    \    if numbers[i] > rolling_max {\n            rolling_max = numbers[i]\n   \
    \     }\n        result[i] = rolling_max\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        if i >= len(numbers)-1 {\n  \
    \          break\n        }\n        i += 1\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number == max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        i += 1\n    }\n    for\
    \ i := 0; i < len(numbers); i++ {\n        result[i] = max(result[i], numbers[i])\n\
    \    }\n    return result\n}\n", "    var result []int\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return append(result, max)\n}\n", "    result\
    \ := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n       \
    \ }\n    }\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > max\
    \ {\n            result[i] = max\n        } else {\n            result[i] = numbers[i]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    max := numbers[0]\n    i := 0\n    for _, number := range numbers {\n   \
    \     if number > max {\n            max = number\n        }\n        result[i]\
    \ = max\n        i++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        if numbers[i] > max {\n            result[i] =\
    \ max\n        } else {\n            result[i] = numbers[i]\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n\
    \    i := 0\n    for _, number := range numbers {\n        if number > max {\n\
    \            max = number\n        }\n        result[i] = max\n        i++\n \
    \   }\n    return result\n}\n", "    var result []int\n    var max int\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number ==\
    \ max {\n            result = append(result, max)\n        } else {\n        \
    \    result = append(result, number)\n        }\n    }\n    return result\n}\n",
  "    var max_number int\n    var max_index int\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] > max_number {\n            max_number = numbers[i]\n\
    \            max_index = i\n        }\n    }\n    result := make([]int, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        if i == max_index {\n      \
    \      result[i] = max_number\n        } else {\n            result[i] = numbers[i]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        if numbers[i] > max {\n            result[i] =\
    \ max\n        } else {\n            result[i] = numbers[i]\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  rolling_max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n      \
    \  if numbers[i] > rolling_max {\n            rolling_max = numbers[i]\n     \
    \   }\n        result[i] = rolling_max\n    }\n    return result\n}\n", "    var\
    \ max int\n    var result []int\n    for _, number := range numbers {\n      \
    \  if number > max {\n            max = number\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    i := 0\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result[i] = max\n        i++\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    rolling_max := numbers[0]\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > rolling_max {\n           \
    \ rolling_max = numbers[i]\n        }\n        result[i] = rolling_max\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    var max int\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return append(result, max)\n}\n", "    var result []int\n \
    \   var max int\n    for _, n := range numbers {\n        if n > max {\n     \
    \       max = n\n        }\n    }\n    for _, n := range numbers {\n        if\
    \ n == max {\n            result = append(result, max)\n        } else {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n           \
    \ max = numbers[i]\n        }\n        result[i] = max\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        i += 1\n    }\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if result[i] > result[i-1] {\n    \
    \        result[i-1] = result[i]\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        result[i]\
    \ = max\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        if numbers[i] > max {\n            result[i] =\
    \ max\n        } else {\n            result[i] = numbers[i]\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        } else\
    \ {\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number ==\
    \ max {\n            result = append(result, max)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i++\n    }\n    for i := len(numbers);\
    \ i < len(result); i++ {\n        result[i] = numbers[0]\n    }\n    return result\n\
    }\n", "    var max_number int\n    var max_index int\n    var max_value int\n\
    \    for index, number := range numbers {\n        if number > max_number {\n\
    \            max_number = number\n            max_index = index\n            max_value\
    \ = number\n        }\n    }\n    result := make([]int, len(numbers))\n    for\
    \ index, number := range numbers {\n        if index == max_index {\n        \
    \    result[index] = max_value\n        } else {\n            result[index] =\
    \ number\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    var max_number int\n    var max_index\
    \ int\n    var max_value int\n    for index, number := range numbers {\n     \
    \   if number > max_value {\n            max_value = number\n            max_index\
    \ = index\n        }\n    }\n    return numbers[max_index+1:]\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number == max {\n           \
    \ result = append(result, max)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        result[i]\
    \ = max\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n        result = append(result, max)\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        i++\n    }\n    for i := 0; i < len(numbers); i++ {\n    \
    \    result[i] = numbers[len(numbers)-1]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    i := 0\n    for _, number := range numbers\
    \ {\n        result[i] = number\n        i += 1\n    }\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if result[i-1] > result[i] {\n            result[i] = result[i-1]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    max := numbers[0]\n    for i := range numbers {\n        if numbers[i] >\
    \ max {\n            max = numbers[i]\n        }\n    }\n    for i := range numbers\
    \ {\n        if numbers[i] == max {\n            result[i] = max\n        } else\
    \ {\n            result[i] = numbers[i]\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        i++\n    }\n    for\
    \ i := len(numbers); i < len(result); i++ {\n        result[i] = numbers[0]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        i += 1\n    }\n    for i := 0; i < len(numbers); i++ {\n        result[i]\
    \ = numbers[len(numbers)-1]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        if number > result[i-1] {\n            i++\n        }\n  \
    \  }\n    return result\n}\n", "    var result []int\n    for _, number := range\
    \ numbers {\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    max := numbers[0]\n    result := make([]int, 0, len(numbers))\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number == max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        i += 1\n    }\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if result[i] > numbers[i] {\n     \
    \       result[i] = numbers[i]\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            result[i] = max\n        } else {\n            result[i]\
    \ = numbers[i]\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    for i := 0; i < len(numbers); i++\
    \ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n\
    \        result[i] = max\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    for i := 0; i < len(numbers); i++\
    \ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n\
    \    }\n    for i := 0; i < len(numbers); i++ {\n        result[i] = max\n   \
    \ }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    i := 0\n    for _, v := range numbers\
    \ {\n        if v > max {\n            max = v\n        }\n        result[i] =\
    \ max\n        i++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    for i := 0; i < len(numbers); i++\
    \ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n\
    \        result[i] = max\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, number := range numbers {\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        if number > max {\n      \
    \      result = append(result, max)\n            max = number\n        } else\
    \ {\n            max = number\n        }\n    }\n    result = append(result, max)\n\
    \    return result\n}\n", "    var result []int\n    var max int\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n    }\n    for _, number := range numbers {\n        if number == max\
    \ {\n            result = append(result, max)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        if number > result[i-1]\
    \ {\n            result[i] = number\n        } else {\n            result[i] =\
    \ result[i-1]\n        }\n        i++\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    max := numbers[0]\n    for i := range numbers\
    \ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n\
    \    }\n    for i := range numbers {\n        if numbers[i] == max {\n       \
    \     result[i] = max\n        } else {\n            result[i] = numbers[i]\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ number := range numbers {\n        result = append(result, number)\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n\
    \    i := 0\n    for _, number := range numbers {\n        if number > max {\n\
    \            max = number\n        }\n        result[i] = max\n        i++\n \
    \   }\n    return result\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ 0)\n    for _, number := range numbers {\n        if number > max {\n      \
    \      result = append(result, max)\n            max = number\n        } else\
    \ {\n            max = number\n        }\n    }\n    return append(result, max)\n\
    }\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n           \
    \ max = numbers[i]\n        }\n        result[i] = max\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n    i :=\
    \ 0\n    for _, number := range numbers {\n        if number > max {\n       \
    \     max = number\n        }\n        result[i] = max\n        i++\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(numbers))\n    max :=\
    \ numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i] >\
    \ max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = max\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    max := numbers[0]\n    i := 0\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result[i] = max\n        i++\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            result[i] = max\n        } else {\n            result[i]\
    \ = numbers[i]\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        if number > result[i-1] {\n            result[i] = number\n\
    \        } else {\n            result[i] = result[i-1]\n        }\n        i++\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return append(result, max)\n}\n", "    result\
    \ := make([]int, len(numbers))\n    i := 0\n    for _, number := range numbers\
    \ {\n        result[i] = number\n        if number > result[i-1] {\n         \
    \   result[i] = number\n        } else {\n            result[i] = result[i-1]\n\
    \        }\n        i++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    i := 0\n    for _, number := range numbers\
    \ {\n        result[i] = number\n        if number > result[i-1] {\n         \
    \   i++\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    rolling_max := numbers[0]\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] > rolling_max {\n            rolling_max = numbers[i]\n\
    \        }\n        result[i] = rolling_max\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i = i + 1\n        if i >= len(numbers)\
    \ {\n            break\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    current := 0\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        if\
    \ number == max {\n            result = append(result, max)\n        }\n     \
    \   current = number\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    rolling_max := numbers[0]\n    i := 0\n    for _, number\
    \ := range numbers {\n        if number > rolling_max {\n            rolling_max\
    \ = number\n        }\n        result[i] = rolling_max\n        i++\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(numbers))\n    max :=\
    \ numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i] >\
    \ max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = max\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    for i := 0; i < len(numbers); i++\
    \ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n\
    \    }\n    for i := 0; i < len(numbers); i++ {\n        result[i] = max\n   \
    \ }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n\
    \    i := 0\n    for _, number := range numbers {\n        if number > max {\n\
    \            max = number\n        }\n        result[i] = max\n        i++\n \
    \   }\n    return result\n}\n", "    max := numbers[0]\n    result := make([]int,\
    \ 0, len(numbers))\n    for _, number := range numbers {\n        if number >\
    \ max {\n            max = number\n            result = append(result, max)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var max\
    \ int\n    for _, number := range numbers {\n        if number > max {\n     \
    \       max = number\n        }\n    }\n    for _, number := range numbers {\n\
    \        if number > max {\n            result = append(result, max)\n       \
    \     max = number\n        }\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(numbers))\n    i := 0\n    for _, number := range numbers {\n\
    \        result[i] = number\n        i = i + 1\n    }\n    for i := i - 1; i >=\
    \ 0; i-- {\n        if result[i] > result[i-1] {\n            result[i], result[i-1]\
    \ = result[i-1], result[i]\n        }\n    }\n    return result\n}\n", "    max\
    \ := numbers[0]\n    result := make([]int, 0)\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n            result =\
    \ append(result, max)\n        } else {\n            result = append(result, number)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    var max int\n    var max_index int\n\
    \    var max_value int\n    var i int\n    for i = 0; i < len(numbers); i++ {\n\
    \        if numbers[i] > max {\n            max = numbers[i]\n            max_index\
    \ = i\n        }\n    }\n    for i = 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n            max_value = numbers[i]\n\
    \            max_index = i\n        }\n    }\n    return numbers[max_index:]\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n        result[i] = max\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var max int\n    for _, number := range numbers {\n      \
    \  if number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n        result = append(result, max)\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        i++\n    }\n    for i := 0; i < len(numbers); i++ {\n        if result[i]\
    \ > result[i-1] {\n            result[i] = result[i-1]\n        }\n    }\n   \
    \ return result\n}\n", "    max := numbers[0]\n    result := make([]int, 0)\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n            result = append(result, max)\n        }\n    }\n \
    \   return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return append(result, max)\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    i := 0\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result[i] = max\n        i++\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n       \
    \ }\n    }\n    for i := 0; i < len(numbers); i++ {\n        result[i] = max\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  max := numbers[0]\n    i := 0\n    for _, number := range numbers {\n     \
    \   if number > max {\n            max = number\n        }\n        result[i]\
    \ = max\n        i++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    i := 0\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result[i] = max\n        i++\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number == max {\n           \
    \ result = append(result, max)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += 1\n    }\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if result[i] > result[i-1] {\n            result[i]\
    \ = result[i-1]\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        i += 1\n    }\n    for i := 0; i < len(numbers); i++ {\n \
    \       if result[i] > numbers[i] {\n            result[i] = numbers[i]\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    max := numbers[0]\n    i := 0\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result[i] = max\n        i++\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    rolling_max := numbers[0]\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if numbers[i] > rolling_max {\n   \
    \         rolling_max = numbers[i]\n        }\n        result[i] = rolling_max\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  max := numbers[0]\n    i := 0\n    for _, number := range numbers {\n     \
    \   if number > max {\n            max = number\n        }\n        result[i]\
    \ = max\n        i++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    rolling_max := numbers[0]\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] > rolling_max {\n            rolling_max = numbers[i]\n\
    \        }\n        result[i] = rolling_max\n    }\n    return result\n}\n", " \
    \   var max int\n    var result []int\n    for _, number := range numbers {\n\
    \        if number > max {\n            max = number\n            result = append(result,\
    \ max)\n        } else {\n            result = append(result, number)\n      \
    \  }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number > max {\n\
    \            max = number\n        }\n    }\n    result = append(result, max)\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ result = append(result, max)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(numbers))\n    rolling_max := 0\n    rolling_max_index\
    \ := 0\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > rolling_max\
    \ {\n            rolling_max = numbers[i]\n            rolling_max_index = i\n\
    \        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ == rolling_max {\n            result[rolling_max_index] = numbers[i]\n     \
    \   }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        if number == max {\n            result = append(result, max)\n  \
    \      }\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n        result[i] = max\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  max := numbers[0]\n    i := 0\n    for _, number := range numbers {\n     \
    \   if number > max {\n            max = number\n        }\n        result[i]\
    \ = max\n        i++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        result[i]\
    \ = number\n        i++\n    }\n    return rolling_max_helper(result, len(numbers),\
    \ 0)\n}\n", "    var result []int\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n > max {\n            max = n\n        }\n    }\n   \
    \ for _, n := range numbers {\n        if n == max {\n            result = append(result,\
    \ max)\n        } else {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    result = append(result, max)\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n        result[i] = max\n    }\n    return result\n}\n", "    max\
    \ := numbers[0]\n    result := make([]int, 0)\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        } else {\n            max = number\n        }\n\
    \    }\n    return append(result, max)\n}\n", "    result := make([]int, len(numbers))\n\
    \    max := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        if numbers[i] > max {\n            result[i] =\
    \ max\n        } else {\n            result[i] = numbers[i]\n        }\n    }\n\
    \    return result\n}\n", "    max := numbers[0]\n    result := make([]int, 0)\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n            result = append(result, max)\n        }\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(numbers))\n    i := 0\n\
    \    for _, number := range numbers {\n        result[i] = number\n        i +=\
    \ 1\n    }\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            if numbers[i] < numbers[j] {\n          \
    \      result[j] = numbers[i]\n            }\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var max int\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number == max {\n           \
    \ result = append(result, max)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result = append(result, max)\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    max := numbers[0]\n    i := 0\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result[i] = max\n        i++\n    }\n    return result\n}\n",
  "    var result []int\n    var max int\n    for _, number := range numbers {\n \
    \       if number > max {\n            max = number\n        }\n    }\n    for\
    \ _, number := range numbers {\n        if number > max {\n            result\
    \ = append(result, max)\n            max = number\n        }\n    }\n    return\
    \ append(result, max)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n\
    \    i := 0\n    for _, number := range numbers {\n        if number > max {\n\
    \            max = number\n        }\n        result[i] = max\n        i++\n \
    \   }\n    return result\n}\n", "    result := make([]int, len(numbers))\n   \
    \ i := 0\n    for _, number := range numbers {\n        result[i] = number\n \
    \       if number > result[i-1] {\n            i++\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(numbers))\n    i := 0\n    for\
    \ _, number := range numbers {\n        result[i] = number\n        i++\n    }\n\
    \    for i := 0; i < len(numbers); i++ {\n        if result[i] > result[i-1] {\n\
    \            result[i-1] = result[i]\n        }\n    }\n    return result\n}\n",
  "    max := numbers[0]\n    result := make([]int, len(numbers))\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n        result[i] = max\n    }\n    return result\n}\n", "    var\
    \ result []int\n    current := 0\n    for _, number := range numbers {\n     \
    \   if number > current {\n            result = append(result, number)\n     \
    \       current = number\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n       \
    \ }\n        result[i] = max\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    i := 0\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result[i] = max\n        i++\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n       \
    \ }\n    }\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > max\
    \ {\n            result[i] = max\n        } else {\n            result[i] = numbers[i]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    i := 0\n    for _, number := range numbers {\n        result[i] = number\n\
    \        i += 1\n    }\n    for i := 0; i < len(numbers); i++ {\n        if result[i]\
    \ > result[i-1] {\n            result[i] = result[i-1]\n        }\n    }\n   \
    \ return result\n}\n", "    max := numbers[0]\n    result := make([]int, 0, len(numbers))\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n            result = append(result, max)\n        } else {\n \
    \           result = append(result, number)\n        }\n    }\n    return result\n\
    }\n", "    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    return append(result, max)\n}\n", "    result := make([]int,\
    \ len(numbers))\n    max := numbers[0]\n    i := 0\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \        result[i] = max\n        i++\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number > max {\n            result\
    \ = append(result, max)\n            max = number\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            result[i] = max\n        } else {\n            result[i]\
    \ = numbers[i]\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(numbers))\n    max := numbers[0]\n    i := 0\n \
    \   for _, number := range numbers {\n        if number > max {\n            max\
    \ = number\n        }\n        result[i] = max\n        i++\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    max := numbers[0]\n    i := 0\n  \
    \  for _, number := range numbers {\n        if number > max {\n            max\
    \ = number\n        }\n        result[i] = max\n        i++\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(numbers))\n    i := 0\n    for\
    \ _, number := range numbers {\n        result[i] = number\n        i++\n    }\n\
    \    for i := 0; i < len(numbers); i++ {\n        result[i] = max(result[i], numbers[i])\n\
    \    }\n    return result\n}\n", "    var result []int\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(numbers))\n  \
    \  max := numbers[0]\n    for i := range numbers {\n        if numbers[i] > max\
    \ {\n            max = numbers[i]\n        }\n    }\n    for i := range numbers\
    \ {\n        if numbers[i] == max {\n            result[i] = max\n        } else\
    \ {\n            result[i] = numbers[i]\n        }\n    }\n    return result\n\
    }\n", "    max := numbers[0]\n    result := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        if number > max {\n            result = append(result,\
    \ max)\n            max = number\n        } else {\n            max = number\n\
    \        }\n    }\n    result = append(result, max)\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    rolling_max := 0\n    rolling_max_index\
    \ := 0\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > rolling_max\
    \ {\n            rolling_max = numbers[i]\n            rolling_max_index = i\n\
    \        }\n    }\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > rolling_max {\n            result[rolling_max_index] = numbers[i]\n      \
    \      rolling_max = numbers[i]\n            rolling_max_index = i\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number == max {\n            result = append(result, max)\n        } else\
    \ {\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    }\n    }\n    return result\n}\n", "    max := numbers[0]\n    result :=\
    \ make([]int, 0)\n    for _, number := range numbers {\n        if number > max\
    \ {\n            result = append(result, max)\n            max = number\n    \
    \    } else {\n            max = number\n        }\n    }\n    return append(result,\
    \ max)\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        if number > result[i-1] {\n \
    \           result[i] = number\n        }\n        i++\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n    i :=\
    \ 0\n    for _, number := range numbers {\n        if number > max {\n       \
    \     max = number\n        }\n        result[i] = max\n        i++\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(numbers))\n    max :=\
    \ numbers[0]\n    i := 0\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        result[i] = max\n    \
    \    i++\n    }\n    return result\n}\n", "    var result []int\n    rolling_max\
    \ := func(numbers []int, i int) {\n        if i >= len(numbers) {\n          \
    \  return\n        }\n        if numbers[i] == numbers[i-1] {\n            rolling_max(numbers,\
    \ i+1)\n        } else {\n            result = append(result, numbers[i])\n  \
    \          rolling_max(numbers, i+1)\n        }\n    }\n    rolling_max(numbers,\
    \ 0)\n    return result\n}\n", "    result := make([]int, len(numbers))\n    i\
    \ := 0\n    for _, number := range numbers {\n        result[i] = number\n   \
    \     i++\n    }\n    for i := 0; i < len(numbers); i++ {\n        result[i] =\
    \ max(result[i], numbers[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    max := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    result = append(result,\
    \ max)\n    for _, number := range numbers {\n        if number > max {\n    \
    \        max = number\n        }\n        result = append(result, max)\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(numbers))\n    i := 0\n\
    \    for _, number := range numbers {\n        result[i] = number\n        i++\n\
    \    }\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n\
    \    }\n    return result\n}\n", "    var result []int\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n    }\n    for _, number := range numbers {\n     \
    \   if number > max {\n            result = append(result, max)\n            max\
    \ = number\n        }\n    }\n    return append(result, max)\n}\n", "    result\
    \ := make([]int, len(numbers))\n    i := 0\n    for _, number := range numbers\
    \ {\n        result[i] = number\n        i++\n    }\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = max(result[i], numbers[i])\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += 1\n    }\n    for i := 0;\
    \ i < len(numbers); i++ {\n        result[i] = max(result[i], numbers[i])\n  \
    \  }\n    return result\n}\n", "    result := make([]int, len(numbers))\n    max\
    \ := numbers[0]\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ > max {\n            max = numbers[i]\n        }\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        result[i] = max\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n        result[i] = max\n    }\n    return result\n}\n", "    max\
    \ := numbers[0]\n    result := make([]int, 0)\n    for _, number := range numbers\
    \ {\n        if number > max {\n            result = append(result, max)\n   \
    \         max = number\n        } else {\n            max = number\n        }\n\
    \    }\n    return append(result, max)\n}\n", "    result := make([]int, 0)\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n", "    var max int\n    var result []int\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n            result = append(result, max)\n        } else {\n \
    \           result = append(result, number)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n           \
    \ max = numbers[i]\n        }\n        result[i] = max\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    max := numbers[0]\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if numbers[i] > max {\n           \
    \ max = numbers[i]\n        }\n        result[i] = max\n    }\n    return result\n\
    }\n", "    result := make([]int, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        result[i] = number\n        i++\n    }\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if result[i] > result[i-1] {\n    \
    \        result[i-1] = result[i]\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var max int\n    for _, number := range numbers {\n\
    \        if number > max {\n            max = number\n        }\n    }\n    for\
    \ _, number := range numbers {\n        if number == max {\n            result\
    \ = append(result, max)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        if number > max {\n            result\
    \ = append(result, max)\n            max = number\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n",
  "    result := make([]int, len(numbers))\n    rolling_max := numbers[0]\n    for\
    \ i := 0; i < len(numbers); i++ {\n        if numbers[i] > rolling_max {\n   \
    \         rolling_max = numbers[i]\n        }\n        result[i] = rolling_max\n\
    \    }\n    return result\n}\n", "    var result []int\n    rolling_max := func(numbers\
    \ []int, moment int) []int {\n        if moment == len(numbers) {\n          \
    \  return result\n        }\n        result := make([]int, len(numbers))\n   \
    \     for i, v := range numbers {\n            if i > moment {\n             \
    \   break\n            }\n            result[i] = v\n        }\n        return\
    \ rolling_max(result, moment+1)\n    }\n    return rolling_max(numbers, 0)\n}\n",
  "    result := make([]int, 0)\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for _, number := range numbers {\n        if number == max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
