name: HumanEval_18_how_many_times
language: go_test.go
prompt: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
  \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunc how_many_times(myString\
  \ string, substring string) int {\n"
tests: "func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n    \
  \ { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"\
  cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"\
  john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    count := 0\n    start := 0\n    end := len(myString)\n    for start\
    \ < end {\n        end := strings.Index(myString[start:], substring)\n       \
    \ if end != -1 {\n            count += end - start\n            start = end +\
    \ len(substring)\n        } else {\n            start = end + 1\n        }\n \
    \   }\n    return count\n}\n", "    result := 0\n    start := 0\n    end := 0\n\
    \    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            result += end - start\n    \
    \        start = end + len(substring)\n        } else {\n            result +=\
    \ len(substring) - start\n            start = len(myString)\n        }\n    }\n\
    \    return result\n}\n", "    result := 0\n    start := 0\n    end := 0\n   \
    \ for start < len(myString) {\n        end = strings.Index(myString[start:], substring)\n\
    \        if end != -1 {\n            result += end - start\n            start\
    \ = end + len(substring)\n        } else {\n            result += len(substring)\n\
    \        }\n    }\n    return result\n}\n", "    count := 0\n    for _, char :=\
    \ range myString {\n        if char == substring {\n            count++\n    \
    \    }\n    }\n    return count\n}\n", "    result := 0\n    i := 0\n    for ;\
    \ i < len(myString); i++ {\n        if myString[i] == substring[0] {\n       \
    \     result += how_many_times(myString[i+1:], substring[1:])\n        } else\
    \ {\n            result += how_many_times(myString[i:], substring)\n        }\n\
    \    }\n    return result\n}\n", "    result := 0\n    start := 0\n    end :=\
    \ 0\n    found := false\n    for start < len(myString) {\n        end = len(myString)\n\
    \        if end > start {\n            end = start\n        }\n        if myString[start]\
    \ == substring[0] {\n            found = true\n            end += 1\n        \
    \    for start < end {\n                if myString[start] == substring[1] {\n\
    \                    found = true\n                    end += 1\n            \
    \    } else {\n                    found = false\n                }\n        \
    \    }\n        }\n        if found {\n            result += end - start\n   \
    \         found = false\n        }\n        start += 1\n    }\n    return result\n\
    }\n", "    count := 0\n    for _, char := range myString {\n        if char ==\
    \ substring {\n            count++\n        }\n    }\n    return count\n}\n",
  "    count := 0\n    start := 0\n    end := 0\n    for start < len(myString) {\n\
    \        end = strings.Index(myString[start:], substring)\n        if end != -1\
    \ {\n            count += end - start\n        }\n        start = end + len(substring)\n\
    \    }\n    return count\n}\n", "    count := 0\n    start := 0\n    end := 0\n\
    \    for start < len(myString) {\n        end = strings.Index(myString[start:],\
    \ substring)\n        if end != -1 {\n            count++\n            start =\
    \ end + len(substring)\n        } else {\n            start = len(myString)\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for _, myChar\
    \ := range myString {\n        if myChar == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for _, myChar\
    \ := range myString {\n        if myChar == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    start := 0\n \
    \   end := len(myString)\n    for start < end {\n        end := strings.Index(myString[start:],\
    \ substring)\n        if end == -1 {\n            end = len(myString)\n      \
    \  }\n        count += end - start\n        start = end + len(substring)\n   \
    \ }\n    return count\n}\n", "    start := 0\n    end := len(myString)\n    found\
    \ := 0\n    for start < end {\n        found += strings.Count(myString[start:end],\
    \ substring)\n        start += strings.Count(myString[start:end], substring)\n\
    \        end += strings.Count(myString[start:end], substring)\n    }\n    return\
    \ found\n}\n", "    count := 0\n    start := 0\n    end := 0\n    found := false\n\
    \    for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                if end <\
    \ len(myString) {\n                    if myString[end] == substring[1] {\n  \
    \                      count++\n                        end = end + 1\n      \
    \                  found = true\n                        break\n             \
    \       }\n                }\n            }\n            end = end + 1\n     \
    \   }\n        if found {\n            break\n        }\n        start = start\
    \ + 1\n    }\n    return count\n}\n", "    count := 0\n    for _, s := range myString\
    \ {\n        if s == substring {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    result := 0\n    start := 0\n    end := len(myString) - 1\n\
    \    for start < end {\n        result += 1\n        if myString[start] == substring\
    \ {\n            start += 1\n        }\n        if myString[end] == substring\
    \ {\n            end -= 1\n        }\n    }\n    return result\n}\n", "    count\
    \ := 0\n    for _, s := range myString {\n        if s == substring {\n      \
    \      count++\n        }\n    }\n    return count\n}\n", "    result := 0\n \
    \   i := 0\n    length := len(myString)\n    for i < length {\n        if myString[i]\
    \ == substring {\n            i++\n            result++\n        }\n        if\
    \ i < length && myString[i] == substring+string(i) {\n            i++\n      \
    \      result++\n        }\n        if i < length && myString[i] == substring+string(len(substring))\
    \ {\n            i++\n            result++\n        }\n        if i < length &&\
    \ myString[i] == substring+string(len(substring)+1) {\n            i++\n     \
    \       result++\n        }\n        if i < length && myString[i] == substring+string(len(substring)+2)\
    \ {\n            i++\n            result++\n        }\n        if i < length &&\
    \ myString[i] == substring+string(len(substring)+3) {\n            i++\n     \
    \       result++\n        }\n        if i < length && myString[i] == substring+string(len(substring)+4)\
    \ {\n            i++\n            result++\n        }\n        if i < length &&\
    \ myString[i] == substring+string(len(substring)+5) {\n            i++\n     \
    \       result++\n        }\n        if i < length && myString[i] == substring+string(len(substring)+6)\
    \ {\n            i++\n            result++\n        }\n        if i < length &&\
    \ myString[i] == substring+string(len(substring)+7) {\n            i++\n     \
    \       result++\n        }\n        if i < length && myString[i] == substring+string(len(substring)+8)\
    \ {\n            i++\n            result++\n        }\n        if i < length &&\
    \ myString[i] == substring+string(len(substring)+9) {\n            i++\n     \
    \       result++\n        }\n        if i < length && myString[i] == substring+string(len(substring)+10)\
    \ {\n            i++\n            result++\n        }\n        if i < length &&\
    \ myString[i] == substring+string(len(substring)+11) {\n            i++\n    \
    \        result++\n        }\n        if i < length && myString[i] == substring+string(len(substring)+12)\
    \ {\n            i++\n            result++\n        }\n        if i < length &&\
    \ myString[i] == substring+string(len(substring)+13) {\n            i++\n    \
    \        result++\n        }\n        if i < length && myString[i] == substring+string(len(substring)+14)\
    \ {\n            i++\n            result++\n        }\n        if i < length &&\
    \ myString[i] == substring+string(len(substring)+15) {\n            i++\n    \
    \        result++\n        }\n        if i < length && myString[i] == substring+string(len(substring)+16)\
    \ {\n            i++\n            result++\n        }\n        if i < length &&\
    \ myString[i] == substring+string(len(substring)+17) {\n            i++\n    \
    \        result++\n        }\n        if i < length && myString[i] == substring+string(len(substring)+18)\
    \ {\n            i++\n            result++\n        }\n        if i < length",
  "    count := 0\n    for _, s := range myString {\n        if s == substring {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    result :=\
    \ 0\n    i := 0\n    for ; i < len(myString); i++ {\n        if myString[i] ==\
    \ substring {\n            result += 1\n        }\n        if myString[i] > substring\
    \ {\n            break\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
