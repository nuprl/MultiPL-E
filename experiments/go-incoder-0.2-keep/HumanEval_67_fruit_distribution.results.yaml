language: go_test.go
name: HumanEval_67_fruit_distribution
results:
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    \n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5yjs5oof_test.go:83:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    // Your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpedqly4tb_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    var apples int\n    var oranges int\n    var mango\
    \ int\n    for _, v := range s {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    return n - apples - oranges - mango\n\
    }\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8ddpg7n_test.go:19:7: no new variables on left side of :=

    /tmp/tmpc8ddpg7n_test.go:19:10: undefined: strings

    /tmp/tmpc8ddpg7n_test.go:24:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpc8ddpg7n_test.go:26:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    total := 0\n    for _,\
    \ fruit := range fruits {\n        if fruit == \"mango\" {\n            total\
    \ += n\n        }\n    }\n    return total\n}\n</code>\n<|/ a tags=go |>\n<| c\
    \ |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| c\
    \ |>\nYou're welcome. I'm glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzsuakryz_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    total := 0\n    for _,\
    \ fruit := range fruits {\n        if fruit == \"apples\" {\n            total\
    \ += n\n        } else if fruit == \"oranges\" {\n            total += n\n   \
    \     } else {\n            total += n\n        }\n    }\n    return total\n}\n\
    \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzj_4hc8x_test.go:19:7: no new variables on left side of :=

    /tmp/tmpzj_4hc8x_test.go:19:10: undefined: strings

    /tmp/tmpzj_4hc8x_test.go:22:15: undefined: strings

    /tmp/tmpzj_4hc8x_test.go:22:29: invalid operation: apples + " " (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Your code here\n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0\
    \ (0.00s)\n        tmpo7a0yg00_test.go:44: expected '%!s(int=8)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpo7a0yg00_test.go:44:\
    \ expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2\
    \ (0.00s)\n        tmpo7a0yg00_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpo7a0yg00_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4\
    \ (0.00s)\n        tmpo7a0yg00_test.go:44: expected '%!s(int=95)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpo7a0yg00_test.go:44:\
    \ expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    // Write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp6vn_xgy_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \"and\")\n    apples := 0\n    oranges := 0\n    mangos :=\
    \ 0\n    for _, fruit := range s {\n        if fruit == \"apples\" {\n       \
    \     apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9bb2mlyq_test.go:19:7: no new variables on left side of :=

    /tmp/tmp9bb2mlyq_test.go:19:10: undefined: strings

    /tmp/tmp9bb2mlyq_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmp9bb2mlyq_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    fruitsCount := 0\n    for _,\
    \ fruit := range fruits {\n        if fruit == \"apples\" {\n            fruitsCount\
    \ += n\n        } else if fruit == \"oranges\" {\n            fruitsCount += n\n\
    \        } else if fruit == \"mango\" {\n            fruitsCount += n\n      \
    \  }\n    }\n    return fruitsCount\n}\n\nfunc TestFruit_Distribution(t *testing.T)\
    \ {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_cx06dgo_test.go:19:7: no new variables on left side of :=

    /tmp/tmp_cx06dgo_test.go:19:10: undefined: strings

    /tmp/tmp_cx06dgo_test.go:22:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    return n - apples\
    \ - oranges - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxmceahh_test.go:19:7: no new variables on left side of :=

    /tmp/tmpmxmceahh_test.go:19:10: undefined: strings

    /tmp/tmpmxmceahh_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpmxmceahh_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Your code here\n    \n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0\
    \ (0.00s)\n        tmpuv04qsz1_test.go:45: expected '%!s(int=8)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpuv04qsz1_test.go:45:\
    \ expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2\
    \ (0.00s)\n        tmpuv04qsz1_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpuv04qsz1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4\
    \ (0.00s)\n        tmpuv04qsz1_test.go:45: expected '%!s(int=95)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpuv04qsz1_test.go:45:\
    \ expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073940
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, item := range strings.Split(s,\
    \ \" \") {\n        switch item {\n        case \"apples\":\n            apples++\n\
    \        case \"oranges\":\n            oranges++\n        case \"mango\":\n \
    \           mango++\n        }\n    }\n    \n    return n - apples - oranges -\
    \ mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvjzs7n31_test.go:23:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    var apples, oranges, mango int\n    for _, v :=\
    \ range s {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else if v == \"mango\"\
    \ {\n            mango++\n        }\n    }\n    return mango - (apples - oranges\
    \ - n%apples)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate :=\
    \ fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6\
    \ oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3),\
    \ expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected:\
    \ 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0\
    \ },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbt1i8yxu_test.go:19:7: no new variables on left side of :=

    /tmp/tmpbt1i8yxu_test.go:19:10: undefined: strings

    /tmp/tmpbt1i8yxu_test.go:22:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpbt1i8yxu_test.go:24:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmpbt1i8yxu_test.go:26:24: invalid operation: v == "mango" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    // Write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp6vn_xgy_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Your code here\n    \n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0\
    \ (0.00s)\n        tmpuv04qsz1_test.go:45: expected '%!s(int=8)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpuv04qsz1_test.go:45:\
    \ expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2\
    \ (0.00s)\n        tmpuv04qsz1_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpuv04qsz1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4\
    \ (0.00s)\n        tmpuv04qsz1_test.go:45: expected '%!s(int=95)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpuv04qsz1_test.go:45:\
    \ expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    // Write\
    \ your code here\n    \n    var apples int\n    var oranges int\n    var mango\
    \ int\n    \n    apples = s.Substring(0, s.IndexOf(\"and\"))\n    oranges = s.Substring(s.IndexOf(\"\
    and\") + 3, s.IndexOf(\"and\") + 6)\n    mango = n - apples - oranges\n    \n\
    \    return mango\n}\n</code>\n<|/ a tags=string,go,substring |>\n<| a tags=string,go,substring\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc\
    \ TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoe_z1kkw_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mangos := 0\n    \n    for _, item := range strings.Split(s,\
    \ \" \") {\n        if item == \"apples\" {\n            apples++\n        } else\
    \ if item == \"oranges\" {\n            oranges++\n        } else if item == \"\
    mango\" {\n            mangos++\n        }\n    }\n    \n    return n - apples\
    \ - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3jo2b3s9_test.go:23:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    total := 0\n    for _, fruit\
    \ := range fruits {\n        if fruit == \"apples\" {\n            total += n\n\
    \        } else if fruit == \"oranges\" {\n            total += n\n        } else\
    \ {\n            total += n\n        }\n    }\n    return total - n\n}\n\nfunc\
    \ TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp74u_ic4a_test.go:19:7: no new variables on left side of :=

    /tmp/tmp74u_ic4a_test.go:19:10: undefined: strings

    /tmp/tmp74u_ic4a_test.go:22:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    var apples_count, oranges_count, mango_count\
    \ int\n    var basket []string\n    \n    apples, oranges, mango = s.split(\"\
    \ \")\n    apples_count, oranges_count, mango_count = apples.Int(), oranges.Int(),\
    \ mango.Int()\n    basket = make([]string, apples_count)\n    \n    for i := 0;\
    \ i < apples_count; i++ {\n        basket[i] = \"apples\"\n    }\n    for i :=\
    \ 0; i < oranges_count; i++ {\n        basket[apples_count + i] = \"oranges\"\n\
    \    }\n    for i := 0; i < mango_count; i++ {\n        basket[apples_count +\
    \ oranges_count + i] = \"mango\"\n    }\n    \n    result := 0\n    for _, fruit\
    \ := range basket {\n        if fruit == \"mango\" {\n            result += mango_count\n\
    \        }\n    }\n    \n    return result\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeq8eikn0_test.go:23:32: s.split undefined (type string has no field or
    method split)

    /tmp/tmpeq8eikn0_test.go:24:55: apples.Int undefined (type int has no field or
    method Int)

    /tmp/tmpeq8eikn0_test.go:24:70: oranges.Int undefined (type int has no field or
    method Int)

    /tmp/tmpeq8eikn0_test.go:24:83: mango.Int undefined (type int has no field or
    method Int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mangos := 0\n    for _, v := range strings.Split(s,\
    \ \" \") {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else {\n           \
    \ mangos++\n        }\n    }\n    return n - apples - oranges - mangos\n}\n\n\
    func TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_1i8fy2_test.go:22:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6x0y59ky_test.go:67:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mangoes int\n    \n    switch {\n    case s[0] == \"0\":\n\
    \        apples = 0\n        oranges = 1\n        mangoes = n\n    case s[0] ==\
    \ \"1\":\n        apples = 1\n        oranges = n\n        mangoes = n\n    case\
    \ s[0] == \"2\":\n        apples = n\n        oranges = n\n        mangoes = n\n\
    \    case s[0] == \"3\":\n        apples = n\n        oranges = n\n        mangoes\
    \ = n\n    case s[0] == \"4\":\n        apples = n\n        oranges = n\n    \
    \    mangoes = n\n    case s[0] == \"5\":\n        apples = n\n        oranges\
    \ = n\n        mangoes = n\n    case s[0] == \"6\":\n        apples = n\n    \
    \    oranges = n\n        mangoes = n\n    case s[0] == \"7\":\n        apples\
    \ = n\n        oranges = n\n        mangoes = n\n    case s[0] == \"8\":\n   \
    \     apples = n\n        oranges = n\n        mangoes = n\n    case s[0] == \"\
    9\":\n        apples = n\n        oranges = n\n        mangoes = n\n    case s[0]\
    \ == \"10\":\n        apples = n\n        oranges = n\n        mangoes = n\n \
    \   case s[0] == \"11\":\n        apples = n\n        oranges = n\n        mangoes\
    \ = n\n    case s[0] == \"12\":\n        apples = n\n        oranges = n\n   \
    \     mangoes = n\n    case s[0] == \"13\":\n        apples = n\n        oranges\
    \ = n\n        mangoes = n\n    case s[0] == \"14\":\n        apples = n\n   \
    \     oranges = n\n        mangoes = n\n    case s[0] == \"15\":\n        apples\
    \ = n\n        oranges = n\n        mangoes = n\n    case s[0] == \"16\":\n  \
    \      apples = n\n        oranges = n\n        mangoes = n\n    case s[0] ==\
    \ \"17\":\n        apples = n\n        oranges = n\n        mangoes = n\n    case\
    \ s[0] == \"18\":\n        apples = n\n        oranges = n\n        mangoes =\
    \ n\n    case s[0] == \"19\":\n        apples = n\n        oranges = n\n     \
    \   mangoes = n\n    case s[0] == \"20\":\n        apples = n\n        oranges\
    \ = n\n        mangoes = n\n    case s[0] == \"21\":\n        apples = n\n   \
    \     oranges = n\n        mangoes = n\n    case s[0] == \"22\":\n        apples\
    \ = n\n        oranges = n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpojo8wb0s_test.go:113:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   s := strings.Split(s, \" \")\n    \n    apples := 0\n    oranges := 0\n  \
    \  mango := 0\n    \n    for _, fruit := range s {\n        if fruit == \"apples\"\
    \ {\n            apples++\n        } else if fruit == \"oranges\" {\n        \
    \    oranges++\n        } else {\n            mango++\n        }\n    }\n    \n\
    \    return n - apples - oranges - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T)\
    \ {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsxoetuj9_test.go:20:7: no new variables on left side of :=

    /tmp/tmpsxoetuj9_test.go:20:10: undefined: strings

    /tmp/tmpsxoetuj9_test.go:27:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpsxoetuj9_test.go:29:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Count(apples,\
    \ \" \")\n    oranges := strings.Count(oranges, \" \")\n    fruits := strings.Count(fruits,\
    \ \" \")\n    fruits -= n\n    return fruits\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_v_9w1x_test.go:19:7: no new variables on left side of :=

    /tmp/tmpi_v_9w1x_test.go:19:10: undefined: strings

    /tmp/tmpi_v_9w1x_test.go:22:15: undefined: strings

    /tmp/tmpi_v_9w1x_test.go:23:12: no new variables on left side of :=

    /tmp/tmpi_v_9w1x_test.go:23:15: undefined: strings

    /tmp/tmpi_v_9w1x_test.go:24:13: no new variables on left side of :=

    /tmp/tmpi_v_9w1x_test.go:24:16: undefined: strings

    /tmp/tmpi_v_9w1x_test.go:25:12: no new variables on left side of :=

    /tmp/tmpi_v_9w1x_test.go:25:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    return n - apples\
    \ - oranges - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxmceahh_test.go:19:7: no new variables on left side of :=

    /tmp/tmpmxmceahh_test.go:19:10: undefined: strings

    /tmp/tmpmxmceahh_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpmxmceahh_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    n := strings.Split(n, \" \")\n    \n    apples\
    \ := 0\n    oranges := 0\n    mangos := 0\n    \n    for _, v := range s {\n \
    \       if v == \"apples\" {\n            apples++\n        } else if v == \"\
    oranges\" {\n            oranges++\n        } else {\n            mangos++\n \
    \       }\n    }\n    \n    for _, v := range n {\n        if v == \"apples\"\
    \ {\n            apples++\n        } else if v == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    \n    return apples\
    \ - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzvish1ko_test.go:19:7: no new variables on left side of :=

    /tmp/tmpzvish1ko_test.go:19:10: undefined: strings

    /tmp/tmpzvish1ko_test.go:20:7: no new variables on left side of :=

    /tmp/tmpzvish1ko_test.go:20:10: undefined: strings

    /tmp/tmpzvish1ko_test.go:27:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpzvish1ko_test.go:29:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmpzvish1ko_test.go:36:23: cannot range over n (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(oranges, \" \")\n    apples = strings.Split(apples,\
    \ \" \")\n    oranges = strings.Split(\nfunc TestFruit_Distribution(t *testing.T)\
    \ {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf9sxs4av_test.go:71:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Count(apples,\
    \ \" \")\n    oranges := strings.Count(oranges, \" \")\n    fruits := strings.Count(fruits,\
    \ \" \")\n    apples -= n\n    oranges -= n\n    fruits -= n\n    return fruits\
    \ - apples - oranges\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbk3uoi1s_test.go:19:7: no new variables on left side of :=

    /tmp/tmpbk3uoi1s_test.go:19:10: undefined: strings

    /tmp/tmpbk3uoi1s_test.go:22:15: undefined: strings

    /tmp/tmpbk3uoi1s_test.go:23:12: no new variables on left side of :=

    /tmp/tmpbk3uoi1s_test.go:23:15: undefined: strings

    /tmp/tmpbk3uoi1s_test.go:24:13: no new variables on left side of :=

    /tmp/tmpbk3uoi1s_test.go:24:16: undefined: strings

    /tmp/tmpbk3uoi1s_test.go:25:12: no new variables on left side of :=

    /tmp/tmpbk3uoi1s_test.go:25:15: undefined: strings

    /tmp/tmpbk3uoi1s_test.go:26:5: invalid operation: apples -= n (mismatched types
    byte and int)

    /tmp/tmpbk3uoi1s_test.go:26:5: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwy1y9qfj_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx879khpr_test.go:19:7: no new variables on left side of :=

    /tmp/tmpx879khpr_test.go:19:10: undefined: strings

    /tmp/tmpx879khpr_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpx879khpr_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsx_gia_6_test.go:275:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   s := strings.Split(s, \" \")\n    \n    apples := 0\n    oranges := 0\n  \
    \  mango := 0\n    \n    for _, fruit := range s {\n        if fruit == \"apples\"\
    \ {\n            apples++\n        } else if fruit == \"oranges\" {\n        \
    \    oranges++\n        } else {\n            mango++\n        }\n    }\n    \n\
    \    return n - apples - oranges - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T)\
    \ {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsxoetuj9_test.go:20:7: no new variables on left side of :=

    /tmp/tmpsxoetuj9_test.go:20:10: undefined: strings

    /tmp/tmpsxoetuj9_test.go:27:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpsxoetuj9_test.go:29:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \"and\")\n    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    for _, v := range s {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    return n - apples - oranges - mango\n\
    }\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwsv73_mx_test.go:19:7: no new variables on left side of :=

    /tmp/tmpwsv73_mx_test.go:19:10: undefined: strings

    /tmp/tmpwsv73_mx_test.go:24:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpwsv73_mx_test.go:26:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwy1y9qfj_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjeb_lxbz_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    fruits := strings.Split(fruits,\
    \ \" \")\n    apples := strings.Split(apples, \" \")\n    oranges := strings.Split(oranges,\
    \ \" \")\n    fruits := strings.Split(fruits, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjeb_lxbz_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6x0y59ky_test.go:67:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples int\n    var oranges int\n    var mango int\n    \n    switch s[0] {\n\
    \        case \"0\":\n            apples = 0\n            oranges = 1\n      \
    \      mango = 0\n            break\n        case \"1\":\n            apples =\
    \ 1\n            oranges = 0\n            mango = 0\n            break\n     \
    \   case \"2\":\n            apples = 1\n            oranges = 1\n           \
    \ mango = 0\n            break\n        case \"3\":\n            apples = 1\n\
    \            oranges = 1\n            mango = 1\n            break\n        case\
    \ \"4\":\n            apples = 1\n            oranges = 1\n            mango =\
    \ 1\n            break\n        case \"5\":\n            apples = 1\n        \
    \    oranges = 1\n            mango = 1\n            break\n        case \"6\"\
    :\n            apples = 1\n            oranges = 1\n            mango = 1\n  \
    \          break\n        case \"7\":\n            apples = 1\n            oranges\
    \ = 1\n            mango = 1\n            break\n        case \"8\":\n       \
    \     apples = 1\n            oranges = 1\n            mango = 1\n           \
    \ break\n        case \"9\":\n            apples = 1\n            oranges = 1\n\
    \            mango = 1\n            break\n        case \"10\":\n            apples\
    \ = 1\n            oranges = 1\n            mango = 1\n            break\n   \
    \     case \"11\":\n            apples = 1\n            oranges = 1\n        \
    \    mango = 1\n            break\n        case \"12\":\n            apples =\
    \ 1\n            oranges = 1\n            mango = 1\n            break\n     \
    \   case \"13\":\n            apples = 1\n            oranges = 1\n          \
    \  mango = 1\n            break\n        case \"14\":\n            apples = 1\n\
    \            oranges = 1\n            mango = 1\n            break\n        case\
    \ \"15\":\n            apples = 1\n            oranges = 1\n            mango\
    \ = 1\n            break\n        case \"16\":\n            apples = 1\n     \
    \       oranges = 1\n            mango = 1\n            break\n        case \"\
    17\":\n            apples = 1\n            oranges = 1\n            mango = 1\n\
    \            break\n        case \"18\":\n            apples = 1\n           \
    \ oranges = 1\n            mango = 1\n            break\n        case \"19\":\n\
    \            apples = 1\n            oranges = 1\n            mango = 1\n    \
    \        break\n        case \"20\":\n            apples = 1\n            oranges\
    \ = 1\n            mango = 1\n            break\n        case \"21\":\n      \
    \      apples = 1\n            oranges = 1\n            mango = 1\n          \
    \  break\n        case \"22\":\n            apples = 1\n            oranges =\
    \ 1\n            mango = 1\n            break\n        case \"23\":\n        \
    \    apples = 1\n            oranges = 1\n            mango = 1\n            break\n\
    \        case \"24\":\n            apples = 1\n            \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy4j0q5yp_test.go:147:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6x0y59ky_test.go:67:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    total := 0\n    for _, fruit\
    \ := range fruits {\n        if fruit == \"apples\" {\n            total += n\n\
    \        } else if fruit == \"oranges\" {\n            total += n\n        } else\
    \ if fruit == \"mango\" {\n            total += n\n        }\n    }\n    return\
    \ total\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0wcirlnl_test.go:19:7: no new variables on left side of :=

    /tmp/tmp0wcirlnl_test.go:19:10: undefined: strings

    /tmp/tmp0wcirlnl_test.go:22:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, v := range strings.Split(s,\
    \ \" \") {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else if v == \"mango\"\
    \ {\n            mango++\n        }\n    }\n    \n    return n - apples - oranges\
    \ - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdq98nzux_test.go:23:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    \n    apples, oranges, mango = s.SplitString(fruit_separator)\n\
    \    \n    if apples == \"0\" {\n        apples = 0\n    }\n    if oranges ==\
    \ \"0\" {\n        oranges = 0\n    }\n    if mango == \"0\" {\n        mango\
    \ = 0\n    }\n    \n    if apples == \"\" {\n        apples = 0\n    }\n    if\
    \ oranges == \"\" {\n        oranges = 0\n    }\n    if mango == \"\" {\n    \
    \    mango = 0\n    }\n    \n    if apples != \"\" {\n        apples = apples.ToInt()\n\
    \    }\n    if oranges != \"\" {\n        oranges = oranges.ToInt()\n    }\n \
    \   if mango != \"\" {\n        mango = mango.ToInt()\n    }\n    \n    if apples\
    \ < oranges {\n        return apples - oranges - mango\n    }\n    if apples >\
    \ oranges {\n        return apples - mango - oranges\n    }\n    if apples ==\
    \ oranges {\n        return apples - mango\n    }\n    return apples - oranges\n\
    }\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkk48wgge_test.go:21:32: s.SplitString undefined (type string has no field
    or method SplitString)

    /tmp/tmpkk48wgge_test.go:21:44: undefined: fruit_separator

    /tmp/tmpkk48wgge_test.go:23:18: invalid operation: apples == "0" (mismatched types
    int and untyped string)

    /tmp/tmpkk48wgge_test.go:26:19: invalid operation: oranges == "0" (mismatched
    types int and untyped string)

    /tmp/tmpkk48wgge_test.go:29:17: invalid operation: mango == "0" (mismatched types
    int and untyped string)

    /tmp/tmpkk48wgge_test.go:33:18: invalid operation: apples == "" (mismatched types
    int and untyped string)

    /tmp/tmpkk48wgge_test.go:36:19: invalid operation: oranges == "" (mismatched types
    int and untyped string)

    /tmp/tmpkk48wgge_test.go:39:17: invalid operation: mango == "" (mismatched types
    int and untyped string)

    /tmp/tmpkk48wgge_test.go:43:18: invalid operation: apples != "" (mismatched types
    int and untyped string)

    /tmp/tmpkk48wgge_test.go:44:25: apples.ToInt undefined (type int has no field
    or method ToInt)

    /tmp/tmpkk48wgge_test.go:44:25: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    mango := 0\n    for\
    \ _, fruit := range fruits {\n        if fruit == \"mango\" {\n            mango++\n\
    \        }\n    }\n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T)\
    \ {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdnjs__wd_test.go:19:7: no new variables on left side of :=

    /tmp/tmpdnjs__wd_test.go:19:10: undefined: strings

    /tmp/tmpdnjs__wd_test.go:22:15: undefined: strings

    /tmp/tmpdnjs__wd_test.go:23:12: no new variables on left side of :=

    /tmp/tmpdnjs__wd_test.go:23:15: undefined: strings

    /tmp/tmpdnjs__wd_test.go:24:13: no new variables on left side of :=

    /tmp/tmpdnjs__wd_test.go:24:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6x0y59ky_test.go:67:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    for _, v := range s {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    return n - apples - oranges - mango\n\
    }\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sqjbixe_test.go:19:7: no new variables on left side of :=

    /tmp/tmp6sqjbixe_test.go:19:10: undefined: strings

    /tmp/tmp6sqjbixe_test.go:24:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmp6sqjbixe_test.go:26:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    \n    switch s {\n    case \"0 apples and 1\
    \ oranges\":\n        apples = 0\n        oranges = 1\n        mango = 0\n   \
    \ case \"2 apples and 3 oranges\":\n        apples = 2\n        oranges = 3\n\
    \        mango = 0\n    case \"5 apples and 6 oranges\":\n        apples = 5\n\
    \        oranges = 6\n        mango = 0\n    case \"100 apples and 1 oranges\"\
    :\n        apples = 100\n        oranges = 1\n        mango = 0\n    case \"120\
    \ apples and 1 oranges\":\n        apples = 120\n        oranges = 1\n       \
    \ mango = 0\n    default:\n        fmt.Println(\"Invalid input\")\n    }\n   \
    \ \n    return mango + apples - oranges\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thank you for your answer. I am not allowed to use switch statements. I edited\
    \ my question to show what I have so far.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that does not use switch statements.\n<|/ c |>\n<| c |>\n\
    Thank you for your answer. I edited my question to show what I have so far.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that does not use\
    \ switch statements.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"math/rand\"\n    \"strings\"\n)\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphtn4oq0b_test.go:48:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    // Your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpedqly4tb_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \"and\")\n    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    return n - apples\
    \ - oranges - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2t9rv3w6_test.go:19:7: no new variables on left side of :=

    /tmp/tmp2t9rv3w6_test.go:19:10: undefined: strings

    /tmp/tmp2t9rv3w6_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmp2t9rv3w6_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, v := range strings.Split(s,\
    \ \" \") {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else if v == \"mango\"\
    \ {\n            mango++\n        }\n    }\n    \n    return n - apples - oranges\
    \ - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdq98nzux_test.go:23:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    n := strings.Split(s, \" \")\n    \n    apples\
    \ := strings.Split(n[0], \" \")\n    oranges := strings.Split(n[1], \" \")\n \
    \   mango := strings.Split(n[2], \" \")\n    \n    apples := strings.Split(apples[0],\
    \ \" \")\n    oranges := strings.Split(oranges[0], \" \")\n    mango := strings.Split(mango[0],\
    \ \" \")\n    \n    apples := strings.Split(apples[1], \" \")\n    oranges :=\
    \ strings.Split(oranges[1], \" \")\n    mango := strings.Split(mango[1], \" \"\
    )\n    \n    apples := strings.Split(apples[2], \" \")\n    oranges := strings.Split(oranges[2],\
    \ \" \")\n    mango := strings.Split(mango[2], \" \")\n    \n    apples := strings.Split(apples[3],\
    \ \" \")\n    oranges := strings.Split(oranges[3], \" \")\n    mango := strings.Split(mango[3],\
    \ \" \")\n    \n    apples := strings.Split(apples[4], \" \")\n    oranges :=\
    \ strings.Split(oranges[4], \" \")\n    mango := strings.Split(mango[4], \" \"\
    )\n    \n    apples := strings.Split(apples[5], \" \")\n    oranges := strings.Split(oranges[5],\
    \ \" \")\n    mango := strings.Split(mango[5], \" \")\n    \n    apples := strings.Split(apples[6],\
    \ \" \")\n    oranges := strings.Split(oranges[6], \" \")\n    mango := strings.Split(mango[6],\
    \ \" \")\n    \n    apples := strings.Split(apples[7], \" \")\n    oranges :=\
    \ strings.Split(oranges[7], \" \")\n    mango := strings.Split(mango[7], \" \"\
    )\n    \n    apples := strings.Split(apples[8], \" \")\n    oranges := strings.Split(oranges[8],\
    \ \" \")\n    mango := strings.Split(mango[8], \" \")\n    \n    apples := strings.Split(apples[9],\
    \ \" \")\n    oranges := strings.Split(oranges[9], \" \")\n    mango := strings.Split(mango[9],\
    \ \" \")\n    \n    apples := strings.Split(apples[10], \" \")\n    oranges :=\
    \ strings.Split(oranges[10], \" \")\n    mango := strings.Split(mango[10], \"\
    \ \")\n    \n    apples := strings.Split(apples[11], \" \")\n    oranges := strings.Split(oranges[11],\
    \ \" \")\n    mang\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate :=\
    \ fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6\
    \ oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3),\
    \ expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected:\
    \ 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0\
    \ },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqepcrzoi_test.go:73:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx879khpr_test.go:19:7: no new variables on left side of :=

    /tmp/tmpx879khpr_test.go:19:10: undefined: strings

    /tmp/tmpx879khpr_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpx879khpr_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6x0y59ky_test.go:67:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwy1y9qfj_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    n := strings.Split(n, \" \")\n    \n    apples\
    \ := 0\n    oranges := 0\n    mangos := 0\n    \n    for _, fruit := range s {\n\
    \        if fruit == \"apples\" {\n            apples++\n        }\n        if\
    \ fruit == \"oranges\" {\n            oranges++\n        }\n    }\n    \n    for\
    \ _, fruit := range n {\n        if fruit == \"mango\" {\n            mangos++\n\
    \        }\n    }\n    \n    return apples - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5b3hoxyp_test.go:19:7: no new variables on left side of :=

    /tmp/tmp5b3hoxyp_test.go:19:10: undefined: strings

    /tmp/tmp5b3hoxyp_test.go:20:7: no new variables on left side of :=

    /tmp/tmp5b3hoxyp_test.go:20:10: undefined: strings

    /tmp/tmp5b3hoxyp_test.go:27:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmp5b3hoxyp_test.go:30:21: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmp5b3hoxyp_test.go:35:27: cannot range over n (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    var apples, oranges int\n    for _, v := range\
    \ s {\n        if v == \"apples\" {\n            apples++\n        } else if v\
    \ == \"oranges\" {\n            oranges++\n        }\n    }\n    return n - apples\
    \ - oranges\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate :=\
    \ fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6\
    \ oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3),\
    \ expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected:\
    \ 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0\
    \ },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp72o52g6i_test.go:19:7: no new variables on left side of :=

    /tmp/tmp72o52g6i_test.go:19:10: undefined: strings

    /tmp/tmp72o52g6i_test.go:22:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmp72o52g6i_test.go:24:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples = append(apples,\
    \ \"0\")\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"\
    0\")\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\"\
    )\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n\
    \    oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n  \
    \  oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n    oranges\
    \ = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n    oranges =\
    \ append(oranges, \"0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges,\
    \ \"0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"\
    0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\"\
    )\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n\
    \    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n  \
    \  apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n    apples\
    \ = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n    apples =\
    \ append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n    apples = append(apples,\
    \ \"0\")\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"\
    0\")\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\"\
    )\n    oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n\
    \    oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n  \
    \  oranges = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n    oranges\
    \ = append(oranges, \"0\")\n    apples = append(apples, \"0\")\n    oranges =\
    \ append(oranges, \"0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges,\
    \ \"0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"\
    0\")\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\"\
    )\n    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n\
    \    apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n  \
    \  apples = append(apples, \"0\")\n    oranges = append(oranges, \"0\")\n    apples\
    \ = append(apples, \"0\")\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4pie2t4f_test.go:83:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    // Write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp6vn_xgy_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    \n    apples, oranges, mango = s.Split(\" \"\
    )\n    \n    if apples != \"\" {\n        apples, _ = strconv.Atoi(apples)\n \
    \   }\n    if oranges != \"\" {\n        oranges, _ = strconv.Atoi(oranges)\n\
    \    }\n    if mango != \"\" {\n        mango, _ = strconv.Atoi(mango)\n    }\n\
    \    \n    return n - apples - oranges - mango\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmporeb_rjz_test.go:21:32: s.Split undefined (type string has no field or
    method Split)

    /tmp/tmporeb_rjz_test.go:23:18: invalid operation: apples != "" (mismatched types
    int and untyped string)

    /tmp/tmporeb_rjz_test.go:24:21: undefined: strconv

    /tmp/tmporeb_rjz_test.go:26:19: invalid operation: oranges != "" (mismatched types
    int and untyped string)

    /tmp/tmporeb_rjz_test.go:27:22: undefined: strconv

    /tmp/tmporeb_rjz_test.go:29:17: invalid operation: mango != "" (mismatched types
    int and untyped string)

    /tmp/tmporeb_rjz_test.go:30:20: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    var apples, oranges, mango int\n    for _, fruit\
    \ := range s {\n        if fruit == \"apples\" {\n            apples++\n     \
    \   } else if fruit == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    return mango - apples - oranges -\
    \ n\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2txrublz_test.go:19:7: no new variables on left side of :=

    /tmp/tmp2txrublz_test.go:19:10: undefined: strings

    /tmp/tmp2txrublz_test.go:22:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmp2txrublz_test.go:24:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mangos := 0\n    \n    for _, v := range strings.Split(s,\
    \ \" \") {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else {\n           \
    \ mangos++\n        }\n    }\n    \n    return n - apples - oranges - mangos\n\
    }\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8k6sqdi8_test.go:23:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    \n    apples := strings.Count(apples,\
    \ \" \")\n    oranges := strings.Count(oranges, \" \")\n    fruits := strings.Count(fruits,\
    \ \" \")\n    \n    apples -= strings.Count(fruits, \"apples\")\n    oranges -=\
    \ strings.Count(fruits, \"oranges\")\n    fruits -= strings.Count(fruits, \"mango\"\
    )\n    \n    return n - apples - oranges - fruits\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswgac4ux_test.go:19:7: no new variables on left side of :=

    /tmp/tmpswgac4ux_test.go:19:10: undefined: strings

    /tmp/tmpswgac4ux_test.go:22:15: undefined: strings

    /tmp/tmpswgac4ux_test.go:24:12: no new variables on left side of :=

    /tmp/tmpswgac4ux_test.go:24:15: undefined: strings

    /tmp/tmpswgac4ux_test.go:25:13: no new variables on left side of :=

    /tmp/tmpswgac4ux_test.go:25:16: undefined: strings

    /tmp/tmpswgac4ux_test.go:26:12: no new variables on left side of :=

    /tmp/tmpswgac4ux_test.go:26:15: undefined: strings

    /tmp/tmpswgac4ux_test.go:28:15: undefined: strings

    /tmp/tmpswgac4ux_test.go:28:15: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   s := strings.Split(s, \"and\")\n    \n    apples := 0\n    oranges := 0\n\
    \    mango := 0\n    \n    for _, fruit := range s {\n        switch fruit {\n\
    \        case \"apple\":\n            apples++\n        case \"orange\":\n   \
    \         oranges++\n        case \"mango\":\n            mango++\n        }\n\
    \    }\n    \n    return n - apples - oranges - mango\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg8mlpptg_test.go:20:7: no new variables on left side of :=

    /tmp/tmpg8mlpptg_test.go:20:10: undefined: strings

    /tmp/tmpg8mlpptg_test.go:28:14: cannot convert "apple" (untyped string constant)
    to rune

    /tmp/tmpg8mlpptg_test.go:30:14: cannot convert "orange" (untyped string constant)
    to rune

    /tmp/tmpg8mlpptg_test.go:32:14: cannot convert "mango" (untyped string constant)
    to rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \"and\")\n    apples := 0\n    oranges := 0\n    mangos :=\
    \ 0\n    for _, fruit := range s {\n        switch fruit {\n        case \"apple\"\
    :\n            apples++\n        case \"orange\":\n            oranges++\n   \
    \     case \"mango\":\n            mangos++\n        }\n    }\n    return n -\
    \ apples - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp15thulii_test.go:19:7: no new variables on left side of :=

    /tmp/tmp15thulii_test.go:19:10: undefined: strings

    /tmp/tmp15thulii_test.go:25:14: cannot convert "apple" (untyped string constant)
    to rune

    /tmp/tmp15thulii_test.go:27:14: cannot convert "orange" (untyped string constant)
    to rune

    /tmp/tmp15thulii_test.go:29:14: cannot convert "mango" (untyped string constant)
    to rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    n := strings.Split(n, \" \")\n    \n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, fruit := range s {\n\
    \        if fruit == \"apples\" {\n            apples++\n        } else if fruit\
    \ == \"oranges\" {\n            oranges++\n        } else {\n            mango++\n\
    \        }\n    }\n    \n    for _, fruit := range n {\n        if fruit == \"\
    apples\" {\n            apples++\n        } else if fruit == \"oranges\" {\n \
    \           oranges++\n        } else {\n            mango++\n        }\n    }\n\
    \    \n    return mango - (apples - oranges)\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dx680nq_test.go:19:7: no new variables on left side of :=

    /tmp/tmp6dx680nq_test.go:19:10: undefined: strings

    /tmp/tmp6dx680nq_test.go:20:7: no new variables on left side of :=

    /tmp/tmp6dx680nq_test.go:20:10: undefined: strings

    /tmp/tmp6dx680nq_test.go:27:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmp6dx680nq_test.go:29:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmp6dx680nq_test.go:36:27: cannot range over n (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    return n - apples\
    \ - oranges - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxmceahh_test.go:19:7: no new variables on left side of :=

    /tmp/tmpmxmceahh_test.go:19:10: undefined: strings

    /tmp/tmpmxmceahh_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpmxmceahh_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    fruitsCount := 0\n    for _,\
    \ fruit := range fruits {\n        if fruit == \"apples\" {\n            fruitsCount\
    \ += n\n        } else if fruit == \"oranges\" {\n            fruitsCount += n\n\
    \        } else if fruit == \"mango\" {\n            fruitsCount += n\n      \
    \  }\n    }\n    return fruitsCount\n}\n\nfunc TestFruit_Distribution(t *testing.T)\
    \ {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_cx06dgo_test.go:19:7: no new variables on left side of :=

    /tmp/tmp_cx06dgo_test.go:19:10: undefined: strings

    /tmp/tmp_cx06dgo_test.go:22:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    var apples int\n    var oranges int\n    var mango\
    \ int\n    for _, fruit := range s {\n        switch fruit {\n        case \"\
    apples\":\n            apples++\n        case \"oranges\":\n            oranges++\n\
    \        case \"mango\":\n            mango++\n        }\n    }\n    return mango\
    \ - apples - oranges - n\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n \
    \ candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkb6m1xqe_test.go:19:7: no new variables on left side of :=

    /tmp/tmpkb6m1xqe_test.go:19:10: undefined: strings

    /tmp/tmpkb6m1xqe_test.go:25:14: cannot convert "apples" (untyped string constant)
    to rune

    /tmp/tmpkb6m1xqe_test.go:27:14: cannot convert "oranges" (untyped string constant)
    to rune

    /tmp/tmpkb6m1xqe_test.go:29:14: cannot convert "mango" (untyped string constant)
    to rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mangoes int\n    var apples_count, oranges_count, mangoes_count\
    \ int\n    \n    for _, v := range strings.Split(s, \" \") {\n        if v ==\
    \ \"apples\" {\n            apples++\n            apples_count++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n            oranges_count++\n\
    \        } else if v == \"mangoes\" {\n            mangoes++\n            mangoes_count++\n\
    \        }\n    }\n    \n    return mangoes - apples_count - oranges_count - mangoes_count\n\
    }\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp13qy35r6_test.go:22:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    m := make(map[string]int)\n    for _, v := range\
    \ s {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > n {\n\
    \            return v - n\n        }\n    }\n    return 0\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg9l6cnd5_test.go:19:7: no new variables on left side of :=

    /tmp/tmpg9l6cnd5_test.go:19:10: undefined: strings

    /tmp/tmpg9l6cnd5_test.go:22:11: cannot use v (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    var apples, oranges, mango int\n    for _, v :=\
    \ range s {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else if v == \"mango\"\
    \ {\n            mango++\n        }\n    }\n    return mango - apples - oranges\n\
    }\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsqplfb1_test.go:19:7: no new variables on left side of :=

    /tmp/tmpzsqplfb1_test.go:19:10: undefined: strings

    /tmp/tmpzsqplfb1_test.go:22:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpzsqplfb1_test.go:24:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmpzsqplfb1_test.go:26:24: invalid operation: v == "mango" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n\
    \    for _, v := range s {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mangos++\n        }\n    }\n    return n - apples - oranges - mangos\n\
    }\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfp9wlhgf_test.go:19:7: no new variables on left side of :=

    /tmp/tmpfp9wlhgf_test.go:19:10: undefined: strings

    /tmp/tmpfp9wlhgf_test.go:24:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpfp9wlhgf_test.go:26:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx879khpr_test.go:19:7: no new variables on left side of :=

    /tmp/tmpx879khpr_test.go:19:10: undefined: strings

    /tmp/tmpx879khpr_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpx879khpr_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    s := strings.Split(s, \" \"\
    )\n    for _, fruit := range s {\n        if fruit == \"apples\" {\n         \
    \   apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else if fruit == \"mango\" {\n            mango++\n        }\n    }\n\
    \    \n    return n - apples - oranges - mango\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb4kokbn2_test.go:23:7: no new variables on left side of :=

    /tmp/tmpb4kokbn2_test.go:23:10: undefined: strings

    /tmp/tmpb4kokbn2_test.go:25:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpb4kokbn2_test.go:27:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmpb4kokbn2_test.go:29:28: invalid operation: fruit == "mango" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    return n - apples\
    \ - oranges - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxmceahh_test.go:19:7: no new variables on left side of :=

    /tmp/tmpmxmceahh_test.go:19:10: undefined: strings

    /tmp/tmpmxmceahh_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpmxmceahh_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    var totalApples, totalOranges, totalMango int\n\
    \    totalApples, totalOranges, totalMango = 0, 0, 0\n    for _, v := range strings.Split(s,\
    \ \" \") {\n        if v == \"apples\" {\n            totalApples += n\n     \
    \   } else if v == \"oranges\" {\n            totalOranges += n\n        } else\
    \ if v == \"mango\" {\n            totalMango += n\n        }\n    }\n    apples\
    \ = totalApples - totalOranges\n    oranges = totalOranges - totalMango\n    mango\
    \ = totalMango - apples - oranges\n    return mango\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0cvlx7ot_test.go:22:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    var apples, oranges, mango int\n    for _, v :=\
    \ range s {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else {\n           \
    \ mango++\n        }\n    }\n    return mango - (apples + oranges)\n}\n\nfunc\
    \ TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv86kiefs_test.go:19:7: no new variables on left side of :=

    /tmp/tmpv86kiefs_test.go:19:10: undefined: strings

    /tmp/tmpv86kiefs_test.go:22:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpv86kiefs_test.go:24:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, s := range strings.Split(s,\
    \ \" \") {\n        switch s {\n        case \"apples\":\n            apples++\n\
    \        case \"oranges\":\n            oranges++\n        case \"mango\":\n \
    \           mango++\n        }\n    }\n    \n    return n - apples - oranges -\
    \ mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3b0ezyaq_test.go:23:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples = append(apples,\
    \ oranges...)\n    oranges = append(oranges, apples...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, fruits...)\n    apples = append(apples,\
    \ fruits...)\n    oranges = append(oranges, \nfunc TestFruit_Distribution(t *testing.T)\
    \ {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzj9c1us0_test.go:71:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6x0y59ky_test.go:67:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   s := strings.Split(s, \"and\")\n    \n    apples := 0\n    oranges := 0\n\
    \    mango := 0\n    \n    for _, fruit := range s {\n        switch fruit {\n\
    \        case \"apple\":\n            apples++\n        case \"orange\":\n   \
    \         oranges++\n        case \"mango\":\n            mango++\n        }\n\
    \    }\n    \n    return n - apples - oranges - mango\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg8mlpptg_test.go:20:7: no new variables on left side of :=

    /tmp/tmpg8mlpptg_test.go:20:10: undefined: strings

    /tmp/tmpg8mlpptg_test.go:28:14: cannot convert "apple" (untyped string constant)
    to rune

    /tmp/tmpg8mlpptg_test.go:30:14: cannot convert "orange" (untyped string constant)
    to rune

    /tmp/tmpg8mlpptg_test.go:32:14: cannot convert "mango" (untyped string constant)
    to rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   s := strings.Split(s, \" \")\n    \n    apples := 0\n    oranges := 0\n  \
    \  mangos := 0\n    \n    for _, v := range s {\n        if v == \"apples\" {\n\
    \            apples++\n        } else if v == \"oranges\" {\n            oranges++\n\
    \        } else if v == \"mango\" {\n            mangos++\n        }\n    }\n\
    \    \n    return n - apples - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprxu20vam_test.go:20:7: no new variables on left side of :=

    /tmp/tmprxu20vam_test.go:20:10: undefined: strings

    /tmp/tmprxu20vam_test.go:27:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmprxu20vam_test.go:29:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmprxu20vam_test.go:31:24: invalid operation: v == "mango" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mangoes int\n    \n    apples, oranges, mangoes = s.split(\"\
    \ \")\n    \n    apples, oranges, mangoes = apples.Int(), oranges.Int(), mangoes.Int()\n\
    \    \n    return mangoes - n - apples - oranges\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpojruov_g_test.go:21:34: s.split undefined (type string has no field or
    method split)

    /tmp/tmpojruov_g_test.go:23:39: apples.Int undefined (type int has no field or
    method Int)

    /tmp/tmpojruov_g_test.go:23:54: oranges.Int undefined (type int has no field or
    method Int)

    /tmp/tmpojruov_g_test.go:23:69: mangoes.Int undefined (type int has no field or
    method Int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    total := 0\n    for _, fruit\
    \ := range fruits {\n        if fruit == \"apples\" {\n            total += n\n\
    \        } else if fruit == \"oranges\" {\n            total += n\n        } else\
    \ if fruit == \"mango\" {\n            total += n\n        }\n    }\n    return\
    \ total\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0wcirlnl_test.go:19:7: no new variables on left side of :=

    /tmp/tmp0wcirlnl_test.go:19:10: undefined: strings

    /tmp/tmp0wcirlnl_test.go:22:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx879khpr_test.go:19:7: no new variables on left side of :=

    /tmp/tmpx879khpr_test.go:19:10: undefined: strings

    /tmp/tmpx879khpr_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpx879khpr_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Count(apples,\
    \ \"a\")\n    oranges := strings.Count(oranges, \"o\")\n    fruits := strings.Count(fruits,\
    \ \"a\")\n    fruits -= n\n    fruits -= apples\n    fruits -= oranges\n    return\
    \ fruits\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvakhy9r7_test.go:19:7: no new variables on left side of :=

    /tmp/tmpvakhy9r7_test.go:19:10: undefined: strings

    /tmp/tmpvakhy9r7_test.go:22:15: undefined: strings

    /tmp/tmpvakhy9r7_test.go:23:12: no new variables on left side of :=

    /tmp/tmpvakhy9r7_test.go:23:15: undefined: strings

    /tmp/tmpvakhy9r7_test.go:24:13: no new variables on left side of :=

    /tmp/tmpvakhy9r7_test.go:24:16: undefined: strings

    /tmp/tmpvakhy9r7_test.go:25:12: no new variables on left side of :=

    /tmp/tmpvakhy9r7_test.go:25:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    var apples, oranges, mangoes int\n    for _, fruit\
    \ := range s {\n        switch fruit {\n        case \"apples\":\n           \
    \ apples++\n        case \"oranges\":\n            oranges++\n        case \"\
    mangoes\":\n            mangoes++\n        }\n    }\n    return mangoes - apples\
    \ - oranges - n\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8w388tqp_test.go:19:7: no new variables on left side of :=

    /tmp/tmp8w388tqp_test.go:19:10: undefined: strings

    /tmp/tmp8w388tqp_test.go:23:14: cannot convert "apples" (untyped string constant)
    to rune

    /tmp/tmp8w388tqp_test.go:25:14: cannot convert "oranges" (untyped string constant)
    to rune

    /tmp/tmp8w388tqp_test.go:27:14: cannot convert "mangoes" (untyped string constant)
    to rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    var fruits []string\n    \n    for _, s := range\
    \ strings.Split(s, \" \") {\n        switch s {\n        case \"apples\":\n  \
    \          apples++\n        case \"oranges\":\n            oranges++\n      \
    \  case \"mango\":\n            mango++\n        default:\n            fruits\
    \ = append(fruits, s)\n        }\n    }\n    \n    return mango + apples - oranges\
    \ - fruit_distribution(fruits, n)\n}\n\nfunc TestFruit_Distribution(t *testing.T)\
    \ {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpotgony_q_test.go:22:23: undefined: strings

    /tmp/tmpotgony_q_test.go:35:58: cannot use fruits (variable of type []string)
    as type string in argument to fruit_distribution

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   s := strings.Split(s, \" \")\n    \n    var apples, oranges, mango int\n \
    \   \n    for _, v := range s {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else if\
    \ v == \"mango\" {\n            mango++\n        }\n    }\n    \n    return mango\
    \ - apples - oranges - n\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n \
    \ candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgf0wozgo_test.go:20:7: no new variables on left side of :=

    /tmp/tmpgf0wozgo_test.go:20:10: undefined: strings

    /tmp/tmpgf0wozgo_test.go:25:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpgf0wozgo_test.go:27:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmpgf0wozgo_test.go:29:24: invalid operation: v == "mango" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    \n    apples, oranges, mango = s.Split(\"and\"\
    )\n    \n    if apples != \"\" {\n        apples, _ = apples.Split()\n    }\n\
    \    if oranges != \"\" {\n        oranges, _ = oranges.Split()\n    }\n    if\
    \ mango != \"\" {\n        mango, _ = mango.Split()\n    }\n    \n    return n\
    \ - apples - oranges - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpch02t4wg_test.go:21:32: s.Split undefined (type string has no field or
    method Split)

    /tmp/tmpch02t4wg_test.go:23:18: invalid operation: apples != "" (mismatched types
    int and untyped string)

    /tmp/tmpch02t4wg_test.go:24:28: apples.Split undefined (type int has no field
    or method Split)

    /tmp/tmpch02t4wg_test.go:26:19: invalid operation: oranges != "" (mismatched types
    int and untyped string)

    /tmp/tmpch02t4wg_test.go:27:30: oranges.Split undefined (type int has no field
    or method Split)

    /tmp/tmpch02t4wg_test.go:29:17: invalid operation: mango != "" (mismatched types
    int and untyped string)

    /tmp/tmpch02t4wg_test.go:30:26: mango.Split undefined (type int has no field or
    method Split)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6x0y59ky_test.go:67:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    var apples, oranges, mango int\n    for _, v :=\
    \ range s {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else {\n           \
    \ mango++\n        }\n    }\n    return mango - apples - oranges\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupkj1tgv_test.go:19:7: no new variables on left side of :=

    /tmp/tmpupkj1tgv_test.go:19:10: undefined: strings

    /tmp/tmpupkj1tgv_test.go:22:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpupkj1tgv_test.go:24:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwy1y9qfj_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    var apples int\n    var oranges int\n    var mango\
    \ int\n    for _, fruit := range s {\n        if fruit == \"apples\" {\n     \
    \       apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    return n - apples\
    \ - oranges - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8yyc2owx_test.go:19:7: no new variables on left side of :=

    /tmp/tmp8yyc2owx_test.go:19:10: undefined: strings

    /tmp/tmp8yyc2owx_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmp8yyc2owx_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwy1y9qfj_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    \n    apples, oranges, mango = s.Split(\" \"\
    )\n    \n    apples, oranges, mango = apples.Int(), oranges.Int(), mango.Int()\n\
    \    \n    if apples == 0 && oranges == 0 && mango == 0 {\n        return n\n\
    \    }\n    \n    if apples == 0 {\n        return mango\n    }\n    \n    if\
    \ oranges == 0 {\n        return apples + mango\n    }\n    \n    if apples +\
    \ oranges == 0 {\n        return apples + mango + oranges\n    }\n    \n    if\
    \ apples + oranges + mango == 0 {\n        return apples + mango + oranges + mango\n\
    \    }\n    \n    return apples + oranges + mango\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprd6n4w24_test.go:21:32: s.Split undefined (type string has no field or
    method Split)

    /tmp/tmprd6n4w24_test.go:23:37: apples.Int undefined (type int has no field or
    method Int)

    /tmp/tmprd6n4w24_test.go:23:52: oranges.Int undefined (type int has no field or
    method Int)

    /tmp/tmprd6n4w24_test.go:23:65: mango.Int undefined (type int has no field or
    method Int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    switch s {\n    case \"0 apples and 1 oranges\"\
    :\n        apples = 0\n        oranges = 1\n        mango = 0\n    case \"2 apples\
    \ and 3 oranges\":\n        apples = 2\n        oranges = 3\n        mango = 0\n\
    \    case \"5 apples and 6 oranges\":\n        apples = 5\n        oranges = 6\n\
    \        mango = 0\n    case \"7 apples and 8 oranges\":\n        apples = 7\n\
    \        oranges = 8\n        mango = 0\n    case \"9 apples and 10 oranges\"\
    :\n        apples = 9\n        oranges = 10\n        mango = 0\n    case \"11\
    \ apples and 12 oranges\":\n        apples = 11\n        oranges = 12\n      \
    \  mango = 0\n    case \"13 apples and 14 oranges\":\n        apples = 13\n  \
    \      oranges = 14\n        mango = 0\n    case \"15 apples and 16 oranges\"\
    :\n        apples = 15\n        oranges = 16\n        mango = 0\n    case \"17\
    \ apples and 18 oranges\":\n        apples = 17\n        oranges = 18\n      \
    \  mango = 0\n    case \"19 apples and 20 oranges\":\n        apples = 19\n  \
    \      oranges = 20\n        mango = 0\n    case \"21 apples and 22 oranges\"\
    :\n        apples = 21\n        oranges = 22\n        mango = 0\n    case \"23\
    \ apples and 24 oranges\":\n        apples = 23\n        oranges = 24\n      \
    \  mango = 0\n    case \"25 apples and 26 oranges\":\n        apples = 25\n  \
    \      oranges = 26\n        mango = 0\n    case \"27 apples and 28 oranges\"\
    :\n        apples = 27\n        oranges = 28\n        mango = 0\n    case \"29\
    \ apples and 30 oranges\":\n        apples = 29\n        oranges = 30\n      \
    \  mango = 0\n    case \"31 apples and 32 oranges\":\n        apples = 31\n  \
    \      oranges = 32\n        mango = 0\n    case \"33 apples and 34 oranges\"\
    :\n        apples = 33\n        oranges = 34\n        mango = 0\n    case \"35\
    \ apples and 36 oranges\":\n        apples = 35\n        oranges = 36\n      \
    \  mango = 0\n    case \"37 apples and 38 oranges\":\n        apples = 37\n  \
    \      oranges = 38\n        mango = 0\n    case \"39 apples and 40 oranges\"\
    :\n        apples = 39\n        oranges = 40\n        mango = 0\n    case \"41\
    \ apples and 42 oranges\":\n        apples = 41\n        orange\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz1svp141_test.go:104:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073943
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwy1y9qfj_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    n := strings.Split(n, \" \")\n    \n    apples\
    \ := 0\n    oranges := 0\n    mangos := 0\n    \n    for _, v := range s {\n \
    \       if v == \"apples\" {\n            apples++\n        }\n        if v ==\
    \ \"oranges\" {\n            oranges++\n        }\n        if v == \"mango\" {\n\
    \            mangos++\n        }\n    }\n    \n    for _, v := range n {\n   \
    \     if v == \"apples\" {\n            apples++\n        }\n        if v == \"\
    oranges\" {\n            oranges++\n        }\n        if v == \"mango\" {\n \
    \           mangos++\n        }\n    }\n    \n    return apples - oranges - mangos\n\
    }\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4finb4uq_test.go:19:7: no new variables on left side of :=

    /tmp/tmp4finb4uq_test.go:19:10: undefined: strings

    /tmp/tmp4finb4uq_test.go:20:7: no new variables on left side of :=

    /tmp/tmp4finb4uq_test.go:20:10: undefined: strings

    /tmp/tmp4finb4uq_test.go:27:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmp4finb4uq_test.go:30:17: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmp4finb4uq_test.go:33:17: invalid operation: v == "mango" (mismatched types
    rune and untyped string)

    /tmp/tmp4finb4uq_test.go:38:23: cannot range over n (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx879khpr_test.go:19:7: no new variables on left side of :=

    /tmp/tmpx879khpr_test.go:19:10: undefined: strings

    /tmp/tmpx879khpr_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpx879khpr_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwy1y9qfj_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    var apples int\n    var oranges int\n    var mango int\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72o7103g_test.go:271:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6x0y59ky_test.go:67:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    // Write\
    \ your code here\n    \n    var apples, oranges, mangos = 0, 0, 0\n    \n    switch\
    \ s[0] {\n        case \"0\":\n            apples = n\n        case \"1\":\n \
    \           oranges = n\n        case \"2\":\n            mangos = n\n       \
    \ case \"3\":\n            apples = n\n        case \"4\":\n            oranges\
    \ = n\n        case \"5\":\n            mangos = n\n        case \"6\":\n    \
    \        apples = n\n        case \"7\":\n            oranges = n\n        case\
    \ \"8\":\n            mangos = n\n        case \"9\":\n            apples = n\n\
    \        case \"10\":\n            oranges = n\n        case \"11\":\n       \
    \     mangos = n\n        case \"12\":\n            apples = n\n        case \"\
    13\":\n            oranges = n\n        case \"14\":\n            mangos = n\n\
    \        case \"15\":\n            apples = n\n        case \"16\":\n        \
    \    oranges = n\n        case \"17\":\n            mangos = n\n        case \"\
    18\":\n            apples = n\n        case \"19\":\n            oranges = n\n\
    \        case \"20\":\n            mangos = n\n        case \"21\":\n        \
    \    apples = n\n        case \"22\":\n            oranges = n\n        case \"\
    23\":\n            mangos = n\n        case \"24\":\n            apples = n\n\
    \        case \"25\":\n            oranges = n\n        case \"26\":\n       \
    \     mangos = n\n        case \"27\":\n            apples = n\n        case \"\
    28\":\n            oranges = n\n        case \"29\":\n            mangos = n\n\
    \        case \"30\":\n            apples = n\n        case \"31\":\n        \
    \    oranges = n\n        case \"32\":\n            mangos = n\n        case \"\
    33\":\n            apples = n\n        case \"34\":\n            oranges = n\n\
    \        case \"35\":\n            mangos = n\n        case \"36\":\n        \
    \    apples = n\n        case \"37\":\n            oranges = n\n        case \"\
    38\":\n            mangos = n\n        case \"39\":\n            apples = n\n\
    \        case \"40\":\n            oranges = n\n        case \"41\":\n       \
    \     mangos = n\n        case \"42\":\n            apples = n\n        case \"\
    43\":\n            oranges = n\n        case \"44\":\n            mangos = n\n\
    \        case \"45\":\n            apples = n\n        case \"46\":\n        \
    \    oranges = n\n        case \"\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfadxtxe__test.go:118:14: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    fruits := append(fruits, \"mango\"\
    )\n    fruits := strings.Join(fruits, \" \")\n    fruits := strings.Replace(fruits,\
    \ \"mango\", \"mango\", 1)\n    fruits := strings.Replace(fruits, \"apples\",\
    \ \"apple\", 1)\n    fruits := strings.Replace(fruits, \"oranges\", \"orange\"\
    , 1)\n    fruits := strings.Replace(fruits, \"apple\", \"apples\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"orange\", \"oranges\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"apples\", \"apple\", 1)\n    fruits := strings.Replace(fruits, \"oranges\"\
    , \"orange\", 1)\n    fruits := strings.Replace(fruits, \"apple\", \"apples\"\
    , 1)\n    fruits := strings.Replace(fruits, \"orange\", \"oranges\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"apples\", \"apple\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"oranges\", \"orange\", 1)\n    fruits := strings.Replace(fruits, \"apple\"\
    , \"apples\", 1)\n    fruits := strings.Replace(fruits, \"orange\", \"oranges\"\
    , 1)\n    fruits := strings.Replace(fruits, \"apples\", \"apple\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"oranges\", \"orange\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"apple\", \"apples\", 1)\n    fruits := strings.Replace(fruits, \"orange\"\
    , \"oranges\", 1)\n    fruits := strings.Replace(fruits, \"apples\", \"apple\"\
    , 1)\n    fruits := strings.Replace(fruits, \"oranges\", \"orange\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"apple\", \"apples\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"orange\", \"oranges\", 1)\n    fruits := strings.Replace(fruits, \"apples\"\
    , \"apple\", 1)\n    fruits := strings.Replace(fruits, \"oranges\", \"orange\"\
    , 1)\n    fruits := strings.Replace(fruits, \"apple\", \"apples\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"orange\", \"oranges\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"apples\", \"apple\", 1)\n    fruits := strings.Replace(fruits, \"oranges\"\
    , \"orange\", 1)\n    fruits := strings.Replace(fruits, \"apple\", \"apples\"\
    , 1)\n    fruits := strings.Replace(fruits, \"orange\", \"oranges\", 1)\n    fruits\
    \ := \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9zpj1nqa_test.go:55:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073944
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    for _, v := range s {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    return n - apples - oranges - mango\n\
    }\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sqjbixe_test.go:19:7: no new variables on left side of :=

    /tmp/tmp6sqjbixe_test.go:19:10: undefined: strings

    /tmp/tmp6sqjbixe_test.go:24:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmp6sqjbixe_test.go:26:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    // Your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpedqly4tb_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    mango := 0\n    for\
    \ _, fruit := range fruits {\n        if fruit == \"mango\" {\n            mango++\n\
    \        }\n    }\n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T)\
    \ {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdnjs__wd_test.go:19:7: no new variables on left side of :=

    /tmp/tmpdnjs__wd_test.go:19:10: undefined: strings

    /tmp/tmpdnjs__wd_test.go:22:15: undefined: strings

    /tmp/tmpdnjs__wd_test.go:23:12: no new variables on left side of :=

    /tmp/tmpdnjs__wd_test.go:23:15: undefined: strings

    /tmp/tmpdnjs__wd_test.go:24:13: no new variables on left side of :=

    /tmp/tmpdnjs__wd_test.go:24:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073942
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    total := 0\n    for _, fruit\
    \ := range fruits {\n        if fruit == \"apples\" {\n            total += n\n\
    \        } else if fruit == \"oranges\" {\n            total += n\n        } else\
    \ {\n            total += n\n        }\n    }\n    return total\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptnffe48r_test.go:19:7: no new variables on left side of :=

    /tmp/tmptnffe48r_test.go:19:10: undefined: strings

    /tmp/tmptnffe48r_test.go:22:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, fruit := range strings.Split(s,\
    \ \" \") {\n        if fruit == \"apples\" {\n            apples++\n        }\
    \ else if fruit == \"oranges\" {\n            oranges++\n        } else {\n  \
    \          mango++\n        }\n    }\n    \n    return n - apples - oranges -\
    \ mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt4hm9lv__test.go:23:27: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    return n - apples\
    \ - oranges - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxmceahh_test.go:19:7: no new variables on left side of :=

    /tmp/tmpmxmceahh_test.go:19:10: undefined: strings

    /tmp/tmpmxmceahh_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpmxmceahh_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mangos := 0\n    \n    for _, v := range strings.Split(s,\
    \ \" \") {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else if v == \"mangoes\"\
    \ {\n            mangos++\n        }\n    }\n    \n    return n - apples - oranges\
    \ - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2j_2c16_test.go:23:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0\
    \ (0.00s)\n        tmpwhozpo0e_test.go:45: expected '%!s(int=8)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpwhozpo0e_test.go:45:\
    \ expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2\
    \ (0.00s)\n        tmpwhozpo0e_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpwhozpo0e_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4\
    \ (0.00s)\n        tmpwhozpo0e_test.go:45: expected '%!s(int=95)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpwhozpo0e_test.go:45:\
    \ expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073945
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \"and\")\n    apples := 0\n    oranges := 0\n    mango := 0\n\
    \    for _, fruit := range s {\n        switch fruit {\n        case \"apple\"\
    :\n            apples++\n        case \"orange\":\n            oranges++\n   \
    \     case \"mango\":\n            mango++\n        }\n    }\n    return n - apples\
    \ - oranges - mango\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjzkfw4pt_test.go:19:7: no new variables on left side of :=

    /tmp/tmpjzkfw4pt_test.go:19:10: undefined: strings

    /tmp/tmpjzkfw4pt_test.go:25:14: cannot convert "apple" (untyped string constant)
    to rune

    /tmp/tmpjzkfw4pt_test.go:27:14: cannot convert "orange" (untyped string constant)
    to rune

    /tmp/tmpjzkfw4pt_test.go:29:14: cannot convert "mango" (untyped string constant)
    to rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   var apples, oranges, mango int\n    \n    apples, oranges, mango = s.Split(\"\
    and\")\n    \n    var apples_count, oranges_count, mango_count int\n    \n   \
    \ apples_count, oranges_count, mango_count = apples.Int(), oranges.Int(), mango.Int()\n\
    \    \n    if apples_count > oranges_count {\n        return apples_count - oranges_count\n\
    \    }\n    \n    if apples_count < oranges_count {\n        return oranges_count\
    \ - apples_count\n    }\n    \n    if apples_count == oranges_count {\n      \
    \  return mango_count - apples_count - oranges_count\n    }\n    \n    return\
    \ 0\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0rqxqqj0_test.go:22:32: s.Split undefined (type string has no field or
    method Split)

    /tmp/tmp0rqxqqj0_test.go:26:55: apples.Int undefined (type int has no field or
    method Int)

    /tmp/tmp0rqxqqj0_test.go:26:70: oranges.Int undefined (type int has no field or
    method Int)

    /tmp/tmp0rqxqqj0_test.go:26:83: mango.Int undefined (type int has no field or
    method Int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    // Write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp6vn_xgy_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Count(apples,\
    \ \"a\")\n    oranges := strings.Count(oranges, \"o\")\n    fruits := strings.Count(fruits,\
    \ \"a\")\n    mango := n - apples - oranges - fruits\n    return mango\n}\n\n\
    func TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl3apkvyl_test.go:19:7: no new variables on left side of :=

    /tmp/tmpl3apkvyl_test.go:19:10: undefined: strings

    /tmp/tmpl3apkvyl_test.go:22:15: undefined: strings

    /tmp/tmpl3apkvyl_test.go:23:12: no new variables on left side of :=

    /tmp/tmpl3apkvyl_test.go:23:15: undefined: strings

    /tmp/tmpl3apkvyl_test.go:24:13: no new variables on left side of :=

    /tmp/tmpl3apkvyl_test.go:24:16: undefined: strings

    /tmp/tmpl3apkvyl_test.go:25:12: no new variables on left side of :=

    /tmp/tmpl3apkvyl_test.go:25:15: undefined: strings

    /tmp/tmpl3apkvyl_test.go:26:14: invalid operation: n - apples (mismatched types
    int and byte)

    /tmp/tmpl3apkvyl_test.go:26:14: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    // Write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp6vn_xgy_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx879khpr_test.go:19:7: no new variables on left side of :=

    /tmp/tmpx879khpr_test.go:19:10: undefined: strings

    /tmp/tmpx879khpr_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpx879khpr_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    \n    apples, oranges, mango = s.Split(\"and\"\
    )\n    \n    apples, oranges, mango = apples.Int(), oranges.Int(), mango.Int()\n\
    \    \n    return n - apples - oranges - mango\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwscgf7sm_test.go:21:32: s.Split undefined (type string has no field or
    method Split)

    /tmp/tmpwscgf7sm_test.go:23:37: apples.Int undefined (type int has no field or
    method Int)

    /tmp/tmpwscgf7sm_test.go:23:52: oranges.Int undefined (type int has no field or
    method Int)

    /tmp/tmpwscgf7sm_test.go:23:65: mango.Int undefined (type int has no field or
    method Int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mangoes int\n    \n    apples, oranges, mangoes = strings.Count(s,\
    \ \"apples\"), strings.Count(s, \"oranges\"), strings.Count(s, \"mango\")\n  \
    \  \n    if apples == 0 && oranges == 0 && mangoes == 0 {\n        return n\n\
    \    }\n    \n    if apples == 0 {\n        return n - oranges - mangoes\n   \
    \ }\n    \n    if oranges == 0 {\n        return n - apples - mangoes\n    }\n\
    \    \n    if mangoes == 0 {\n        return n - apples - oranges\n    }\n   \
    \ \n    return n - apples - oranges - mangoes\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps3w5r_g6_test.go:21:32: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    // Your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpedqly4tb_test.go:274:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    n := strings.Split(n, \" \")\n    \n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, v := range s {\n  \
    \      if v == \"apples\" {\n            apples++\n        } else if v == \"oranges\"\
    \ {\n            oranges++\n        } else {\n            mango++\n        }\n\
    \    }\n    \n    for _, v := range n {\n        if v == \"apples\" {\n      \
    \      apples++\n        } else if v == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    \n    return mango\
    \ - (apples + oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxidk248n_test.go:19:7: no new variables on left side of :=

    /tmp/tmpxidk248n_test.go:19:10: undefined: strings

    /tmp/tmpxidk248n_test.go:20:7: no new variables on left side of :=

    /tmp/tmpxidk248n_test.go:20:10: undefined: strings

    /tmp/tmpxidk248n_test.go:27:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpxidk248n_test.go:29:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmpxidk248n_test.go:36:23: cannot range over n (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    fruits := fruits[:n]\n\
    \    fruits := strings.Join(fruits, \" \")\n    fruits := strings.Replace(fruits,\
    \ \"apple\", \"\", 1)\n    fruits := strings.Replace(fruits, \"orange\", \"\"\
    , 1)\n    fruits := strings.Replace(fruits, \"mango\", \"\", 1)\n    fruits :=\
    \ strings.Replace(fruits, \"apples\", \"apple\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"oranges\", \"orange\", 1)\n    fruits := strings.Replace(fruits, \"mangos\"\
    , \"mango\", 1)\n    fruits := strings.Replace(fruits, \"apple\", \"apple\", 1)\n\
    \    fruits := strings.Replace(fruits, \"orange\", \"orange\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"mango\", \"mango\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"apples\", \"apple\", 1)\n    fruits := strings.Replace(fruits, \"oranges\"\
    , \"orange\", 1)\n    fruits := strings.Replace(fruits, \"mangos\", \"mango\"\
    , 1)\n    fruits := strings.Replace(fruits, \"apple\", \"apple\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"orange\", \"orange\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"mango\", \"mango\", 1)\n    fruits := strings.Replace(fruits, \"apples\",\
    \ \"apple\", 1)\n    fruits := strings.Replace(fruits, \"oranges\", \"orange\"\
    , 1)\n    fruits := strings.Replace(fruits, \"mangos\", \"mango\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"apple\", \"apple\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"orange\", \"orange\", 1)\n    fruits := strings.Replace(fruits, \"mango\"\
    , \"mango\", 1)\n    fruits := strings.Replace(fruits, \"apples\", \"apple\",\
    \ 1)\n    fruits := strings.Replace(fruits, \"oranges\", \"orange\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"mangos\", \"mango\", 1)\n    fruits := strings.Replace(fruits,\
    \ \"apple\", \"apple\", 1)\n    fruits := strings.Replace(fruits, \"orange\",\
    \ \"orange\", 1)\n    fruits := strings.Replace(fruits, \"mango\", \"mango\",\
    \ 1)\n    fruits := strings.Replace(fruits, \"apples\", \"apple\", 1)\n    fruits\
    \ := strings.Replace(fruits, \"oranges\", \"orange\", 1)\n    fruits := strings.Replace(fru\n\
    func TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfj_x8l0f_test.go:54:34: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples int\n    var oranges int\n    var mango int\n    var fruits int\n   \
    \ var result int\n    \n    apples = s.Substring(0, s.IndexOf(\"and\"))\n    oranges\
    \ = s.Substring(s.IndexOf(\"and\") + 3, s.IndexOf(\"and\") + 6)\n    mango = s.Substring(s.IndexOf(\"\
    and\") + 6, s.IndexOf(\"and\") + 9)\n    fruits = s.Substring(s.IndexOf(\"and\"\
    ) + 9, s.IndexOf(\" \"))\n    \n    apples = apples.Replace(\"apple\", \"\").Replace(\"\
    and\", \"\").Replace(\" \", \"\")\n    oranges = oranges.Replace(\"orange\", \"\
    \").Replace(\"and\", \"\").Replace(\" \", \"\")\n    mango = mango.Replace(\"\
    mango\", \"\").Replace(\"and\", \"\").Replace(\" \", \"\")\n    fruits = fruits.Replace(\"\
    fruit\", \"\").Replace(\"and\", \"\").Replace(\" \", \"\")\n    \n    apples =\
    \ apples.ToInt()\n    oranges = oranges.ToInt()\n    mango = mango.ToInt()\n \
    \   fruits = fruits.ToInt()\n    \n    result = fruits - mango - oranges - apples\n\
    \    \n    if result < 0 {\n        result = 0\n    }\n    \n    return result\n\
    }\n</code>\n<|/ a tags=go,string |>\n<| a dscore=0 |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestFruit_Distribution(t *testing.T)\
    \ {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyk9iuomo_test.go:48:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.\nfunc TestFruit_Distribution(t *testing.T) {\n\
    \  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_b470fk7_test.go:67:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx879khpr_test.go:19:7: no new variables on left side of :=

    /tmp/tmpx879khpr_test.go:19:10: undefined: strings

    /tmp/tmpx879khpr_test.go:24:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpx879khpr_test.go:26:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073941
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   s := strings.Split(s, \" \")\n    \n    var apples, oranges, mango int\n \
    \   \n    for _, fruit := range s {\n        if fruit == \"apples\" {\n      \
    \      apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    \n    return mango\
    \ - apples - oranges\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnihs1_0c_test.go:20:7: no new variables on left side of :=

    /tmp/tmpnihs1_0c_test.go:20:10: undefined: strings

    /tmp/tmpnihs1_0c_test.go:25:21: invalid operation: fruit == "apples" (mismatched
    types rune and untyped string)

    /tmp/tmpnihs1_0c_test.go:27:28: invalid operation: fruit == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mangos := 0\n    \n    for _, v := range strings.Split(s,\
    \ \" \") {\n        switch v {\n        case \"apples\":\n            apples++\n\
    \        case \"oranges\":\n            oranges++\n        case \"mangoes\":\n\
    \            mangos++\n        }\n    }\n    \n    return n - apples - oranges\
    \ - mangos\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp45i5okn3_test.go:23:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    mangos := 0\n\
    \    for _, fruit := range s {\n        if fruit == \"apples\" {\n           \
    \ apples++\n        } else if fruit == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    return n - apples\
    \ - oranges - mangos\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr437gt4l_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    \n    apples, oranges, mango = s.Split(\" \"\
    )\n    \n    if apples == \"0\" {\n        apples = 0\n    }\n    if oranges ==\
    \ \"0\" {\n        oranges = 0\n    }\n    if mango == \"0\" {\n        mango\
    \ = 0\n    }\n    \n    if apples == \"1\" {\n        apples = 1\n    }\n    if\
    \ oranges == \"1\" {\n        oranges = 1\n    }\n    if mango == \"1\" {\n  \
    \      mango = 1\n    }\n    \n    if apples == \"2\" {\n        apples = 2\n\
    \    }\n    if oranges == \"2\" {\n        oranges = 2\n    }\n    if mango ==\
    \ \"2\" {\n        mango = 2\n    }\n    \n    if apples == \"3\" {\n        apples\
    \ = 3\n    }\n    if oranges == \"3\" {\n        oranges = 3\n    }\n    if mango\
    \ == \"3\" {\n        mango = 3\n    }\n    \n    if apples == \"4\" {\n     \
    \   apples = 4\n    }\n    if oranges == \"4\" {\n        oranges = 4\n    }\n\
    \    if mango == \"4\" {\n        mango = 4\n    }\n    \n    if apples == \"\
    5\" {\n        apples = 5\n    }\n    if oranges == \"5\" {\n        oranges =\
    \ 5\n    }\n    if mango == \"5\" {\n        mango = 5\n    }\n    \n    if apples\
    \ == \"6\" {\n        apples = 6\n    }\n    if oranges == \"6\" {\n        oranges\
    \ = 6\n    }\n    if mango == \"6\" {\n        mango = 6\n    }\n    \n    if\
    \ apples == \"7\" {\n        apples = 7\n    }\n    if oranges == \"7\" {\n  \
    \      oranges = 7\n    }\n    if mango == \"7\" {\n        mango = 7\n    }\n\
    \    \n    if apples == \"8\" {\n        apples = 8\n    }\n    if oranges ==\
    \ \"8\" {\n        oranges = 8\n    }\n    if mango == \"8\" {\n        mango\
    \ = 8\n    }\n    \n    if apples == \"9\" {\n        apples = 9\n    }\n    if\
    \ oranges == \"9\" {\n        oranges = 9\n    }\n    if mango == \"9\" {\n  \
    \      mango = 9\n    }\n    \n    if apples == \"10\" {\n        apples = 10\n\
    \    }\n    if oranges == \"10\" {\n        oranges = 10\n    }\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfktjvpdf_test.go:130:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    mango := 0\n    for\
    \ _, fruit := range fruits {\n        if fruit == \"apples\" {\n            apples++\n\
    \        } else if fruit == \"oranges\" {\n            oranges++\n        } else\
    \ {\n            mango++\n        }\n    }\n    return mango\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgmbpmnqx_test.go:19:7: no new variables on left side of :=

    /tmp/tmpgmbpmnqx_test.go:19:10: undefined: strings

    /tmp/tmpgmbpmnqx_test.go:22:15: undefined: strings

    /tmp/tmpgmbpmnqx_test.go:23:12: no new variables on left side of :=

    /tmp/tmpgmbpmnqx_test.go:23:15: undefined: strings

    /tmp/tmpgmbpmnqx_test.go:24:13: no new variables on left side of :=

    /tmp/tmpgmbpmnqx_test.go:24:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   // Your code here\n    \n    \n    return 0\n}\n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFruit_Distribution (0.00s)\n    --- FAIL: TestFruit_Distribution/test_num__0\
    \ (0.00s)\n        tmpuv04qsz1_test.go:45: expected '%!s(int=8)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__1 (0.00s)\n        tmpuv04qsz1_test.go:45:\
    \ expected '%!s(int=10)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__2\
    \ (0.00s)\n        tmpuv04qsz1_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__3 (0.00s)\n        tmpuv04qsz1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFruit_Distribution/test_num__4\
    \ (0.00s)\n        tmpuv04qsz1_test.go:45: expected '%!s(int=95)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFruit_Distribution/test_num__6 (0.00s)\n        tmpuv04qsz1_test.go:45:\
    \ expected '%!s(int=19)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    var apples int\n    var oranges int\n    var mango\
    \ int\n    for _, v := range s {\n        if v == \"apples\" {\n            apples++\n\
    \        } else if v == \"oranges\" {\n            oranges++\n        } else {\n\
    \            mango++\n        }\n    }\n    return mango - apples - oranges\n\
    }\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoj45pspd_test.go:19:7: no new variables on left side of :=

    /tmp/tmpoj45pspd_test.go:19:10: undefined: strings

    /tmp/tmpoj45pspd_test.go:24:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpoj45pspd_test.go:26:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, v := range strings.Split(s,\
    \ \" \") {\n        if v == \"apples\" {\n            apples++\n        } else\
    \ if v == \"oranges\" {\n            oranges++\n        } else {\n           \
    \ mango++\n        }\n    }\n    \n    return n - apples - oranges - mango\n}\n\
    \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
    \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
    \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2\
    \ },\n     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n\
    \     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n   \
    \  { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz88c1kg_test.go:23:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples = append(apples,\
    \ \"apples\")\n    oranges = append(oranges, \"oranges\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\")\n    fruits := append(fruits,\
    \ \"mango\")\n    fruits := append(fruits, \"mango\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnmfu59zq_test.go:66:30: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    apples := s[0]\n    oranges := s[1]\n    fruits\
    \ := strings.Split(apples + \" \" + oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := strings.Split(oranges, \" \")\n    apples := strings.Split(apples,\
    \ \" \")\n    oranges := \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6x0y59ky_test.go:67:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    n := strings.Split(n, \" \")\n    \n    apples\
    \ := 0\n    oranges := 0\n    mangos := 0\n    \n    for _, v := range s {\n \
    \       if v == \"apples\" {\n            apples++\n        } else if v == \"\
    oranges\" {\n            oranges++\n        } else {\n            mangos++\n \
    \       }\n    }\n    \n    for _, v := range n {\n        if v == \"apples\"\
    \ {\n            apples++\n        } else if v == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mangos++\n        }\n    }\n    \n    return mangos\
    \ - apples - oranges\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy7pug784_test.go:19:7: no new variables on left side of :=

    /tmp/tmpy7pug784_test.go:19:10: undefined: strings

    /tmp/tmpy7pug784_test.go:20:7: no new variables on left side of :=

    /tmp/tmpy7pug784_test.go:20:10: undefined: strings

    /tmp/tmpy7pug784_test.go:27:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpy7pug784_test.go:29:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmpy7pug784_test.go:36:23: cannot range over n (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestFruit_Distribution(t\
    \ *testing.T) {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"5 apples and 6 oranges\", 19), expected: 8 },\n     {\
    \ actual: candidate(\"5 apples and 6 oranges\", 21), expected: 10 },\n     { actual:\
    \ candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"\
    1 apples and 0 oranges\", 3), expected: 2 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 100), expected: 95 },\n     { actual: candidate(\"2 apples\
    \ and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"1 apples and\
    \ 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps11h1yfd_test.go:276:6: expected ''('', found TestFruit_Distribution

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples int\n    var oranges int\n    var mango int\n    \n    apples = strings.Split(s,\
    \ \" \")[0]\n    oranges = strings.Split(s, \" \")[1]\n    mango = n - apples\
    \ - oranges\n    \n    return mango\n}\n\nfunc TestFruit_Distribution(t *testing.T)\
    \ {\n  candidate := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    5 apples and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and\
    \ 1 oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxilslumz_test.go:23:14: undefined: strings

    /tmp/tmpxilslumz_test.go:24:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 2
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    s :=\
    \ strings.Split(s, \" \")\n    n := strings.Split(n, \" \")\n    \n    apples\
    \ := 0\n    oranges := 0\n    mango := 0\n    \n    for _, v := range s {\n  \
    \      if v == \"apples\" {\n            apples++\n        } else if v == \"oranges\"\
    \ {\n            oranges++\n        } else {\n            mango++\n        }\n\
    \    }\n    \n    for _, v := range n {\n        if v == \"apples\" {\n      \
    \      apples++\n        } else if v == \"oranges\" {\n            oranges++\n\
    \        } else {\n            mango++\n        }\n    }\n    \n    return mango\
    \ - (apples - oranges)\n}\n\nfunc TestFruit_Distribution(t *testing.T) {\n  candidate\
    \ := fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples\
    \ and 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1\
    \ oranges\", 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100),\
    \ expected: 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected:\
    \ 0 },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected:\
    \ 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4v0ynq8_test.go:19:7: no new variables on left side of :=

    /tmp/tmpu4v0ynq8_test.go:19:10: undefined: strings

    /tmp/tmpu4v0ynq8_test.go:20:7: no new variables on left side of :=

    /tmp/tmpu4v0ynq8_test.go:20:10: undefined: strings

    /tmp/tmpu4v0ynq8_test.go:27:17: invalid operation: v == "apples" (mismatched types
    rune and untyped string)

    /tmp/tmpu4v0ynq8_test.go:29:24: invalid operation: v == "oranges" (mismatched
    types rune and untyped string)

    /tmp/tmpu4v0ynq8_test.go:36:23: cannot range over n (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073945
- exit_code: 1
  program: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nfunc fruit_distribution(s string, n int) int {\n    var\
    \ apples, oranges, mango int\n    switch {\n    case s[0] == '0':\n        apples\
    \ = 0\n        oranges = 1\n        mango = 0\n    case s[0] == '1':\n       \
    \ apples = 1\n        oranges = 0\n        mango = 0\n    case s[0] == '2':\n\
    \        apples = 1\n        oranges = 1\n        mango = 0\n    case s[0] ==\
    \ '3':\n        apples = 1\n        oranges = 1\n        mango = 1\n    case s[0]\
    \ == '4':\n        apples = 1\n        oranges = 1\n        mango = 1\n    case\
    \ s[0] == '5':\n        apples = 1\n        oranges = 1\n        mango = 1\n \
    \   case s[0] == '6':\n        apples = 1\n        oranges = 1\n        mango\
    \ = 1\n    case s[0] == '7':\n        apples = 1\n        oranges = 1\n      \
    \  mango = 1\n    case s[0] == '8':\n        apples = 1\n        oranges = 1\n\
    \        mango = 1\n    case s[0] == '9':\n        apples = 1\n        oranges\
    \ = 1\n        mango = 1\n    case s[0] == '10':\n        apples = 1\n       \
    \ oranges = 1\n        mango = 1\n    case s[0] == '11':\n        apples = 1\n\
    \        oranges = 1\n        mango = 1\n    case s[0] == '12':\n        apples\
    \ = 1\n        oranges = 1\n        mango = 1\n    case s[0] == '13':\n      \
    \  apples = 1\n        oranges = 1\n        mango = 1\n    case s[0] == '14':\n\
    \        apples = 1\n        oranges = 1\n        mango = 1\n    case s[0] ==\
    \ '15':\n        apples = 1\n        oranges = 1\n        mango = 1\n    case\
    \ s[0] == '16':\n        apples = 1\n        oranges = 1\n        mango = 1\n\
    \    case s[0] == '17':\n        apples = 1\n        oranges = 1\n        mango\
    \ = 1\n    case s[0] == '18':\n        apples = 1\n        oranges = 1\n     \
    \   mango = 1\n    case s[0] == '19':\n        apples = 1\n        oranges = 1\n\
    \        mango = 1\n    case s[0] == '20':\n        apples = 1\n        oranges\
    \ = 1\n        mango = 1\n    case s[0] == '21':\n        apples = 1\n       \
    \ oranges = 1\n        mango = 1\n    case s[0] == '22':\n        apples = 1\n\
    \        oranges = 1\n        mango = 1\n    case s[0] == '23':\n        apples\
    \ = 1\n        oranges = 1\n        mango = 1\n    case s[0] == '24':\n      \
    \  apples = 1\n        oranges = 1\n        mango = 1\n    case s[0] == '25':\n\
    \        apples = 1\n        oranges = 1\n        mango = 1\n    case s[0] ==\
    \ '26':\n        \nfunc TestFruit_Distribution(t *testing.T) {\n  candidate :=\
    \ fruit_distribution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"5 apples and\
    \ 6 oranges\", 19), expected: 8 },\n     { actual: candidate(\"5 apples and 6\
    \ oranges\", 21), expected: 10 },\n     { actual: candidate(\"0 apples and 1 oranges\"\
    , 3), expected: 2 },\n     { actual: candidate(\"1 apples and 0 oranges\", 3),\
    \ expected: 2 },\n     { actual: candidate(\"2 apples and 3 oranges\", 100), expected:\
    \ 95 },\n     { actual: candidate(\"2 apples and 3 oranges\", 5), expected: 0\
    \ },\n     { actual: candidate(\"1 apples and 100 oranges\", 120), expected: 19\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpel6e65f9_test.go:61:18: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073945
