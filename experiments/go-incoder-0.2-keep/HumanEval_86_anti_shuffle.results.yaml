language: go_test.go
name: HumanEval_86_anti_shuffle
results:
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\" + word\n    }\n    return result\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf786es2u_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := 0; i < len(words); i++ {\n        words[i] = words[i] + strings.Repeat(\"\
    \ \", len(words[i]))\n    }\n    return strings.Join(words, \"\")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5mlvn8k_test.go:18:14: undefined: strings

    /tmp/tmpd5mlvn8k_test.go:19:11: no new variables on left side of :=

    /tmp/tmpd5mlvn8k_test.go:21:31: undefined: strings

    /tmp/tmpd5mlvn8k_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    for i = 0; i < len(s);\
    \ i++ {\n        result += s[i]\n    }\n    for i = len(s) - 1; i >= 0; i-- {\n\
    \        for j = i + 1; j < len(s); j++ {\n            if s[i] == s[j] {\n   \
    \             result += s[j]\n                j--\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu_51hx6i_test.go:22:9: invalid operation: result += s[i] (mismatched types
    string and byte)

    /tmp/tmpu_51hx6i_test.go:27:17: invalid operation: result += s[j] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    for i\
    \ = 0; i < len(s); i++ {\n        for j = i + 1; j < len(s); j++ {\n         \
    \   if s[i] == s[j] {\n                continue\n            }\n            for\
    \ k = j + 1; k < len(s); k++ {\n                if s[k] == s[j] {\n          \
    \          continue\n                }\n                if s[k] == s[i] {\n  \
    \                  continue\n                }\n                if s[i] == s[k]\
    \ {\n                    continue\n                }\n                if s[i]\
    \ > s[j] {\n                    result = result + s[k]\n                } else\
    \ {\n                    result = result + s[i]\n                }\n         \
    \   }\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpacm79kxt_test.go:38:30: invalid operation: result + s[k] (mismatched types
    string and byte)

    /tmp/tmpacm79kxt_test.go:40:30: invalid operation: result + s[i] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    for i = 0; i < len(s);\
    \ i++ {\n        for j = i + 1; j < len(s); j++ {\n            if s[i] == s[j]\
    \ {\n                continue\n            }\n            if s[i] == ' ' && s[j]\
    \ == ' ' {\n                continue\n            }\n            if s[i] == '\
    \ ' {\n                result = result + s[j] + s[i]\n            } else {\n \
    \               result = result + s[j] + s[i]\n            }\n        }\n    }\n\
    \    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv559gwrg_test.go:30:26: invalid operation: result + s[j] (mismatched types
    string and byte)

    /tmp/tmpv559gwrg_test.go:32:26: invalid operation: result + s[j] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptx5mr2nl_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb64k0mp0_test.go:19:14: undefined: strings

    /tmp/tmpb64k0mp0_test.go:22:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += strings.ToUpper(word[0]) + strings.ToLower(word[1:])\
    \ + \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaka77fj_test.go:19:14: undefined: strings

    /tmp/tmpnaka77fj_test.go:21:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    for i = 0; i < len(s); i++ {\n    \
    \    result += string([]rune(s[i])+i)\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8wi_9g1t_test.go:21:33: cannot convert s[i] (value of type byte) to type
    []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    for i = 0; i <= len(s); i++ {\n        for j = i + 1; j <= len(s);\
    \ j++ {\n            for k = j + 1; k <= len(s); k++ {\n                for l\
    \ = k + 1; l <= len(s); l++ {\n                    if s[i] == s[j] && s[i] ==\
    \ s[k] && s[i] == s[l] && s[j] == s[k] && s[j] == s[l] && s[k] == s[l] {\n   \
    \                     result += s[l]\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe44y3t08_test.go:28:25: invalid operation: result += s[l] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        result += strings.ToLower(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb64k0mp0_test.go:19:14: undefined: strings

    /tmp/tmpb64k0mp0_test.go:22:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    for i\
    \ = 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            for j = i; j <\
    \ len(s); j++ {\n                if s[j] != ' ' {\n                    result\
    \ = result + s[j] + s[i]\n                    break\n                }\n     \
    \       }\n        } else {\n            for j = i; j < len(s); j++ {\n      \
    \          if s[j] > s[i] {\n                    result = result + s[j] + s[i]\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb0k6g989_test.go:21:9: k declared but not used

    /tmp/tmpb0k6g989_test.go:26:30: invalid operation: result + s[j] (mismatched types
    string and byte)

    /tmp/tmpb0k6g989_test.go:33:30: invalid operation: result + s[j] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibuqeito_test.go:18:14: undefined: strings

    /tmp/tmpibuqeito_test.go:19:11: no new variables on left side of :=

    /tmp/tmpibuqeito_test.go:21:40: undefined: rand

    /tmp/tmpibuqeito_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynicdxfu_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    s := \"\"\n    for _, w := range words {\n        s += w\n    }\n    return\
    \ s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp87_5bgum_test.go:18:14: undefined: strings

    /tmp/tmp87_5bgum_test.go:19:11: no new variables on left side of :=

    /tmp/tmp87_5bgum_test.go:23:5: undefined: sort

    /tmp/tmp87_5bgum_test.go:24:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = words[i][:1] + strings.ToLower(words[i][1:])\
    \ + words[i][1:]\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3mrplauz_test.go:18:14: undefined: strings

    /tmp/tmp3mrplauz_test.go:19:11: no new variables on left side of :=

    /tmp/tmp3mrplauz_test.go:21:35: undefined: strings

    /tmp/tmp3mrplauz_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw_abyezn_test.go:147:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\" + strings.ToLower(word)\n    }\n \
    \   return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlhw7r6u_test.go:19:14: undefined: strings

    /tmp/tmpvlhw7r6u_test.go:21:25: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynicdxfu_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    s := \"\"\n    for _, w := range words {\n        s += w\n    }\n    return\
    \ s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp87_5bgum_test.go:18:14: undefined: strings

    /tmp/tmp87_5bgum_test.go:19:11: no new variables on left side of :=

    /tmp/tmp87_5bgum_test.go:23:5: undefined: sort

    /tmp/tmp87_5bgum_test.go:24:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    for i = 0; i < len(s);\
    \ i++ {\n        for j = i + 1; j < len(s); j++ {\n            if s[i] == s[j]\
    \ {\n                result += s[j]\n                i++\n                j--\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y6dhfm1_test.go:24:17: invalid operation: result += s[j] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy5c5s98i_test.go:18:14: undefined: strings

    /tmp/tmpy5c5s98i_test.go:19:11: no new variables on left side of :=

    /tmp/tmpy5c5s98i_test.go:23:5: undefined: sort

    /tmp/tmpy5c5s98i_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var words []string\n    var i int\n    for _, word\
    \ := range strings.Split(s, \" \") {\n        words = append(words, word)\n  \
    \  }\n    for _, word := range words {\n        for i = len(word) - 1; i >= 0;\
    \ i-- {\n            if word[i] > word[i+1] {\n                result += word[i]\
    \ + word[i+1]\n                word[i] = word[i+1]\n                word[i+1]\
    \ = result\n                result = \"\"\n            }\n        }\n    }\n \
    \   return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk__6rno1_test.go:21:26: undefined: strings

    /tmp/tmpk__6rno1_test.go:27:17: invalid operation: result += word[i] + word[i
    + 1] (mismatched types string and byte)

    /tmp/tmpk__6rno1_test.go:28:17: cannot assign to word[i] (value of type byte)

    /tmp/tmpk__6rno1_test.go:29:17: cannot assign to word[i + 1] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = strings.ToLower(words[i])\n  \
    \  }\n    sort.Strings(words)\n    return strings.Join(words, \" \")\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2m3t6ggk_test.go:18:14: undefined: strings

    /tmp/tmp2m3t6ggk_test.go:19:11: no new variables on left side of :=

    /tmp/tmp2m3t6ggk_test.go:21:20: undefined: strings

    /tmp/tmp2m3t6ggk_test.go:23:5: undefined: sort

    /tmp/tmp2m3t6ggk_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := strings.Split(s, \" \")\n    words := strings.Split(s,\
    \ \" \")\n    words := \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5peunukz_test.go:76:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw_abyezn_test.go:147:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    for i\
    \ = 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            for j = i; j <\
    \ len(s); j++ {\n                if s[j] != ' ' {\n                    result\
    \ = result + s[j] + s[i]\n                }\n            }\n        } else {\n\
    \            for j = i; j < len(s); j++ {\n                if s[j] < s[i] {\n\
    \                    result = result + s[j] + s[i]\n                }\n      \
    \      }\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpolnk5at__test.go:21:9: k declared but not used

    /tmp/tmpolnk5at__test.go:26:30: invalid operation: result + s[j] (mismatched types
    string and byte)

    /tmp/tmpolnk5at__test.go:32:30: invalid operation: result + s[j] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynicdxfu_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = words[i] + strings.Repeat(\"\"\
    , len(words[i]) - len(words[i]))\n    }\n    sort.Strings(words)\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg987hbb7_test.go:18:14: undefined: strings

    /tmp/tmpg987hbb7_test.go:19:11: no new variables on left side of :=

    /tmp/tmpg987hbb7_test.go:21:31: undefined: strings

    /tmp/tmpg987hbb7_test.go:23:5: undefined: sort

    /tmp/tmpg987hbb7_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    result := \"\"\n    for _, w := range words {\n        result += w\n    }\n\
    \    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2bnaan_6_test.go:18:14: undefined: strings

    /tmp/tmp2bnaan_6_test.go:19:11: no new variables on left side of :=

    /tmp/tmp2bnaan_6_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n\n    for i = len(s)\
    \ - 1; i >= 0; i-- {\n        l = len(s)\n        m = len(s)\n        n = len(s)\n\
    \        o = len(s)\n        p = len(s)\n        q = len(s)\n        r = len(s)\n\
    \        s = len(s)\n        t = len(s)\n        u = len(s)\n        v = len(s)\n\
    \        w = len(s)\n        x = len(s)\n        y = len(s)\n        z = len(s)\n\
    \        for j = i - 1; j >= 0; j-- {\n            k = len(s)\n            l =\
    \ len(s)\n            m = len(s)\n            n = len(s)\n            o = len(s)\n\
    \            p = len(s)\n            q = len(s)\n            r = len(s)\n    \
    \        s = len(s)\n            t = len(s)\n            u = len(s)\n        \
    \    v = len(s)\n            w = len(s)\n            x = len(s)\n            y\
    \ = len(s)\n            z = len(s)\n        }\n    }\n    return s\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptmcwlz2x_test.go:18:9:\
    \ result declared but not used\n/tmp/tmptmcwlz2x_test.go:21:9: k declared but\
    \ not used\n/tmp/tmptmcwlz2x_test.go:22:9: l declared but not used\n/tmp/tmptmcwlz2x_test.go:23:9:\
    \ m declared but not used\n/tmp/tmptmcwlz2x_test.go:24:9: n declared but not used\n\
    /tmp/tmptmcwlz2x_test.go:25:9: o declared but not used\n/tmp/tmptmcwlz2x_test.go:26:9:\
    \ p declared but not used\n/tmp/tmptmcwlz2x_test.go:29:9: s redeclared in this\
    \ block\n\t/tmp/tmptmcwlz2x_test.go:17:19: other declaration of s\n/tmp/tmptmcwlz2x_test.go:46:13:\
    \ cannot use len(s) (value of type int) as type string in assignment\n/tmp/tmptmcwlz2x_test.go:63:17:\
    \ cannot use len(s) (value of type int) as type string in assignment\n/tmp/tmptmcwlz2x_test.go:26:9:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynicdxfu_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibuqeito_test.go:18:14: undefined: strings

    /tmp/tmpibuqeito_test.go:19:11: no new variables on left side of :=

    /tmp/tmpibuqeito_test.go:21:40: undefined: rand

    /tmp/tmpibuqeito_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw_abyezn_test.go:147:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp21dw81_i_test.go:19:14: undefined: strings

    /tmp/tmp21dw81_i_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy5c5s98i_test.go:18:14: undefined: strings

    /tmp/tmpy5c5s98i_test.go:19:11: no new variables on left side of :=

    /tmp/tmpy5c5s98i_test.go:23:5: undefined: sort

    /tmp/tmpy5c5s98i_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp21dw81_i_test.go:19:14: undefined: strings

    /tmp/tmp21dw81_i_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    for i = 0; i < len(s);\
    \ i++ {\n        if s[i] == ' ' {\n            for j = i; j < len(s); j++ {\n\
    \                if s[j] == ' ' {\n                    break\n               \
    \ }\n                if s[j] < s[i] {\n                    result = result + s[j]\n\
    \                    i = j\n                    break\n                }\n   \
    \         }\n        } else {\n            result = result + s[i]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp27ujx1nc_test.go:28:30: invalid operation: result + s[j] (mismatched types
    string and byte)

    /tmp/tmp27ujx1nc_test.go:34:22: invalid operation: result + s[i] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    result := \"\"\n    for _, w := range words {\n        result += string([]byte(w)[rand.Intn(len([]byte(w)))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpux6cpjh9_test.go:18:14: undefined: strings

    /tmp/tmpux6cpjh9_test.go:19:11: no new variables on left side of :=

    /tmp/tmpux6cpjh9_test.go:23:5: undefined: sort

    /tmp/tmpux6cpjh9_test.go:26:36: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynicdxfu_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var words []string\n    var blanks []string\n    for\
    \ _, word := range strings.Split(s, \" \") {\n        words = append(words, word)\n\
    \    }\n    for _, word := range words {\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n    }\n    for _,\
    \ word := range words {\n        for _, char := range word {\n            result\
    \ += string([]byte{byte(char)})\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj37_rvzq_test.go:20:9: blanks declared but not used

    /tmp/tmpj37_rvzq_test.go:21:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibuqeito_test.go:18:14: undefined: strings

    /tmp/tmpibuqeito_test.go:19:11: no new variables on left side of :=

    /tmp/tmpibuqeito_test.go:21:40: undefined: rand

    /tmp/tmpibuqeito_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    var newWords []string\n    var newWordsLen int\n\
    \    var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n \
    \   var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n  \
    \  var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n   \
    \ var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n    var\
    \ newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n    var newWordsLen\
    \ int\n    var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n\
    \    var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n \
    \   var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n  \
    \  var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n   \
    \ var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n    var\
    \ newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n    var newWordsLen\
    \ int\n    var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n\
    \    var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n \
    \   var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n  \
    \  var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n   \
    \ var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n    var\
    \ newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n    var newWordsLen\
    \ int\n    var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n\
    \    var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n \
    \   var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n  \
    \  var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n   \
    \ var newWordsLen int\n    var newWordsLen int\n    var newWordsLen int\n    var\
    \ newWordsLen int\n    var newWord\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm0ikfixh_test.go:91:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var words []string\n    var i int\n    var j int\n\
    \    var k int\n    for i = 0; i < len(s); i++ {\n        if s[i] == ' ' {\n \
    \           words = append(words, s[i : i+1])\n            i = i + 1\n       \
    \ }\n    }\n    for i = 0; i < len(words); i++ {\n        for j = i + 1; j < len(words);\
    \ j++ {\n            if words[i] == words[j] {\n                k = j\n      \
    \          break\n            }\n        }\n        if k > i {\n            result\
    \ = result + words[i] + words[k]\n            i = k\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpqxz41_ss_test.go:63: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpqxz41_ss_test.go:63: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpqxz41_ss_test.go:63: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpqxz41_ss_test.go:63: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpqxz41_ss_test.go:63: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpqxz41_ss_test.go:63: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got '        '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := 0; i < len(words); i++ {\n        words[i] = words[i][:1] + strings.ToUpper(words[i][1:])\
    \ + words[i][1:]\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp02uc29yn_test.go:18:14: undefined: strings

    /tmp/tmp02uc29yn_test.go:19:11: no new variables on left side of :=

    /tmp/tmp02uc29yn_test.go:21:35: undefined: strings

    /tmp/tmp02uc29yn_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"\\n\" + word\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9pdzct7a_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    for i\
    \ = 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            for j = i; j <\
    \ len(s); j++ {\n                if s[j] != ' ' {\n                    break\n\
    \                }\n            }\n            for k = i; k < j; k++ {\n     \
    \           if s[k] > s[j] {\n                    result = result + s[k]\n   \
    \             } else {\n                    result = result + s[j]\n         \
    \       }\n            }\n        } else {\n            result = result + s[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16mlk0yn_test.go:31:30: invalid operation: result + s[k] (mismatched types
    string and byte)

    /tmp/tmp16mlk0yn_test.go:33:30: invalid operation: result + s[j] (mismatched types
    string and byte)

    /tmp/tmp16mlk0yn_test.go:37:22: invalid operation: result + s[i] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw_abyezn_test.go:147:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    for i = 0; i < len(s);\
    \ i++ {\n        j = i + 1\n        for ; j < len(s); j++ {\n            if s[i]\
    \ == s[j] {\n                j++\n            }\n        }\n        result = result\
    \ + s[:i] + s[j:] + s[i:j]\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [15:14] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [15:14]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.anti_shuffle(...)\n\t/tmp/tmpe84hntlw_test.go:28\n\
    command-line-arguments_test.TestAnti_Shuffle(0x0?)\n\t/tmp/tmpe84hntlw_test.go:44\
    \ +0x877\ntesting.tRunner(0xc0001a0340, 0x528fd0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    words := strings.Split(s, \" \")\n    var result\
    \ string\n    for _, word := range words {\n        result += \"_\"\n        for\
    \ _, char := range word {\n            result += string([]byte{byte(char)})\n\
    \        }\n        result += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdon4zi7b_test.go:19:11: no new variables on left side of :=

    /tmp/tmpdon4zi7b_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := range words {\n        words[i] = words[i][:1] + strings.ToUpper(words[i][1:])\
    \ + words[i][1:]\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0d24k2l8_test.go:18:14: undefined: strings

    /tmp/tmp0d24k2l8_test.go:19:11: no new variables on left side of :=

    /tmp/tmp0d24k2l8_test.go:21:35: undefined: strings

    /tmp/tmp0d24k2l8_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptx5mr2nl_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    for i = 0; i <= len(s); i++ {\n        if s[i] == ' ' {\n         \
    \   result += s[i]\n            continue\n        }\n        j = i\n        for\
    \ k = i; k <= len(s); k++ {\n            if s[k] == ' ' {\n                result\
    \ += s[k]\n                continue\n            }\n            if s[k] > s[j]\
    \ {\n                l = k\n            } else {\n                l = j\n    \
    \        }\n            if s[k] < s[j] {\n                j = k\n            }\n\
    \            result += s[k]\n            j = k\n        }\n        result += s[i]\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_fvukhb6_test.go:22:9: l declared but not used

    /tmp/tmp_fvukhb6_test.go:25:13: invalid operation: result += s[i] (mismatched
    types string and byte)

    /tmp/tmp_fvukhb6_test.go:31:17: invalid operation: result += s[k] (mismatched
    types string and byte)

    /tmp/tmp_fvukhb6_test.go:42:13: invalid operation: result += s[k] (mismatched
    types string and byte)

    /tmp/tmp_fvukhb6_test.go:45:9: invalid operation: result += s[i] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynicdxfu_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptx5mr2nl_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var words []string\n    var i int\n    var j int\n\
    \    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n \
    \   var p int\n    var q int\n    var r int\n    var s int\n    var t int\n  \
    \  var u int\n    var v int\n    var w int\n    var x int\n    var y int\n   \
    \ var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var\
    \ e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var j\
    \ int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n\
    \    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n \
    \   var u int\n    var v int\n    var w int\n    var x int\n    var y int\n  \
    \  var z int\n    var a int\n    var b int\n    var c int\n    var d int\n   \
    \ var e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var\
    \ j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o\
    \ int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n\
    \    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n \
    \   var z int\n    var a int\n    var b int\n    var c int\n    var d int\n  \
    \  var e int\n    var f int\n    var g int\n    var h int\n    var i int\n   \
    \ var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var\
    \ o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t\
    \ int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n\
    \    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n \
    \   var e int\n    var f int\n    var g int\n    var h int\n    var i int\n  \
    \  var j int\n    var k int\n    var l int\n    var m int\n    var n int\n   \
    \ var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var\
    \ t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y\
    \ int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp713ua3ju_test.go:146:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075095
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptx5mr2nl_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\" + word\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbpd7ymx9_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    for i\
    \ = 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            for j = i; j <\
    \ len(s); j++ {\n                if s[j] != ' ' {\n                    break\n\
    \                }\n            }\n            for k = i; k < j; k++ {\n     \
    \           result += s[k]\n            }\n        } else {\n            result\
    \ += s[i]\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2h1h3bs_test.go:30:17: invalid operation: result += s[k] (mismatched
    types string and byte)

    /tmp/tmpy2h1h3bs_test.go:33:13: invalid operation: result += s[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    for i = 0; i < len(s); i++ {\n        if s[i] == ' ' {\n          \
    \  for j = i; j < len(s); j++ {\n                if s[j] != ' ' {\n          \
    \          break\n                }\n            }\n            for k = i; k <\
    \ j; k++ {\n                result += s[k]\n            }\n            i = j\n\
    \        } else {\n            for j = i; j < len(s); j++ {\n                if\
    \ s[j] > s[i] {\n                    break\n                }\n            }\n\
    \            for k = i; k < j; k++ {\n                result += s[k]\n       \
    \     }\n            i = j\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpljpnahf__test.go:22:9: l declared but not used

    /tmp/tmpljpnahf__test.go:31:17: invalid operation: result += s[k] (mismatched
    types string and byte)

    /tmp/tmpljpnahf__test.go:41:17: invalid operation: result += s[k] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, word := range words {\n        words[i] = string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibuqeito_test.go:18:14: undefined: strings

    /tmp/tmpibuqeito_test.go:19:11: no new variables on left side of :=

    /tmp/tmpibuqeito_test.go:21:40: undefined: rand

    /tmp/tmpibuqeito_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    for i = 0; i < len(s);\
    \ i++ {\n        for j = i + 1; j < len(s); j++ {\n            if s[i] == s[j]\
    \ {\n                continue\n            }\n            if s[i] > s[j] {\n \
    \               result += s[j]\n            } else {\n                result +=\
    \ s[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8de98gdk_test.go:27:17: invalid operation: result += s[j] (mismatched
    types string and byte)

    /tmp/tmp8de98gdk_test.go:29:17: invalid operation: result += s[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw_abyezn_test.go:147:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var words []string\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        words = append(words, word)\n    }\n    sort.Strings(words)\n\
    \    for _, word := range words {\n        result = result + string([]byte(word))\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpppa4slr5_test.go:20:26: undefined: strings

    /tmp/tmpppa4slr5_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\" + strings.ToLower(word)\n    }\n    return\
    \ result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc1etnc2_test.go:18:14: undefined: strings

    /tmp/tmpvc1etnc2_test.go:21:25: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    result := \"\"\n    for _, w := range words {\n        result += string([]byte(w)[97:])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmputa60f7s_test.go:18:14: undefined: strings

    /tmp/tmputa60f7s_test.go:19:11: no new variables on left side of :=

    /tmp/tmputa60f7s_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"_\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(char)})\n        }\n        result +=\
    \ \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptx5mr2nl_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    var result string\n    words = strings.Split(s, \"\
    \ \")\n    for _, word := range words {\n        result += string([]byte(word))\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1sqyjro_test.go:20:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075097
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\"\n        for _, char := range word\
    \ {\n            result += string([]byte{byte(char)})\n        }\n        result\
    \ += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynicdxfu_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    s := \"\"\n    for _, w := range words {\n        s += w\n    }\n    return\
    \ s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp87_5bgum_test.go:18:14: undefined: strings

    /tmp/tmp87_5bgum_test.go:19:11: no new variables on left side of :=

    /tmp/tmp87_5bgum_test.go:23:5: undefined: sort

    /tmp/tmp87_5bgum_test.go:24:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw_abyezn_test.go:147:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    for i\
    \ = 0; i < len(s); i++ {\n        for j = i + 1; j < len(s); j++ {\n         \
    \   for k = j + 1; k < len(s); k++ {\n                if s[i] == s[j] {\n    \
    \                result = result + s[k]\n                }\n            }\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2edztg5u_test.go:26:30: invalid operation: result + s[k] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075097
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\" + word\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbpd7ymx9_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i := 0; i < len(words); i++ {\n        words[i] = words[i] + strings.Repeat(words[i],\
    \ len(words[i]))\n    }\n    words := strings.Join(words, \"\")\n    return words\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6pjvajlm_test.go:18:14: undefined: strings

    /tmp/tmp6pjvajlm_test.go:19:11: no new variables on left side of :=

    /tmp/tmp6pjvajlm_test.go:21:31: undefined: strings

    /tmp/tmp6pjvajlm_test.go:23:11: no new variables on left side of :=

    /tmp/tmp6pjvajlm_test.go:23:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075097
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += string([]byte(word))\n    }\n    return\
    \ result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp811eb53a_test.go:19:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075097
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    for i = 0; i < len(s);\
    \ i++ {\n        result += s[i]\n    }\n    for i = len(s) - 1; i >= 0; i-- {\n\
    \        for j = i + 1; j < len(s); j++ {\n            if s[i] == s[j] {\n   \
    \             result += s[j]\n                j--\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu_51hx6i_test.go:22:9: invalid operation: result += s[i] (mismatched types
    string and byte)

    /tmp/tmpu_51hx6i_test.go:27:17: invalid operation: result += s[j] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    words := strings.Split(s, \" \")\n    for _, word\
    \ := range words {\n        result += \"_\" + strings.ToLower(word)\n    }\n \
    \   return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlhw7r6u_test.go:19:14: undefined: strings

    /tmp/tmpvlhw7r6u_test.go:21:25: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw_abyezn_test.go:147:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        words[i] = w\n    }\n    sort.Strings(words)\n\
    \    s := \"\"\n    for _, w := range words {\n        s += w\n    }\n    return\
    \ s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp87_5bgum_test.go:18:14: undefined: strings

    /tmp/tmp87_5bgum_test.go:19:11: no new variables on left side of :=

    /tmp/tmp87_5bgum_test.go:23:5: undefined: sort

    /tmp/tmp87_5bgum_test.go:24:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]byte(word))\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bcqk4v_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58rkhrt9_test.go:18:14: undefined: strings

    /tmp/tmp58rkhrt9_test.go:21:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var words []string\n    var blanks []string\n    words\
    \ = strings.Split(s, \" \")\n    blanks = strings.Split(s, \" \")\n    for _,\
    \ word := range words {\n        result += word\n    }\n    for _, blank := range\
    \ blanks {\n        result += blank\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77sjd9ai_test.go:21:13: undefined: strings

    /tmp/tmp77sjd9ai_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075096
