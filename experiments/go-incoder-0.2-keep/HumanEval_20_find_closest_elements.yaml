name: HumanEval_20_find_closest_elements
language: go_test.go
prompt: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ (2.0, 2.0)\nfunc find_closest_elements(numbers []float64) []interface{} {\n"
tests: "func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
  \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
  \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
  \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    for _,\
    \ number := range numbers[1:] {\n        if number < smallestNumber {\n      \
    \      smallestNumber = number\n        } else if number > largestNumber {\n \
    \           largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    smallest_index :=\
    \ 0\n    largest_index := 0\n\n    for i := 1; i < len(numbers); i++ {\n     \
    \   if numbers[i] < smallest {\n            smallest = numbers[i]\n          \
    \  smallest_index = i\n        }\n        if numbers[i] > largest {\n        \
    \    largest = numbers[i]\n            largest_index = i\n        }\n    }\n\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < smallestNumber {\n          \
    \  smallestNumber = number\n        }\n        if number > largestNumber {\n \
    \           largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers[1:] {\n        if number < smallest {\n   \
    \         smallest = number\n        }\n        if number > largest {\n      \
    \      largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < smallestNumber {\n          \
    \  smallestNumber = number\n        } else if number > largestNumber {\n     \
    \       largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallestNum := numbers[0]\n    largestNum := numbers[0]\n    for _, num :=\
    \ range numbers {\n        if smallestNum > num {\n            smallestNum = num\n\
    \        }\n        if largestNum < num {\n            largestNum = num\n    \
    \    }\n    }\n    return []interface{}{smallestNum, largestNum}\n}\n", "    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        } else if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \n    for _, number := range numbers {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n\
    \    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n            smallestIndex\
    \ = i\n        }\n\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n    largestIndex\
    \ := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n            smallestIndex = i\n      \
    \  }\n\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallestIndex := 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallestIndex = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largestIndex = i\n        }\n \
    \   }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallestIndex := 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallestIndex = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largestIndex = i\n        }\n \
    \   }\n\n    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    smallestIndex := 0\n    largestIndex := 0\n\n\
    \    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n            smallestIndex = i\n        }\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \     largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2\
    \ {\n        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n \
    \   smallestIndex := 0\n    largestIndex := len(numbers) - 1\n    smallestValue\
    \ := numbers[smallestIndex]\n    largestValue := numbers[largestIndex]\n    smallestDistance\
    \ := math.MaxFloat64\n    largestDistance := math.MaxFloat64\n    for i := 0;\
    \ i < len(numbers); i++ {\n        distance := math.Abs(numbers[i] - smallestValue)\n\
    \        if distance < smallestDistance {\n            smallestDistance = distance\n\
    \            smallestIndex = i\n        }\n        distance = math.Abs(numbers[i]\
    \ - largestValue)\n        if distance > largestDistance {\n            largestDistance\
    \ = distance\n            largestIndex = i\n        }\n    }\n    return []interface{}{smallestValue,\
    \ largestValue}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    i := 0\n    j := len(numbers) - 1\n    diff := numbers[j] - numbers[i]\n\
    \    if diff < 0 {\n        i, j = j, i\n        diff = diff * -1\n    }\n   \
    \ k := j\n    for {\n        if k == i {\n            break\n        }\n     \
    \   if diff == numbers[k] - numbers[i] {\n            return []interface{}{numbers[i],\
    \ numbers[k]}\n        }\n        if diff < numbers[k] - numbers[i] {\n      \
    \      i = k\n        } else {\n            j = k\n        }\n        diff = numbers[j]\
    \ - numbers[i]\n        if diff < 0 {\n            i, j = j, i\n            diff\
    \ = diff * -1\n        }\n        k += 1\n    }\n    return []interface{}{numbers[i],\
    \ numbers[j]}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    diff := numbers[len(numbers)-1] - numbers[0]\n    diff /= 2.0\n    diff *=\
    \ diff\n    diff += numbers[0]\n    diff /= 2.0\n    diff *= diff\n    diff +=\
    \ numbers[1]\n    return []interface{}{numbers[len(numbers)-2], numbers[len(numbers)-1]}\n\
    }\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallestNumber {\n   \
    \         smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number :=\
    \ range numbers[1:] {\n        if number < smallest {\n            smallest =\
    \ number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers[1:] {\n        if number < smallest {\n   \
    \         smallest = number\n        }\n        if number > largest {\n      \
    \      largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallestIndex := 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallestIndex = i\n        }\n\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largestIndex = i\n        }\n \
    \   }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    sort.Float64s(numbers)\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    smallestIndex := 0\n    largestIndex\
    \ := len(numbers) - 1\n    smallestValue := numbers[smallestIndex]\n    largestValue\
    \ := numbers[largestIndex]\n    for i := 0; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallestValue {\n            smallestValue = numbers[i]\n     \
    \       smallestIndex = i\n        }\n        if numbers[i] > largestValue {\n\
    \            largestValue = numbers[i]\n            largestIndex = i\n       \
    \ }\n    }\n    return []interface{}{smallestValue, largestValue}\n}\n", "   \
    \ if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    diff := numbers[1] - numbers[0]\n\
    \    smallestIndex := 0\n    largestIndex := len(numbers) - 1\n    smallestDiff,\
    \ largestDiff := diff, diff\n    for i := 1; i < len(numbers); i++ {\n       \
    \ diff := numbers[i] - numbers[smallestIndex]\n        if diff < smallestDiff\
    \ {\n            smallestDiff = diff\n            smallestIndex = i\n        }\n\
    \        diff = numbers[i] - numbers[largestIndex]\n        if diff > largestDiff\
    \ {\n            largestDiff = diff\n            largestIndex = i\n        }\n\
    \    }\n    return []interface{}{numbers[smallestIndex], numbers[largestIndex]}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n    largestIndex\
    \ := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n            smallestIndex = i\n      \
    \  }\n        if numbers[i] > largest {\n            largest = numbers[i]\n  \
    \          largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        } else if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    smallest_index := 0\n    largest_index := 0\n  \
    \  for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n \
    \           smallest = numbers[i]\n            smallest_index = i\n        }\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \     largest_index = i\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallestNumber {\n            smallestNumber = number\n        }\n        if\
    \ number > largestNumber {\n            largestNumber = number\n        }\n  \
    \  }\n    return []interface{}{smallestNumber, largestNumber}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    for _, number := range numbers[1:] {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    for _,\
    \ number := range numbers[1:] {\n        if number < smallestNumber {\n      \
    \      smallestNumber = number\n        }\n        if number > largestNumber {\n\
    \            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallest_index := 0\n    largest_index := 0\n\n    for i\
    \ := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n        \
    \    smallest = numbers[i]\n            smallest_index = i\n        }\n      \
    \  if numbers[i] > largest {\n            largest = numbers[i]\n            largest_index\
    \ = i\n        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    diff := numbers[1] - numbers[0]\n    smallestIndex := 0\n    largestIndex\
    \ := len(numbers) - 1\n    smallestDiff, largestDiff := diff, diff\n    for i\
    \ := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[smallestIndex]\n\
    \        if diff < smallestDiff {\n            smallestDiff = diff\n         \
    \   smallestIndex = i\n        }\n        diff := numbers[i] - numbers[largestIndex]\n\
    \        if diff > largestDiff {\n            largestDiff = diff\n           \
    \ largestIndex = i\n        }\n    }\n    return []interface{}{numbers[smallestIndex],\
    \ numbers[largestIndex]}\n}\n", "    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2\
    \ {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallestIndex := 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallestIndex = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largestIndex = i\n        }\n \
    \   }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallestIndex := 0\n    largestIndex := len(numbers) - 1\n    smallestDistance\
    \ := math.MaxFloat64\n    largestDistance := math.MaxFloat64\n    for i := 0;\
    \ i < len(numbers); i++ {\n        distance := math.Abs(numbers[i] - numbers[smallestIndex])\n\
    \        if distance < smallestDistance {\n            smallestDistance = distance\n\
    \            smallestIndex = i\n        }\n        distance = math.Abs(numbers[i]\
    \ - numbers[largestIndex])\n        if distance > largestDistance {\n        \
    \    largestDistance = distance\n            largestIndex = i\n        }\n   \
    \ }\n    return []interface{}{numbers[smallestIndex], numbers[largestIndex]}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2\
    \ {\n        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    for _,\
    \ number := range numbers[1:] {\n        if number < smallestNumber {\n      \
    \      smallestNumber = number\n        }\n        if number > largestNumber {\n\
    \            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n\
    \    largestIndex := 0\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n            smallestIndex =\
    \ i\n        }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largestIndex = i\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers[1:] {\n \
    \       if number < smallestNumber {\n            smallestNumber = number\n  \
    \      }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    return []interface{}{smallest, largest}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    i := 0\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n        if number == smallest {\n            i++\n        }\n    }\n  \
    \  return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest, largest := numbers[0], numbers[0]\n    for _,\
    \ number := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n    i :=\
    \ 0\n    j := len(numbers) - 1\n    diff := numbers[j] - numbers[i]\n    if diff\
    \ < 0 {\n        i, j = j, i\n        diff = diff * -1\n    }\n    if j-i < 2\
    \ {\n        return nil\n    }\n    k := j\n    for {\n        if k == i {\n \
    \           break\n        }\n        if diff == 0 {\n            return []interface{}{numbers[i],\
    \ numbers[k]}\n        }\n        if diff > 0 {\n            i = k\n         \
    \   diff = diff * -1\n        } else {\n            j = k\n            diff =\
    \ diff / 2\n        }\n        k += 1\n    }\n    return nil\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers[1:] {\n \
    \       if number < smallestNumber {\n            smallestNumber = number\n  \
    \      } else if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \n    result := []interface{}{smallest, largest}\n    return append(result, find_closest_elements(numbers[2:])...)\n\
    }\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallestNumber {\n   \
    \         smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Float64Slice(numbers))\n\
    \    i := 0\n    j := len(numbers) - 1\n    diff := math.MaxFloat64\n    closestNumbers\
    \ := []interface{}{}\n    for i < len(numbers) {\n        if j >= 0 {\n      \
    \      diff := math.Abs(numbers[i] - numbers[j])\n            if diff < diff {\n\
    \                closestNumbers = append(closestNumbers, numbers[i])\n       \
    \         i++\n            } else {\n                closestNumbers = append(closestNumbers,\
    \ numbers[j])\n                j--\n            }\n        } else {\n        \
    \    closestNumbers = append(closestNumbers, numbers[i])\n            i++\n  \
    \      }\n    }\n    return closestNumbers\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallest_index := 0\n    largest_index := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallest_index = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largest_index = i\n        }\n\
    \    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallest := numbers[1]\n    largest := numbers[1]\n\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    for _, number := range numbers[1:] {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n\
    \    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n            smallestIndex\
    \ = i\n        }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
