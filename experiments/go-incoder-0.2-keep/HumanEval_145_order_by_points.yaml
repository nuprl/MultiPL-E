name: HumanEval_145_order_by_points
language: go_test.go
prompt: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunc order_by_points(nums\
  \ []int) []int {\n"
tests: "func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
  \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
  \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7,\
  \ 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
  \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, len(nums))\n    sum := 0\n    for i, v :=\
    \ range nums {\n        sum += v\n        result[i] = v\n    }\n    for i, v :=\
    \ range nums {\n        if sum != 0 {\n            sum += v\n            if sum\
    \ < 0 {\n                sum *= -1\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var sum int\n    var i int\n    for\
    \ _, num := range nums {\n        sum += num\n    }\n    for _, num := range nums\
    \ {\n        if sum > 0 {\n            sum += num\n            i++\n        }\n\
    \        result = append(result, num)\n        sum -= num\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = sum\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    index :=\
    \ 0\n    sum := 0\n    for _, v := range nums {\n        sum += v\n        result[index]\
    \ = v\n        index++\n    }\n    for i := 0; i < index; i++ {\n        result[i]\
    \ = result[i] + sum\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i := 0; i < len(nums); i++ {\n        if\
    \ sum < 0 {\n            sum += nums[i]\n            result[i] = nums[i]\n   \
    \     } else {\n            sum -= nums[i]\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var sums []int\n    for _, v := range nums {\n\
    \        sums = append(sums, v)\n    }\n    sort.Ints(sums)\n    for _, v := range\
    \ sums {\n        result = append(result, nums[v])\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += int(v)\n        result[i] = v\n    }\n    for i := range\
    \ result {\n        result[i] = nums[sum-int(result[i])]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i := range result {\n        result[i] = nums[result[i]]\n    }\n    return\
    \ result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n    return\
    \ nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := range result {\n        result[i] = sum - result[i]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n \
    \   }\n    for i, v := range result {\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    for i :=\
    \ range nums {\n        total := 0\n        for _, v := range nums[i:] {\n   \
    \         total += v\n        }\n        result[i] = total\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i := range result {\n        result[i] = sum - result[i]\n    }\n   \
    \ return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n   \
    \ return nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n   \
    \ for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n \
    \   for i := range result {\n        result[i] = sum - result[i]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    for i, v := range nums {\n        if sum <\
    \ 0 {\n            sum += int(v)\n            result[i] = v\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i := range result {\n        result[i] = sum - result[i]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n \
    \   }\n    sort.Ints(result)\n    for i := range result {\n        result[i] =\
    \ nums[result[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    sort.Ints(result)\n    for i, v := range result\
    \ {\n        result[i] = v\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = nums[result[i]]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := 0; i < len(nums);\
    \ i++ {\n        j := i\n        for j > 0 && sum < 0 {\n            sum -= nums[j-1]\n\
    \            j--\n        }\n        if sum < 0 {\n            sum += nums[i]\n\
    \            result[i] = nums[i]\n        } else {\n            sum += nums[j]\n\
    \            result[i] = nums[j]\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i := range result {\n        result[i] = nums[result[i]]\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var index int\n    var sum int\n  \
    \  for _, v := range nums {\n        sum += v\n        if sum > 0 {\n        \
    \    result = append(result, index)\n            sum = 0\n        }\n        index++\n\
    \    }\n    if sum > 0 {\n        result = append(result, index)\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := range result {\n        result[i] = sum - result[i]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    for i := range nums {\n     \
    \   total := 0\n        for _, d := range nums[i:] {\n            total += int(d)\n\
    \        }\n        result[i] = total\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum += int(v)\n            if sum > 0 {\n                result[i] = v\n  \
    \          }\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 0\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n\
    \    }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, num := range\
    \ nums {\n        sum := 0\n        for _, digit := range strconv.Itoa(num) {\n\
    \            sum += int(digit)\n        }\n        if sum > 0 {\n            result\
    \ = append(result, num)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n    for\
    \ i := range result {\n        result[i] = nums[result[i]]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += int(v)\n        result[i] = v\n    }\n   \
    \ for i, v := range result {\n        result[i] = v - sum\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    index := 0\n    for _, num :=\
    \ range nums {\n        sum += num\n        result[index] = num\n        index++\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i := range result {\n        result[i] = sum - result[i]\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum :=\
    \ 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n \
    \   }\n    for i, v := range nums {\n        if sum < 0 {\n            sum +=\
    \ v\n            result[i] = -v\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = result[i] - sum\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i, v := range result {\n        result[i] = sum\
    \ - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    index\
    \ := 0\n    for _, v := range nums {\n        sum += v\n        result[index]\
    \ = v\n        index++\n    }\n    for i := 0; i < len(nums); i++ {\n        if\
    \ result[i] > result[i+1] {\n            tmp := result[i]\n            result[i]\
    \ = result[i+1]\n            result[i+1] = tmp\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := range result {\n        result[i] = sum - result[i]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum += v\n            result[i] = v\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range result {\n        result[i] = v\n    }\n \
    \   for i, v := range result {\n        result[i] = v\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    index := 0\n    sum := 0\n    for _,\
    \ v := range nums {\n        sum += v\n        result[index] = v\n        index++\n\
    \    }\n    for i := 0; i < len(nums); i++ {\n        if sum < 0 {\n         \
    \   sum += nums[i]\n            result[i] = nums[i]\n        } else {\n      \
    \      sum -= nums[i]\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += int(v)\n        result[i] = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum != 0 {\n            sum += v\n \
    \           if sum < 0 {\n                sum *= -1\n            }\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i, v := range nums {\n        if sum < 0 {\n            sum *=\
    \ -1\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    for i, v := range nums {\n        if sum <\
    \ 0 {\n            sum += int(v)\n            result[i] = v\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n\
    \    }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    index\
    \ := 0\n    for _, num := range nums {\n        sum += num\n        if sum < 0\
    \ {\n            sum *= -1\n        }\n        result[index] = sum\n        index++\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = sum\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += v\n        result[i] = v\n    }\n    for i, v := range nums {\n     \
    \   if sum < 0 {\n            sum += v\n            result[i] = v\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i := 0; i < len(nums); i++ {\n        if sum < 0 {\n         \
    \   sum += nums[i]\n            result[i] = nums[i]\n        } else {\n      \
    \      sum -= nums[i]\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n    for\
    \ i := range result {\n        result[i] = nums[result[i]]\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var sum int\n    for _, num := range\
    \ nums {\n        sum += num\n        result = append(result, num)\n    }\n  \
    \  sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for _, v := range result {\n        nums[v]\
    \ = sum\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum += v\n            if sum > 0 {\n                result[i] = v\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    n := len(nums)\n    result\
    \ := make([]int, n)\n    result := append(result, nums...)\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    index :=\
    \ 0\n    for _, num := range nums {\n        index += 1\n        sum, err := sum_digits(num)\n\
    \        if err != nil {\n            fmt.Println(err)\n        }\n        if\
    \ sum < 0 {\n            fmt.Println(\"sum < 0\", sum)\n        }\n        result[index]\
    \ = num\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n", "    var result []int\n    var sum int\n    var\
    \ index int\n    for _, v := range nums {\n        sum += v\n        index = -1\n\
    \        for i := 0; i < len(result); i++ {\n            if sum == result[i] {\n\
    \                index = i\n                break\n            }\n        }\n\
    \        if index == -1 {\n            result = append(result, v)\n        } else\
    \ {\n            result[index] = v\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i := range result {\n        result[i] = nums[result[i]]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    index := 0\n    for\
    \ _, num := range nums {\n        sum += num\n        result[index] = num\n  \
    \      index++\n    }\n    return result\n}\n", "    var result []int\n    var\
    \ sum int\n    var index int\n    for _, num := range nums {\n        sum += num\n\
    \        if sum > 0 {\n            result = append(result, num)\n            sum\
    \ = 0\n        }\n    }\n    for _, num := range result {\n        index = num\n\
    \        break\n    }\n    for _, num := range result {\n        if num > 0 {\n\
    \            index = num\n            break\n        }\n    }\n    for _, num\
    \ := range result {\n        if num < 0 {\n            index = num\n         \
    \   break\n        }\n    }\n    for _, num := range result {\n        if num\
    \ == 0 {\n            index = num\n            break\n        }\n    }\n    for\
    \ _, num := range result {\n        if num < 0 {\n            index = num\n  \
    \          break\n        }\n    }\n    for _, num := range result {\n       \
    \ if num > 0 {\n            index = num\n            break\n        }\n    }\n\
    \    for _, num := range result {\n        if num == 0 {\n            index =\
    \ num\n            break\n        }\n    }\n    for _, num := range result {\n\
    \        if num > 0 {\n            index = num\n            break\n        }\n\
    \    }\n    for _, num := range result {\n        if num < 0 {\n            index\
    \ = num\n            break\n        }\n    }\n    for _, num := range result {\n\
    \        if num == 0 {\n            index = num\n            break\n        }\n\
    \    }\n    for _, num := range result {\n        if num > 0 {\n            index\
    \ = num\n            break\n        }\n    }\n    for _, num := range result {\n\
    \        if num < 0 {\n            index = num\n            break\n        }\n\
    \    }\n    for _, num := range result {\n        if num == 0 {\n            index\
    \ = num\n            break\n        }\n    }\n    for _, num := range result {\n\
    \        if num > 0 {\n            index = num\n            break\n        }\n\
    \    }\n    for _, num := range result {\n        if num < 0 {\n            index\
    \ = num\n            break\n        }\n    }\n    for _, num := range result {\n\
    \        if num == 0 {\n            index = num\n            break\n        }\n\
    \    }\n    for _, num := range result {\n        if num > 0 {\n            index\
    \ = num\n            break\n        }\n    }\n    for _, num := range result {\n\
    \        if num < 0 {\n            index = num\n            break\n        }\n\
    \    }\n    for _, num := range result {\n        if num == 0 {\n            index\
    \ = num\n            break\n        }\n    }\n    for _, num := range result {\n\
    \        if num > 0 {\n            index = num\n            break\n        }\n\
    \    }\n    for _, num := range result {\n        if num < 0 {\n            index\
    \ = num\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v\
    \ := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    for i := 0; i < len(nums); i++ {\n        total := 0\n     \
    \   for j := 0; j < len(nums); j++ {\n            total += nums[j]\n         \
    \   if total > 0 {\n                result[i] = j\n                break\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i := range result {\n        result[i] =\
    \ sum - result[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 0\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := range result {\n        result[i] = sum - result[i]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    for i := range\
    \ nums {\n        j := i\n        for ; j < len(nums) && nums[j] < 0; j++ {\n\
    \        }\n        result[i] = nums[j]\n    }\n    return result\n}\n", "   \
    \ var result []int\n    sum := 0\n    for _, v := range nums {\n        sum +=\
    \ v\n    }\n    for _, v := range nums {\n        if sum < 0 {\n            sum\
    \ += v\n            continue\n        }\n        if sum == 0 {\n            result\
    \ = append(result, v)\n            continue\n        }\n        i := 0\n     \
    \   for sum >= 0 {\n            sum += nums[i]\n            i++\n        }\n \
    \       result = append(result, nums[i])\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  var result []int\n    var sum int\n    var index int\n    for _, num := range\
    \ nums {\n        sum += num\n        if sum > 0 {\n            result = append(result,\
    \ num)\n            sum = 0\n        }\n    }\n    for _, num := range result\
    \ {\n        index = num\n        break\n    }\n    for _, num := range nums {\n\
    \        if num < 0 {\n            index = num\n            break\n        }\n\
    \    }\n    for _, num := range result {\n        if num < 0 {\n            result\
    \ = append(result, num)\n            break\n        }\n    }\n    for _, num :=\
    \ range result {\n        if num < 0 {\n            result = append(result, index)\n\
    \            break\n        }\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += v\n        result[i] = v\n    }\n    for i := range result {\n      \
    \  result[i] = sum - result[i]\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += v\n        result[i] = v\n    }\n    for i, v := range nums {\n     \
    \   if sum < 0 {\n            sum += v\n            result[i] = v\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    index\
    \ := 0\n    for _, num := range nums {\n        digitSum, _ := sum_digits(num)\n\
    \        if digitSum < 0 {\n            digitSum = -digitSum\n        }\n    \
    \    if digitSum == 0 {\n            result[index] = num\n            index++\n\
    \            continue\n        }\n        digitSumInt := int(digitSum)\n     \
    \   index := digitSumInt\n        result[index] = num\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += int(v)\n        result[i] = v\n    }\n    for i := range\
    \ result {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n",
  "    sort.Ints(nums)\n    var result []int\n    var sum int\n    for _, v := range\
    \ nums {\n        sum += v\n    }\n    for _, v := range nums {\n        if sum\
    \ < 0 {\n            sum += 10\n        }\n        if sum == 0 {\n           \
    \ result = append(result, v)\n            sum = 0\n            continue\n    \
    \    }\n        if sum > 0 {\n            sum += v\n        }\n        if sum\
    \ == 0 {\n            result = append(result, v)\n            sum = 0\n      \
    \      continue\n        }\n        if sum < 0 {\n            sum += 10\n    \
    \    }\n        if sum == 0 {\n            result = append(result, v)\n      \
    \      sum = 0\n            continue\n        }\n        if sum > 0 {\n      \
    \      sum += v\n        }\n        if sum == 0 {\n            result = append(result,\
    \ v)\n            sum = 0\n            continue\n        }\n        if sum < 0\
    \ {\n            sum += 10\n        }\n        if sum == 0 {\n            result\
    \ = append(result, v)\n            sum = 0\n            continue\n        }\n\
    \        if sum > 0 {\n            sum += v\n        }\n        if sum == 0 {\n\
    \            result = append(result, v)\n            sum = 0\n            continue\n\
    \        }\n        if sum < 0 {\n            sum += 10\n        }\n        if\
    \ sum == 0 {\n            result = append(result, v)\n            sum = 0\n  \
    \          continue\n        }\n        if sum > 0 {\n            sum += v\n \
    \       }\n        if sum == 0 {\n            result = append(result, v)\n   \
    \         sum = 0\n            continue\n        }\n        if sum < 0 {\n   \
    \         sum += 10\n        }\n        if sum == 0 {\n            result = append(result,\
    \ v)\n            sum = 0\n            continue\n        }\n        if sum > 0\
    \ {\n            sum += v\n        }\n        if sum == 0 {\n            result\
    \ = append(result, v)\n            sum = 0\n            continue\n        }\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum == 0 {\n\
    \            result = append(result, v)\n            sum = 0\n            continue\n\
    \        }\n        if sum > 0 {\n            sum += v\n        }\n        if\
    \ sum == 0 {\n            result = append(result, v)\n            sum = 0\n  \
    \          continue\n        }\n        if sum < 0 {\n            sum += 10\n\
    \        }\n        if sum == 0 {\n            result = append(result, v)\n  \
    \          sum = 0\n            continue\n        }\n        if sum > 0 {\n  \
    \          sum += v\n        }\n        if sum == 0 {\n            result = append(result,\
    \ v)\n            sum = 0\n            continue\n        }\n        if sum < 0\
    \ {\n            sum += 10\n        }\n        if sum == 0 {\n            result\
    \ = append(result, v)\n            sum = 0\n            continue\n        }\n\
    \        if sum > 0 {\n            sum += v\n        }\n        if sum == 0 {\n\
    \            result = append(result, v)\n            sum = 0\n            continue\n\
    \        }\n        if sum < 0 {\n            sum += 10\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i := range result {\n        result[i] =\
    \ sum - result[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = nums[result[i]]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  n := len(nums)\n    result := make([]int, n)\n    max := 0\n    for i := 0;\
    \ i < n; i++ {\n        total := 0\n        for j := 0; j < len(nums[i]); j++\
    \ {\n            total += int(nums[i][j])\n        }\n        if total > max {\n\
    \            max = total\n        }\n        result[i] = total\n    }\n    for\
    \ i := 0; i < n; i++ {\n        for j := 0; j < len(nums[i]); j++ {\n        \
    \    if result[i] < result[j] {\n                result[i], result[j] = result[j],\
    \ result[i]\n            }\n        }\n    }\n    return result\n}\n", "    n\
    \ := len(nums)\n    result := make([]int, n)\n    sum := 0\n    for i := 0; i\
    \ < n; i++ {\n        sum += nums[i]\n        result[i] = sum\n    }\n    for\
    \ i := 0; i < n; i++ {\n        j := i\n        for j > 0 && nums[j-1] > 0 {\n\
    \            sum -= nums[j-1]\n            nums[j-1] = nums[j]\n            nums[j]\
    \ = sum\n            j--\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += int(v)\n        result[i] = v\n    }\n    for i, v := range result\
    \ {\n        result[i] = v - sum\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += int(v)\n        result[i] = v\n    }\n    for i := range result {\n\
    \        result[i] = sum - int(result[i])\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - int(result[i])\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   return result\n}\n", "    var result []int\n    var sum int\n    var index\
    \ int\n    for _, v := range nums {\n        sum += v\n        if sum > 0 {\n\
    \            result = append(result, index)\n            sum = 0\n        }\n\
    \        index++\n    }\n    if sum > 0 {\n        result = append(result, index)\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i := range result {\n        result[i] = sum - result[i]\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum :=\
    \ 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n \
    \   }\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n        if\
    \ sum > 0 {\n            sum -= nums[i]\n            result[i] = nums[i]\n   \
    \     }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i, v := range nums {\n        if sum < 0 {\n            sum +=\
    \ v\n            result[i] = v\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = nums[sum-int(result[i])]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    for i := range nums {\n        total\
    \ := 0\n        for _, v := range nums[i:] {\n            total += int(v)\n  \
    \      }\n        result[i] = total\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := 0; i < len(nums); i++ {\n        if sum < 0 {\n            sum += nums[i]\n\
    \            result[i] = nums[i]\n        } else {\n            sum -= nums[i]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum -= result[i]\n            if sum < 0 {\n                sum = 0\n     \
    \       }\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n \
    \   result := make([]int, len(nums))\n    index := 0\n    for _, num := range\
    \ nums {\n        sum += num\n        result[index] = num\n        index++\n \
    \   }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i := range result {\n        result[i] = sum - result[i]\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum :=\
    \ 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n \
    \   }\n    for i := range result {\n        result[i] = sum - result[i]\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, num := range nums\
    \ {\n        sum := 0\n        for _, digit := range strconv.Itoa(num) {\n   \
    \         sum += int(digit)\n        }\n        sort.Ints(nums)\n        if sum\
    \ != 0 {\n            result = append(result, num)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum += v\n  \
    \          result[i] = v\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += int(v)\n        result[i] = v\n    }\n   \
    \ for i, v := range result {\n        result[i] = v - sum\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n", "    n := len(nums)\n    result\
    \ := make([]int, n)\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum +=\
    \ nums[i]\n        result[i] = sum\n    }\n    for i := 0; i < n; i++ {\n    \
    \    sum /= 10\n        if sum != nums[i] {\n            sum -= nums[i]\n    \
    \        result[i] = sum\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    for i := range result {\n   \
    \     result[i] = sum - result[i]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    index := 0\n    for _, num := range nums {\n\
    \        digits, _ := sum_digits(num)\n        if digits > 0 {\n            result[index]\
    \ = num\n            index++\n        }\n    }\n    return result\n}\n", "   \
    \ result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n\
    \        sum += v\n        result[i] = v\n    }\n    for i, v := range nums {\n\
    \        if sum < 0 {\n            sum += v\n            result[i] = v\n     \
    \   }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := 0; i < len(nums);\
    \ i++ {\n        if sum < 0 {\n            sum *= -1\n            i -= 1\n   \
    \     }\n        if sum == 0 {\n            break\n        }\n        j := i\n\
    \        for ; j < len(nums); j++ {\n            if nums[j] >= sum {\n       \
    \         break\n            }\n        }\n        if j == len(nums) {\n     \
    \       sum *= -1\n        }\n        if sum < 0 {\n            sum *= -1\n  \
    \      }\n        if sum == 0 {\n            break\n        }\n        result[i],\
    \ result[j] = result[j], result[i]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    for i,\
    \ v := range result {\n        result[i] = sum - v\n    }\n    return result\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n    return nums\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  n := len(nums)\n    result := make([]int, n)\n    sum := 0\n    index := 0\n\
    \    for i := 0; i < n; i++ {\n        sum += nums[i]\n        if sum > 0 {\n\
    \            result[index] = sum\n            index++\n            sum = 0\n \
    \       }\n    }\n    if sum > 0 {\n        result[index] = sum\n        index++\n\
    \    }\n    for i := 0; i < index; i++ {\n        result[i] = nums[i]\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i, v := range result {\n        result[i] = sum\
    \ - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = nums[sum-int(result[i])]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i := range result {\n        result[i] = sum - result[i]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    for i := range\
    \ nums {\n        total := 0\n        for _, d := range nums[i:] {\n         \
    \   total += int(d)\n        }\n        result[i] = total\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i, v := range result {\n        result[i] = sum\
    \ - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i, v := range nums {\n        if sum != 0 {\n            sum +=\
    \ v\n            if sum < 0 {\n                sum *= -1\n            }\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i := 0; i < len(nums); i++ {\n        v\
    \ := nums[i]\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        } else {\n            sum -= v\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var sum int\n    for _, v := range nums {\n \
    \       sum += v\n    }\n    for _, v := range nums {\n        if sum < 0 {\n\
    \            sum += 10\n        }\n        if sum == 0 {\n            result =\
    \ append(result, v)\n            continue\n        }\n        i := sum / 10\n\
    \        if sum%10 != 0 {\n            i++\n        }\n        result = append(result,\
    \ nums[i])\n        sum -= nums[i]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    for i := range result {\n   \
    \     result[i] = sum - result[i]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += int(v)\n        result[i] = v\n    }\n    for i, v := range nums {\n\
    \        if sum < 0 {\n            sum += int(v)\n            result[i] = v\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var sum\
    \ int\n    var i int\n    for i = 0; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum > 0 {\n            result = append(result, i)\n        }\n   \
    \ }\n    for i := len(result) - 1; i >= 0; i-- {\n        nums[result[i]], nums[i]\
    \ = nums[i], nums[result[i]]\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum += v\n            result[i] = v\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = nums[result[i]]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    index := 0\n    for _, num := range nums\
    \ {\n        digits, _ := sum_digits(num)\n        if digits > 0 {\n         \
    \   result[index] = num\n            index++\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := 0; i <\
    \ len(nums); i++ {\n        v := nums[i]\n        if sum < 0 {\n            sum\
    \ += v\n            result[i] = v\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum != 0 {\n            sum += v\n            if sum > 0 {\n \
    \               sum -= result[i]\n            }\n        }\n    }\n    return\
    \ result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
