name: HumanEval_83_starts_one_ends
language: go_test.go
prompt: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
  \ {\n"
tests: "func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
  \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
  \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected:\
  \ 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
  \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n < 0 {\n        return 0\n    }\n    count := 0\n    for i\
    \ := 0; i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n\
    \        n /= 10\n    }\n    return count\n}\n", "    count := 0\n    for i :=\
    \ 0; i < n; i++ {\n        if n%10 == 1 {\n            count++\n        }\n  \
    \      if n%10 == 0 {\n            count--\n        }\n        n = n/10\n    }\n\
    \    return count\n}\n", "    count := 0\n    for i := 0; i < n; i++ {\n     \
    \   if n%10 == 1 {\n            count++\n        }\n        if n%10 == 0 {\n \
    \           count--\n        }\n        n /= 10\n    }\n    return count\n}\n",
  "    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) {\n    \
    \        count++\n        }\n    }\n    return count\n}\n", "    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n            count +=\
    \ starts_one_ends_test(i)\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n            count++\n\
    \        }\n        n /= 10\n    }\n    return count\n}\n", "    count := 0\n\
    \    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n            count++\n \
    \           if n%i == 1 {\n                count++\n            }\n        }\n\
    \    }\n    return count\n}\n", "    count := 0\n    for i := 0; i < n; i++ {\n\
    \        if n%10 == 1 {\n            count++\n        }\n        if n%10 == 0\
    \ {\n            count--\n        }\n        n = n/10\n    }\n    return count\n\
    }\n", "    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n\
    \            count++\n        }\n        if n%10 == 0 {\n            if n%100\
    \ == 0 {\n                if n%1000 == 0 {\n                    count++\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n", "   \
    \ count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n      \
    \      if ((i-1) == 0) {\n                count++\n            }\n           \
    \ if ((i+1) == n) {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n", "    count := 0\n    for i := 0; i < n; i++ {\n     \
    \   if ((i&1) == 1) {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n\
    \            count++\n        }\n        if n%10 == 0 {\n            count--\n\
    \        }\n        n = n/10\n    }\n    return count\n}\n", "    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if ((i&1) == 0) {\n            count +=\
    \ i\n        }\n    }\n    return count\n}\n", "    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%10 == 1 {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    count := 0\n    for i := 0; i < n; i++ {\n     \
    \   if n%10 == 1 {\n            count++\n        }\n        n /= 10\n    }\n \
    \   return count\n}\n", "    if n < 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n            count++\n\
    \        }\n        n /= 10\n    }\n    return count\n}\n", "    if n < 1 {\n\
    \        return 0\n    }\n    count := 0\n    for i := 1; i <= n; i++ {\n    \
    \    if n%i == 0 {\n            count++\n            if n%i == 1 {\n         \
    \       count++\n            }\n        }\n    }\n    return count\n}\n", "  \
    \  count := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n         \
    \   if i%10 == 1 {\n                count++\n            }\n        } else {\n\
    \            if i%10 == 0 {\n                count++\n            }\n        }\n\
    \    }\n    return count\n}\n", "    count := 0\n    for i := 1; i <= n; i++ {\n\
    \        if n%i == 0 {\n            count++\n            if i%2 == 0 {\n     \
    \           if n%(i-1) == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n", "    count := 0\n  \
    \  for i := 0; i < n; i++ {\n        if n%10 == 1 {\n            count++\n   \
    \     }\n        if n%10 == 0 {\n            count--\n        }\n        n /=\
    \ 10\n    }\n    return count\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
