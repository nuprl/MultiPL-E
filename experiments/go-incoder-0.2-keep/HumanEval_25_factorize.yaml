name: HumanEval_25_factorize
language: go_test.go
prompt: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return list of prime factors of given integer in the order from smallest to largest.\n\
  // Each of the factors should be listed number of times corresponding to how many\
  \ times it appeares in factorization.\n// Input number should be equal to the product\
  \ of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5,\
  \ 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunc factorize(n int) []int {\n"
tests: "func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
  \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2}\
  \ },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
  \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
  \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
  \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n  \
  \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        factors[i] = 1\n    }\n    for i :=\
    \ 2; i <= n; i++ {\n        for j := 1; j < i; j++ {\n            if i%j == 0\
    \ {\n                factors[i]++\n                break\n            }\n    \
    \    }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors[len(factors)-1]++\n            n /= i\n    \
    \    }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[len(factors)-1]++\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i-1] * j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    prime := make([]int, n)\n    prime := factorizeHelper(n, prime)\n \
    \   return prime\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n \
    \   i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        } else {\n            factors[i] = 1\n    \
    \    }\n        i++\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n     \
    \   if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i]*j\n                n /=\
    \ i\n                break\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if n%i ==\
    \ 0 {\n                factors[i] += factors[j]\n                factors[j] =\
    \ 0\n            }\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <= n; i++ {\n     \
    \   if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <= n; i++ {\n     \
    \   if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    i := 2\n    for i < n {\n        if n % i == 0 {\n  \
    \          factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = 2\n    for i := 2; i < n; i++ {\n \
    \       if n%i == 0 {\n            factors[i] = factors[i-1] * i\n           \
    \ n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n   \
    \         if n%i == 0 && n%j == 0 {\n                factors[i] = factors[i] +\
    \ 1\n                factors[j] = factors[j] + 1\n            }\n        }\n \
    \   }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n      \
    \      if n%i == 0 {\n                factors[i] = factors[i-1] * j\n        \
    \        break\n            }\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n      \
    \      n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = n\n    i := 2\n    for i < n {\n  \
    \      if n % i == 0 {\n            factors[i] = factors[i-1] * i\n          \
    \  n /= i\n        } else {\n            factors[i] = 1\n        }\n        i++\n\
    \    }\n    return factors\n}\n", "    prime := make([]int, n)\n    factor :=\
    \ make([]int, n)\n    factors := make([]int, n)\n    prime := make([]int, n)\n\
    \    factor := make([]int, n)\n    factors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes\
    \ := make([]int, n)\n    factorizationFactors := make([]int, n)\n    factorizationPrimes ",
  "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n\
    \            factors = append(factors, i)\n            n /= i\n        }\n   \
    \ }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n      \
    \      if n%i == 0 {\n                factors[i] = factors[i-1] * j\n        \
    \        break\n            }\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n      \
    \      n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = 1\n    for i := 2; i < n; i++ {\n \
    \       if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        factors[i] = 1\n    }\n    for i := 2; i < n; i++ {\n\
    \        for j := 0; j < i; j++ {\n            if n%i == 0 {\n               \
    \ factors[i] = factors[i]*j\n                break\n            }\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        factors[i] = 1\n    }\n    for i := 2; i < n; i++ {\n\
    \        for j := 0; j < i; j++ {\n            if n%i == 0 {\n               \
    \ factors[i] = factors[i]*j\n                n = n/i\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    for i := 0; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = i\n            n /= i\n        }\n    }\n\
    \    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i < n {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    prime := make([]int, n)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 59)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 71)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)\n    prime := append(prime, 269)\n    prime := append(prime, 271)\n   \
    \ prime := append(prime, 277)\n    prime := append(prime, 28", "    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n       \
    \ if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        factors[i] = 1\n    }\n    for i := 2;\
    \ i < n; i++ {\n        for j := 0; j < i; j++ {\n            if n%i == 0 {\n\
    \                factors[i] = factors[i]*j\n                n /= i\n         \
    \       break\n            }\n        }\n    }\n    return factors\n}\n", "  \
    \  factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n\
    \            factors = append(factors, i)\n            n /= i\n        }\n   \
    \ }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i < n {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <= n/2; i++ {\n   \
    \     if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n\
    \ /= i\n        } else {\n            factors[i] = 1\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factor := 2\n    for i :=\
    \ 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[factor-1]++\n \
    \           factor++\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    factor := 2\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, factor)\n            factor = 1\n\
    \        } else {\n            factor *= i\n        }\n    }\n    factors = append(factors,\
    \ factor)\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i%j == 0 {\n                factors[j] = factors[j]*i\n            \
    \    factors[i] = factors[i] + 1\n                break\n            }\n     \
    \   }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        factors[i] = 1\n    }\n    for i := 2;\
    \ i <= n; i++ {\n        for j := 0; j < i; j++ {\n            if n%i == 0 {\n\
    \                factors[i] = factors[i]*j\n                break\n          \
    \  }\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n  \
    \  factor := 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n       \
    \     factors = append(factors, factor)\n            factor = 1\n        } else\
    \ {\n            factor *= i\n        }\n    }\n    factors = append(factors,\
    \ factor)\n    return factors\n}\n", "    factors := []int{}\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    prime := make([]int, n)\n  \
    \  prime := factorizeHelper(n, prime)\n    return prime\n}\n", "    prime := make([]int,\
    \ n)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime\
    \ := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n    prime := append(prime, 23)\n    prime := append(prime,\
    \ 29)\n    prime := append(prime, 31)\n    prime := append(prime, 37)\n    prime\
    \ := append(prime, 43)\n    prime := append(prime, 59)\n    prime := append(prime,\
    \ 61)\n    prime := append(prime, 67)\n    prime := append(prime, 71)\n    prime\
    \ := append(prime, 73)\n    prime := append(prime, 79)\n    prime := append(prime,\
    \ 83)\n    prime := append(prime, 89)\n    prime := append(prime, 97)\n    prime\
    \ := append(prime, 101)\n    prime := append(prime, 103)\n    prime := append(prime,\
    \ 107)\n    prime := append(prime, 109)\n    prime := append(prime, 113)\n   \
    \ prime := append(prime, 127)\n    prime := append(prime, 131)\n    prime := append(prime,\
    \ 137)\n    prime := append(prime, 139)\n    prime := append(prime, 149)\n   \
    \ prime := append(prime, 151)\n    prime := append(prime, 157)\n    prime := append(prime,\
    \ 163)\n    prime := append(prime, 167)\n    prime := append(prime, 173)\n   \
    \ prime := append(prime, 179)\n    prime := append(prime, 181)\n    prime := append(prime,\
    \ 191)\n    prime := append(prime, 193)\n    prime := append(prime, 197)\n   \
    \ prime := append(prime, 199)\n    prime := append(prime, 211)\n    prime := append(prime,\
    \ 223)\n    prime := append(prime, 227)\n    prime := append(prime, 229)\n   \
    \ prime := append(prime, 233)\n    prime := append(prime, 239)\n    prime := append(prime,\
    \ 241)\n    prime := append(prime, 251)\n    prime := append(prime, 257)\n   \
    \ prime := append(prime, 263)\n    prime := append(prime, 269)\n    prime := append(prime,\
    \ 271)\n    prime := append(prime, 277)\n    prime := append(prime, 28", "   \
    \ factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n    for i\
    \ := 2; i <= n; i++ {\n        for j := 1; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                factors[i] = factors[i]*j\n                break\n    \
    \        }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        for j := 0; j < i;\
    \ j++ {\n            if n%i == 0 {\n                factors[j] = i\n         \
    \       break\n            }\n        }\n    }\n    return factors\n}\n", "  \
    \  factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++\
    \ {\n        for j := 1; j < i; j++ {\n            if i%j == 0 {\n           \
    \     factors[i] += j\n                break\n            }\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ []int{}\n    factor := 2\n    for n > 1 {\n        if n%factor == 0 {\n    \
    \        factors = append(factors, factor)\n            n /= factor\n        }\
    \ else {\n            factor++\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        for j := 1; j < i; j++ {\n            if n%i == 0 {\n           \
    \     factors[i] = factors[i-1] * j\n                break\n            }\n  \
    \      }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n  \
    \  factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n     \
    \       factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for\
    \ j := 0; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ = factors[i]+1\n                n = n/i\n                break\n           \
    \ }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    i := 2\n    for i < n {\n        if n%i == 0 {\n    \
    \        factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <=\
    \ n; i++ {\n        for j := 1; j <= i; j++ {\n            if n%i == 0 {\n   \
    \             factors[i] += factors[j]\n                factors[j] = 0\n     \
    \       }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 0; j\
    \ < i; j++ {\n            if n%i == 0 {\n                factors[i] = factors[i]+1\n\
    \                n = n/i\n                break\n            }\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ []int{}\n    factor := 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0\
    \ {\n            factors = append(factors, factor)\n            factor *= i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i;\
    \ j++ {\n            if n%i == 0 {\n                factors[i] = factors[i] *\
    \ j\n                n = n / i\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        for j := 1; j < i; j++ {\n            if n%i == 0 {\n    \
    \            factors[i] = factors[i-1] * j\n                break\n          \
    \  }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i < n {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factors = append(factors, i)\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        factors[i] = 1\n    }\n    for i :=\
    \ 2; i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n \
    \   for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    prime := make([]int, n)\n    prime := append(prime, 2)\n\
    \    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        for j := 0; j < i; j++ {\n            if prime[j] == 0 {\n      \
    \          prime[j] = 1\n                factors[i] = factors[i-1] * prime[j]\n\
    \                prime[j] = 0\n                break\n            }\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i <= n; i++ {\n        for j := 2; j <= i/2; j++ {\n  \
    \          if i%j == 0 {\n                factors[i] = factors[i] + 1\n      \
    \          factors[j] = factors[j] * factors[i]\n            }\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n    factors[2] =\
    \ 2\n    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            factors[i*i-1]++\n\
    \            factors[i] = 1\n        }\n    }\n    return factors\n}\n", "   \
    \ factors := make([]int, n)\n    for i := 0; i < n; i++ {\n        factors[i]\
    \ = 1\n    }\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n          \
    \  factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1]\
    \ = 2\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        for j := 1; j < i; j++ {\n            if n%i == 0 {\n           \
    \     factors[i] = factors[i-1] * j\n                break\n            }\n  \
    \      }\n    }\n    return factors\n}\n", "    prime := make([]int, n)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 59)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 71)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)\n    prime := append(prime, 269)\n    prime := append(prime, 271)\n   \
    \ prime := append(prime, 277)\n    prime := append(prime, 28", "    prime := make([]int,\
    \ n)\n    factors := make([]int, n)\n    factors[0] = 1\n    prime[0] = 1\n  \
    \  for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ prime[j] == 0 {\n                factors[j] = factors[j-1] * i\n           \
    \     prime[j] = i\n            }\n        }\n    }\n    return factors\n}\n",
  "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        } else {\n            factors[i] = 1\n    \
    \    }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factor := 2\n    for i := 2; i <= n;\
    \ i++ {\n        if n%i == 0 {\n            factors[factor-1]++\n            factor++\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n", "    factors := []int{}\n    factor := 2\n \
    \   for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ factor)\n            factor = 1\n        } else {\n            factor *= i\n\
    \        }\n    }\n    factors = append(factors, factor)\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        for j := 1; j < i; j++ {\n            if n%i == 0 {\n    \
    \            factors[i] = factors[i] * j\n                n /= i\n           \
    \ }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i;\
    \ j++ {\n            if n%i == 0 {\n                factors[i] = factors[i]*j\n\
    \                n /= i\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i < n {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n          \
    \  if n%i == 0 {\n                factors[i] += factors[j] * i\n             \
    \   n /= i\n            }\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    if\
    \ n != 1 {\n        factors = append(factors, n)\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    prime := make([]int,\
    \ n)\n    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n\
    \    factors[2] = 2\n    factors[3] = 1\n    factors[4] = 1\n    factors[5] =\
    \ 1\n    factors[6] = 1\n    factors[7] = 1\n    factors[8] = 1\n    factors[9]\
    \ = 1\n    factors[10] = 1\n    factors[11] = 1\n    factors[12] = 1\n    factors[13]\
    \ = 1\n    factors[14] = 1\n    factors[15] = 1\n    factors[16] = 1\n    factors[17]\
    \ = 1\n    factors[18] = 1\n    factors[19] = 1\n    factors[20] = 1\n    factors[21]\
    \ = 1\n    factors[22] = 1\n    factors[23] = 1\n    factors[24] = 1\n    factors[25]\
    \ = 1\n    factors[26] = 1\n    factors[27] = 1\n    factors[28] = 1\n    factors[29]\
    \ = 1\n    factors[30] = 1\n    factors[31] = 1\n    factors[32] = 1\n    factors[33]\
    \ = 1\n    factors[34] = 1\n    factors[35] = 1\n    factors[36] = 1\n    factors[37]\
    \ = 1\n    factors[38] = 1\n    factors[39] = 1\n    factors[40] = 1\n    factors[41]\
    \ = 1\n    factors[42] = 1\n    factors[43] = 1\n    factors[44] = 1\n    factors[45]\
    \ = 1\n    factors[46] = 1\n    factors[47] = 1\n    factors[48] = 1\n    factors[49]\
    \ = 1\n    factors[50] = 1\n    factors[51] = 1\n    factors[52] = 1\n    factors[53]\
    \ = 1\n    factors[54] = 1\n    factors[55] = 1\n    factors[56] = 1\n    factors[57]\
    \ = 1\n    factors[58] = 1\n    factors[59] = 1\n    factors[60] = 1\n    factors[61]\
    \ = 1\n    factors[62] = 1\n    factors[63] = 1\n    factors[64] = 1\n    factors[65]\
    \ = 1\n    factors[66] = 1\n    factors[67] = 1\n    factors[68] = 1\n    factors[69]\
    \ = 1\n    factors[70] = 1\n    factors[71] = 1\n    factors[72] = 1\n    factors[73]\
    \ = 1\n    factors[74] = 1\n    factors[75] = 1\n    factors[76] = 1\n    factors[77]\
    \ = 1\n    factors[78] = 1\n    factors[79] = 1\n    factors[80] = 1\n", "   \
    \ factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n \
    \           factors = append(factors, i)\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    prime := make([]int, len(primeFactorization(n)))\n\
    \    for i := 0; i < len(prime); i++ {\n        prime[i] = 0\n    }\n    for i\
    \ := 0; i < len(prime); i++ {\n        for j := 0; j < len(primeFactorization(n));\
    \ j++ {\n            if primeFactorization(n)[i] == prime[j] {\n             \
    \   prime[i]++\n                break\n            }\n        }\n    }\n    return\
    \ prime\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i :=\
    \ 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        } else {\n            factors[i] = 1\n    \
    \    }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = n\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    prime := make([]int, n)\n    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = 2\n    factors[2] = 2\n    factors[3] = 1\n    factors[4]\
    \ = 1\n    factors[5] = 1\n    factors[6] = 1\n    factors[7] = 1\n    factors[8]\
    \ = 1\n    factors[9] = 1\n    factors[10] = 1\n    factors[11] = 1\n    factors[12]\
    \ = 1\n    factors[13] = 1\n    factors[14] = 1\n    factors[15] = 1\n    factors[16]\
    \ = 1\n    factors[17] = 1\n    factors[18] = 1\n    factors[19] = 1\n    factors[20]\
    \ = 1\n    factors[21] = 1\n    factors[22] = 1\n    factors[23] = 1\n    factors[24]\
    \ = 1\n    factors[25] = 1\n    factors[26] = 1\n    factors[27] = 1\n    factors[28]\
    \ = 1\n    factors[29] = 1\n    factors[30] = 1\n    factors[31] = 1\n    factors[32]\
    \ = 1\n    factors[33] = 1\n    factors[34] = 1\n    factors[35] = 1\n    factors[36]\
    \ = 1\n    factors[37] = 1\n    factors[38] = 1\n    factors[39] = 1\n    factors[40]\
    \ = 1\n    factors[41] = 1\n    factors[42] = 1\n    factors[43] = 1\n    factors[44]\
    \ = 1\n    factors[45] = 1\n    factors[46] = 1\n    factors[47] = 1\n    factors[48]\
    \ = 1\n    factors[49] = 1\n    factors[50] = 1\n    factors[51] = 1\n    factors[52]\
    \ = 1\n    factors[53] = 1\n    factors[54] = 1\n    factors[55] = 1\n    factors[56]\
    \ = 1\n    factors[57] = 1\n    factors[58] = 1\n    factors[59] = 1\n    factors[60]\
    \ = 1\n    factors[61] = 1\n    factors[62] = 1\n    factors[63] = 1\n    factors[64]\
    \ = 1\n    factors[65] = 1\n    factors[66] = 1\n    factors[67] = 1\n    factors[68]\
    \ = 1\n    factors[69] = 1\n    factors[70] = 1\n    factors[71] = 1\n    factors[72]\
    \ = 1\n    factors[73] = 1\n    factors[74] = 1\n    factors[75] = 1\n    factors[76]\
    \ = 1\n    factors[77] = 1\n    factors[78] = 1\n    factors[79] = 1\n    factors[80]\
    \ = 1\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1;\
    \ i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] *\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    i := 2\n    for i < n {\n        if n%i == 0 {\n    \
    \        factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n    factors[2] =\
    \ 2\n    factors[3] = 1\n    factors[4] = 1\n    factors[5] = 1\n    factors[6]\
    \ = 1\n    factors[7] = 1\n    factors[8] = 1\n    factors[9] = 1\n    factors[10]\
    \ = 1\n    factors[11] = 1\n    factors[12] = 1\n    factors[13] = 1\n    factors[14]\
    \ = 1\n    factors[15] = 1\n    factors[16] = 1\n    factors[17] = 1\n    factors[18]\
    \ = 1\n    factors[19] = 1\n    factors[20] = 1\n    factors[21] = 1\n    factors[22]\
    \ = 1\n    factors[23] = 1\n    factors[24] = 1\n    factors[25] = 1\n    factors[26]\
    \ = 1\n    factors[27] = 1\n    factors[28] = 1\n    factors[29] = 1\n    factors[30]\
    \ = 1\n    factors[31] = 1\n    factors[32] = 1\n    factors[33] = 1\n    factors[34]\
    \ = 1\n    factors[35] = 1\n    factors[36] = 1\n    factors[37] = 1\n    factors[38]\
    \ = 1\n    factors[39] = 1\n    factors[40] = 1\n    factors[41] = 1\n    factors[42]\
    \ = 1\n    factors[43] = 1\n    factors[44] = 1\n    factors[45] = 1\n    factors[46]\
    \ = 1\n    factors[47] = 1\n    factors[48] = 1\n    factors[49] = 1\n    factors[50]\
    \ = 1\n    factors[51] = 1\n    factors[52] = 1\n    factors[53] = 1\n    factors[54]\
    \ = 1\n    factors[55] = 1\n    factors[56] = 1\n    factors[57] = 1\n    factors[58]\
    \ = 1\n    factors[59] = 1\n    factors[60] = 1\n    factors[61] = 1\n    factors[62]\
    \ = 1\n    factors[63] = 1\n    factors[64] = 1\n    factors[65] = 1\n    factors[66]\
    \ = 1\n    factors[67] = 1\n    factors[68] = 1\n    factors[69] = 1\n    factors[70]\
    \ = 1\n    factors[71] = 1\n    factors[72] = 1\n    factors[73] = 1\n    factors[74]\
    \ = 1\n    factors[75] = 1\n    factors[76] = 1\n    factors[77] = 1\n    factors[78]\
    \ = 1\n    factors[79] = 1\n    factors[80] = 1\n    factors[81] = 1\n    factor",
  "    factors := make([]int, n)\n    factor := 2\n    for i := 2; i <= n; i++ {\n\
    \        if n%i == 0 {\n            factors [factor-1]++\n            n /= i\n\
    \        } else {\n            factors [factor-1] = 1\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  for j := 2; j < i; j++ {\n            if i%j == 0 {\n                factors[i]\
    \ = factors[i]*j\n                break\n            }\n        }\n    }\n   \
    \ return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n \
    \   for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n    factors[2] = 1\n\
    \    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = factors[i-1]\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n", "    prime := make([]int, n)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime\
    \ := append(prime, 7)\n    prime := append(prime, 11)\n    prime := append(prime,\
    \ 13)\n    prime := append(prime, 17)\n    prime := append(prime, 19)\n    prime\
    \ := append(prime, 23)\n    prime := append(prime, 29)\n    prime := append(prime,\
    \ 31)\n    prime := append(prime, 37)\n    prime := append(prime, 43)\n    prime\
    \ := append(prime, 59)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 271)\n    prime := append(prime, 277)\n    prime := append(prime,\
    \ 281)\n    prime := append(prime, 28", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i%j == 0 {\n                factors[i] = factors[i-1] * j\n        \
    \        break\n            }\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++\
    \ {\n        for j := 1; j < i; j++ {\n            if i%j == 0 {\n           \
    \     factors[i] += j\n            }\n        }\n    }\n    return factors\n}\n",
  "    factors := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors[len(factors)-1]++\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    for i :=\
    \ 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[len(factors)-1]++\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = 2\n    for i := 2; i\
    \ <= n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] *\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i;\
    \ j++ {\n            if n%i == 0 {\n                factors[i] += factors[j]\n\
    \                factors[j] = 0\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0\
    \ {\n            factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i < n {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        for j := 1; j < i;\
    \ j++ {\n            if i%j == 0 {\n                factors[i] = factors[i]*j\n\
    \                break\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n\
    \    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[len(factors)-1]++\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  for j := 1; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ = factors[i-1] * j\n                break\n            }\n        }\n    }\n\
    \    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if n % i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        for j := 0; j < i; j++ {\n            if n%i == 0 {\n    \
    \            factors[i] = factors[i]*(i+1)\n                n /= i\n         \
    \       break\n            }\n        }\n    }\n    return factors\n}\n", "  \
    \  factors := make([]int, n)\n    factor := 2\n    for i := 2; i <= n; i++ {\n\
    \        if n%i == 0 {\n            factors[factor-1]++\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        for j := 1; j < i; j++ {\n            if n%i == 0 {\n    \
    \            factors[j] = factors[j]*i\n                n /= i\n            }\n\
    \        }\n    }\n    return factors\n}\n", "    prime := make([]int, n)\n  \
    \  factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = 1\n    for\
    \ i := 2; i <= n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        } else {\n            factors[i] = factors[i-1]\n\
    \        }\n    }\n    for i := 0; i < n; i++ {\n        if factors[i] != 1 {\n\
    \            prime[i] = factors[i]\n        }\n    }\n    return prime\n}\n",
  "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n\
    \        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n          \
    \  n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <= n/2; i++ {\n\
    \        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n          \
    \  n /= i\n        } else {\n            factors[i] = i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    factor := 2\n    for i :=\
    \ 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ factor)\n            factor = 1\n        } else {\n            factor *= i\n\
    \        }\n    }\n    factors = append(factors, factor)\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors[len(factors)-1]++\n            n /= i\n    \
    \    }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i%j == 0 {\n                factors[i] += j\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = 2\n    factors[2] = 2\n    factors[3]\
    \ = 1\n    factors[4] = 1\n    factors[5] = 1\n    factors[6] = 1\n    factors[7]\
    \ = 1\n    factors[8] = 1\n    factors[9] = 1\n    factors[10] = 1\n    factors[11]\
    \ = 1\n    factors[12] = 1\n    factors[13] = 1\n    factors[14] = 1\n    factors[15]\
    \ = 1\n    factors[16] = 1\n    factors[17] = 1\n    factors[18] = 1\n    factors[19]\
    \ = 1\n    factors[20] = 1\n    factors[21] = 1\n    factors[22] = 1\n    factors[23]\
    \ = 1\n    factors[24] = 1\n    factors[25] = 1\n    factors[26] = 1\n    factors[27]\
    \ = 1\n    factors[28] = 1\n    factors[29] = 1\n    factors[30] = 1\n    factors[31]\
    \ = 1\n    factors[32] = 1\n    factors[33] = 1\n    factors[34] = 1\n    factors[35]\
    \ = 1\n    factors[36] = 1\n    factors[37] = 1\n    factors[38] = 1\n    factors[39]\
    \ = 1\n    factors[40] = 1\n    factors[41] = 1\n    factors[42] = 1\n    factors[43]\
    \ = 1\n    factors[44] = 1\n    factors[45] = 1\n    factors[46] = 1\n    factors[47]\
    \ = 1\n    factors[48] = 1\n    factors[49] = 1\n    factors[50] = 1\n    factors[51]\
    \ = 1\n    factors[52] = 1\n    factors[53] = 1\n    factors[54] = 1\n    factors[55]\
    \ = 1\n    factors[56] = 1\n    factors[57] = 1\n    factors[58] = 1\n    factors[59]\
    \ = 1\n    factors[60] = 1\n    factors[61] = 1\n    factors[62] = 1\n    factors[63]\
    \ = 1\n    factors[64] = 1\n    factors[65] = 1\n    factors[66] = 1\n    factors[67]\
    \ = 1\n    factors[68] = 1\n    factors[69] = 1\n    factors[70] = 1\n    factors[71]\
    \ = 1\n    factors[72] = 1\n    factors[73] = 1\n    factors[74] = 1\n    factors[75]\
    \ = 1\n    factors[76] = 1\n    factors[77] = 1\n    factors[78] = 1\n    factors[79]\
    \ = 1\n    factors[80] = 1\n    factors[81] = 1\n    factor", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[len(factors)-1]++\n            n /= i\n        }\n    }\n \
    \   return factors\n}\n", "    factors := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        factors[i] = 1\n    }\n    for i := 2; i < n; i++ {\n    \
    \    for j := 1; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ = factors[i]*j\n                n /= i\n            }\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := make([]int, n)\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[len(factors)-1]++\n   \
    \         n /= i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        factors[i] = 1\n    }\n\
    \    for i := 2; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] = factors[i] * j\n                n /=\
    \ i\n                break\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    for i := 0; i < n; i++ {\n        factors[i]\
    \ = 1\n    }\n    for i := 2; i <= n; i++ {\n        for j := 0; j < i; j++ {\n\
    \            if n%i == 0 {\n                factors[i] += factors[j]\n       \
    \         factors[j] = 0\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factor :=\
    \ 2\n    factors[factor-1] = 1\n    for i := 2; i <= n; i++ {\n        if n%i\
    \ == 0 {\n            factors[factor-1] *= i\n            factor++\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    for i :=\
    \ 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[len(factors)-1]++\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  for j := 1; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ += factors[j]\n                factors[j] = 0\n            }\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i < n {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n    }\n    return factors\n}\n", "   \
    \ prime := make([]int, n)\n    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = 2\n    for i := 2; i <= n; i++ {\n        for j := 1; j < i;\
    \ j++ {\n            if i%j == 0 {\n                factors[j] = factors[j]*i\n\
    \                prime[i] = prime[i] + 1\n            }\n        }\n    }\n  \
    \  for i := 0; i < n; i++ {\n        if prime[i] == 0 {\n            factors[i]\
    \ = factors[i] + 1\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for\
    \ j := 1; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ = factors[i-1] * j\n                break\n            }\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n          \
    \  if i%j == 0 {\n                factors[j] = factors[j]*i\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = 1\n        }\n    }\n    return factors\n}\n", "   \
    \ factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n\
    \        for j := 1; j < i; j++ {\n            if n%i == 0 {\n               \
    \ factors[i] = factors[i-1] * j\n                break\n            }\n      \
    \  }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[len(factors)-1]++\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n", "    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    i := 2\n    for {\n        if n%i == 0 {\n\
    \            factors = append(factors, i)\n            n /= i\n        } else\
    \ {\n            break\n        }\n        i++\n    }\n    if n > 1 {\n      \
    \  factors = append(factors, n)\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i\
    \ < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  for j := 2; j < i; j++ {\n            if i%j == 0 {\n                factors[i]\
    \ += j\n                break\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factor := 2\n    for i := 2; i <= n;\
    \ i++ {\n        if n%i == 0 {\n            factors[factor-1]++\n            n\
    \ /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
