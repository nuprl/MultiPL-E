language: go_test.go
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n      \
    \      letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letter_grades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] < 3.7 {\n            letter_grades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letter_grades[i] = \"\
    B+\"\n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letter_grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 2.3 {\n            letter_grades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 && grades[i] < 2.0 {\n            letter_grades[i] = \"C\"\n        }\
    \ else if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letter_grades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n        \
    \    letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i]\
    \ < 1.0 {\n            letter_grades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.0 {\n            letter_grades[i] = \"D-\"\n        } else {\n           \
    \ letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpm0g3_jxc_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpm0g3_jxc_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpm0g3_jxc_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpm0g3_jxc_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for\
    \ i := 1; i < gradesLen; i++ {\n        if grades[i] > grades[i-1] {\n       \
    \     letterGrades[i] = \"D+\"\n        } else if grades[i] < grades[i-1] {\n\
    \            letterGrades[i] = \"D-\"\n        } else if grades[i] == grades[i-1]\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] > grades[i-1]\
    \ && grades[i] < grades[i+1] {\n            letterGrades[i] = \"B+\"\n       \
    \ } else if grades[i] > grades[i-1] && grades[i] != grades[i+1] {\n          \
    \  letterGrades[i] = \"B\"\n        } else if grades[i] < grades[i-1] && grades[i]\
    \ != grades[i+1] {\n            letterGrades[i] = \"B-\"\n        } else if grades[i]\
    \ > grades[i-1] && grades[i] == grades[i+1] {\n            letterGrades[i] = \"\
    A+\"\n        } else if grades[i] < grades[i-1] && grades[i] == grades[i+1] {\n\
    \            letterGrades[i] = \"A\"\n        } else if grades[i] == grades[i-1]\
    \ && grades[i] > grades[i+1] {\n            letterGrades[i] = \"A+\"\n       \
    \ } else if grades[i] == grades[i-1] && grades[i] < grades[i+1] {\n          \
    \  letterGrades[i] = \"A-\"\n        }\n    }\n    return letterGrades\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpogls7jev_test.go:78: expected '[A+ B C- C A-]', got '[E\
    \ D- D- D+ D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpogls7jev_test.go:78: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpogls7jev_test.go:78: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpogls7jev_test.go:78:\
    \ expected '[D D- C- B B+]', got '[E D- D+ D+ D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpogls7jev_test.go:78: expected '[E D-]', got '[E D+]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The last letter grade is always E\n    letter_grades[grades_len-1]\
    \ = \"E\"\n    \n    // The rest of the letter grades are calculated using the\
    \ formula above\n    for i := 1; i < grades_len; i++ {\n        letter_grades[i]\
    \ = letter_grades[i-1] + \"-\" + letter_grades[i]\n    }\n    \n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpls2gqqef_test.go:65: expected '[A+ B C- C A-]', got '[A+\
    \ A+- A+-- A+--- A+----E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpls2gqqef_test.go:65: expected '[D+]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpls2gqqef_test.go:65:\
    \ expected '[D-]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpls2gqqef_test.go:65: expected '[D D- C- B B+]', got '[A+\
    \ A+- A+-- A+--- A+----E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpls2gqqef_test.go:65: expected '[E D-]', got '[A+ A+-E]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range grades {\n        gradesSorted[i] = grades[i]\n    }\n   \
    \ gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    grades\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzpo6bdxr_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    // Loop through each grade and add it to the letter grades array\n\
    \    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = letterGrade(grades[i])\n\
    \    }\n    \n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp151e088y_test.go:35:27: undefined: letterGrade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_diff := grades_avg - float64(grades[0])\n\
    \    grades_diff_abs := math.Abs(grades_diff)\n    grades_diff_sign := grades_diff_abs\
    \ > 0.0 ? 1.0 : -1.0\n    grades_diff_abs *= grades_diff_sign\n    grades_diff_abs\
    \ /= 2.0\n    grades_diff_abs *= grades_count\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgmpe78pw_test.go:39:47: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_letter := []string{}\n   \
    \ for _, grade := range grades {\n        if grade >= grades_avg {\n         \
    \   grades_letter = append(grades_letter, \"A+\")\n        } else if grade < grades_avg\
    \ {\n            grades_letter = append(grades_letter, \"A-\")\n        } else\
    \ {\n            grades_letter = append(grades_letter, \"B+\")\n        }\n  \
    \  }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ir6tjzu_test.go:41:19: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := []string{}\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n  \
    \          grade = grade - 2.0\n        }\n        if grade < 1.7 {\n        \
    \    grade = grade - 1.7\n        }\n        if grade < 1.0 {\n            grade\
    \ = grade - 1.0\n        }\n        if grade < 0.7 {\n            grade = grade\
    \ - 0.7\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade > 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade > 1.0 {\n            grade = grade + 1.0\n        }\n \
    \       if grade > 1.7 {\n            grade = grade + 1.7\n        }\n       \
    \ if grade > 2.0 {\n            grade = grade + 2.0\n        }\n        if grade\
    \ > 2.3 {\n            grade = grade + 2.3\n        }\n        if grade > 2.7\
    \ {\n            grade = grade + 2.7\n        }\n        if grade > 3.0 {\n  \
    \          grade = grade + 3.0\n        }\n        if grade > 3.3 {\n        \
    \    grade = grade + 3.3\n        }\n        if grade > 3.7 {\n            grade\
    \ = grade + 3.7\n        }\n        if grade > 4.0 {\n            grade = grade\
    \ + 4.0\n        }\n        if grade > 4.3 {\n            grade = grade + 4.3\n\
    \        }\n        if grade > 4.7 {\n            grade = grade + 4.7\n      \
    \  }\n        if grade > 5.0 {\n            grade = grade + 5.0\n        }\n \
    \       if grade > 5.3 {\n            grade = grade + 5.3\n        }\n       \
    \ if grade > 5.7 {\n            grade = grade + 5.7\n        }\n        if grade\
    \ > 6.0 {\n            grade = grade + 6.0\n        }\n        if grade > 6.3\
    \ {\n            grade = grade + 6.3\n        }\n        if grade > 6.7 {\n  \
    \          grade = grade + 6.7\n        }\n        if grade > 7.0 {\n        \
    \    grade = grade + 7.0\n        }\n        if grade > 7.3 {\n            grade\
    \ = grade + 7.3\n        }\n        if grade > 7.7 {\n            grade = grade\
    \ + 7.7\n        }\n        if \nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvzgwzdy9_test.go:117:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades := append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6850z1m3_test.go:94:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var result []string\n    var gpa, letter float64\n    for _, grade := range\
    \ grades {\n        gpa = grade\n        letter = math.Pow(gpa, 1.0/3.0)\n   \
    \     if letter > 3.0 {\n            letter = 3.0\n        } else if letter <\
    \ 3.0 {\n            letter = 3.0\n        }\n        if letter < 2.0 {\n    \
    \        letter = 2.0\n        }\n        if letter > 2.0 {\n            letter\
    \ = 2.0\n        }\n        if letter < 1.0 {\n            letter = 1.0\n    \
    \    }\n        if letter > 1.0 {\n            letter = 1.0\n        }\n     \
    \   if letter < 0.7 {\n            letter = 0.7\n        }\n        if letter\
    \ > 0.7 {\n            letter = 0.7\n        }\n        if letter < 0.3 {\n  \
    \          letter = 0.3\n        }\n        if letter > 0.3 {\n            letter\
    \ = 0.3\n        }\n        if letter < 0.1 {\n            letter = 0.1\n    \
    \    }\n        if letter > 0.1 {\n            letter = 0.1\n        }\n     \
    \   if letter < 0.01 {\n            letter = 0.01\n        }\n        if letter\
    \ > 0.01 {\n            letter = 0.01\n        }\n        if letter < 0.001 {\n\
    \            letter = 0.001\n        }\n        if letter > 0.001 {\n        \
    \    letter = 0.001\n        }\n        if letter < 0.0001 {\n            letter\
    \ = 0.0001 \n        }\n        if letter > 0.0001 {\n            letter = 0.0001\
    \ \n        }\n        if letter < 0.00001 {\n            letter = 0.00001 \n\
    \        }\n        if letter > 0.00001 {\n            letter = 0.00001 \n   \
    \     }\n        if letter < 0.0000001 {\n            letter = 0.0000001 \n  \
    \      }\n        if letter > 0.0000001 {\n            letter = 0.0000001 \n \
    \       }\n        if letter < 0.000000001 {\n            letter = 0.000000001\
    \ \n        }\n        if letter > 0.000000001 {\n            letter = 0.000000001\
    \ \n        }\n        if letter < 0.0000000001 {\n            letter = 0.0000000001\
    \ \n        }\n        if letter > 0.0000000001 {\n            letter = 0.0000000001\
    \ \n        }\n        if letter < 0.00000000001 {\n            letter = 0.00000000001\
    \ \n        }\n        if letter > 0.00000000001 {\n            letter = 0.00000000001\
    \ \n        }\n        if letter < 0.000000000001 {\n            letter = 0.000000000001\
    \ \n        }\n        if letter > 0.000000000001 {\n            letter = 0.000000000001\
    \ \n        }\n        if letter < 0.0000000000001 {\n            letter = 0.0000000000001\
    \ \n        }\n        if letter > 0.0000000000001 {\n            letter = 0.0000000000001\
    \ \n        }\n        if letter < 0.000000000000001 {\n            letter = 0.000000000000001\
    \ \n        }\n        if \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp338gr6bw_test.go:134:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyhkvc95f_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n    }\n\
    \    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = letterGrades[i]\
    \ + letterGrade(grades[i])\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpulccgs05_test.go:36:45: undefined: letterGrade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ grade\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfd0d55op_test.go:64:46: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i\
    \ := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] >= 3.0 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i] =\
    \ \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"\
    B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n \
    \       } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n \
    \       } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpbkqd26fr_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpbkqd26fr_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpbkqd26fr_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpbkqd26fr_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n\
    \            letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n\
    \            letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n\
    \            letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n\
    \            letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n\
    \            letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n\
    \            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpgl5l5tiu_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpgl5l5tiu_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpgl5l5tiu_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpgl5l5tiu_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 &&\
    \ grades[i] <= 4.0 {\n            letter_grades[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 && grades[i] <= 3.7 {\n            letter_grades[i] = \"A-\"\
    \n        } else if grades[i] >= 3.0 && grades[i] <= 3.3 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] <= 3.0 {\n       \
    \     letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ <= 2.7 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 && grades[i] <= 2.3 {\n            letter_grades[i] = \"C+\"\n      \
    \  } else if grades[i] >= 1.7 && grades[i] <= 2.0 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] <= 1.7 {\n        \
    \    letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ <= 1.3 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 && grades[i] <= 1.0 {\n            letter_grades[i] = \"D\"\n       \
    \ } else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n      \
    \  } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return\
    \ letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmputa5vjrr_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmputa5vjrr_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmputa5vjrr_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmputa5vjrr_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := []string{}\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n  \
    \          grade = grade + 2.0\n        }\n        if grade < 1.7 {\n        \
    \    grade = grade + 1.7\n        }\n        if grade < 1.0 {\n            grade\
    \ = grade + 1.0\n        }\n        if grade < 0.7 {\n            grade = grade\
    \ + 0.7\n        }\n        if grade < 0.3 {\n            grade = grade + 0.3\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < -3.0 {\n            grade = grade + 3.0\n        }\n\
    \        if grade < -2.7 {\n            grade = grade + 2.7\n        }\n     \
    \   if grade < -2.3 {\n            grade = grade + 2.3\n        }\n        if\
    \ grade < -2.0 {\n            grade = grade + 2.0\n        }\n        if grade\
    \ < -1.7 {\n            grade = grade + 1.7\n        }\n        if grade < -1.3\
    \ {\n            grade = grade + 1.3\n        }\n        if grade < -1.0 {\n \
    \           grade = grade + 1.0\n        }\n        if grade < -0.7 {\n      \
    \      grade = grade + 0.7\n        }\n        if grade < -0.3 {\n           \
    \ grade = grade + 0.3\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < 3.0 {\n            grade = grade\
    \ + 3.0\n        }\n        if grade < 2.7 {\n            grade = grade + 2.7\n\
    \        }\n        if grade < 2.3 {\n            grade = grade + 2.3\n      \
    \  }\n        if grade < 2.0 {\n            grade = grade + 2.0\n        }\n \
    \       if grade < 1.7 {\n            grade = grade + 1.7\n        }\n       \
    \ if grade < 1.3 {\n            grade = grade + 1.3\n        }\n        if grade\
    \ < 1.0 {\n            grade = grade + 1.0\n        }\n        if grade < 0.7\
    \ {\n            grade = grade + 0.7\n        }\n        if grade < 0.3 {\n  \
    \          grade = grade + 0.3\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < 3.0 {\n            grade\
    \ = grade \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9eoa2pe7_test.go:118:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade > grades_avg - 0.3 {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade > grades_avg -\
    \ 0.2 {\n                grades_letter = append(grades_letter, \"B+\")\n     \
    \       } else if grade > grades_avg - 0.1 {\n                grades_letter =\
    \ append(grades_letter, \"B\")\n            } else if grade > grades_avg - 0.07\
    \ {\n                grades_letter = append(grades_letter, \"B-\")\n         \
    \   } else if grade > grades_avg - 0.06 {\n                grades_letter = append(grades_letter,\
    \ \"C+\")\n            } else if grade > grades_avg - 0.05 {\n               \
    \ grades_letter = append(grades_letter, \"C\")\n            } else if grade >\
    \ grades_avg - 0.04 {\n                grades_letter = append(grades_letter, \"\
    C-\")\n            } else if grade > grades_avg - 0.03 {\n                grades_letter\
    \ = append(grades_letter, \"D+\")\n            } else if grade > grades_avg -\
    \ 0.02 {\n                grades_letter = append(grades_letter, \"D\")\n     \
    \       } else if grade > grades_avg - 0.01 {\n                grades_letter =\
    \ append(grades_letter, \"D-\")\n            } else if grade > grades_avg - 0.007\
    \ {\n                grades_letter = append(grades_letter, \"E\")\n          \
    \  } else {\n                grades_letter = append(grades_letter, \"F\")\n  \
    \          }\n        }\n    }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp22cwd7fg_test.go:91: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp22cwd7fg_test.go:91:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp22cwd7fg_test.go:91: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp22cwd7fg_test.go:91:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp22cwd7fg_test.go:91: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp22cwd7fg_test.go:91:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade >= grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade >= grades_avg+0.7\
    \ && grade < grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade >= grades_avg+1.0 && grade < grades_avg+1.3\
    \ {\n                grades_letter = append(grades_letter, \"B\")\n          \
    \  } else if grade >= grades_avg+1.3 && grade < grades_avg+1.7 {\n           \
    \     grades_letter = append(grades_letter, \"B-\")\n            } else if grade\
    \ >= grades_avg+1.7 {\n                grades_letter = append(grades_letter, \"\
    C+\")\n            } else if grade < grades_avg+1.7 {\n                grades_letter\
    \ = append(grades_letter, \"C\")\n            } else if grade >= grades_avg+1.3\
    \ && grade < grades_avg+1.7 && grade < grades_avg+1.1 {\n                grades_letter\
    \ = append(grades_letter, \"C-\")\n            } else if grade >= grades_avg+1.7\
    \ && grade < grades_avg+1.1 {\n                grades_letter = append(grades_letter,\
    \ \"D+\")\n            } else if grade >= grades_avg+1.1 && grade < grades_avg+0.7\
    \ {\n                grades_letter = append(grades_letter, \"D\")\n          \
    \  } else if grade >= grades_avg+0.7 {\n                grades_letter = append(grades_letter,\
    \ \"D-\")\n            } else {\n                grades_letter = append(grades_letter,\
    \ \"E\")\n            }\n        }\n    }\n    return grades_letter\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpas_up4zw_test.go:89: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpas_up4zw_test.go:89:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpas_up4zw_test.go:89: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpas_up4zw_test.go:89:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpas_up4zw_test.go:89: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpas_up4zw_test.go:89:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letters []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            letters = append(letters, \"B+\")\n        } else if grade\
    \ > 2.7 {\n            letters = append(letters, \"B\")\n        } else if grade\
    \ > 2.3 {\n            letters = append(letters, \"B-\")\n        } else if grade\
    \ > 2.0 {\n            letters = append(letters, \"C+\")\n        } else if grade\
    \ > 1.7 {\n            letters = append(letters, \"C\")\n        } else if grade\
    \ > 1.3 {\n            letters = append(letters, \"C-\")\n        } else if grade\
    \ > 1.0 {\n            letters = append(letters, \"D+\")\n        } else if grade\
    \ > 0.7 {\n            letters = append(letters, \"D\")\n        } else if grade\
    \ > 0.0 {\n            letters = append(letters, \"D-\")\n        } else {\n \
    \           letters = append(letters, \"E\")\n        }\n    }\n    return letters\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpqvgbk9ub_test.go:75: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i\
    \ := 0; i < gradesLen; i++ {\n        letter := \"\"\n        switch {\n     \
    \   case grades[i] >= 4.0:\n            letter = \"A+\"\n        case grades[i]\
    \ >= 3.7:\n            letter = \"A\"\n        case grades[i] >= 3.3:\n      \
    \      letter = \"A-\"\n        case grades[i] >= 3.0:\n            letter = \"\
    B+\"\n        case grades[i] >= 2.7:\n            letter = \"B\"\n        case\
    \ grades[i] >= 2.3:\n            letter = \"B-\"\n        case grades[i] >= 2.0:\n\
    \            letter = \"C+\"\n        case grades[i] >= 1.7:\n            letter\
    \ = \"C\"\n        case grades[i] >= 1.3:\n            letter = \"C-\"\n     \
    \   case grades[i] >= 1.0:\n            letter = \"D+\"\n        case grades[i]\
    \ >= 0.7:\n            letter = \"D\"\n        case grades[i] >= 0.0:\n      \
    \      letter = \"D-\"\n        default:\n            letter = \"E\"\n       \
    \ }\n        letterGrades[i] = letter\n    }\n    return letterGrades\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpibaaubrv_test.go:87: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpibaaubrv_test.go:87: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpibaaubrv_test.go:87: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpibaaubrv_test.go:87: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSor\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdbg7_i06_test.go:72:36: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades := append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6850z1m3_test.go:94:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyhkvc95f_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    gradesSorted = grades\n    gradesSorted = append(gradesSorted, 0.0)\n   \
    \ gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpshokt8_f_test.go:74:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The last letter grade is always D-\n    letter_grades[grades_len-1]\
    \ = \"D-\"\n    \n    // The rest of the letter grades are calculated using the\
    \ formula\n    // letter_grade = GPA - letter_grade\n    for i := 1; i < grades_len;\
    \ i++ {\n        letter_grades[i] = fmt.Sprintf(\"%+.2f\", grades[i] - letter_grades[i-1])\n\
    \    }\n    \n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4nublxtw_test.go:42:49: invalid operation: grades[i] - letter_grades[i
    - 1] (mismatched types float64 and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075415
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    \n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        \n        if grades_avg > 3.0 {\n            grades_letter = append(grades_letter,\
    \ \"D+\")\n        } else if grades_avg > 2.0 {\n            grades_letter = append(grades_letter,\
    \ \"D-\")\n        } else if grades_avg > 1.0 {\n            grades_letter = append(grades_letter,\
    \ \"C+\")\n        } else if grades_avg > 0.7 { \n            grades_letter =\
    \ append(grades_letter, \"C\")\n        } else if grades_avg > 0.0 {\n       \
    \     grades_letter = append(grades_letter, \"B+\")\n        } else if grades_avg\
    \ > 0.3 { \n            grades_letter = append(grades_letter, \"B\")\n       \
    \ } else if grades_avg > 0.2 { \n            grades_letter = append(grades_letter,\
    \ \"A-\")\n        } else if grades_avg > 0.1 { \n            grades_letter =\
    \ append(grades_letter, \"A\")\n        } else if grades_avg > 0.0 {\n       \
    \     grades_letter = append(grades_letter, \"A+\")\n        } else {\n      \
    \      grades_letter = append(grades_letter, \"E\")\n        }\n    }\n    return\
    \ grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpxvfbu_5z_test.go:84: expected '[A+ B C- C A-]', got '[D-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpxvfbu_5z_test.go:84:\
    \ expected '[D+]', got '[C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpxvfbu_5z_test.go:84: expected '[D-]', got '[B+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpxvfbu_5z_test.go:84:\
    \ expected '[D D- C- B B+]', got '[C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpxvfbu_5z_test.go:84: expected '[E D-]', got '[B+]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        for _, grade := range grades {\n            if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A+\")\n            }\
    \ else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A-\")\n            } else if grade == grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A\")\n            } else if grade > grades_avg+0.7\
    \ && grade < grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade > grades_avg+1.0 {\n                grades_letter\
    \ = append(grades_letter, \"B\")\n            } else if grade < grades_avg+0.7\
    \ && grade > grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B-\")\n            } else if grade > grades_avg+0.7 && grade < grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"C+\")\n         \
    \   } else if grade > grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"C\")\n            } else if grade < grades_avg+0.7 && grade > grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"C-\")\n         \
    \   } else if grade > grades_avg+0.7 && grade < grades_avg+1.0 {\n           \
    \     grades_letter = append(grades_letter, \"D+\")\n            } else if grade\
    \ > grades_avg+1.0 {\n                grades_letter = append(grades_letter, \"\
    D\")\n            } else if grade < grades_avg+0.7 && grade > grades_avg+1.0 {\n\
    \                grades_letter = append(grades_letter, \"D-\")\n            }\
    \ else if grade > grades_avg+0.7 && grade < grades_avg+1.0 {\n               \
    \ grades_letter = append(grades_letter, \"E\")\n            }\n        }\n   \
    \ }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpe1dtnsjy_test.go:90: expected '[A+ B C- C A-]', got '[A+\
    \ A+ A- A- A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpe1dtnsjy_test.go:90: expected '[D+]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpe1dtnsjy_test.go:90: expected '[D-]', got '[A]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpe1dtnsjy_test.go:90:\
    \ expected '[E]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpe1dtnsjy_test.go:90: expected '[D D- C- B B+]', got '[A-\
    \ A- A- A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpe1dtnsjy_test.go:90: expected '[E D-]', got '[A- A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    var gpas []float64\n    var letter string\n\
    \    var i int\n    var j int\n    for i = 0; i < len(grades); i++ {\n       \
    \ gpas = append(gpas, grades[i])\n    }\n    for i = 0; i < len(gpas); i++ {\n\
    \        letter = \"\"\n        for j = 0; j < len(gpas)-1; j++ {\n          \
    \  if gpas[j] > gpas[j+1] {\n                letter = letter + \"+\"\n       \
    \     } else {\n                letter = letter + \"-\"\n            }\n     \
    \   }\n        grades_string = append(grades_string, letter)\n    }\n    return\
    \ grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpbypjcpa2_test.go:70: expected '[A+ B C- C A-]', got '[++--\
    \ ++-- ++-- ++-- ++--]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpbypjcpa2_test.go:70: expected '[D+]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpbypjcpa2_test.go:70:\
    \ expected '[D-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpbypjcpa2_test.go:70: expected '[E]', got '[]'\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpbypjcpa2_test.go:70:\
    \ expected '[D D- C- B B+]', got '[+--- +--- +--- +--- +---]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpbypjcpa2_test.go:70: expected '[E D-]', got '[- -]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n       \
    \     letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n        \
    \    letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n        \
    \    letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n        \
    \    letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n         \
    \   letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n         \
    \   letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n          \
    \  letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n          \
    \  letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n          \
    \  letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n           \
    \ letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] = \"\
    E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp3c7joudm_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp3c7joudm_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp3c7joudm_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp3c7joudm_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is A+\n    letter_grades[0] = \"A+\"\n  \
    \  \n    // The last letter grade is D-\n    letter_grades[grades_len-1] = \"\
    D-\"\n    \n    // The middle letter grades are A, B, C and D\n    for i := 0;\
    \ i < grades_len/2; i++ {\n        letter_grades[i] = \"A+\"\n        if i < grades_len/2\
    \ {\n            letter_grades[i+1] = \"A\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+2] = \"A-\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+3] = \"B+\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+4] = \"B\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+5] = \"B-\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+6] = \"C+\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+7] = \"C\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+8] = \"C-\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+9] = \"D+\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+10] = \"D\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+11] = \"D-\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+12] = \"E\"\n        }\n    }\n    \n    return\
    \ letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out\
    \ of range [5] with length 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513720,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513720, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000bf5f8?, 0x5,\
    \ 0x0?})\n\t/tmp/tmpbmw6ec57_test.go:55 +0x45c\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmpbmw6ec57_test.go:90 +0xc2\ntesting.tRunner(0xc000103a00, 0x529060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade >= grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else {\n                grades_letter = append(grades_letter,\
    \ \"A\")\n            }\n            if grade > grades_avg {\n               \
    \ grades_letter = append(grades_letter, \"A-\")\n            } else {\n      \
    \          grades_letter = append(grades_letter, \"B+\")\n            }\n    \
    \        if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"B\")\n            } else {\n                grades_letter = append(grades_letter,\
    \ \"B-\")\n            }\n            if grade > grades_avg {\n              \
    \  grades_letter = append(grades_letter, \"C+\")\n            } else {\n     \
    \           grades_letter = append(grades_letter, \"C\")\n            }\n    \
    \        if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"C-\")\n            } else {\n                grades_letter = append(grades_letter,\
    \ \"D+\")\n            }\n            if grade > grades_avg {\n              \
    \  grades_letter = append(grades_letter, \"D\")\n            } else {\n      \
    \          grades_letter = append(grades_letter, \"D-\")\n            }\n    \
    \        if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"E\")\n            }\n        }\n    }\n    return grades_letter\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfgqmhauw_test.go:97: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpfgqmhauw_test.go:97:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpfgqmhauw_test.go:97: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpfgqmhauw_test.go:97:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfgqmhauw_test.go:97: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpfgqmhauw_test.go:97:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := 0; i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n\
    \    }\n    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(grade\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9fhsx5mk_test.go:57:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 3.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.3 {\n\
    \            letter_grades[i] = \"B\"\n        } else if grades[i] >= 1.7 {\n\
    \            letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.3 {\n\
    \            letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.0 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n\
    \            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpgjly8gs0_test.go:75: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpgjly8gs0_test.go:75: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpgjly8gs0_test.go:75: expected '[D D- C- B B+]', got '[D+\
    \ D- C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpgjly8gs0_test.go:75: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := append([]float64{}, grades...)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ grades\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7zsl3grx_test.go:66:46: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    \n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    \n    grades_diff := grades_avg -\
    \ float64(grades[0])\n    \n    grades_diff_sum := 0.0\n    for _, grade := range\
    \ grades[1:] {\n        grades_diff_sum += grade - grades[0]\n    }\n    \n  \
    \  grades_diff_avg := grades_diff_sum / float64(len(grades)-1)\n    \n    grades_diff_diff_sum\
    \ := 0.0\n    for _, grade := range grades[1:] {\n        grades_diff_diff_sum\
    \ += grade - grades_avg\n    }\n    \n    grades_diff_diff_avg := grades_diff_diff_sum\
    \ / float64(len(grades)-1)\n    \n    grades_diff_diff_diff_sum := 0.0\n    for\
    \ _, grade := range grades[1:] {\n        grades_diff_diff_diff_sum += grade -\
    \ grades_diff_avg\n    }\n    \n    grades_diff_diff_diff_avg := grades_diff_diff_diff_sum\
    \ / float64(len(grades)-1)\n    \n    grades_diff_diff_diff_diff_sum := 0.0\n\
    \    for _, grade := range grades[1:] {\n        grades_diff_diff_diff_diff_sum\
    \ += grade - grades_diff_diff_avg\n    }\n    \n    grades_diff_diff_diff_diff_avg\
    \ := grades_diff_diff_diff_diff_sum / float64(len(grades)-1)\n    \n    grades_diff_diff_diff_diff_diff_sum\
    \ := 0.0\n    for _, grade := range grades[1:] {\n        grades_diff_diff_diff_diff_diff_sum\
    \ += grade - grades_diff_diff_diff_diff_avg\n    }\n    \n    grades_diff_diff_diff_diff_diff_avg\
    \ := grades_diff_diff_diff_diff_diff_sum / float64(len(grades)-1)\n    \n    grades_diff_diff_diff_diff_diff_diff_sum\
    \ := 0.0\n    for _, grade := range grades[1:] {\n        grades_diff_diff_diff_diff_diff_diff_sum\
    \ += grade - grades_diff_diff_diff_diff_diff_avg\n    }\n    \n    grades_diff_diff_diff_diff_diff_diff_avg\
    \ := grades_diff_diff_diff_diff_diff_diff_diff_sum / float64(len(grades)-1)\n\
    \    \n    grades_diff_diff_diff_diff_diff_diff_diff_sum := 0.0\n    for _, grade\
    \ := range grades[1:] {\n        grades_diff_diff_diff_diff_diff_diff_diff_sum\
    \ += grade - grades_diff_diff_diff_diff_\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyrdldq_m_test.go:86:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n      \
    \      letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n     \
    \       letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n     \
    \       letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n    \
    \        letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n   \
    \         letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n  \
    \          letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n \
    \           letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n\
    \            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpo0fbbxpg_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpo0fbbxpg_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpo0fbbxpg_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpo0fbbxpg_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := make([]string, len(grades))\n    \n    for i := 0; i < len(grades);\
    \ i++ {\n        if grades[i] >= 4.0 {\n            result[i] = \"A+\"\n     \
    \   } else if grades[i] >= 3.7 {\n            result[i] = \"A\"\n        } else\
    \ if grades[i] >= 3.3 {\n            result[i] = \"A-\"\n        } else if grades[i]\
    \ >= 3.0 {\n            result[i] = \"B+\"\n        } else if grades[i] >= 2.7\
    \ {\n            result[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         result[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n         \
    \   result[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n            result[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 {\n            result[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 {\n            result[i] = \"D+\"\n     \
    \   } else if grades[i] >= 0.7 {\n            result[i] = \"D\"\n        } else\
    \ if grades[i] >= 0.0 {\n            result[i] = \"D-\"\n        } else {\n  \
    \          result[i] = \"E\"\n        }\n    }\n    \n    return result\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpqrh8uoyj_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpqrh8uoyj_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpqrh8uoyj_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpqrh8uoyj_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    grades_sum := 0.0\n    grades_avg := 0.0\n\
    \    grades_count := 0\n    grades_letter := []string{}\n    for i := 0; i < grades_len;\
    \ i++ {\n        grades_sum += grades[i]\n        grades_count++\n    }\n    grades_avg\
    \ = grades_sum / float64(grades_count)\n    for i := 0; i < grades_len; i++ {\n\
    \        if grades[i] >= grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"A+\")\n        } else if grades[i] < grades_avg {\n            grades_letter\
    \ = append(grades_letter, \"A-\")\n        } else if grades[i] == grades_avg {\n\
    \            grades_letter = append(grades_letter, \"A\")\n        }\n    }\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= grades_avg {\n\
    \            grades_letter = append(grades_letter, \"B+\")\n        } else if\
    \ grades[i] < grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"B-\")\n        } else if grades[i] == grades_avg {\n            grades_letter\
    \ = append(grades_letter, \"B\")\n        }\n    }\n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] >= grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"C+\")\n        } else if grades[i] < grades_avg {\n            grades_letter\
    \ = append(grades_letter, \"C-\")\n        } else if grades[i] == grades_avg {\n\
    \            grades_letter = append(grades_letter, \"C\")\n        }\n    }\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= grades_avg {\n\
    \            grades_letter = append(grades_letter, \"D+\")\n        } else if\
    \ grades[i] < grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"D-\")\n        } else if grades[i] == grades_avg {\n            grades_letter\
    \ = append(grades_letter, \"D\")\n        }\n    }\n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] >= grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"E\")\n        } else if grades[i] < grades_avg {\n            grades_letter\
    \ = append(grades_letter, \"E\")\n        }\n    }\n    return grades_letter\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpc6rh0xmg_test.go:104: expected '[A+ B C- C A-]', got '[A+\
    \ A+ A- A- A+ B+ B+ B- B- B+ C+ C+ C- C- C+ D+ D+ D- D- D+ E E E E E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpc6rh0xmg_test.go:104:\
    \ expected '[D+]', got '[A+ B+ C+ D+ E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpc6rh0xmg_test.go:104: expected '[D-]', got '[A+ B+ C+ D+\
    \ E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpc6rh0xmg_test.go:104:\
    \ expected '[E]', got '[A+ B+ C+ D+ E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpc6rh0xmg_test.go:104: expected '[D D- C- B B+]', got '[A-\
    \ A- A- A+ A+ B- B- B- B+ B+ C- C- C- C+ C+ D- D- D- D+ D+ E E E E E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpc6rh0xmg_test.go:104:\
    \ expected '[E D-]', got '[A- A+ B- B+ C- C+ D- D+ E E]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            grades_string = append(grades_string, \"B+\")\n \
    \       } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpsfexd2om_test.go:75: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade > grades_avg - 0.3 {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade > grades_avg -\
    \ 0.1 {\n                grades_letter = append(grades_letter, \"B+\")\n     \
    \       } else if grade > grades_avg - 0.05 {\n                grades_letter =\
    \ append(grades_letter, \"B\")\n            } else if grade > grades_avg - 0.01\
    \ {\n                grades_letter = append(grades_letter, \"B-\")\n         \
    \   } else if grade > grades_avg - 0.005 {\n                grades_letter = append(grades_letter,\
    \ \"C+\")\n            } else if grade > grades_avg - 0.001 {\n              \
    \  grades_letter = append(grades_letter, \"C\")\n            } else if grade >\
    \ grades_avg - 0.0005 {\n                grades_letter = append(grades_letter,\
    \ \"C-\")\n            } else if grade > grades_avg - 0.0001 {\n             \
    \   grades_letter = append(grades_letter, \"D+\")\n            } else if grade\
    \ > grades_avg - 0.00005 {\n                grades_letter = append(grades_letter,\
    \ \"D\")\n            } else if grade > grades_avg - 0.00001 {\n             \
    \   grades_letter = append(grades_letter, \"D-\")\n            } else {\n    \
    \            grades_letter = append(grades_letter, \"E\")\n            }\n   \
    \     }\n    }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpqc6hi167_test.go:89: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpqc6hi167_test.go:89:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpqc6hi167_test.go:89: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpqc6hi167_test.go:89:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpqc6hi167_test.go:89: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpqc6hi167_test.go:89:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(grade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1b10lysc_test.go:72:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        letter_grades[i] = \"\"\n\
    \    }\n    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0\
    \ {\n            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7\
    \ {\n            letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3\
    \ {\n            letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0\
    \ {\n            letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3\
    \ {\n            letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0\
    \ {\n            letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7\
    \ {\n            letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3\
    \ {\n            letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0\
    \ {\n            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7\
    \ {\n            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0\
    \ {\n            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    \n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpmfmukivd_test.go:88: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpmfmukivd_test.go:88: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpmfmukivd_test.go:88: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpmfmukivd_test.go:88: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n       \
    \     letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.3 {\n       \
    \     letterGrades[i] = \"B\"\n        } else if grades[i] >= 1.7 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.3 {\n        \
    \    letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.0 {\n         \
    \   letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n         \
    \   letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n          \
    \  letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] = \"\
    E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpt6969gqv_test.go:74: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpt6969gqv_test.go:74: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpt6969gqv_test.go:74: expected '[D D- C- B B+]', got '[D+\
    \ D- C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpt6969gqv_test.go:74: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // Loop through each grade and determine letter grade\n    for i :=\
    \ 0; i < grades_len; i++ {\n        grade := grades[i]\n        if grade > 3.0\
    \ {\n            letter_grades[i] = \"B+\"\n        } else if grade > 2.7 {\n\
    \            letter_grades[i] = \"B\"\n        } else if grade > 2.3 {\n     \
    \       letter_grades[i] = \"B-\"\n        } else if grade > 1.7 && grade < 2.3\
    \ {\n            letter_grades[i] = \"C+\"\n        } else if grade > 1.3 && grade\
    \ < 1.7 {\n            letter_grades[i] = \"C\"\n        } else if grade > 1.0\
    \ {\n            letter_grades[i] = \"C-\"\n        } else if grade > 0.7 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grade > 0.3 {\n    \
    \        letter_grades[i] = \"D\"\n        } else if grade > 0.0 {\n         \
    \   letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmphsvpfbg0_test.go:79: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmphsvpfbg0_test.go:79: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmphsvpfbg0_test.go:79: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmphsvpfbg0_test.go:79:\
    \ expected '[D D- C- B B+]', got '[D+ D- C B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmphsvpfbg0_test.go:79: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := make([]string, len(grades))\n    for i := range grades {\n    \
    \    if grades[i] < 3.0 {\n            result[i] = \"E\"\n        } else if grades[i]\
    \ >= 3.0 && grades[i] < 3.7 {\n            result[i] = \"D+\"\n        } else\
    \ if grades[i] >= 3.7 && grades[i] < 4.0 {\n            result[i] = \"D-\"\n \
    \       } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n            result[i]\
    \ = \"C+\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.6 {\n        \
    \    result[i] = \"C\"\n        } else if grades[i] >= 4.6 && grades[i] < 4.9\
    \ {\n            result[i] = \"B-\"\n        } else if grades[i] >= 4.9 && grades[i]\
    \ < 5.2 {\n            result[i] = \"B\"\n        } else if grades[i] >= 5.2 &&\
    \ grades[i] < 5.5 {\n            result[i] = \"A-\"\n        } else if grades[i]\
    \ >= 5.5 && grades[i] < 5.8 {\n            result[i] = \"A\"\n        } else if\
    \ grades[i] >= 5.8 && grades[i] < 6.1 {\n            result[i] = \"A+\"\n    \
    \    } else if grades[i] >= 6.1 && grades[i] < 6.4 {\n            result[i] =\
    \ \"B+\"\n        } else if grades[i] >= 6.4 && grades[i] < 6.7 {\n          \
    \  result[i] = \"B\"\n        } else if grades[i] >= 6.7 && grades[i] < 7 {\n\
    \            result[i] = \"C+\"\n        } else if grades[i] >= 7 && grades[i]\
    \ < 7.3 {\n            result[i] = \"C\"\n        } else if grades[i] >= 7.3 &&\
    \ grades[i] < 7.6 {\n            result[i] = \"C-\"\n        } else if grades[i]\
    \ >= 7.6 && grades[i] < 7.9 {\n            result[i] = \"C\"\n        } else if\
    \ grades[i] >= 7.9 && grades[i] < 8.2 {\n            result[i] = \"D+\"\n    \
    \    } else if grades[i] >= 8.2 && grades[i] < 8.5 {\n            result[i] =\
    \ \"D\"\n        } else if grades[i] >= 8.5 && grades[i] < 8.8 {\n           \
    \ result[i] = \"D-\"\n        } else if grades[i] >= 8.8 && grades[i] < 9.1 {\n\
    \            result[i] = \"D\"\n        } else if grades[i] >= 9.1 && grades[i]\
    \ < 9.4 {\n            result[i] = \"D+\"\n        } else if grades[i] >= 9.4\
    \ && grades[i] < 9.7 {\n            result[i] = \"D+\"\n        } else if grades[i]\
    \ >= 9.7 && grades[i] < 10 {\n            result[i] = \"D+\"\n        } else {\n\
    \            result[i] = \"D+\"\n        }\n    }\n    return result\n}\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp42988yu2_test.go:102: expected '[A+ B C- C A-]', got '[C+\
    \ D+ E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp42988yu2_test.go:102: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp42988yu2_test.go:102: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp42988yu2_test.go:102:\
    \ expected '[D D- C- B B+]', got '[E E E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp42988yu2_test.go:102: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n      \
    \      letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n     \
    \       letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n     \
    \       letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n    \
    \        letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n   \
    \         letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n  \
    \          letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n \
    \           letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n\
    \            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpo0fbbxpg_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpo0fbbxpg_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpo0fbbxpg_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpo0fbbxpg_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade >= grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"B+\")\n            }\
    \ else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"B\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"B-\")\n            } else if grade < grades_avg {\n\
    \                grades_letter = append(grades_letter, \"C+\")\n            }\
    \ else if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"C\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"C-\")\n            } else if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"D+\")\n            }\
    \ else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"D\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"D-\")\n            } else {\n                grades_letter\
    \ = append(grades_letter, \"E\")\n            }\n        }\n    }\n    return\
    \ grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_cniugc3_test.go:89: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp_cniugc3_test.go:89:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_cniugc3_test.go:89: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_cniugc3_test.go:89:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_cniugc3_test.go:89: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_cniugc3_test.go:89:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n \
    \           letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n         \
    \   letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpi_va1r6i_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpi_va1r6i_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpi_va1r6i_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpi_va1r6i_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    \n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n         \
    \   letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 4.7 && grades[i] < 5.0 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 5.0 && grades[i]\
    \ < 5.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 5.3 && grades[i] < 5.7 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 5.7 && grades[i] < 6.0 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 6.0 && grades[i] < 6.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 6.3 && grades[i] < 6.7 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= 6.7 && grades[i]\
    \ < 7.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n          \
    \  letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpa3zup7yu_test.go:85: expected '[A+ B C- C A-]', got '[B+\
    \ A A+ A+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpa3zup7yu_test.go:85: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpa3zup7yu_test.go:85: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpa3zup7yu_test.go:85:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpa3zup7yu_test.go:85: expected '[D D- C- B B+]', got '[A+\
    \ A+ A+ A+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpa3zup7yu_test.go:85: expected '[E D-]', got '[A+ A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(grade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1b10lysc_test.go:72:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSor\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdbg7_i06_test.go:72:36: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade >= 3.0 {\n            grades_string = append(grades_string, \"A+\")\n\
    \        } else if grade >= 2.7 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade >= 1.7 && grade < 2.3 {\n            grades_string\
    \ = append(grades_string, \"C+\")\n        } else if grade >= 1.3 && grade < 1.7\
    \ {\n            grades_string = append(grades_string, \"C\")\n        } else\
    \ if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\"\
    )\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmprdwv4f09_test.go:73: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmprdwv4f09_test.go:73: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmprdwv4f09_test.go:73: expected '[D D- C- B B+]', got '[D+\
    \ D- C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmprdwv4f09_test.go:73: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var result []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n  \
    \          grade = grade + 2.0\n        }\n        if grade < 1.7 {\n        \
    \    grade = grade + 1.7\n        }\n        if grade < 1.0 {\n            grade\
    \ = grade + 1.0\n        }\n        if grade < 0.7 {\n            grade = grade\
    \ + 0.7\n        }\n        if grade < 0.3 {\n            grade = grade + 0.3\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < -3.0 {\n            grade = grade - 3.0\n        }\n\
    \        if grade < -2.0 {\n            grade = grade - 2.0\n        }\n     \
    \   if grade < -1.7 {\n            grade = grade - 1.7\n        }\n        if\
    \ grade < -1.0 {\n            grade = grade - 1.0\n        }\n        if grade\
    \ < -0.7 {\n            grade = grade - 0.7\n        }\n        if grade < -0.3\
    \ {\n            grade = grade - 0.3\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 3.0 {\n        \
    \    grade = grade + 3.0\n        }\n        if grade < 2.0 {\n            grade\
    \ = grade + 2.0\n        }\n        if grade < 1.7 {\n            grade = grade\
    \ + 1.7\n        }\n        if grade < 1.0 {\n            grade = grade + 1.0\n\
    \        }\n        if grade < 0.7 {\n            grade = grade + 0.7\n      \
    \  }\n        if grade < 0.3 {\n            grade = grade + 0.3\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade < 3.0 {\n            grade = grade + 3.0\n        }\n        if grade\
    \ < 2.0 {\n            grade = grade + 2.0\n        }\n        if grade < 1.7\
    \ {\n            grade = grade + 1.7\n        }\n        if grade < 1.0 {\n  \
    \          grade = grade + 1.0\n        }\n        if grade < 0.7 {\n        \
    \    grade = grade + 0.7\n        }\n        if grade < 0.3 {\n            grade\
    \ = grade + 0.3\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade \nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwz4lfccf_test.go:120:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n       \
    \     letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.3 {\n       \
    \     letterGrades[i] = \"B\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] < 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmplt4615sy_test.go:74: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmplt4615sy_test.go:74: expected '[D-]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmplt4615sy_test.go:74: expected '[D D- C- B B+]', got '[D+\
    \ E C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmplt4615sy_test.go:74: expected '[E D-]', got '[E D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i\
    \ := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"-\"\n    }\n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 1.7 {\n            letterGrades[i] =\
    \ \"C+\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i] =\
    \ \"C\"\n        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"\
    D+\"\n        } else if grades[i] >= 0.3 {\n            letterGrades[i] = \"D\"\
    \n        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else if grades[i] < 0.0 {\n            letterGrades[i] = \"E\"\n  \
    \      }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmph_3ancco_test.go:79: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmph_3ancco_test.go:79: expected '[D-]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmph_3ancco_test.go:79: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmph_3ancco_test.go:79:\
    \ expected '[D D- C- B B+]', got '[D+ D C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmph_3ancco_test.go:79: expected '[E D-]', got '[D- D+]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0 {\n       \
    \     letter_grades[i] = \"E\"\n        } else if grades[i] < 3.3 {\n        \
    \    letter_grades[i] = \"D-\"\n        } else if grades[i] < 3.7 {\n        \
    \    letter_grades[i] = \"C+\"\n        } else if grades[i] < 4.0 {\n        \
    \    letter_grades[i] = \"B-\"\n        } else if grades[i] < 4.3 {\n        \
    \    letter_grades[i] = \"B+\"\n        } else if grades[i] < 4.7 {\n        \
    \    letter_grades[i] = \"B\"\n        } else if grades[i] < 5.0 {\n         \
    \   letter_grades[i] = \"A-\"\n        } else if grades[i] < 5.3 {\n         \
    \   letter_grades[i] = \"A+\"\n        } else if grades[i] < 5.7 {\n         \
    \   letter_grades[i] = \"A\"\n        } else if grades[i] < 6.0 {\n          \
    \  letter_grades[i] = \"A+\"\n        } else if grades[i] < 6.3 {\n          \
    \  letter_grades[i] = \"A\"\n        } else if grades[i] < 6.7 {\n           \
    \ letter_grades[i] = \"A+\"\n        } else if grades[i] < 7.0 {\n           \
    \ letter_grades[i] = \"A\"\n        } else if grades[i] < 7.3 {\n            letter_grades[i]\
    \ = \"A+\"\n        } else if grades[i] < 7.7 {\n            letter_grades[i]\
    \ = \"A\"\n        } else if grades[i] < 8.0 {\n            letter_grades[i] =\
    \ \"A+\"\n        } else if grades[i] < 8.3 {\n            letter_grades[i] =\
    \ \"A\"\n        } else if grades[i] < 8.7 {\n            letter_grades[i] = \"\
    A+\"\n        } else if grades[i] < 9.0 {\n            letter_grades[i] = \"A\"\
    \n        } else if grades[i] < 9.3 {\n            letter_grades[i] = \"A+\"\n\
    \        } else if grades[i] < 9.7 {\n            letter_grades[i] = \"A\"\n \
    \       } else if grades[i] < 10.0 {\n            letter_grades[i] = \"A+\"\n\
    \        } else if grades[i] < 10.3 {\n            letter_grades[i] = \"A\"\n\
    \        } else if grades[i] < 10.7 {\n            letter_grades[i] = \"A+\"\n\
    \        } else if grades[i] < 11.0 {\n            letter_grades[i] = \"A\"\n\
    \        } else if grades[i] < 11.3 {\n            letter_grades[i] = \"A+\"\n\
    \        } else if grades[i] < 11.7 {\n            letter_grades[i] = \"A\"\n\
    \        } else if grades[i] < 12.0 {\n            letter_grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpybg4lg6r_test.go:89:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades := append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6850z1m3_test.go:94:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n\
    \        } else if grade >= 3.7 {\n            grades_string = append(grades_string,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp5m7nepn0_test.go:81: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp5m7nepn0_test.go:81: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp5m7nepn0_test.go:81: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp5m7nepn0_test.go:81: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 &&\
    \ grades[i] < 4.0 {\n            letter_grades[i] = \"A\"\n        } else if grades[i]\
    \ >= 3.3 && grades[i] < 3.7 {\n            letter_grades[i] = \"A-\"\n       \
    \ } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n        \
    \    letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ < 2.7 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 && grades[i] < 2.3 {\n            letter_grades[i] = \"C+\"\n       \
    \ } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 1.3 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 && grades[i] < 1.0 {\n            letter_grades[i] = \"D\"\n        }\
    \ else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n        }\
    \ else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpyb0elgtu_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpyb0elgtu_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpyb0elgtu_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpyb0elgtu_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyhkvc95f_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n \
    \           letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n \
    \           letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n  \
    \          letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n  \
    \          letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n  \
    \          letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n   \
    \         letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n   \
    \         letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n    \
    \        letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n    \
    \        letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n    \
    \        letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n     \
    \       letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpj8rzmsii_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpj8rzmsii_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpj8rzmsii_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpj8rzmsii_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    grades_avg := grades_sum / float64(grades_count)\n    for _, grade\
    \ := range grades {\n        if grade >= grades_avg {\n            grades_letter\
    \ = append(grades_letter, \"A+\")\n        } else if grade < grades_avg {\n  \
    \          grades_letter = append(grades_letter, \"A-\")\n        } else if grade\
    \ > grades_avg {\n            grades_letter = append(grades_letter, \"B+\")\n\
    \        } else if grade < grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"B\")\n        } else if grade > grades_avg {\n            grades_letter =\
    \ append(grades_letter, \"B-\")\n        } else if grade < grades_avg {\n    \
    \        grades_letter = append(grades_letter, \"C+\")\n        } else if grade\
    \ > grades_avg {\n            grades_letter = append(grades_letter, \"C\")\n \
    \       } else if grade < grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"C-\")\n        } else if grade > grades_avg {\n            grades_letter =\
    \ append(grades_letter, \"D+\")\n        } else if grade < grades_avg {\n    \
    \        grades_letter = append(grades_letter, \"D\")\n        } else if grade\
    \ > grades_avg {\n            grades_letter = append(grades_letter, \"D-\")\n\
    \        } else {\n            grades_letter = append(grades_letter, \"E\")\n\
    \        }\n    }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpj1127_3o_test.go:86: expected '[A+ B C- C A-]', got '[A+\
    \ A+ A- A- A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpj1127_3o_test.go:86: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpj1127_3o_test.go:86: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpj1127_3o_test.go:86:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpj1127_3o_test.go:86: expected '[D D- C- B B+]', got '[A-\
    \ A- A- A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpj1127_3o_test.go:86: expected '[E D-]', got '[A- A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(grade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7tq_qbgn_test.go:72:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letterGrades []string\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n   \
    \     } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp721nxgz5_test.go:75: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        for _, grade := range grades {\n            if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A+\")\n            }\
    \ else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A-\")\n            } else if grade == grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A\")\n            } else if grade > grades_avg+0.7\
    \ && grade < grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade > grades_avg+1.0 {\n                grades_letter\
    \ = append(grades_letter, \"B\")\n            } else if grade < grades_avg+0.7\
    \ && grade > grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B-\")\n            } else if grade > grades_avg+0.7 && grade < grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"C+\")\n         \
    \   } else if grade > grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"C\")\n            } else if grade < grades_avg+0.7 && grade > grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"C-\")\n         \
    \   } else if grade > grades_avg+0.7 && grade < grades_avg+1.0 {\n           \
    \     grades_letter = append(grades_letter, \"D+\")\n            } else if grade\
    \ > grades_avg+1.0 {\n                grades_letter = append(grades_letter, \"\
    D\")\n            } else if grade < grades_avg+0.7 && grade > grades_avg+1.0 {\n\
    \                grades_letter = append(grades_letter, \"D-\")\n            }\
    \ else if grade > grades_avg+0.7 && grade < grades_avg+1.0 {\n               \
    \ grades_letter = append(grades_letter, \"E\")\n            } else {\n       \
    \         grades_letter = append(grades_letter, \"F\")\n            }\n      \
    \  }\n    }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpf9irgnlp_test.go:92: expected '[A+ B C- C A-]', got '[A+\
    \ A+ A- A- A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpf9irgnlp_test.go:92: expected '[D+]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpf9irgnlp_test.go:92: expected '[D-]', got '[A]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpf9irgnlp_test.go:92:\
    \ expected '[E]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpf9irgnlp_test.go:92: expected '[D D- C- B B+]', got '[A-\
    \ A- A- A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpf9irgnlp_test.go:92: expected '[E D-]', got '[A- A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] =\
    \ \"B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] =\
    \ \"C+\"\n        } else if grades[i] >= 1.7 {\n            letterGrades[i] =\
    \ \"C\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"\
    C-\"\n        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n\
    \        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else {\n            letterGrades[i] = \"A+\"\n        }\n    }\n  \
    \  return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmppfw36vhh_test.go:78: expected '[A+ B C- C A-]', got '[B+\
    \ B+ C C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmppfw36vhh_test.go:78: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmppfw36vhh_test.go:78: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmppfw36vhh_test.go:78: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    gradesSorted = grades\n    gradesSorted = append(gradesSorted, grades[0])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-1])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-2])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-3])\n    gradesSorted = append(gradesSorted, grades[len(grades)-4])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-5])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-6])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-7])\n    gradesSorted = append(gradesSorted, grades[len(grades)-8])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-9])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-10])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-11])\n    gradesSorted = append(gradesSorted, grades[len(grades)-12])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-13])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-14])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-15])\n    gradesSorted = append(gradesSorted, grades[len(grades)-16])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-17])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-18])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-19])\n    gradesSorted = append(gradesSorted, grades[len(grades)-20])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-21])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-22])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-23])\n    gradesSorted = append(gradesSorted, grades[len(grades)-24])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-25])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb5xd4_8o_test.go:59:57: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // Loop through the grades and find the letter grade\n    for i :=\
    \ 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n            letter_grades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            letter_grades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            letter_grades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 3.0 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letter_grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 {\n            letter_grades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 1.7 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 {\n            letter_grades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 {\n            letter_grades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 {\n            letter_grades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letter_grades[i]\
    \ = \"D-\"\n        } else {\n            letter_grades[i] = \"E\"\n        }\n\
    \    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmprxycfrj7_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmprxycfrj7_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmprxycfrj7_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmprxycfrj7_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades := append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append(\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp_ijawnk_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    \n    // Write your code here\n    \n   \
    \ return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpx6keyv8v_test.go:55: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpx6keyv8v_test.go:55:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpx6keyv8v_test.go:55: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpx6keyv8v_test.go:55:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpx6keyv8v_test.go:55: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpx6keyv8v_test.go:55:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    \n    // We will use two for loops to iterate\
    \ through the grades and \n    // the grades_string array\n    \n    // The first\
    \ for loop will iterate through the grades array\n    for i := 0; i < len(grades);\
    \ i++ {\n        // The second for loop will iterate through the grades_string\
    \ array\n        for j := 0; j < len(grades_string); j++ {\n            // If\
    \ the current grade is greater than the previous grade\n            // then we\
    \ will append the letter grade to the grades_string array\n            if grades[i]\
    \ > grades[j] {\n                grades_string[j] = fmt.Sprintf(\"%+.2f\", grades[i])\n\
    \            }\n            // If the current grade is less than the previous\
    \ grade\n            // then we will append the letter grade to the grades_string\
    \ array\n            if grades[i] < grades[j] {\n                grades_string[j]\
    \ = fmt.Sprintf(\"%+.2f\", grades[i])\n            }\n        }\n    }\n    \n\
    \    // We will return the grades_string array\n    return grades_string\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp3u4rsdmx_test.go:74: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp3u4rsdmx_test.go:74:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp3u4rsdmx_test.go:74: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp3u4rsdmx_test.go:74:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp3u4rsdmx_test.go:74: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3u4rsdmx_test.go:74:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    if grades_count\
    \ == 0 {\n        return []string{\"E\"}\n    }\n    if grades_sum == 0.0 {\n\
    \        return []string{\"E\"}\n    }\n    grades_avg := grades_sum / float64(grades_count)\n\
    \    grades_diff := grades_avg - float64(grades[0])\n    grades_diff_abs := math.Abs(grades_diff)\n\
    \    grades_diff_sign := grades_diff_abs > 0.0 ? 1.0 : -1.0\n    grades_diff_abs_sign\
    \ := grades_diff_abs * grades_diff_sign\n    grades_diff_abs_sign /= grades_diff_abs\n\
    \    grades_diff_abs_sign += 0.5\n    grades_diff_abs_sign *= grades_diff\n  \
    \  grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_sign /= grades_diff\n    grades_diff_abs_sign *= grades_diff\n\
    \    grades_diff_abs_\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp6qq6ar7_test.go:45:47: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] < 4.0 {\n       \
    \     letter_grades[i] = \"A+\"\n        } else if grades[i] >= 4.0 && grades[i]\
    \ < 3.7 {\n            letter_grades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 3.3 {\n            letter_grades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.3 && grades[i] < 3.0 {\n            letter_grades[i] = \"\
    B+\"\n        } else if grades[i] >= 3.0 && grades[i] < 2.7 {\n            letter_grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.7 && grades[i] < 2.3 {\n         \
    \   letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ < 2.0 {\n            letter_grades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 2.0 && grades[i] < 1.7 {\n            letter_grades[i] = \"C\"\n        }\
    \ else if grades[i] >= 1.7 && grades[i] < 1.3 {\n            letter_grades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.0 {\n        \
    \    letter_grades[i] = \"D+\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 0.7 {\n            letter_grades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.7 && grades[i] < 0.0 {\n            letter_grades[i] = \"D-\"\n        } else\
    \ {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpads0qwmc_test.go:82: expected '[A+ B C- C A-]', got '[E\
    \ A+ A+ A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpads0qwmc_test.go:82: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpads0qwmc_test.go:82: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpads0qwmc_test.go:82:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpads0qwmc_test.go:82: expected '[D D- C- B B+]', got '[A+\
    \ A+ A+ A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpads0qwmc_test.go:82: expected '[E D-]', got '[A+ A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := make([]string, len(grades))\n    \n    for i := range grades {\n\
    \        if grades[i] >= 3.0 {\n            result[i] = \"A+\"\n        } else\
    \ if grades[i] >= 2.7 {\n            result[i] = \"B+\"\n        } else if grades[i]\
    \ >= 2.3 {\n            result[i] = \"B\"\n        } else if grades[i] >= 1.7\
    \ && grades[i] < 2.3 {\n            result[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.3 && grades[i] < 1.7 {\n            result[i] = \"C\"\n        } else if\
    \ grades[i] >= 1.0 {\n            result[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 {\n            result[i] = \"D\"\n        } else if grades[i] < 0.7 {\n\
    \            result[i] = \"D-\"\n        } else {\n            result[i] = \"\
    E\"\n        }\n    }\n    \n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmppnn8mrrd_test.go:75: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmppnn8mrrd_test.go:75: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmppnn8mrrd_test.go:75: expected '[D D- C- B B+]', got '[D+\
    \ D- C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmppnn8mrrd_test.go:75: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_letter := []string{}\n   \
    \ for _, grade := range grades {\n        if grade > grades_avg {\n          \
    \  grades_letter = append(grades_letter, \"B-\")\n        } else if grade < grades_avg\
    \ {\n            grades_letter = append(grades_letter, \"B-\")\n        } else\
    \ if grade == grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"A+\")\n        } else {\n            grades_letter = append(grades_letter,\
    \ \"A-\")\n        }\n    }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_3rt8f1_test.go:41:19: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0 {\n \
    \           letter_grades[i] = \"E\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] < 4.0 {\n            letter_grades[i] = \"D-\"\n       \
    \ } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letter_grades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.6 {\n        \
    \    letter_grades[i] = \"C\"\n        } else if grades[i] >= 4.6 && grades[i]\
    \ < 4.9 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 4.9 && grades[i] < 5.2 {\n            letter_grades[i] = \"B\"\n        }\
    \ else if grades[i] >= 5.2 && grades[i] < 5.5 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 5.5 && grades[i] < 5.8 {\n        \
    \    letter_grades[i] = \"B\"\n        } else if grades[i] >= 5.8 && grades[i]\
    \ < 6.1 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 6.1 && grades[i] < 6.4 {\n            letter_grades[i] = \"B\"\n        }\
    \ else if grades[i] >= 6.4 && grades[i] < 6.7 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 6.7 && grades[i] < 7 {\n          \
    \  letter_grades[i] = \"B\"\n        } else {\n            letter_grades[i] =\
    \ \"A+\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfog64of3_test.go:85: expected '[A+ B C- C A-]', got '[C+\
    \ D+ E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpfog64of3_test.go:85: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpfog64of3_test.go:85: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpfog64of3_test.go:85:\
    \ expected '[D D- C- B B+]', got '[E E E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpfog64of3_test.go:85: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letters []string\n    for _, grade := range grades {\n        if grade\
    \ >= 3.0 {\n            letters = append(letters, \"A+\")\n        } else if grade\
    \ >= 2.7 {\n            letters = append(letters, \"B\")\n        } else if grade\
    \ >= 2.3 {\n            letters = append(letters, \"B-\")\n        } else if grade\
    \ >= 1.7 && grade < 2.3 {\n            letters = append(letters, \"C\")\n    \
    \    } else if grade >= 1.3 && grade < 1.7 {\n            letters = append(letters,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letters = append(letters,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letters = append(letters,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letters = append(letters,\
    \ \"D-\")\n        } else {\n            letters = append(letters, \"E\")\n  \
    \      }\n    }\n    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmplquyzu5l_test.go:73: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmplquyzu5l_test.go:73: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmplquyzu5l_test.go:73: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmplquyzu5l_test.go:73: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := []string{}\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n  \
    \          grade = grade - 2.0\n        }\n        if grade > 2.0 {\n        \
    \    grade = grade - 2.0\n        }\n        if grade < 1.7 {\n            grade\
    \ = grade - 1.7\n        }\n        if grade > 1.7 {\n            grade = grade\
    \ - 1.7\n        }\n        if grade < 1.0 {\n            grade = grade - 1.0\n\
    \        }\n        if grade > 1.0 {\n            grade = grade - 1.0\n      \
    \  }\n        if grade < 0.7 {\n            grade = grade - 0.7\n        }\n \
    \       if grade > 0.7 {\n            grade = grade - 0.7\n        }\n       \
    \ if grade < 0.3 {\n            grade = grade - 0.3\n        }\n        if grade\
    \ > 0.3 {\n            grade = grade - 0.3\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade > 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 3.0 {\n        \
    \    grade = grade + 3.0\n        }\n        if grade > 3.0 {\n            grade\
    \ = grade + 3.0\n        }\n        if grade < 4.0 {\n            grade = grade\
    \ + 4.0\n        }\n        if grade > 4.0 {\n            grade = grade + 4.0\n\
    \        }\n        if grade < 5.0 {\n            grade = grade + 5.0\n      \
    \  }\n        if grade > 5.0 {\n            grade = grade + 5.0\n        }\n \
    \       if grade < 6.0 {\n            grade = grade + 6.0\n        }\n       \
    \ if grade > 6.0 {\n            grade = grade + 6.0\n        }\n        if grade\
    \ < 7.0 {\n            grade = grade + 7.0\n        }\n        if grade > 7.0\
    \ {\n            grade = grade + 7.0\n        }\n        if grade < 8.0 {\n  \
    \          grade = grade + 8.0\n        }\n        if grade > 8.0 {\n        \
    \    grade = grade + 8.0\n        }\n        if grade < 9.0 {\n            grade\
    \ = grade + 9.0\n        }\n        if grade > 9.0 {\n            grade = grade\
    \ + 9.0\n        }\n        if grade < 10.0 {\n            grade = grade + 10.0\n\
    \        }\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppntc10l3_test.go:119:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A\")\n            } else\
    \ if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"B\")\n            } else if grade < grades_avg {\n\
    \                grades_letter = append(grades_letter, \"B-\")\n            }\
    \ else if grade == grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"B\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"C+\")\n            } else if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"C\")\n            } else\
    \ if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"C-\")\n            } else if grade == grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"C\")\n            } else if grade < grades_avg {\n\
    \                grades_letter = append(grades_letter, \"D+\")\n            }\
    \ else if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"D\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"D-\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"D\")\n            } else\
    \ if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"E\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"E\")\n            }\n        }\n    }\n    return\
    \ grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpdmz5j1i3_test.go:99: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpdmz5j1i3_test.go:99:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpdmz5j1i3_test.go:99: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpdmz5j1i3_test.go:99:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpdmz5j1i3_test.go:99: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpdmz5j1i3_test.go:99:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := make([]string, len(grades))\n    \n    max := 0.0\n    for _, grade\
    \ := range grades {\n        if grade > max {\n            max = grade\n     \
    \   }\n    }\n    \n    for i := range grades {\n        if grades[i] > max {\n\
    \            grades[i] = max\n        }\n    }\n    \n    for i := range grades\
    \ {\n        if grades[i] < 0.0 {\n            grades[i] = 0.0\n        }\n  \
    \  }\n    \n    for i := range grades {\n        if grades[i] == 0.0 {\n     \
    \       grades[i] = \"E\"\n        }\n    }\n    \n    for i := range grades {\n\
    \        if grades[i] < 3.0 {\n            grades[i] = \"A+\"\n        }\n   \
    \     if grades[i] >= 3.0 && grades[i] < 3.7 {\n            grades[i] = \"A\"\n\
    \        }\n        if grades[i] >= 3.7 && grades[i] < 4.0 {\n            grades[i]\
    \ = \"A-\"\n        }\n        if grades[i] >= 4.0 && grades[i] < 4.3 {\n    \
    \        grades[i] = \"B+\"\n        }\n        if grades[i] >= 4.3 && grades[i]\
    \ < 4.6 {\n            grades[i] = \"B\"\n        }\n        if grades[i] >= 4.6\
    \ && grades[i] < 4.9 {\n            grades[i] = \"B-\"\n        }\n        if\
    \ grades[i] >= 4.9 && grades[i] < 5.2 {\n            grades[i] = \"C+\"\n    \
    \    }\n        if grades[i] >= 5.2 && grades[i] < 5.5 {\n            grades[i]\
    \ = \"C\"\n        }\n        if grades[i] >= 5.5 && grades[i] < 5.8 {\n     \
    \       grades[i] = \"C-\"\n        }\n        if grades[i] >= 5.8 && grades[i]\
    \ < 6.1 {\n            grades[i] = \"D+\"\n        }\n        if grades[i] >=\
    \ 6.1 && grades[i] < 6.4 {\n            grades[i] = \"D\"\n        }\n       \
    \ if grades[i] >= 6.4 && grades[i] < 6.7 {\n            grades[i] = \"D-\"\n \
    \       }\n        if grades[i] >= 6.7 && grades[i] < 7.0 {\n            grades[i]\
    \ = \"E\"\n        }\n    }\n    \n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgygjjp6a_test.go:53:25: cannot use "E" (untyped string constant) as float64
    value in assignment

    /tmp/tmpgygjjp6a_test.go:59:25: cannot use "A+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpgygjjp6a_test.go:62:25: cannot use "A" (untyped string constant) as float64
    value in assignment

    /tmp/tmpgygjjp6a_test.go:65:25: cannot use "A-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpgygjjp6a_test.go:68:25: cannot use "B+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpgygjjp6a_test.go:71:25: cannot use "B" (untyped string constant) as float64
    value in assignment

    /tmp/tmpgygjjp6a_test.go:74:25: cannot use "B-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpgygjjp6a_test.go:77:25: cannot use "C+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpgygjjp6a_test.go:80:25: cannot use "C" (untyped string constant) as float64
    value in assignment

    /tmp/tmpgygjjp6a_test.go:83:25: cannot use "C-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpgygjjp6a_test.go:83:25: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyhkvc95f_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyhkvc95f_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The last letter grade is always D-\n    letter_grades[grades_len-1]\
    \ = \"D-\"\n    \n    // The middle letter grades are the letter grades using\
    \ the formula\n    // GPA * 10 / 100\n    for i := 1; i < grades_len; i++ {\n\
    \        letter_grades[i] = fmt.Sprintf(\"%+.2f\", grades[i]*10/100)\n    }\n\
    \    \n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpmgg349ih_test.go:66: expected '[A+ B C- C A-]', got '[A+\
    \ +0.30 +0.17 +0.20 +0.35]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpmgg349ih_test.go:66: expected '[D+]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpmgg349ih_test.go:66:\
    \ expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpmgg349ih_test.go:66: expected '[D D- C- B B+]', got '[A+\
    \ +0.03 +0.15 +0.28 +0.33]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpmgg349ih_test.go:66: expected '[E D-]', got '[A+ +0.07]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letter_grades []string\n    var gpas []float64\n    for _, grade := range\
    \ grades {\n        gpa := grade / 4.0\n        gpas = append(gpas, gpa)\n   \
    \ }\n    for _, gpa := range gpas{\n        if gpa > 3.7 {\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        } else if gpa > 3.3 {\n           \
    \ letter_grades = append(letter_grades, \"A-\")\n        } else if gpa > 3.0 {\n\
    \            letter_grades = append(letter_grades, \"B+\")\n        } else if\
    \ gpa > 2.7 {\n            letter_grades = append(letter_grades, \"B\")\n    \
    \    } else if gpa > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if gpa > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if gpa > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if gpa > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if gpa > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if gpa > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if gpa > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_737vmcg_test.go:84: expected '[A+ B C- C A-]', got '[D\
    \ D D- D- D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp_737vmcg_test.go:84: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_737vmcg_test.go:84: expected '[D D- C- B B+]', got '[D-\
    \ D- D- D- D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := []string{}\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n  \
    \          grade = grade - 2.0\n        }\n        if grade < 1.7 {\n        \
    \    grade = grade - 1.7\n        }\n        if grade < 1.0 {\n            grade\
    \ = grade - 1.0\n        }\n        if grade < 0.7 {\n            grade = grade\
    \ - 0.7\n        }\n        if grade < 0.3 {\n            grade = grade - 0.3\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi9omhql5_test.go:120:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n         \
    \   letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpt9khd5ot_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpt9khd5ot_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpt9khd5ot_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpt9khd5ot_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    gradesSorted = grades\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsvmmp8sp_test.go:74:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n\
    \    }\n    \n    letterGrades[0] = \"E\"\n    \n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i+1] = \"A+\"\
    \n        } else if grades[i] >= 3.7 {\n            letterGrades[i+1] = \"A\"\n\
    \        } else if grades[i] >= 3.3 {\n            letterGrades[i+1] = \"A-\"\n\
    \        } else if grades[i] >= 3.0 {\n            letterGrades[i+1] = \"B+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letterGrades[i+1] = \"B\"\n\
    \        } else if grades[i] >= 2.3 {\n            letterGrades[i+1] = \"B-\"\n\
    \        } else if grades[i] >= 2.0 {\n            letterGrades[i+1] = \"C+\"\n\
    \        } else if grades[i] >= 1.7 {\n            letterGrades[i+1] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letterGrades[i+1] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letterGrades[i+1] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letterGrades[i+1] = \"D\"\n\
    \        } else if grades[i] >= 0.0 {\n            letterGrades[i+1] = \"D-\"\n\
    \        } else {\n            letterGrades[i+1] = \"E\"\n        }\n    }\n \
    \   \n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out\
    \ of range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513720, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000c45f8, 0x5,\
    \ 0x0?})\n\t/tmp/tmpfpfzj1n4_test.go:45 +0x8c8\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmpfpfzj1n4_test.go:79 +0xc2\ntesting.tRunner(0xc0001a0340, 0x529060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letter []string\n    var gpa, i float64\n    for i = 0; i < len(grades);\
    \ i++ {\n        gpa = grades[i]\n        if gpa > 3.0 {\n            letter =\
    \ append(letter, \"B+\")\n        } else if gpa > 2.7 {\n            letter =\
    \ append(letter, \"B\")\n        } else if gpa > 2.3 {\n            letter = append(letter,\
    \ \"B-\")\n        } else if gpa > 1.7 {\n            letter = append(letter,\
    \ \"C+\")\n        } else if gpa > 1.3 {\n            letter = append(letter,\
    \ \"C\")\n        } else if gpa > 1.0 {\n            letter = append(letter, \"\
    C-\")\n        } else if gpa > 0.7 {\n            letter = append(letter, \"D+\"\
    )\n        } else if gpa > 0.3 {\n            letter = append(letter, \"D\")\n\
    \        } else if gpa > 0.0 {\n            letter = append(letter, \"D-\")\n\
    \        } else {\n            letter = append(letter, \"E\")\n        }\n   \
    \ }\n    return letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwghp680l_test.go:32:20: invalid operation: i < len(grades) (mismatched
    types float64 and int)

    /tmp/tmpwghp680l_test.go:33:22: invalid argument: index i (variable of type float64)
    must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_list := make([]string,\
    \ len(grades))\n    for _, grade := range grades {\n        grades_sum += grade\n\
    \        grades_count++\n    }\n    if grades_count == 0 {\n        return grades_list\n\
    \    }\n    grades_avg := grades_sum / float64(grades_count)\n    grades_list\
    \ := make([]string, len(grades))\n    for _, grade := range grades {\n       \
    \ grades_avg = grade - grades_avg\n        if grades_avg < 0 {\n            grades_avg\
    \ += float64(grades_count) * float64(grades_count) - 1\n        }\n        grades_avg\
    \ /= float64(grades_count)\n        if grades_avg > 1.0 {\n            grades_avg\
    \ = 1.0\n        }\n        if grades_avg < 0.0 {\n            grades_avg += float64(grades_count)\
    \ * float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count) *\
    \ float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count) *\
    \ float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count) *\
    \ float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count) *\
    \ float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count) *\
    \ float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb5o3rn1t_test.go:94:47: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := make([]string, len(grades))\n    for i := range grades {\n    \
    \    if grades[i] < 0 {\n            result[i] = \"E\"\n        } else {\n   \
    \         result := make([]string, len(grades))\n            if grades[i] < 3.0\
    \ {\n                result[0] = \"A+\"\n            } else if grades[i] < 3.3\
    \ {\n                result[1] = \"A\"\n            } else if grades[i] < 3.7\
    \ {\n                result[2] = \"A-\"\n            } else if grades[i] < 4.0\
    \ {\n                result[3] = \"B+\"\n            } else if grades[i] < 4.3\
    \ {\n                result[4] = \"B\"\n            } else if grades[i] < 4.7\
    \ {\n                result[5] = \"B-\"\n            } else if grades[i] < 5.0\
    \ {\n                result[6] = \"C+\"\n            } else if grades[i] < 5.3\
    \ {\n                result[7] = \"C\"\n            } else if grades[i] < 5.7\
    \ {\n                result[8] = \"C-\"\n            } else if grades[i] < 6.0\
    \ {\n                result[9] = \"D+\"\n            } else if grades[i] < 6.3\
    \ {\n                result[10] = \"D\"\n            } else if grades[i] < 6.7\
    \ {\n                result[11] = \"D-\"\n            } else if grades[i] < 7.0\
    \ {\n                result[12] = \"E\"\n            } else {\n              \
    \  result[13] = \"F\"\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpomxp_dog_test.go:88: expected '[A+ B C- C A-]', got '[ \
    \   ]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n       \
    \ tmpomxp_dog_test.go:88: expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpomxp_dog_test.go:88: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpomxp_dog_test.go:88:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpomxp_dog_test.go:88: expected '[D D- C- B B+]', got '[ \
    \   ]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n       \
    \ tmpomxp_dog_test.go:88: expected '[E D-]', got '[ ]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwd381o31_test.go:62:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 3.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letter_grades[i] = \"B-\"\n        } else if grades[i] >= 1.7 &&\
    \ grades[i] < 3.0 {\n            letter_grades[i] = \"C\"\n        } else if grades[i]\
    \ >= 1.3 && grades[i] < 2.7 {\n            letter_grades[i] = \"C-\"\n       \
    \ } else if grades[i] >= 1.0 {\n            letter_grades[i] = \"D+\"\n      \
    \  } else if grades[i] >= 0.7 {\n            letter_grades[i] = \"D\"\n      \
    \  } else if grades[i] < 0.0 {\n            letter_grades[i] = \"D-\"\n      \
    \  } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return\
    \ letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpjek2xslf_test.go:75: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmpjek2xslf_test.go:75: expected '[D-]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpjek2xslf_test.go:75: expected '[D D- C- B B+]', got '[D+\
    \ E C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpjek2xslf_test.go:75: expected '[E D-]', got '[E D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n\
    \            letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n\
    \            letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n\
    \            letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n\
    \            letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n\
    \            letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n\
    \            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpgl5l5tiu_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpgl5l5tiu_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpgl5l5tiu_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpgl5l5tiu_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for\
    \ i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"D-\"\n        if grades[i]\
    \ >= 3.0 {\n            letterGrades[i] = \"C+\"\n            if grades[i] > 2.7\
    \ {\n                letterGrades[i] = \"B+\"\n                if grades[i] >\
    \ 2.3 {\n                    letterGrades[i] = \"B\"\n                    if grades[i]\
    \ > 2.0 {\n                        letterGrades[i] = \"A+\"\n                \
    \        if grades[i] > 1.7 {\n                            letterGrades[i] = \"\
    A\"\n                            if grades[i] > 1.3 {\n                      \
    \          letterGrades[i] = \"A-\"\n                                if grades[i]\
    \ > 1.0 {\n                                    letterGrades[i] = \"A\"\n     \
    \                               if grades[i] > 0.7 {\n                       \
    \                 letterGrades[i] = \"B\"\n                                  \
    \      if grades[i] > 0.3 {\n                                            letterGrades[i]\
    \ = \"B+\"\n                                            if grades[i] > 0.0 {\n\
    \                                                letterGrades[i] = \"C\"\n   \
    \                                             if grades[i] > -0.7 {\n        \
    \                                            letterGrades[i] = \"C+\"\n      \
    \                                              if grades[i] > -0.3 {\n       \
    \                                                 letterGrades[i] = \"C-\"\n \
    \                                                       if grades[i] > -0.0 {\n\
    \                                                            letterGrades[i] =\
    \ \"D+\"\n                                                            if grades[i]\
    \ > -0.6 {\n                                                                letterGrades[i]\
    \ = \"D\"\n                                                                if\
    \ grades[i] > -0.2 {\n                                                       \
    \             letterGrades[i] = \"D-\"\n                                     \
    \                               if grades[i] > 0.0 {\n                       \
    \                                                 letterGrades[i] = \"E\"\n  \
    \                                                                  }\n       \
    \                                                         }\n                \
    \                                            }\n                             \
    \                           }\n                                              \
    \      }\n                                                }\n                \
    \                            }\n                                        }\n  \
    \                                  }\n                                }\n    \
    \                        }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp9cf7cn1v_test.go:106: expected '[A+ B C- C A-]', got '[E\
    \ E D- D- E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp9cf7cn1v_test.go:106: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp9cf7cn1v_test.go:106: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp9cf7cn1v_test.go:106:\
    \ expected '[D D- C- B B+]', got '[D- D- D- D- E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp9cf7cn1v_test.go:106: expected '[E D-]', got '[D- D-]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := make([]string, len(grades))\n    for i := range grades {\n    \
    \    if grades[i] < 3.0 {\n            result[i] = \"E\"\n            continue\n\
    \        }\n        result := []string{\"A\", \"B\", \"C\", \"D\", \"E\"}\n  \
    \      index := 0\n        for index < len(grades)-1 {\n            if grades[index]\
    \ <= grades[i+1] {\n                index++\n                continue\n      \
    \      }\n            if grades[index] > grades[i+1] {\n                index--\n\
    \                continue\n            }\n            if grades[index] == grades[i+1]\
    \ {\n                result[index] = \"A+\"\n                index++\n       \
    \         continue\n            }\n            if grades[index] < grades[i+1]\
    \ {\n                result[index] = \"A-\"\n                index--\n       \
    \         continue\n            }\n            if grades[index] > grades[i+1]\
    \ {\n                result[index] = \"B+\"\n                index++\n       \
    \         continue\n            }\n            if grades[index] == grades[i+1]\
    \ {\n                result[index] = \"B\"\n                index++\n        \
    \        continue\n            }\n            if grades[index] < grades[i+1] {\n\
    \                result[index] = \"B-\"\n                index--\n           \
    \     continue\n            }\n            if grades[index] > grades[i+1] {\n\
    \                result[index] = \"C+\"\n                index++\n           \
    \     continue\n            }\n            if grades[index] == grades[i+1] {\n\
    \                result[index] = \"C\"\n                index++\n            \
    \    continue\n            }\n            if grades[index] < grades[i+1] {\n \
    \               result[index] = \"C-\"\n                index--\n            \
    \    continue\n            }\n            if grades[index] > grades[i+1] {\n \
    \               result[index] = \"D+\"\n                index++\n            \
    \    continue\n            }\n            if grades[index] == grades[i+1] {\n\
    \                result[index] = \"D\"\n                index++\n            \
    \    continue\n            }\n            if grades[index] < grades[i+1] {\n \
    \               result[index] = \"D-\"\n                index--\n            \
    \    continue\n            }\n            if grades[index] > grades[i+1] {\n \
    \               result[index] = \"E\"\n                index++\n             \
    \   continue\n            }\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000c45f8, 0x5,\
    \ 0x0?})\n\t/tmp/tmp2c1aifp5_test.go:39 +0x148\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmp2c1aifp5_test.go:119 +0xc2\ntesting.tRunner(0xc0001a0340, 0x529058)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_letter := []string{}\n   \
    \ for _, grade := range grades {\n        if grade > grades_avg {\n          \
    \  grades_letter = append(grades_letter, \"B-\")\n        } else if grade < grades_avg\
    \ {\n            grades_letter = append(grades_letter, \"B-\")\n        } else\
    \ if grade == grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"A+\")\n        } else {\n            grades_letter = append(grades_letter,\
    \ \"A-\")\n        }\n    }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_3rt8f1_test.go:41:19: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var result []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 3.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n  \
    \          grade = grade + 2.0\n        }\n        if grade < 1.7 {\n        \
    \    grade = grade + 1.7\n        }\n        if grade < 1.0 {\n            grade\
    \ = grade + 1.0\n        }\n        if grade < 0.7 {\n            grade = grade\
    \ + 0.7\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 4.0 {\n            grade = grade + 4.0\n      \
    \  }\n        if grade > 4.0 {\n            grade = grade - 4.0\n        }\n \
    \       if grade > 3.7 {\n            grade = grade - 3.7\n        }\n       \
    \ if grade > 3.3 {\n            grade = grade - 3.3\n        }\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade > 2.7\
    \ {\n            grade = grade - 2.7\n        }\n        if grade > 2.3 {\n  \
    \          grade = grade - 2.3\n        }\n        if grade > 2.0 {\n        \
    \    grade = grade - 2.0\n        }\n        if grade > 1.7 {\n            grade\
    \ = grade - 1.7\n        }\n        if grade > 1.0 {\n            grade = grade\
    \ - 1.0\n        }\n        if grade > 0.7 {\n            grade = grade - 0.7\n\
    \        }\n        if grade > 0.0 {\n            grade = grade - 0.0\n      \
    \  }\n        if grade > 4.0 {\n            grade = grade - 4.0\n        }\n \
    \       if grade > 3.7 {\n            grade = grade - 3.7\n        }\n       \
    \ if grade > 3.3 {\n            grade = grade - 3.3\n        }\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade > 2.7\
    \ {\n            grade = grade - 2.7\n        }\n        if grade > 2.3 {\n  \
    \          grade = grade - 2.3\n        }\n        if grade > 2.0 {\n        \
    \    grade = grade - 2.0\n        }\n        if grade > 1.7 {\n            grade\
    \ = grade - 1.7\n        }\n        if grade > 1.0 {\n            grade = grade\
    \ - 1.0\n        }\n        if grade > 0.7 {\n            grade = \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp753wprax_test.go:118:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmltymeqt_test.go:64:53: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := 0; i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n\
    \    }\n    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted\
    \ := append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted \n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40c3ljf8_test.go:61:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade >= grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A\")\n            } else\
    \ if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"B\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"B-\")\n            }\
    \ else if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"C+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"C\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"C-\")\n            }\
    \ else if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"D+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"D\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"D-\")\n            }\
    \ else if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"E\")\n            }\n        }\n    }\n    return grades_letter\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpkdilkz4p_test.go:91: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpkdilkz4p_test.go:91:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpkdilkz4p_test.go:91: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpkdilkz4p_test.go:91:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpkdilkz4p_test.go:91: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpkdilkz4p_test.go:91:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades := append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6850z1m3_test.go:94:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := 0; i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n\
    \    }\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(grade\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt0qyjce__test.go:72:27: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(grade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1b10lysc_test.go:72:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[2]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-3]\n\
    \    gradesSorted[0] -= gradesSorted[3]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-4]\n    gradesSorted[0] -= gradesSorted[4]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-5]\n\
    \    gradesSorted[0] -= gradesSorted[5]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-6]\n    gradesSorted[0] -= gradesSorted[6]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-7]\n\
    \    gradesSorted[0] -= gradesSorted[7]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-8]\n    gradesSorted[0] -= gradesSorted[8]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-9]\n\
    \    gradesSorted[0] -= gradesSorted[9]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-10]\n    gradesSorted[0] -= gradesSorted[10]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-11]\n\
    \    gradesSorted[0] -= gradesSorted[11]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-12]\n    gradesSorted[0] -= gradesSorted[12]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-13]\n\
    \    gradesSorted[0] -= gradesSorted[13]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-14]\n    gradesSorted[0] -= gradesSorted[14]\n\
    \    gradesSorted[len(grades\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6xbxb1qo_test.go:62:28: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n\
    \            letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n\
    \            letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n\
    \            letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n\
    \            letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n\
    \            letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n\
    \            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpgl5l5tiu_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpgl5l5tiu_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpgl5l5tiu_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpgl5l5tiu_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_letter := []string{}\n   \
    \ for _, grade := range grades {\n        if grade > grades_avg {\n          \
    \  grades_letter = append(grades_letter, \"B+\")\n        } else if grade < grades_avg\
    \ {\n            grades_letter = append(grades_letter, \"B-\")\n        } else\
    \ if grade == grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"C\")\n        } else if grade > grades_avg*1.5 {\n            grades_letter\
    \ = append(grades_letter, \"C+\")\n        } else if grade < grades_avg*1.5 {\n\
    \            grades_letter = append(grades_letter, \"C-\")\n        } else if\
    \ grade == grades_avg*1.5 {\n            grades_letter = append(grades_letter,\
    \ \"D\")\n        } else if grade > grades_avg*2.5 {\n            grades_letter\
    \ = append(grades_letter, \"D+\")\n        } else if grade < grades_avg*2.5 {\n\
    \            grades_letter = append(grades_letter, \"D-\")\n        } else if\
    \ grade == grades_avg*2.5 {\n            grades_letter = append(grades_letter,\
    \ \"E\")\n        }\n    }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuu0tlzma_test.go:41:19: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            grades_string = append(grades_string, \"B+\")\n \
    \       } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpsfexd2om_test.go:75: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades := append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append(\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp_ijawnk_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades := append([]float64{}, grades...)\n    grades = append(grades, 0)\n\
    \    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades =\
    \ append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpob66659s_test.go:94:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075421
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The last letter grade is always E\n    letter_grades[grades_len-1]\
    \ = \"E\"\n    \n    // The rest of the letter grades are calculated from the\
    \ GPA\n    for i := 1; i < grades_len; i++ {\n        letter_grades[i] = letter_grades[i-1]\
    \ + \n            fmt.Sprintf(\"%+.2f\", grades[i-1]/grades_len)\n    }\n    \n\
    \    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjg_xx4pq_test.go:42:34: invalid operation: grades[i - 1] / grades_len
    (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(grade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1b10lysc_test.go:72:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := append([]float64{}, grades...)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ grades\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7zsl3grx_test.go:66:46: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    if\
    \ grades_sum < 0.0 {\n        return grades_letter\n    }\n    grades_avg := grades_sum\
    \ / float64(grades_count)\n    grades_letter := []string{}\n    for _, grade :=\
    \ range grades {\n        if grade > grades_avg {\n            grades_letter =\
    \ append(grades_letter, \"B-\")\n        } else if grade < grades_avg {\n    \
    \        grades_letter = append(grades_letter, \"B-\")\n        } else if grade\
    \ == grades_avg {\n            grades_letter = append(grades_letter, \"A+\")\n\
    \        } else {\n            grades_letter = append(grades_letter, \"A\")\n\
    \        }\n    }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmput_xbtq__test.go:44:19: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        for _, grade := range grades {\n            if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A+\")\n            }\
    \ else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A-\")\n            } else if grade == grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A\")\n            } else if grade > grades_avg+0.7\
    \ && grade < grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade > grades_avg+1.0 {\n                grades_letter\
    \ = append(grades_letter, \"B\")\n            } else if grade < grades_avg+0.7\
    \ && grade > grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B-\")\n            } else if grade > grades_avg+0.7 && grade < grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"C+\")\n         \
    \   } else if grade > grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"C\")\n            } else if grade < grades_avg+0.7 && grade > grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"C-\")\n         \
    \   } else if grade > grades_avg+0.7 && grade < grades_avg+1.0 {\n           \
    \     grades_letter = append(grades_letter, \"D+\")\n            } else if grade\
    \ > grades_avg+1.0 {\n                grades_letter = append(grades_letter, \"\
    D\")\n            } else if grade < grades_avg+0.7 && grade > grades_avg+1.0 {\n\
    \                grades_letter = append(grades_letter, \"D-\")\n            }\
    \ else if grade > grades_avg+0.7 && grade < grades_avg+1.0 {\n               \
    \ grades_letter = append(grades_letter, \"E\")\n            }\n        }\n   \
    \ }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpe1dtnsjy_test.go:90: expected '[A+ B C- C A-]', got '[A+\
    \ A+ A- A- A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpe1dtnsjy_test.go:90: expected '[D+]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpe1dtnsjy_test.go:90: expected '[D-]', got '[A]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpe1dtnsjy_test.go:90:\
    \ expected '[E]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpe1dtnsjy_test.go:90: expected '[D D- C- B B+]', got '[A-\
    \ A- A- A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpe1dtnsjy_test.go:90: expected '[E D-]', got '[A- A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            grades_string = append(grades_string, \"B+\")\n \
    \       } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpsfexd2om_test.go:75: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    grade\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpljokacva_test.go:83:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades := append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqaanor6w_test.go:76:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := append([]float64{}, grades...)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ grades\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7zsl3grx_test.go:66:46: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    grades_sum := 0.0\n    for i := 0; i < grades_len;\
    \ i++ {\n        grades_sum += grades[i]\n    }\n    grades_avg := grades_sum\
    \ / float64(grades_len)\n    grades_diff := grades_avg - grades[0]\n    grades_diff_len\
    \ := len(grades_diff)\n    grades_diff_avg := 0.0\n    for i := 0; i < grades_diff_len;\
    \ i++ {\n        grades_diff_avg += grades_diff[i]\n    }\n    grades_diff_avg\
    \ /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_len)\n  \
    \  grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw_f97uf6_test.go:71:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n      \
    \      letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n     \
    \       letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n     \
    \       letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n    \
    \        letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n   \
    \         letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n  \
    \          letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n \
    \           letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n\
    \            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpo0fbbxpg_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpo0fbbxpg_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpo0fbbxpg_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpo0fbbxpg_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := 0; i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n\
    \    }\n    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, grades[0])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-1])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-2])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-3])\n    gradesSorted = append(gradesSorted, grades[len(grades)-4])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-5])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-6])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-7])\n    gradesSorted = append(gradesSorted, grades[len(grades)-8])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-9])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-10])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-11])\n    gradesSorted = append(gradesSorted, grades[len(grades)-12])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-13])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-14])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-15])\n    gradesSorted = append(gradesSorted, grades[len(grades)-16])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-17])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-18])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-19])\n    gradesSorted = append(gradesSorted, grades[len(grades)-20])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-21])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-22])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-23])\n    gradesSorted = append(gradesSor\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzxjt86a7_test.go:61:36: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0 {\n       \
    \     letter_grades[i] = \"E\"\n            continue\n        }\n        if grades[i]\
    \ < 3.3 {\n            letter_grades[i] = \"D-\"\n            continue\n     \
    \   }\n        if grades[i] < 3.7 {\n            letter_grades[i] = \"C+\"\n \
    \           continue\n        }\n        if grades[i] < 4.0 {\n            letter_grades[i]\
    \ = \"B-\"\n            continue\n        }\n        if grades[i] < 4.3 {\n  \
    \          letter_grades[i] = \"B+\"\n            continue\n        }\n      \
    \  if grades[i] < 4.7 {\n            letter_grades[i] = \"B\"\n            continue\n\
    \        }\n        if grades[i] < 5.0 {\n            letter_grades[i] = \"A-\"\
    \n            continue\n        }\n        if grades[i] < 5.3 {\n            letter_grades[i]\
    \ = \"A+\"\n            continue\n        }\n        if grades[i] < 5.7 {\n  \
    \          letter_grades[i] = \"A\"\n            continue\n        }\n       \
    \ if grades[i] < 6.0 {\n            letter_grades[i] = \"A+\"\n            continue\n\
    \        }\n        if grades[i] < 6.3 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 6.7 {\n            letter_grades[i]\
    \ = \"A+\"\n            continue\n        }\n        if grades[i] < 7.0 {\n  \
    \          letter_grades[i] = \"A\"\n            continue\n        }\n       \
    \ if grades[i] < 7.3 {\n            letter_grades[i] = \"A+\"\n            continue\n\
    \        }\n        if grades[i] < 7.7 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 8.0 {\n            letter_grades[i]\
    \ = \"A+\"\n            continue\n        }\n        if grades[i] < 8.3 {\n  \
    \          letter_grades[i] = \"A\"\n            continue\n        }\n       \
    \ if grades[i] < 8.7 {\n            letter_grades[i] = \"A+\"\n            continue\n\
    \        }\n        if grades[i] < 9.0 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 9.3 {\n            letter_grades[i]\
    \ = \"A+\"\n            continue\n        }\n        if grades[i] < 9.7 {\n  \
    \          letter_grades[i] = \"A\"\n            continue\n        }\n       \
    \ if grades[i] < 10.0 {\n            letter_grades[i] = \"A+\"\n            continue\n\
    \        }\n        if grades[i] < 10.3 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 10.7 {\n           \
    \ letter_grades[i] = \"A+\"\n            continue\n        }\n        if grades[i]\
    \ < 11.0 {\n            letter_grades[i] = \"A\"\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqjzr5e1l_test.go:131:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n       \
    \     letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n        \
    \    letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] < 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpdjebr9tl_test.go:74: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmpdjebr9tl_test.go:74: expected '[D-]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpdjebr9tl_test.go:74: expected '[D D- C- B B+]', got '[D+\
    \ E C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpdjebr9tl_test.go:74: expected '[E D-]', got '[E D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[2]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-3]\n\
    \    gradesSorted[0] -= gradesSorted[3]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-4]\n    gradesSorted[0] -= gradesSorted[4]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-5]\n\
    \    gradesSorted[0] -= gradesSorted[5]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-6]\n    gradesSorted[0] -= gradesSorted[6]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-7]\n\
    \    gradesSorted[0] -= gradesSorted[7]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-8]\n    gradesSorted[0] -= gradesSorted[8]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-9]\n\
    \    gradesSorted[0] -= gradesSorted[9]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-10]\n    gradesSorted[0] -= gradesSorted[10]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-11]\n\
    \    gradesSorted[0] -= gradesSorted[11]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-12]\n    gradesSorted[0] -= gradesSorted[12]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-13]\n\
    \    gradesSorted[0] -= gradesSorted[13]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-14]\n    gradesSorted[0] -= gradesSorted[14]\n\
    \    gradesSorted[len(grades\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6xbxb1qo_test.go:62:28: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    gradesSorted = grades\n    gradesSorted = append(gradesSorted, 0.0)\n   \
    \ gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpshokt8_f_test.go:74:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades := append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6850z1m3_test.go:94:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n\
    \        } else if grade > 3.7 {\n            grades_string = append(grades_string,\
    \ \"A\")\n        } else if grade > 3.3 {\n            grades_string = append(grades_string,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    if grades_count\
    \ == 0 {\n        return []string{\"E\"}\n    }\n    grades_avg := grades_sum\
    \ / float64(grades_count)\n    grades_diff := grades_sum - grades_avg\n    grades_diff_sqr\
    \ := grades_diff * grades_diff\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8m8umze_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades := append([]float64{}, grades...)\n    grades = append(grades, 0)\n\
    \    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades =\
    \ append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpob66659s_test.go:94:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    \n    for _, grade := range grades {\n  \
    \      if grade > 3.0 {\n            grades_string = append(grades_string, \"\
    B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    \n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfk3dh118_test.go:77: expected '[A+ B C- C A-]', got '[B+\
    \ B C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpfk3dh118_test.go:77: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpfk3dh118_test.go:77: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpfk3dh118_test.go:77:\
    \ expected '[D D- C- B B+]', got '[D+ D- C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpfk3dh118_test.go:77: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        if grade > grades_sum {\n       \
    \     grades_sum = grade\n            grades_count = 0\n        }\n        if\
    \ grade > grades_sum {\n            grades_sum += grade\n            grades_count\
    \ = 1\n        } else {\n            grades_sum += grade\n            grades_count\
    \ += 1\n        }\n        if grades_count > 3 {\n            grades_letter =\
    \ append(grades_letter, \"C\")\n            grades_count = 0\n        } else if\
    \ grades_count > 2 {\n            grades_letter = append(grades_letter, \"B\"\
    )\n            grades_count = 0\n        } else if grades_count > 1 {\n      \
    \      grades_letter = append(grades_letter, \"A\")\n            grades_count\
    \ = 0\n        } else {\n            grades_letter = append(grades_letter, \"\
    D\")\n            grades_count = 0\n        }\n    }\n    return grades_letter\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0qwhpxsq_test.go:80: expected '[A+ B C- C A-]', got '[D\
    \ D D D D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n  \
    \      tmp0qwhpxsq_test.go:80: expected '[D+]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp0qwhpxsq_test.go:80: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp0qwhpxsq_test.go:80:\
    \ expected '[E]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp0qwhpxsq_test.go:80: expected '[D D- C- B B+]', got '[D\
    \ D D D D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n  \
    \      tmp0qwhpxsq_test.go:80: expected '[E D-]', got '[D D]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_max := 0.0\n    grades_min\
    \ := 0.0\n    grades_avg := 0.0\n    grades_sum := 0.0\n    grades_count := 0\n\
    \    grades_max := 0.0\n    grades_min := 0.0\n    grades_avg := 0.0\n    grades_sum\
    \ := 0.0\n    grades_count := 0\n    grades_max := 0.0\n    grades_min := 0.0\n\
    \    grades_avg := 0.0\n    grades_sum := 0.0\n    grades_count := 0\n    grades_max\
    \ := 0.0\n    grades_min := 0.0\n    grades_avg := 0.0\n    grades_sum := 0.0\n\
    \    grades_count := 0\n    grades_max := 0.0\n    grades_min := 0.0\n    grades_avg\
    \ := 0.0\n    grades_sum := 0.0\n    grades_count := 0\n    grades_max := 0.0\n\
    \    grades_min := 0.0\n    grades_avg := 0.0\n    grades_sum := 0.0\n    grades_count\
    \ := 0\n    grades_max := 0.0\n    grades_min := 0.0\n    grades_avg := 0.0\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_max := 0.0\n    grades_min\
    \ := 0.0\n    grades_avg := 0.0\n    grades_sum := 0.0\n    grades_count := 0\n\
    \    grades_max := 0.0\n    grades_min := 0.0\n    grades_avg := 0.0\n    grades_sum\
    \ := 0.0\n    grades_count := 0\n    grades_max := 0.0\n    grades_min := 0.0\n\
    \    grades_avg := 0.0\n    grades_sum := 0.0\n    grades_count := 0\n    grades_max\
    \ := 0.0\n    grades_min := 0.0\n    grades_avg := 0.0\n    grades_sum := 0.0\n\
    \    grades_count := 0\n    grades_max := 0.0\n    grades_min := 0.0\n    grades_avg\
    \ := 0.0\n    grades_sum := 0.0\n    grades_count := 0\n    grades_max := 0.0\n\
    \    grades_min := 0.0\n    grades_avg := 0.0\n    grades_sum := 0.0\n    grades_count\
    \ := 0\n    grades_max := 0.0\n    grades_min := 0.0\n    grades_avg := 0.0\n\
    \    grades_sum := 0.0\n    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3318zh2c_test.go:102:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    if grades_count\
    \ == 0 {\n        return []string{\"E\"}\n    }\n    if grades_sum == 0.0 {\n\
    \        return []string{\"E\"}\n    }\n    grades_avg := grades_sum / float64(grades_count)\n\
    \    grades_diff := 0.0\n    for _, grade := range grades {\n        grades_diff\
    \ += grade - grades_avg\n    }\n    if grades_diff < 0.0 {\n        return []string{\"\
    E\"}\n    }\n    grades_diff /= float64(grades_count)\n    grades_diff *= -1.0\n\
    \    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n    grades_diff\
    \ *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n \
    \   grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\n    grades_diff /= float64(len(grades))\n\
    \    grades_diff *= -1.0\n    grades_diff += 1.0\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpke_m6ea7_test.go:98:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    \n    for _, grade := range grades {\n  \
    \      if grade > 3.0 {\n            grades_string = append(grades_string, \"\
    B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp194zx0og_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp194zx0og_test.go:76: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp194zx0og_test.go:76: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp194zx0og_test.go:76:\
    \ expected '[D D- C- B B+]', got '[D+ D- C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp194zx0og_test.go:76: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyhkvc95f_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append(gradesSorted, 0)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSor\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3cabjn2t_test.go:72:36: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[gradesSorted[len(gradesSorted)-1]]\
    \ = 0.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n\
    \    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n  \
    \  gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0]\
    \ += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -=\
    \ 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n\
    \    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n  \
    \  gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1]\
    \ -= 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] +=\
    \ 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n\
    \    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n  \
    \  gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0]\
    \ -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] +=\
    \ 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n\
    \    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n  \
    \  gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1]\
    \ += 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n\
    \    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n  \
    \  gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40ix8jue_test.go:78:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    grades\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpre1w16l7_test.go:66:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n       \
    \     letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.3 {\n       \
    \     letterGrades[i] = \"B\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] < 0.0 {\n          \
    \  letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] = \"\
    E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_sc78cqw_test.go:76: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp_sc78cqw_test.go:76: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_sc78cqw_test.go:76: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_sc78cqw_test.go:76:\
    \ expected '[E]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_sc78cqw_test.go:76: expected '[D D- C- B B+]', got '[C-\
    \ D C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp_sc78cqw_test.go:76: expected '[E D-]', got '[D D+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 3.0 {\n      \
    \      letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n     \
    \       letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n     \
    \       letter_grades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letter_grades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letter_grades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letter_grades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letter_grades[i] = \"D\"\n        } else\
    \ if grades[i] < 0.0 {\n            letter_grades[i] = \"D-\"\n        } else\
    \ {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpg5wdfik4_test.go:74: expected '[A+ B C- C A-]', got '[B+\
    \ B+ C C B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmpg5wdfik4_test.go:74: expected '[D-]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpg5wdfik4_test.go:74: expected '[D D- C- B B+]', got '[D+\
    \ E C- B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpg5wdfik4_test.go:74: expected '[E D-]', got '[E D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    \n    letters\
    \ := []string{}\n    for i := 0; i < grades_count; i++ {\n        letter := \"\
    \"\n        if grades_sum > 0 {\n            letter = fmt.Sprintf(\"%+.2f\", grades[i]\
    \ / grades_sum)\n        } else {\n            letter = \"E\"\n        }\n   \
    \     letters = append(letters, letter)\n    }\n    return letters\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmphr1voph8_test.go:68: expected '[A+ B C- C A-]', got '[+0.28\
    \ +0.21 +0.12 +0.14 +0.25]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmphr1voph8_test.go:68: expected '[D+]', got '[+1.00]'\n  \
    \  --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmphr1voph8_test.go:68:\
    \ expected '[D-]', got '[+1.00]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmphr1voph8_test.go:68: expected '[D D- C- B B+]', got '[+0.11\
    \ +0.03 +0.17 +0.31 +0.37]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmphr1voph8_test.go:68: expected '[E D-]', got '[+0.00 +1.00]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letterGrades []string\n    for _, grade := range grades {\n        if\
    \ grade >= 4.0 {\n            letterGrades = append(letterGrades, \"A+\")\n  \
    \      } else if grade >= 3.7 && grade < 4.0 {\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        } else if grade >= 3.3 && grade < 3.7 {\n            letterGrades\
    \ = append(letterGrades, \"A-\")\n        } else if grade >= 3.0 && grade < 3.3\
    \ {\n            letterGrades = append(letterGrades, \"B+\")\n        } else if\
    \ grade >= 2.7 && grade < 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 && grade < 2.7 {\n            letterGrades\
    \ = append(letterGrades, \"B-\")\n        } else if grade >= 2.0 && grade < 2.3\
    \ {\n            letterGrades = append(letterGrades, \"C+\")\n        } else if\
    \ grade >= 1.7 && grade < 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 && grade < 1.7 {\n            letterGrades\
    \ = append(letterGrades, \"C-\")\n        } else if grade >= 1.0 && grade < 1.3\
    \ {\n            letterGrades = append(letterGrades, \"D+\")\n        } else if\
    \ grade >= 0.7 && grade < 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 && grade < 0.7 {\n            letterGrades\
    \ = append(letterGrades, \"D-\")\n        } else {\n            letterGrades =\
    \ append(letterGrades, \"E\")\n        }\n    }\n    return letterGrades\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpkxfh7s8o_test.go:81: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpkxfh7s8o_test.go:81: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpkxfh7s8o_test.go:81: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpkxfh7s8o_test.go:81: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n      \
    \      letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ <= 4.0 {\n            letter_grades[i] = \"A\"\n        } else if grades[i]\
    \ >= 3.3 && grades[i] <= 3.7 {\n            letter_grades[i] = \"A-\"\n      \
    \  } else if grades[i] >= 3.0 && grades[i] <= 3.3 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] <= 3.0 {\n       \
    \     letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ <= 2.7 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 && grades[i] <= 2.3 {\n            letter_grades[i] = \"C+\"\n      \
    \  } else if grades[i] >= 1.7 && grades[i] <= 2.0 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] <= 1.7 {\n        \
    \    letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ <= 1.3 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 && grades[i] <= 1.0 {\n            letter_grades[i] = \"D\"\n       \
    \ } else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n      \
    \  } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return\
    \ letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpy3o9s4t6_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpy3o9s4t6_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpy3o9s4t6_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpy3o9s4t6_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n       \
    \     letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n        \
    \    letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n        \
    \    letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n        \
    \    letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n         \
    \   letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n         \
    \   letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n          \
    \  letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n          \
    \  letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n          \
    \  letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n           \
    \ letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] = \"\
    E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp3c7joudm_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp3c7joudm_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp3c7joudm_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp3c7joudm_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 &&\
    \ grades[i] < 4.0 {\n            letter_grades[i] = \"A\"\n        } else if grades[i]\
    \ >= 3.3 && grades[i] < 3.7 {\n            letter_grades[i] = \"A-\"\n       \
    \ } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n        \
    \    letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ < 2.7 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 && grades[i] < 2.3 {\n            letter_grades[i] = \"C+\"\n       \
    \ } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 1.3 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 && grades[i] < 1.0 {\n            letter_grades[i] = \"D\"\n        }\
    \ else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n        }\
    \ else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpyb0elgtu_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpyb0elgtu_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpyb0elgtu_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpyb0elgtu_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyhkvc95f_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_diff := grades_avg - float64(grades[0])\n\
    \    grades_diff_abs := math.Abs(grades_diff)\n    grades_diff_sign := grades_diff_abs\
    \ > 0.0 ? 1.0 : -1.0\n    grades_diff_sign_abs := math.Abs(grades_diff_sign)\n\
    \    grades_diff_sign_mult := grades_diff_sign_abs * grades_count\n    grades_diff_sign_mult_abs\
    \ := math.Abs(grades_diff_sign_mult)\n    grades_diff_sign_mult_abs /= float64(grades_count)\n\
    \    grades_diff_sign_mult_abs *= grades_diff_sign_abs\n    grades_diff_sign_mult_abs\
    \ /= float64(grades_count)\n    grades_diff_sign_mult_abs *= grades_diff_sign_abs\n\
    \    grades_diff_sign_mult_abs /= float64(grades_count)\n    grades_diff_sign_mult_abs\
    \ *= grades_diff_sign_abs\n    grades_diff_sign_mult_abs /= float64(grades_count)\n\
    \    grades_diff_sign_mult_abs *= grades_diff_sign_abs\n    grades_diff_sign_mult_abs\
    \ /= float64(grades_count)\n    grades_diff_sign_mult_abs *= grades_diff_sign_abs\n\
    \    grades_diff_sign_mult_abs /= float64(grades_count)\n    grades_diff_sign_mult_abs\
    \ *= grades_diff_sign_abs\n    grades_diff_sign_mult_abs /= float64(grades_count)\n\
    \    grades_diff_sign_mult_abs *= grades_diff_sign_abs\n    grades_diff_sign_mult_abs\
    \ /= float64(grades_count)\n    grades_diff_sign_mult_abs *= grades_diff_sign_abs\n\
    \    grades_diff_sign_mult_abs /= float64(grades_count)\n    grades_diff_sign_mult_abs\
    \ *= grades_diff_sign_abs\n    grades_diff_sign_mult_abs /= float64(grades_count)\n\
    \    grades_diff_sign_mult_abs *= grades_diff_sign_abs\n    grades_diff_sign_mult_abs\
    \ /= float64(grades_count)\n    grades_diff_sign_mult_abs *= grades_diff_sign_abs\n\
    \    grades_diff_sign_mult_ab\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplfe5rd2k_test.go:39:47: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := []string{}\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n  \
    \          grade = grade - 2.0\n        }\n        if grade < 1.7 {\n        \
    \    grade = grade - 1.7\n        }\n        if grade < 1.0 {\n            grade\
    \ = grade - 1.0\n        }\n        if grade < 0.7 {\n            grade = grade\
    \ - 0.7\n        }\n        if grade < 0.3 {\n            grade = grade - 0.3\n\
    \        }\n        if grade < 0.1 {\n            grade = grade - 0.1\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade > 0.0 {\n            grade = grade + 0.1\n        }\n       \
    \ if grade > 0.1 {\n            grade = grade + 0.3\n        }\n        if grade\
    \ > 0.3 {\n            grade = grade + 0.7\n        }\n        if grade > 0.7\
    \ {\n            grade = grade + 1.0\n        }\n        if grade > 1.0 {\n  \
    \          grade = grade + 2.0\n        }\n        if grade > 2.0 {\n        \
    \    grade = grade + 3.0\n        }\n        if grade > 3.0 {\n            grade\
    \ = grade + 4.0\n        }\n        if grade > 4.0 {\n            grade = grade\
    \ + 5.0\n        }\n        if grade > 5.0 {\n            grade = grade + 6.0\n\
    \        }\n        if grade > 6.0 {\n            grade = grade + 7.0\n      \
    \  }\n        if grade > 7.0 {\n            grade = grade + 8.0\n        }\n \
    \       if grade > 8.0 {\n            grade = grade + 9.0\n        }\n       \
    \ if grade > 9.0 {\n            grade = grade + 10.0\n        }\n        if grade\
    \ > 10.0 {\n            grade = grade + 11.0\n        }\n        if grade > 11.0\
    \ {\n            grade = grade + 12.0\n        }\n        if grade > 12.0 {\n\
    \            grade = grade + 13.0\n        }\n        if grade > 13.0 {\n    \
    \        grade = grade + 14.0\n        }\n        if grade > 14.0 {\n        \
    \    grade = grade + 15.0\n        }\n        if grade > 15.0 {\n            grade\
    \ = grade + 16.0\n        }\n        if grade > 16.0 {\n            grade = grade\
    \ + \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr3cm4lwk_test.go:118:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    letterGrades[gradesLen-2]\
    \ = \"D-\"\n    letterGrades[gradesLen-3] = \"D-\"\n    letterGrades[gradesLen-4]\
    \ = \"D-\"\n    letterGrades[gradesLen-5] = \"D-\"\n    letterGrades[gradesLen-6]\
    \ = \"D-\"\n    letterGrades[gradesLen-7] = \"D-\"\n    letterGrades[gradesLen-8]\
    \ = \"D-\"\n    letterGrades[gradesLen-9] = \"D-\"\n    letterGrades[gradesLen-10]\
    \ = \"D-\"\n    letterGrades[gradesLen-11] = \"D-\"\n    letterGrades[gradesLen-12]\
    \ = \"D-\"\n    letterGrades[gradesLen-13] = \"D-\"\n    letterGrades[gradesLen-14]\
    \ = \"D-\"\n    letterGrades[gradesLen-15] = \"D-\"\n    letterGrades[gradesLen-16]\
    \ = \"D-\"\n    letterGrades[gradesLen-17] = \"D-\"\n    letterGrades[gradesLen-18]\
    \ = \"D-\"\n    letterGrades[gradesLen-19] = \"D-\"\n    letterGrades[gradesLen-20]\
    \ = \"D-\"\n    letterGrades[gradesLen-21] = \"D-\"\n    letterGrades[gradesLen-22]\
    \ = \"D-\"\n    letterGrades[gradesLen-23] = \"D-\"\n    letterGrades[gradesLen-24]\
    \ = \"D-\"\n    letterGrades[gradesLen-25] = \"D-\"\n    letterGrades[gradesLen-26]\
    \ = \"D-\"\n    letterGrades[gradesLen-27] = \"D-\"\n    letterGrades[gradesLen-28]\
    \ = \"D-\"\n    letterGrades[gradesLen-29] = \"D-\"\n    letterGrades[gradesLen-30]\
    \ = \"D-\"\n    letterGrades[gradesLen-31] = \"D-\"\n    letterGrades[gradesLen-32]\
    \ = \"D-\"\n    letterGrades[gradesLen-33] = \"D-\"\n    letterGrades[gradesLen-34]\
    \ = \"D-\"\n    letterGrades[gradesLen-35] = \"D-\"\n    letterGrades[gradesLen-\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppx21oe85_test.go:69:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_diff := grades_avg - float64(grades[0])\n\
    \    grades_diff_abs := math.Abs(grades_diff)\n    grades_diff_sign := grades_diff_abs\
    \ > 0.0 ? 1.0 : -1.0\n    grades_diff_sign *= grades_diff_abs\n    grades_diff_sign\
    \ /= float64(len(grades))\n    grades_diff_sign *= grades_diff\n    grades_diff_sign\
    \ *= grades_diff_abs\n    grades_diff_sign *= grades_count\n    grades_diff_sign\
    \ *= grades_avg\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign *= grades_count\n    grades_diff_sign\
    \ *= grades_avg\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign *= grades_count\n    grades_diff_sign\
    \ *= grades_avg\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign *= grades_count\n    grades_diff_sign\
    \ *= grades_avg\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign *= grades_count\n    grades_diff_sign\
    \ *= grades_avg\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign *= grades_count\n    grades_diff_sign\
    \ *= grades_avg\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign *= grades_diff\n    grades_diff_sign *=\
    \ grades_diff_abs\n    grades_diff_sign\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57a37xt3_test.go:39:47: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_diff := grades_avg - float64(grades[0])\n\
    \    grades_diff_sqr := grades_diff * grades_diff\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grade\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpebsu93km_test.go:73:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    gradesMax := grades[gradesLen-1]\n    gradesMin\
    \ := grades[0]\n    gradesAvg := grades[gradesLen-1] / float64(gradesLen)\n  \
    \  gradesSum = gradesSum + grades\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesAvg\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesMax\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesMin\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesAvg\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesMax\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesMin\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesAvg\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesMax\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesMin\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesAvg\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesMax\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesMin\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesAvg\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesMax\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum - gradesMin\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpshqf4o97_test.go:67:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[gradesSorted[0] < 0] = 0\n\
    \    gradesSorted[gradesSorted[len(gradesSorted)-1] < 0] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    grade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3qwhf90__test.go:83:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    gradesTotal := 0.0\n    for _, grade := range\
    \ grades {\n        gradesTotal += grade\n    }\n    gradesAvg := gradesTotal\
    \ / float64(gradesLen)\n    gradesAvg = math.Pow(gradesAvg, 1.0/3.0)\n    gradesAvg\
    \ = math.Floor(gradesAvg)\n    gradesAvg = math.Ceil(gradesAvg)\n    gradesAvg\
    \ = math.Pow(gradesAvg, 1.0/3.0)\n    gradesAvg = math.Floor(gradesAvg)\n    gradesAvg\
    \ = math.Ceil(gradesAvg)\n    gradesAvg = math.Pow(gradesAvg, 1.0/3.0)\n    gradesAvg\
    \ = math.Floor(gradesAvg)\n    gradesAvg = math.Ceil(gradesAvg)\n    gradesAvg\
    \ = math.Pow(gradesAvg, 1.0/3.0)\n    gradesAvg = math.Floor(gradesAvg)\n    gradesAvg\
    \ = math.Ceil(gradesAvg)\n    gradesAvg = math.Pow(gradesAvg, 1.0/3.0)\n    gradesAvg\
    \ = math.Floor(gradesAvg)\n    gradesAvg = math.Ceil(gradesAvg)\n    gradesAvg\
    \ = math.Pow(gradesAvg, 1.0/3.0)\n    gradesAvg = math.Floor(gradesAvg)\n    gradesAvg\
    \ = math.Ceil(gradesAvg)\n    gradesAvg = math.Pow(gradesAvg, 1.0/3.0)\n    gradesAvg\
    \ = math.Floor(gradesAvg)\n    gradesAvg = math.Ceil(gradesAvg)\n    gradesAvg\
    \ = math.Pow(gradesAvg, 1.0/3.0)\n    gradesAvg = math.Floor(gradesAvg)\n    gradesAvg\
    \ = math.Ceil(gradesAvg)\n    gradesAvg = math.Pow(gradesAvg, 1.0/3.0)\n    gradesAvg\
    \ = math.Floor(gradesAvg)\n    gradesAvg = math.Ceil(gradesAvg)\n    gradesAvg\
    \ = math.Pow(gradesAvg, 1.0/3.0)\n    gradesAvg = math.Floor(gradesAvg)\n    gradesAvg\
    \ = math.Ceil(gradesAvg)\n    gradesAvg = math.Pow(gradesAvg, 1.0/3.0)\n    gradesAvg\
    \ = \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8j9c_sym_test.go:68:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letterGrades []string\n    \n    for _, grade := range grades {\n   \
    \     if grade > 3.0 {\n            letterGrades = append(letterGrades, \"B+\"\
    )\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp990n5we2_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var result []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n  \
    \          grade = grade - 2.0\n        }\n        if grade < 1.7 {\n        \
    \    grade = grade - 1.7\n        }\n        if grade < 1.0 {\n            grade\
    \ = grade - 1.0\n        }\n        if grade < 0.7 {\n            grade = grade\
    \ - 0.7\n        }\n        if grade < 0.3 {\n            grade = grade - 0.3\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade > 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade > 1.0 {\n            grade = grade + 1.0\n        }\n       \
    \ if grade > 2.0 {\n            grade = grade + 2.0\n        }\n        if grade\
    \ > 3.0 {\n            grade = grade + 3.0\n        }\n        if grade > 4.0\
    \ {\n            grade = grade + 4.0\n        }\n        if grade > 5.0 {\n  \
    \          grade = grade + 5.0\n        }\n        if grade > 6.0 {\n        \
    \    grade = grade + 6.0\n        }\n        if grade > 7.0 {\n            grade\
    \ = grade + 7.0\n        }\n        if grade > 8.0 {\n            grade = grade\
    \ + 8.0\n        }\n        if grade > 9.0 {\n            grade = grade + 9.0\n\
    \        }\n        if grade > 10.0 {\n            grade = grade + 10.0\n    \
    \    }\n        if grade > 11.0 {\n            grade = grade + 11.0\n        }\n\
    \        if grade > 12.0 {\n            grade = grade + 12.0\n        }\n    \
    \    if grade > 13.0 {\n            grade = grade + 13.0\n        }\n        if\
    \ grade > 14.0 {\n            grade = grade + 14.0\n        }\n        if grade\
    \ > 15.0 {\n            grade = grade + 15.0\n        }\n        if grade > 16.0\
    \ {\n            grade = grade + 16.0\n        }\n        if grade > 17.0 {\n\
    \            grade = grade + 17.0\n        }\n        if grade > 18.0 {\n    \
    \        grade = grade + 18.0\n        }\n        if grade > 19.0 {\n        \
    \    grade = grade + 19.0\n        }\n        if grade > 20.0 {\n            grade\
    \ = grade \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7d_a2ke8_test.go:118:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades := append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6850z1m3_test.go:94:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        letter := \"\"\n        if grades[i]\
    \ >= 3.0 {\n            letter = \"A+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letter = \"B\"\n        } else if grades[i] >= 2.3 {\n          \
    \  letter = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i] < 3.0 {\n\
    \            letter = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] <\
    \ 2.7 {\n            letter = \"C-\"\n        } else if grades[i] >= 1.0 {\n \
    \           letter = \"D+\"\n        } else if grades[i] >= 0.7 {\n          \
    \  letter = \"D\"\n        } else if grades[i] < 0.0 {\n            letter = \"\
    D-\"\n        } else {\n            letter = \"E\"\n        }\n        letterGrades[i]\
    \ = letter\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpkblxi_3t_test.go:76: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmpkblxi_3t_test.go:76: expected '[D-]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpkblxi_3t_test.go:76: expected '[D D- C- B B+]', got '[D+\
    \ E C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpkblxi_3t_test.go:76: expected '[E D-]', got '[E D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var letters []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            letters = append(letters, \"B+\")\n        } else if grade\
    \ > 2.7 {\n            letters = append(letters, \"B\")\n        } else if grade\
    \ > 2.3 {\n            letters = append(letters, \"B-\")\n        } else if grade\
    \ > 1.3 {\n            letters = append(letters, \"C+\")\n        } else if grade\
    \ > 0.7 {\n            letters = append(letters, \"C\")\n        } else if grade\
    \ > 0.3 {\n            letters = append(letters, \"C-\")\n        } else if grade\
    \ > 0.0 {\n            letters = append(letters, \"D+\")\n        } else if grade\
    \ > 0.0 {\n            letters = append(letters, \"D\")\n        } else if grade\
    \ > 0.0 {\n            letters = append(letters, \"D-\")\n        } else {\n \
    \           letters = append(letters, \"E\")\n        }\n    }\n    return letters\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpxajqylem_test.go:75: expected '[A+ B C- C A-]', got '[B+\
    \ B C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpxajqylem_test.go:75: expected '[D+]', got '[C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpxajqylem_test.go:75: expected '[D-]', got '[C-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpxajqylem_test.go:75:\
    \ expected '[D D- C- B B+]', got '[C D+ C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpxajqylem_test.go:75: expected '[E D-]', got '[E C-]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade >= grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"B+\")\n            }\
    \ else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"B\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"B-\")\n            } else if grade < grades_avg {\n\
    \                grades_letter = append(grades_letter, \"C+\")\n            }\
    \ else if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"C\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"C-\")\n            } else if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"D+\")\n            }\
    \ else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"D\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"D-\")\n            } else {\n                grades_letter\
    \ = append(grades_letter, \"E\")\n            }\n        }\n    }\n    return\
    \ grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_cniugc3_test.go:89: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp_cniugc3_test.go:89:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_cniugc3_test.go:89: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_cniugc3_test.go:89:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_cniugc3_test.go:89: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_cniugc3_test.go:89:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_letter := []string{}\n   \
    \ for _, grade := range grades {\n        if grade > grades_avg {\n          \
    \  grades_letter = append(grades_letter, \"B-\")\n        } else if grade < grades_avg\
    \ {\n            grades_letter = append(grades_letter, \"B-\")\n        } else\
    \ if grade == grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"A+\")\n        } else {\n            grades_letter = append(grades_letter,\
    \ \"A-\")\n        }\n    }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_3rt8f1_test.go:41:19: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n\
    \            letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n\
    \            letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n\
    \            letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n\
    \            letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n\
    \            letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n\
    \            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpgl5l5tiu_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpgl5l5tiu_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpgl5l5tiu_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpgl5l5tiu_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(grade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7tq_qbgn_test.go:72:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0 {\n       \
    \     letter_grades[i] = \"E\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] < 4.0 {\n            letter_grades[i] = \"D-\"\n       \
    \ } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letter_grades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.6 {\n        \
    \    letter_grades[i] = \"C\"\n        } else if grades[i] >= 4.6 && grades[i]\
    \ < 4.9 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 4.9 && grades[i] < 5.2 {\n            letter_grades[i] = \"B\"\n        }\
    \ else if grades[i] >= 5.2 && grades[i] < 5.5 {\n            letter_grades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 5.5 && grades[i] < 5.8 {\n        \
    \    letter_grades[i] = \"A\"\n        } else if grades[i] >= 5.8 && grades[i]\
    \ < 6.1 {\n            letter_grades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 6.1 && grades[i] < 6.4 {\n            letter_grades[i] = \"A\"\n        }\
    \ else {\n            letter_grades[i] = \"A\"\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp2i4m5f5m_test.go:80: expected '[A+ B C- C A-]', got '[C+\
    \ D+ E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp2i4m5f5m_test.go:80: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp2i4m5f5m_test.go:80: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp2i4m5f5m_test.go:80:\
    \ expected '[D D- C- B B+]', got '[E E E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp2i4m5f5m_test.go:80: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    for _, grade := range grades {\n\
    \        if grade >= grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"A+\")\n        } else if grade < grades_avg {\n            grades_letter =\
    \ append(grades_letter, \"A-\")\n        } else if grade > grades_avg {\n    \
    \        grades_letter = append(grades_letter, \"B+\")\n        } else if grade\
    \ <= grades_avg {\n            grades_letter = append(grades_letter, \"B\")\n\
    \        } else if grade > grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"B-\")\n        } else if grade <= grades_avg {\n            grades_letter\
    \ = append(grades_letter, \"C+\")\n        } else if grade < grades_avg {\n  \
    \          grades_letter = append(grades_letter, \"C\")\n        } else if grade\
    \ > grades_avg {\n            grades_letter = append(grades_letter, \"C-\")\n\
    \        } else if grade <= grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"D+\")\n        } else if grade < grades_avg {\n            grades_letter =\
    \ append(grades_letter, \"D\")\n        } else if grade > grades_avg {\n     \
    \       grades_letter = append(grades_letter, \"D-\")\n        } else if grade\
    \ <= grades_avg {\n            grades_letter = append(grades_letter, \"E\")\n\
    \        }\n    }\n    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmptqsom37i_test.go:89: expected '[A+ B C- C A-]', got '[A+\
    \ A+ A- A- A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmptqsom37i_test.go:89: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmptqsom37i_test.go:89: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmptqsom37i_test.go:89:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmptqsom37i_test.go:89: expected '[D D- C- B B+]', got '[A-\
    \ A- A- A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmptqsom37i_test.go:89: expected '[E D-]', got '[A- A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var result []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 2.0\
    \ {\n            grade = grade + 2.0\n        }\n        if grade < 1.0 {\n  \
    \          grade = grade + 1.0\n        }\n        if grade < 0.7 {\n        \
    \    grade = grade + 0.7\n        }\n        if grade < 0.3 {\n            grade\
    \ = grade + 0.3\n        }\n        if grade < 0.1 {\n            grade = grade\
    \ + 0.1\n        }\n        if grade < 0.01 {\n            grade = grade + 0.01\n\
    \        }\n        if grade < 0.001 {\n            grade = grade + 0.001\n  \
    \      }\n        if grade < 0.0001 {\n            grade = grade + 0.0001\n  \
    \      }\n        if grade < 0.00001 {\n            grade = grade + 0.00001\n\
    \        }\n        if grade < 0.000001 {\n            grade = grade + 0.0000001\n\
    \        }\n        if grade < 0.0000001 {\n            grade = grade + 0.00000001\n\
    \        }\n        if grade < 0.000000001 {\n            grade = grade + 0.000000001\n\
    \        }\n        if grade < 0.0000000001 {\n            grade = grade + 0.0000000001\n\
    \        }\n        if grade < 0.00000000001 {\n            grade = grade + 0.00000000001\n\
    \        }\n        if grade < 0.000000000001 {\n            grade = grade + 0.000000000001\n\
    \        }\n        if grade < 0.0000000000001 {\n            grade = grade +\
    \ 0.0000000000001\n        }\n        if grade < 0.00000000000001{\n         \
    \   grade = grade + 0.00000000000001\n        }\n        if grade < 0.000000000000001\
    \ {\n            grade = grade + 0.000000000000001\n        }\n        if grade\
    \ < 0.0000000000000001{\n            grade = grade + 0.0000000000000001\n    \
    \    }\n        if grade < 0.00000000000000001 {\n            grade = grade +\
    \ 0.00000000000000001\n        }\n        if grade < 0.000000000000000001{\n \
    \           grade = grade + 0.000000000000000001\n        }\n        if grade\
    \ < 0.0000000000000000001 {\n            grade = grade + 0.0000000000000000001\n\
    \        }\n        if grade < 0.00000000000000000001 {\n            grade = grade\
    \ + 0.00000000000000000001\n        }\n        if grade < 0.000000000000000000001\
    \ {\n            grade = grade + 0.00000000\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_mel0q3b_test.go:106:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n \
    \           letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n \
    \           letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n  \
    \          letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n  \
    \          letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n  \
    \          letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n   \
    \         letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n   \
    \         letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n    \
    \        letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n    \
    \        letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n    \
    \        letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n     \
    \       letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpj8rzmsii_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpj8rzmsii_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpj8rzmsii_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpj8rzmsii_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(grade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7tq_qbgn_test.go:72:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := 0; i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n\
    \    }\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwt0_0v8m_test.go:74:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(grade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1b10lysc_test.go:72:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyi11b8wa_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    \n    if\
    \ grades_count == 0 {\n        return []string{\"E\"}\n    }\n    \n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    \n    grades_diff := 0.0\n    for\
    \ _, grade := range grades {\n        grades_diff += grade - grades_avg\n    }\n\
    \    \n    grades_diff_avg := grades_diff / float64(grades_count)\n    \n    grades_diff_sqrt\
    \ := grades_diff_avg * grades_diff_avg\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grades_diff_sqrt_avg := grades_diff_sqrt\
    \ / float64(grades_count)\n    \n    grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiwy276xr_test.go:85:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_list := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_list\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_diff := grades_avg - float64(grades[0])\n\
    \    grades_diff_abs := math.Abs(grades_diff)\n    grades_diff_sign := grades_diff_abs\
    \ > 0.0 ? 1.0 : -1.0\n    grades_diff_abs *= grades_diff_sign\n    grades_diff_abs\
    \ /= 2.0\n    grades_diff_abs *= grades_diff\n    grades_diff_abs /= 2.0\n   \
    \ grades_diff_abs *= grades_diff\n    grades_diff_abs /= 2.0\n    grades_diff_abs\
    \ *= grades_diff\n    grades_diff_abs /= 2.0\n    grades_diff_abs *= grades_diff\n\
    \    grades_diff_abs /= 2.0\n    grades_diff_abs *= grades_diff\n    grades_diff_abs\
    \ /= 2.0\n    grades_diff_abs *= grades_diff\n    grades_diff_abs /= 2.0\n   \
    \ grades_diff_abs *= grades_diff\n    grades_diff_abs /= 2.0\n    grades_diff_abs\
    \ *= grades_diff\n    grades_diff_abs /= 2.0\n    grades_diff_abs *= grades_diff\n\
    \    grades_diff_abs /= 2.0\n    grades_diff_abs *= grades_diff\n    grades_diff_abs\
    \ /= 2.0\n    grades_diff_abs *= grades_diff\n    grades_diff_abs /= 2.0\n   \
    \ grades_diff_abs *= grades_diff\n    grades_diff_abs /= 2.0\n    grades_diff_abs\
    \ *= grades_diff\n    grades_diff_abs /= 2.0\n    grades_diff_abs *= grades_diff\n\
    \    grades_diff_abs /= 2.0\n    grades_diff_abs *= grades_diff\n    grades_diff_abs\
    \ /= 2.0\n    grades_diff_abs *= grades_diff\n    grades_diff_abs /= 2.0\n   \
    \ grades_diff_abs *= grades_diff\n    grades_diff_abs /= 2.0\n    grades_diff_abs\
    \ *= grades_diff\n    grades_diff_abs /= 2.0\n    grades_diff_abs *= grades_diff\n\
    \    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqqxfxdfz_test.go:43:47: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_list := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    for _, grade := range grades {\n        if grades_sum >= grade {\n\
    \            grades_list = append(grades_list, fmt.Sprintf(\"%+.2f\", grade))\n\
    \            grades_sum += grade - grades_sum\n            grades_count--\n  \
    \      } else {\n            grades_list = append(grades_list, fmt.Sprintf(\"\
    %+.2f\", grade))\n        }\n    }\n    if grades_count > 0 {\n        grades_list\
    \ = append(grades_list, \"E\")\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpt1o7h57b_test.go:70: expected '[A+ B C- C A-]', got '[+4.00\
    \ +3.00 +1.70 +2.00 +3.50 E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpt1o7h57b_test.go:70: expected '[D+]', got '[+1.20]'\n  \
    \  --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpt1o7h57b_test.go:70:\
    \ expected '[D-]', got '[+0.50]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpt1o7h57b_test.go:70: expected '[E]', got '[+0.00]'\n   \
    \ --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpt1o7h57b_test.go:70:\
    \ expected '[D D- C- B B+]', got '[+1.00 +0.30 +1.50 +2.80 +3.30 E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpt1o7h57b_test.go:70:\
    \ expected '[E D-]', got '[+0.00 +0.70 E]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_list := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \    }\n    for _, grade := range grades {\n        if grade >= grades_avg {\n\
    \            grades_list += []string{\"A+\"}\n        } else if grade > grades_avg\
    \ && grade < grades_avg + 0.3 {\n            grades_list += []string{\"A\"}\n\
    \        } else if grade > grades_avg + 0.3 && grade < grades_avg + 0.7 {\n  \
    \          grades_list += []string{\"A-\"}\n        } else if grade > grades_avg\
    \ + 0.7 && grade < grades_avg + 1.3 {\n            grades_list += []string{\"\
    B+\"}\n        } else if grade > grades_avg + 1.3 && grade < grades_avg + 1.7\
    \ {\n            grades_list += []string{\"B\"}\n        } else if grade > grades_avg\
    \ + 1.7 && grade < grades_avg + 2.3 {\n            grades_list += []string{\"\
    B-\"}\n        } else if grade > grades_avg + 2.3 && grade < grades_avg + 2.7\
    \ {\n            grades_list += []string{\"C+\"}\n        } else if grade > grades_avg\
    \ + 2.7 && grade < grades_avg + 3.3 {\n            grades_list += []string{\"\
    C\"}\n        } else if grade > grades_avg + 3.3 && grade < grades_avg + 3.7 {\n\
    \            grades_list += []string{\"C-\"}\n        } else if grade > grades_avg\
    \ + 3.7 && grade < grades_avg + 4.0 {\n            grades_list += []string{\"\
    D+\"}\n        } else if grade > grades_avg + 4.0 && grade < grades_avg + 4.7\
    \ {\n            grades_list += []string{\"D\"}\n        } else if grade > grades_avg\
    \ + 4.7 && grade < grades_avg + 5.3 {\n            grades_list += []string{\"\
    D-\"}\n        } else if grade > grades_avg + 5.3 && grade < grades_avg + 5.7\
    \ {\n            grades_list += []string{\"E\"}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphe2fbvhh_test.go:68:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n      \
    \      letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n     \
    \       letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n     \
    \       letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n    \
    \        letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n   \
    \         letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n  \
    \          letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n \
    \           letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n\
    \            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpo0fbbxpg_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpo0fbbxpg_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpo0fbbxpg_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpo0fbbxpg_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSor\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdbg7_i06_test.go:72:36: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i]\
    \ = \"-\"\n    }\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >=\
    \ 3.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 2.7 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >=\
    \ 2.3 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 1.7\
    \ {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.3\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >= 0.7 {\n\
    \            letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.3 {\n\
    \            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n \
    \           letterGrades[i] = \"D-\"\n        } else if grades[i] < 0.0 {\n  \
    \          letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp53u7p8my_test.go:78: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmp53u7p8my_test.go:78: expected '[D-]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp53u7p8my_test.go:78: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp53u7p8my_test.go:78:\
    \ expected '[D D- C- B B+]', got '[D+ D C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp53u7p8my_test.go:78: expected '[E D-]', got '[D- D+]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := append([]float64{}, grades...)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ grades\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7zsl3grx_test.go:66:46: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    if grades_count\
    \ == 0 {\n        return []string{\"E\"}\n    }\n    if grades_sum == 0 {\n  \
    \      return []string{\"D\"}\n    }\n    grades_avg := grades_sum / float64(grades_count)\n\
    \    grades_avg /= 4.0\n    grades_avg *= 4.0\n    grades_avg /= 3.0\n    grades_avg\
    \ *= 3.0\n    grades_avg /= 2.0\n    grades_avg *= 2.0\n    grades_avg /= 1.0\n\
    \    grades_avg *= 1.0\n    grades_avg /= 0.7\n    grades_avg *= 0.7\n    grades_avg\
    \ /= 1.0\n    grades_avg *= 1.0\n    grades_avg /= 2.0\n    grades_avg *= 2.0\n\
    \    grades_avg /= 3.0\n    grades_avg *= 3.0\n    grades_avg /= 4.0\n    grades_avg\
    \ *= 4.0\n    grades_avg /= 5.0\n    grades_avg *= 5.0\n    grades_avg /= 6.0\n\
    \    grades_avg *= 6.0\n    grades_avg /= 7.0\n    grades_avg *= 7.0\n    grades_avg\
    \ /= 8.0\n    grades_avg *= 8.0\n    grades_avg /= 9.0\n    grades_avg *= 9.0\n\
    \    grades_avg /= 10.0\n    grades_avg *= 10.0\n    grades_avg /= 11.0\n    grades_avg\
    \ *= 11.0\n    grades_avg /= 12.0\n    grades_avg *= 12.0\n    grades_avg /= 13.0\n\
    \    grades_avg *= 13.0\n    grades_avg /= 14.0\n    grades_avg *= 14.0\n    grades_avg\
    \ /= 15.0\n    grades_avg *= 15.0\n    grades_avg /= 16.0\n    grades_avg *= 16.0\n\
    \    grades_avg /= 17.0\n    grades_avg *= 17.0\n    grades_avg /= 18.0\n    grades_avg\
    \ *= 18.0\n    grades_avg /= 19.0\n    grades_avg *= 19.0\n    grades_avg /= 20.0\n\
    \    grades_avg *= 20.0\n    grades_avg /= 21.0\n    grades_avg *= 21.0\n    grades_avg\
    \ /= 22.0\n    grades_avg *= 22.0\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprxpy52yp_test.go:98:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_list := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_diff := grades_avg - float64(grades[0])\n        if grades_diff\
    \ > 0 {\n            grades_diff *= -1\n        }\n        grades_diff /= float64(grades_count)\n\
    \        for _, grade := range grades {\n            grades_diff += grade * float64(grades_count)\n\
    \            grades_diff /= float64(grades_count)\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ > 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ > 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ > 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ > 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ > 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ > 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ > 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ > 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ > 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ > 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ > 0 {\n                grades_diff *= -1\n            }\n            if grades_diff\
    \ < 0 {\n                grades_diff *= -1\n            }\n            if \nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp22ffhnfm_test.go:117:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_diff := grades_avg - float64(grades[0])\n\
    \    grades_diff_sign := math.Sign(grades_diff)\n    grades_diff_abs := grades_diff\n\
    \    if grades_diff_sign > 0 {\n        grades_diff_abs = grades_diff_abs * -1\n\
    \    }\n    grades_diff_abs = math.Abs(grades_diff_abs)\n    grades_diff_abs =\
    \ grades_diff_abs / float64(grades_count)\n    grades_diff_abs = grades_diff_abs\
    \ * float64(grades_count)\n    grades_diff_abs = grades_diff_abs / float64(grades_count)\n\
    \    grades_diff_abs = grades_diff_abs * float64(grades_count)\n    grades_diff_abs\
    \ = grades_diff_abs / float64(grades_count)\n    grades_diff_abs = grades_diff_abs\
    \ * float64(grades_count)\n    grades_diff_abs = grades_diff_abs / float64(grades_count)\n\
    \    grades_diff_abs = grades_diff_abs * float64(grades_count)\n    grades_diff_abs\
    \ = grades_diff_abs / float64(grades_count)\n    grades_diff_abs = grades_diff_abs\
    \ * float64(grades_count)\n    grades_diff_abs = grades_diff_abs / float64(grades_count)\n\
    \    grades_diff_abs = grades_diff_abs * float64(grades_count)\n    grades_diff_abs\
    \ = grades_diff_abs / float64(grades_count)\n    grades_diff_abs = grades_diff_abs\
    \ * float64(grades_count)\n    grades_diff_abs = grades_diff_abs / float64(grades_count)\n\
    \    grades_diff_abs = grades_diff_abs * float64(grades_count)\n    grades_diff_abs\
    \ = grades_diff_abs / float64(grades_count)\n    grades_diff_abs = grades_diff_abs\
    \ * float64(grades_count)\n    grades_diff_abs = grades_diff_abs / float64(grades_count)\n\
    \    grades_diff_abs = grades_diff_abs * float64(grades_count)\n    grades_diff_abs\
    \ = grades_diff_abs / float64(grades_count)\n    grades_diff_abs = grades_diff_abs\
    \ * float64(grades_count)\n    grades_diff_abs = grades_diff_\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0ow687ke_test.go:67:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(grade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7tq_qbgn_test.go:72:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n\
    \            letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n\
    \            letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n\
    \            letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n\
    \            letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n\
    \            letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n\
    \            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpgl5l5tiu_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpgl5l5tiu_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpgl5l5tiu_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpgl5l5tiu_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    gradesMax := grades[gradesLen-1]\n    gradesMin\
    \ := grades[0]\n    gradesAvg := grades[gradesLen-1] / float64(gradesLen)\n  \
    \  gradesSum = gradesMax + gradesAvg\n    gradesSum += gradesMin\n    gradesSum\
    \ -= gradesAvg\n    gradesSum = gradesSum / float64(gradesLen)\n    gradesSum\
    \ = gradesSum * float64(gradesLen)\n    gradesSum = gradesSum + gradesAvg\n  \
    \  gradesSum = gradesSum / float64(gradesLen)\n    gradesSum = gradesSum * float64(gradesLen)\n\
    \    gradesSum = gradesSum + gradesAvg\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum * float64(gradesLen)\n    gradesSum = gradesSum + gradesAvg\n\
    \    gradesSum = gradesSum / float64(gradesLen)\n    gradesSum = gradesSum * float64(gradesLen)\n\
    \    gradesSum = gradesSum + gradesAvg\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum * float64(gradesLen)\n    gradesSum = gradesSum + gradesAvg\n\
    \    gradesSum = gradesSum / float64(gradesLen)\n    gradesSum = gradesSum * float64(gradesLen)\n\
    \    gradesSum = gradesSum + gradesAvg\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum * float64(gradesLen)\n    gradesSum = gradesSum + gradesAvg\n\
    \    gradesSum = gradesSum / float64(gradesLen)\n    gradesSum = gradesSum * float64(gradesLen)\n\
    \    gradesSum = gradesSum + gradesAvg\n    gradesSum = gradesSum / float64(gradesLen)\n\
    \    gradesSum = gradesSum * float64(gradesLen)\n    gradesSum = gradesSum + gradesAvg\n\
    \    gradesSum = gradesSum / float64(gradesLen)\n    gradesSum = gradesSum * float64\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdx7yxvxj_test.go:66:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    // The first letter grade is always A+\n    letterGrades[0] = \"A+\"\
    \n    \n    // The last letter grade is always D-\n    letterGrades[gradesLen\
    \ - 1] = \"D-\"\n    \n    // The middle letter grades are calculated using the\
    \ following formula:\n    // letterGrades[gradesLen - 2] = letterGrades[gradesLen\
    \ - 1] + \"+\" \n    // letterGrades[gradesLen - 1] = letterGrades[gradesLen -\
    \ 2] + \"-\"\n    for i := gradesLen - 2; i >= 0; i-- {\n        letterGrades[i]\
    \ = letterGrades[i+1] + \"+\" \n        letterGrades[i+1] = letterGrades[i+2]\
    \ + \"-\"\n    }\n    \n    // The last letter grade is calculated using the following\
    \ formula:\n    // letterGrades[gradesLen - 1] = \"D+\"\n    letterGrades[gradesLen\
    \ - 1] = \"D+\"\n    \n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out\
    \ of range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513720, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade(...)\n\t/tmp/tmpd1009b98_test.go:44\n\
    command-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\t/tmp/tmpd1009b98_test.go:61\
    \ +0xaf9\ntesting.tRunner(0xc0001924e0, 0x529058)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    // The first letter grade is always A+\n    letterGrades[0] = \"A+\"\
    \n    \n    // The last letter grade is always E\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    \n    // The middle letter grades are the letter grades using the\
    \ formula\n    // GPA - 2.7\n    // GPA - 2.3\n    // GPA - 2.0\n    // GPA -\
    \ 1.7\n    // GPA - 1.3\n    // GPA - 1.0\n    // GPA - 0.7\n    // GPA - 0.0\n\
    \    for i := 1; i < gradesLen; i++ {\n        letterGrades[i] = \"A+\"\n    \
    \    if grades[i-1] > 2.7 {\n            letterGrades[i] = \"A\"\n        }\n\
    \        if grades[i-1] > 2.3 {\n            letterGrades[i] = \"A-\"\n      \
    \  }\n        if grades[i-1] > 2.0 {\n            letterGrades[i] = \"B+\"\n \
    \       }\n        if grades[i-1] > 1.7 {\n            letterGrades[i] = \"B\"\
    \n        }\n        if grades[i-1] > 1.3 {\n            letterGrades[i] = \"\
    B-\"\n        }\n        if grades[i-1] > 1.0 {\n            letterGrades[i] =\
    \ \"C+\"\n        }\n        if grades[i-1] > 0.7 {\n            letterGrades[i]\
    \ = \"C\"\n        }\n        if grades[i-1] > 0.0 {\n            letterGrades[i]\
    \ = \"C-\"\n        }\n        if grades[i-1] < 0.0 {\n            letterGrades[i]\
    \ = \"D+\"\n        }\n        if grades[i-1] < 0.7 {\n            letterGrades[i]\
    \ = \"D\"\n        }\n        if grades[i-1] < 1.0 {\n            letterGrades[i]\
    \ = \"D-\"\n        }\n        if grades[i-1] < 1.3 {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp4m279mp6_test.go:108: expected '[A+ B C- C A-]', got '[A+\
    \ C- C- C- C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp4m279mp6_test.go:108: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp4m279mp6_test.go:108: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp4m279mp6_test.go:108:\
    \ expected '[D D- C- B B+]', got '[A+ E E C- C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp4m279mp6_test.go:108: expected '[E D-]', got '[A+ E]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := append([]float64{}, grades...)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ grades\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7zsl3grx_test.go:66:46: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen - 1] = \"E\"\n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.7 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 4.0 && grades[i] < 4.7 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 4.7 && grades[i] < 5.0 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 5.0 && grades[i] < 5.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 5.7 && grades[i] < 6.0 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] >= 6.0 && grades[i]\
    \ < 6.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 6.7 && grades[i] < 7.0 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 7.0 && grades[i] < 7.7 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 7.7 && grades[i] < 8.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 8.0 && grades[i] < 8.7 {\n         \
    \   letterGrades[i] = \"D-\"\n        } else if grades[i] >= 8.7 && grades[i]\
    \ < 9.0 {\n            letterGrades[i] = \"E\"\n        } else {\n           \
    \ letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpf9qlivlk_test.go:86: expected '[A+ B C- C A-]', got '[B+\
    \ A A+ A+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpf9qlivlk_test.go:86: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpf9qlivlk_test.go:86: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpf9qlivlk_test.go:86:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpf9qlivlk_test.go:86: expected '[D D- C- B B+]', got '[A+\
    \ A+ A+ A+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpf9qlivlk_test.go:86: expected '[E D-]', got '[A+ A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := make([]string, len(grades))\n    for i := 0; i < len(grades); i++\
    \ {\n        if grades[i] >= 3.0 {\n            result[i] = \"A+\"\n        }\
    \ else if grades[i] >= 2.7 {\n            result[i] = \"B+\"\n        } else if\
    \ grades[i] >= 2.3 {\n            result[i] = \"B\"\n        } else if grades[i]\
    \ >= 1.7 && grades[i] <= 1.3 {\n            result[i] = \"C+\"\n        } else\
    \ if grades[i] >= 1.1 && grades[i] <= 0.7 {\n            result[i] = \"C\"\n \
    \       } else if grades[i] >= 0.7 && grades[i] <= 0.3 {\n            result[i]\
    \ = \"C-\"\n        } else if grades[i] >= 0.1 && grades[i] <= 0.0 {\n       \
    \     result[i] = \"D+\"\n        } else if grades[i] <= -0.1 {\n            result[i]\
    \ = \"D\"\n        } else {\n            result[i] = \"D-\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpasldveni_test.go:73: expected '[A+ B C- C A-]', got '[A+\
    \ A+ D- D- A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpasldveni_test.go:73: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpasldveni_test.go:73: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpasldveni_test.go:73:\
    \ expected '[D D- C- B B+]', got '[D- D- D- B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpasldveni_test.go:73: expected '[E D-]', got '[D- D-]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := append([]float64{}, grades...)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ grades\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7zsl3grx_test.go:66:46: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    result := []string{}\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 3.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade > 2.0 {\n  \
    \          grade = grade - 2.0\n        }\n        if grade < 2.0 {\n        \
    \    grade = grade + 2.0\n        }\n        if grade > 1.0 {\n            grade\
    \ = grade - 1.0\n        }\n        if grade < 1.0 {\n            grade = grade\
    \ + 1.0\n        }\n        if grade > 0.7 && grade < 1.0 {\n            grade\
    \ = grade - 0.7\n        }\n        if grade < 0.7 && grade > 0.0 {\n        \
    \    grade = grade + 0.7\n        }\n        if grade > 0.0 {\n            grade\
    \ = grade - 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade > 0.0 && grade < 0.7 {\n            grade\
    \ = grade - 0.0\n        }\n        if grade < 0.0 && grade > 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade > 0.0 && grade < 0.3 {\n\
    \            grade = grade - 0.0\n        }\n        if grade < 0.0 && grade >\
    \ 0.0 {\n            grade = grade + 0.0\n        }\n        if grade > 0.0 &&\
    \ grade < 0.2 {\n            grade = grade - 0.0\n        }\n        if grade\
    \ < 0.0 && grade > 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade > 0.0 && grade < 0.1 {\n            grade = grade - 0.0\n        }\n\
    \        if grade < 0.0 && grade > 0.0 {\n            grade = grade + 0.0\n  \
    \      }\n        if grade > 0.0 && grade < 0.1 {\n            grade = grade -\
    \ 0.0\n        }\n        if grade < 0.0 && grade > 0.0 {\n            grade =\
    \ grade + 0.0\n        }\n        if grade > 0.0 && grade < 0.1 {\n          \
    \  grade = grade - 0.0\n        }\n        if grade < 0.0 && grade > 0.0 {\n \
    \           grade = grade + 0.0\n        }\n        if grade > 0.0 && grade <\
    \ 0.1 {\n            grade = grade - 0.0\n        }\n        if grade < 0.0 &&\
    \ grade > 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ > 0.0 && \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgirnfqsi_test.go:105:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := append([]float64{}, grades...)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ grades\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7zsl3grx_test.go:66:46: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    \n    // The first element is the GPA of\
    \ the student who has graded the letter grade\n    grades_string[0] = fmt.Sprintf(\"\
    %.2f\", grades[0])\n    \n    // The rest of the elements are the letter grades\n\
    \    for i := 1; i < len(grades); i++ {\n        if grades[i] >= 3.0 {\n     \
    \       grades_string[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n    \
    \        grades_string[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n    \
    \        grades_string[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            grades_string[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            grades_string[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            grades_string[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            grades_string[i] = \"D\"\n        } else\
    \ if grades[i] < 1.0 {\n            grades_string[i] = \"D-\"\n        } else\
    \ {\n            grades_string[i] = \"E\"\n        }\n    }\n    \n    return\
    \ grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out\
    \ of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513720, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000c45f8?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmpy2tdlagv_test.go:33 +0x6f\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmpy2tdlagv_test.go:68 +0xc2\ntesting.tRunner(0xc0001924e0, 0x529060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            grades_string = append(grades_string, \"B-\")\n \
    \       } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -0.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -0.7 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -1.0 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -1.7 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -2.0 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -2.7 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -3.0 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -3.7 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -4.0 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -4.7 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -5.0 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -5.7 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -6.0 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -6.7 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > -7.0 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > \nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppe_fllkb_test.go:79:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    \n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        \n        for _, grade := range grades {\n            if grade >= grades_avg\
    \ {\n                grades_letter = append(grades_letter, \"A+\")\n         \
    \   } else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A-\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"B+\")\n            } else if grade < grades_avg {\n\
    \                grades_letter = append(grades_letter, \"B\")\n            } else\
    \ if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"B-\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"C+\")\n            } else if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"C\")\n            } else\
    \ if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"C-\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"D+\")\n            } else if grade < grades_avg {\n\
    \                grades_letter = append(grades_letter, \"D\")\n            } else\
    \ if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"D-\")\n            } else {\n                grades_letter = append(grades_letter,\
    \ \"E\")\n            }\n        }\n    }\n    return grades_letter\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpqz48gq3c_test.go:90: expected '[A+ B C- C A-]', got '[A+\
    \ A+ A- A- A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpqz48gq3c_test.go:90: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpqz48gq3c_test.go:90: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpqz48gq3c_test.go:90:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpqz48gq3c_test.go:90: expected '[D D- C- B B+]', got '[A-\
    \ A- A- A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpqz48gq3c_test.go:90: expected '[E D-]', got '[A- A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    gradesSorted := append([]float64{}, grades...)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ grades\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7zsl3grx_test.go:66:46: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades []float64) []string {\n\
    \    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    for _, grade := range grades {\n        if grades_sum > grade {\n\
    \            grades_letter = append(grades_letter, \"D-\")\n            grades_sum\
    \ -= grade\n        } else if grades_sum < grade {\n            grades_letter\
    \ = append(grades_letter, \"D+\")\n            grades_sum += grade\n        }\
    \ else if grades_sum == grade {\n            grades_letter = append(grades_letter,\
    \ \"D\")\n        }\n    }\n    for _, grade := range grades {\n        if grades_count\
    \ > 0 {\n            grades_letter = append(grades_letter, fmt.Sprintf(\"%+.2f\"\
    , grade))\n            grades_count--\n        }\n    }\n    return grades_letter\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp3jd9si76_test.go:75: expected '[A+ B C- C A-]', got '[D-\
    \ D- D- D- D+ +4.00 +3.00 +1.70 +2.00 +3.50]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmp3jd9si76_test.go:75: expected '[D+]', got '[D +1.20]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp3jd9si76_test.go:75:\
    \ expected '[D-]', got '[D +0.50]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp3jd9si76_test.go:75: expected '[E]', got '[D +0.00]'\n \
    \   --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3jd9si76_test.go:75:\
    \ expected '[D D- C- B B+]', got '[D- D- D- D- D+ +1.00 +0.30 +1.50 +2.80 +3.30]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp3jd9si76_test.go:75:\
    \ expected '[E D-]', got '[D- D +0.00 +0.70]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075427
