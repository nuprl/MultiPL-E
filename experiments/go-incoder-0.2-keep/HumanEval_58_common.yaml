name: HumanEval_58_common
language: go_test.go
prompt: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653,\
  \ 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8],\
  \ [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n"
tests: "func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
  \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
  \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        if seen[v] {\n            continue\n        }\n\
    \        seen[v] = true\n        result = append(result, v)\n    }\n    for _,\
    \ v := range l2 {\n        if seen[v] {\n            continue\n        }\n   \
    \     seen[v] = true\n        result = append(result, v)\n    }\n    return append(result,\
    \ l1...)\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n   \
    \     m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n", "    result := make([]int, 0)\n    for _, x := range l1 {\n        for _,\
    \ y := range l2 {\n            if x == y {\n                result = append(result,\
    \ x)\n            }\n        }\n    }\n    return append(result, l2...)\n}\n",
  "    m := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n     \
    \   m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    sort\"\n)\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n\
    \        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n  \
    \  var res []int\n    for v := range m {\n        if m[v] == 0 {\n           \
    \ res = append(res, v)\n        }\n    }\n    return res\n}\n", "    m := make(map[int]int,\
    \ len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n    }\n    for\
    \ _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int, 0, len(m))\n\
    \    for v := range m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    m := make(map[int]bool, len(l1))\n    result :=\
    \ make([]int, 0)\n    for _, v := range l1 {\n        m[v] = true\n    }\n   \
    \ for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int, len(l1))\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    var result []int\n    for v := range m {\n       \
    \ if m[v] == 0 {\n            result = append(result, v)\n        }\n    }\n \
    \   return append(result, 0)\n}\n", "    result := make([]int, 0)\n    for _,\
    \ x := range l1 {\n        for _, y := range l2 {\n            if x == y {\n \
    \               result = append(result, x)\n            }\n        }\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n", "    m := make(map[int]bool,\
    \ len(l1))\n    for _, v := range l1 {\n        m[v] = true\n    }\n    for _,\
    \ v := range l2 {\n        if _, ok := m[v]; !ok {\n            return nil\n \
    \       }\n    }\n    return make([]int, 0, len(m))\n}\n", "    result := make([]int,\
    \ 0)\n    for _, x := range l1 {\n        if _, ok := l2[x]; ok {\n          \
    \  result = append(result, x)\n        }\n    }\n    for _, x := range l2 {\n\
    \        if _, ok := l1[x]; ok {\n            result = append(result, x)\n   \
    \     }\n    }\n    return append(result, l1...)\n}\n", "    m := map[int]int{}\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    return append(result, 0)\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ v := range l1 {\n        if seen[v] {\n            continue\n        }\n   \
    \     seen[v] = true\n        result = append(result, v)\n    }\n    for _, v\
    \ := range l2 {\n        if seen[v] {\n            continue\n        }\n     \
    \   seen[v] = true\n        result = append(result, v)\n    }\n    return append(result,\
    \ l1...)\n}\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1\
    \ {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n\
    \    result := make([]int, 0, len(m))\n    for v := range m {\n        result\
    \ = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var res []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n", "    m := make(map[int]int, len(l1))\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n</code>\n<|/ a tags=sorting,algorithm,go |>\n<| a tags=sorting,algorithm,go\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n", "   \
    \ result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    for _, v := range l2\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ v := range l1 {\n        if seen[v] {\n            continue\n        }\n   \
    \     seen[v] = true\n        result = append(result, v)\n    }\n    for _, v\
    \ := range l2 {\n        if seen[v] {\n            continue\n        }\n     \
    \   seen[v] = true\n        result = append(result, v)\n    }\n    return append(result,\
    \ l1...)\n}\n", "    result := make([]int, 0)\n    for _, i := range l1 {\n  \
    \      for _, j := range l2 {\n            if i == j {\n                continue\n\
    \            }\n            if i > j {\n                break\n            }\n\
    \            result = append(result, i)\n        }\n    }\n    return append(result,\
    \ l2...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]bool, len(l1))\n    result\
    \ := make([]int, 0)\n    for _, v := range l1 {\n        m[v] = true\n    }\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    j := 0\n    for i := 0; i < len(l1); i++ {\n        if j == len(l2) {\n \
    \           break\n        }\n        if l1[i] == l2[j] {\n            result\
    \ = append(result, l1[i])\n            j++\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    j := 0\n    for i := 0; i < len(l1);\
    \ i++ {\n        for k := 0; k < len(l2); k++ {\n            if l1[i] == l2[k]\
    \ {\n                j++\n            }\n        }\n        if j > 0 {\n     \
    \       result = append(result, l1[i])\n            j = 0\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]int, len(l1))\n    for _, v :=\
    \ range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n\
    \    }\n    result := make([]int, 0, len(m))\n    for v := range m {\n       \
    \ result = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ v := range l1 {\n        if seen[v] {\n            continue\n        }\n   \
    \     seen[v] = true\n        result = append(result, v)\n    }\n    for _, v\
    \ := range l2 {\n        if seen[v] {\n            continue\n        }\n     \
    \   seen[v] = true\n        result = append(result, v)\n    }\n    return append(result,\
    \ l1...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]int, len(l1)+len(l2))\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]++\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1\
    \ {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n\
    \    result := make([]int, 0, len(m))\n    for v := range m {\n        result\
    \ = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    for _, v := range l2\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n     \
    \   m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    m := make(map[int]bool)\n\
    \    result := make([]int, 0)\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := m[v]; ok {\n         \
    \   result = append(result, v)\n        }\n    }\n    return result\n}\n", " \
    \   m := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n    \
    \    m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    m := make(map[int]bool,\
    \ len(l1))\n    for _, v := range l1 {\n        m[v] = true\n    }\n    for _,\
    \ v := range l2 {\n        if _, ok := m[v]; !ok {\n            return nil\n \
    \       }\n    }\n    return make([]int, 0, len(m))\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if _, ok := m[v]; !ok {\n            return nil\n        }\n \
    \   }\n    return make([]int, 0, len(m))\n}\n", "    result := make([]int, 0)\n\
    \    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if _, ok := m[v]; !ok {\n            return nil\n        }\n \
    \   }\n    return make([]int, 0, len(m))\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if _, ok := m[v]; !ok {\n            return nil\n        }\n \
    \   }\n    return make([]int, 0, len(m))\n}\n", "    result := make([]int, 0)\n\
    \    for _, x := range l1 {\n        if !contains(result, x) {\n            result\
    \ = append(result, x)\n        }\n    }\n    for _, x := range l2 {\n        if\
    \ !contains(result, x) {\n            result = append(result, x)\n        }\n\
    \    }\n    return sort(result)\n}\n", "    m := make(map[int]int, len(l1))\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n   \
    \     m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]", "    result :=\
    \ make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    for _, v := range l2 {\n     \
    \   if seen[v] {\n            continue\n        }\n        seen[v] = true\n  \
    \      result = append(result, v)\n    }\n    return append(result, l1...)\n}\n",
  "    m := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; ok {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]bool, len(l1))\n    result :=\
    \ make([]int, 0)\n    for _, v := range l1 {\n        m[v] = true\n    }\n   \
    \ for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for _, x := range l1 {\n        for _, y := range l2 {\n            if x\
    \ == y {\n                result = append(result, x)\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool,\
    \ len(l1))\n    result := make([]int, 0)\n    for _, v := range l1 {\n       \
    \ m[v] = true\n    }\n    for _, v := range l2 {\n        if m[v] {\n        \
    \    result = append(result, v)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v :=\
    \ range l1 {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    for _, v := range l2\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n", "    result := make([]int, 0)\n    for _, x := range l1 {\n        if _,\
    \ ok := l2[x]; ok {\n            result = append(result, x)\n        }\n    }\n\
    \    for _, x := range l2 {\n        if _, ok := l1[x]; ok {\n            result\
    \ = append(result, x)\n        }\n    }\n    return append(result, l1...)\n}\n",
  "    m := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n     \
    \   m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    m := map[int]int{}\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    m := make(map[int]bool, len(l1))\n    result := make([]int,\
    \ 0, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n    }\n    for\
    \ _, v := range l2 {\n        if m[v] {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    m := make(map[int]int, len(l1))\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1\
    \ {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n\
    \    result := make([]int, 0, len(m))\n    for v := range m {\n        result\
    \ = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    m := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n\
    \    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n   \
    \     m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n     \
    \   m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    m := make(map[int]int,\
    \ len(l1))\n    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v :=\
    \ range l2 {\n        m[v]--\n    }\n    result := make([]int, 0, len(m))\n  \
    \  for v := range m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    m := make(map[int]int, len(l1))\n    for _, v :=\
    \ range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n\
    \    }\n    result := make([]int, 0, len(m))\n    for v := range m {\n       \
    \ result = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    result := make([]int,\
    \ 0)\n    j := 0\n    for i := 0; i < len(l1); i++ {\n        for k := 0; k <\
    \ len(l2); k++ {\n            if l1[i] == l2[k] {\n                j++\n     \
    \       }\n        }\n        result = append(result, l1[i])\n    }\n    for k\
    \ := 0; k < len(l2); k++ {\n        result = append(result, l2[k])\n    }\n  \
    \  for k := 0; k < len(l1); k++ {\n        result = append(result, l1[k])\n  \
    \  }\n    return append(result, l1...)\n}\n", "    m := make(map[int]int, len(l1))\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1\
    \ {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n\
    \    result := make([]int, 0, len(m))\n    for v := range m {\n        result\
    \ = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    m := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n     \
    \   m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    j := 0\n    for i := 0; i < len(l1); i++ {\n        for k := 0; k <\
    \ len(l2); k++ {\n            if l1[i] == l2[k] {\n                j++\n     \
    \       }\n        }\n        if j > 0 {\n            result = append(result,\
    \ l1[i])\n            j = 0\n        }\n    }\n    return result\n}\n", "    m\
    \ := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n        \
    \    return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n", " \
    \   m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var result []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return append(result, 0)\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    m := make(map[int]int,\
    \ len(l1))\n    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v :=\
    \ range l2 {\n        m[v]--\n    }\n    result := make([]int, 0, len(m))\n  \
    \  for v := range m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := map[int]bool{}\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v :=\
    \ range l2 {\n        if m[v] {\n            result = append(result, v)\n    \
    \    }\n    }\n    return result\n}\n", "    m := make(map[int]int, len(l1))\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    m := make(map[int]int, len(l1)+len(l2))\n    for _, v :=\
    \ range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n\
    \    }\n    result := make([]int, 0, len(m))\n    for v := range m {\n       \
    \ result = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ v := range l1 {\n        if seen[v] {\n            continue\n        }\n   \
    \     seen[v] = true\n        result = append(result, v)\n    }\n    for _, v\
    \ := range l2 {\n        if seen[v] {\n            continue\n        }\n     \
    \   seen[v] = true\n        result = append(result, v)\n    }\n    return append(result,\
    \ l1...)\n}\n", "    m := make(map[int]int)\n    for _, v := range l1 {\n    \
    \    m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    result := make([]int,\
    \ 0)\n    for _, x := range l1 {\n        for _, y := range l2 {\n           \
    \ if x == y {\n                result = append(result, x)\n            }\n   \
    \     }\n    }\n    return append(result, l2...)\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    var res []int\n    for v := range m {\n        if\
    \ m[v] == 0 {\n            res = append(res, v)\n        }\n    }\n    return\
    \ res\n}\n", "    result := make([]int, 0)\n    result := append(result, l1...)\n\
    \    result := append(result, l2...)\n    sort.Ints(result)\n    return result\n\
    }\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] =\
    \ true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n \
    \           return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n", "    m := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n\
    \        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n  \
    \  result := make([]int, 0, len(m))\n    for v := range m {\n        result =\
    \ append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    result := append(result, l1...)\n    result\
    \ := append(result, l2...)\n    sort.Ints(result)\n    return result\n}\n", " \
    \   m := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n\
    \    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n", "    m := make(map[int]bool,\
    \ len(l1))\n    result := make([]int, 0, len(l1))\n    for _, v := range l1 {\n\
    \        m[v] = true\n    }\n    for _, v := range l2 {\n        if m[v] {\n \
    \           result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n     \
    \   m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    m := make(map[int]bool)\n\
    \    result := make([]int, 0)\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return append(result, l1...)\n}\n", "    m := make(map[int]int,\
    \ len(l1))\n    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v :=\
    \ range l2 {\n        m[v]--\n    }\n    result := make([]int, 0, len(m))\n  \
    \  for v := range m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    for _, v := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v == v2 {\n          \
    \      result = append(result, v)\n            }\n        }\n    }\n    return\
    \ append(result, l2...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]int, len(l1)+len(l2))\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]++\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    m := make(map[int]int)\n    for _, v := range l1 {\n    \
    \    m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var\
    \ result []int\n    for v := range m {\n        if m[v] == 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    return append(result, 0)\n}\n", " \
    \   result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v :=\
    \ range l1 {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    for _, v := range l2\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ v := range l1 {\n        if seen[v] {\n            continue\n        }\n   \
    \     seen[v] = true\n        result = append(result, v)\n    }\n    for _, v\
    \ := range l2 {\n        if seen[v] {\n            continue\n        }\n     \
    \   seen[v] = true\n        result = append(result, v)\n    }\n    return append(result,\
    \ l1...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]int, len(l1))\n    for _,\
    \ v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n       \
    \ m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range m {\n\
    \        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]int, len(l1)+len(l2))\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]++\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1\
    \ {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n\
    \    var res []int\n    for v := range m {\n        if m[v] == 0 {\n         \
    \   res = append(res, v)\n        }\n    }\n    return res\n}\n", "    m := make(map[int]bool,\
    \ len(l1))\n    for _, v := range l1 {\n        m[v] = true\n    }\n    for _,\
    \ v := range l2 {\n        if _, ok := m[v]; !ok {\n            return nil\n \
    \       }\n    }\n    return make([]int, 0, len(m))\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    m := make(map[int]bool,\
    \ len(l1))\n    for _, v := range l1 {\n        m[v] = true\n    }\n    for _,\
    \ v := range l2 {\n        if m[v] {\n            return append([]int{v}, l1[len(l1)-1])\n\
    \        }\n    }\n    return nil\n}\n", "    m := make(map[int]int, len(l1)+len(l2))\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]++\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    m := make(map[int]int)\n    for _, v := range l1 {\n    \
    \    m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, x := range l1 {\n        for _, y := range l2 {\n           \
    \ if x == y {\n                result = append(result, x)\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for _, x := range l1 {\n  \
    \      for _, y := range l2 {\n            if x == y {\n                result\
    \ = append(result, x)\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n  \
    \  }\n    var result []int\n    for v := range m {\n        if m[v] == 0 {\n \
    \           result = append(result, v)\n        }\n    }\n    return append(result,\
    \ 0)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n  \
    \  for _, v := range l1 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    for\
    \ _, v := range l2 {\n        if seen[v] {\n            continue\n        }\n\
    \        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]int, len(l1))\n    for _,\
    \ v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n       \
    \ m[v]--\n    }\n    var res []int\n    for v := range m {\n        if m[v] ==\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
  "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    for _, v := range l2\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n", "    m := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n\
    \        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n  \
    \  result := make([]int, 0, len(m))\n    for v := range m {\n        result =\
    \ append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n", " \
    \   m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n", "    m := make(map[int]int,\
    \ len(l1))\n    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v :=\
    \ range l2 {\n        m[v]--\n    }\n    result := make([]int, 0, len(m))\n  \
    \  for v := range m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]int, len(l1))\n    for _,\
    \ v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n       \
    \ m[v]--\n    }\n    var res []int\n    for v := range m {\n        if m[v] ==\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
  "    m := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v]\
    \ = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n\
    \            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n     \
    \   m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var\
    \ res []int\n    for v := range m {\n        if m[v] == 0 {\n            res =\
    \ append(res, v)\n        }\n    }\n    return res\n}\n", "    m := make(map[int]int,\
    \ len(l1))\n    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v :=\
    \ range l2 {\n        m[v]--\n    }\n    result := make([]int, 0, len(m))\n  \
    \  for v := range m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    m := make(map[int]int, len(l1))\n    for _, v :=\
    \ range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n\
    \    }\n    var res []int\n    for v := range m {\n        if m[v] == 0 {\n  \
    \          res = append(res, v)\n        }\n    }\n    return res\n}\n", "   \
    \ m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var result []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return append(result, 0)\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n</code>\n<|/ a tags=go,sorting |>\n<| c |>\nThis solution does not\
    \ work if there are duplicates in the lists.\n<|/ c |>\n<| c |>\nIt does work\
    \ if there are duplicates in the lists. You just need to add `map[int]int` to\
    \ your `common` function and increment the count in the map instead of adding\
    \ it to the list. I've updated the answer to show this.\n<|/ c |>\n<| c |>\nThis\
    \ solution does not work if there are duplicates in the lists.\n<|/ c |>\n<| c\
    \ |>\nIt does work if there are duplicates in the lists. You just need to add\
    \ `map[int]int` to your `common` function and increment the count in the map instead\
    \ of adding it to the list. I've updated the answer to show this.\n<|/ c |>\n\
    <| a tags=go,sorting |>\nI wrote a package that does this for you:\nhttps://github.com/jmoiron/go-set\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/jmoiron/go-set\"\
    \n)\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        if seen[v] {\n            continue\n        }\n\
    \        seen[v] = true\n        result = append(result, v)\n    }\n    for _,\
    \ v := range l2 {\n        if seen[v] {\n            continue\n        }\n   \
    \     seen[v] = true\n        result = append(result, v)\n    }\n    return append(result,\
    \ l1...)\n}\n", "    m := make(map[int]int, len(l1)+len(l2))\n    for _, v :=\
    \ range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n\
    \    }\n    result := make([]int, 0, len(m))\n    for v := range m {\n       \
    \ result = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ v := range l1 {\n        if seen[v] {\n            continue\n        }\n   \
    \     seen[v] = true\n        result = append(result, v)\n    }\n    for _, v\
    \ := range l2 {\n        if seen[v] {\n            continue\n        }\n     \
    \   seen[v] = true\n        result = append(result, v)\n    }\n    return append(result,\
    \ l1...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]int, len(l1))\n    for _,\
    \ v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n       \
    \ m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range m {\n\
    \        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n   \
    \     m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n", "    m := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n    \
    \    m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n     \
    \   m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    m := make(map[int]int,\
    \ len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n    }\n    for\
    \ _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int, 0, len(m))\n\
    \    for v := range m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]int, len(l1))\n    for _,\
    \ v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n       \
    \ m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range m {\n\
    \        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := m[v]; !ok {\n            return nil\n        }\n    }\n    return make([]int,\
    \ 0, len(m))\n}\n", "    m := make(map[int]bool, len(l1))\n    result := make([]int,\
    \ 0, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n    }\n    for\
    \ _, v := range l2 {\n        if m[v] {\n            result = append(result, v)\n\
    \            m[v] = false\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n", "    m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n     \
    \   m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result\
    \ := make([]int, 0, len(m))\n    for v := range m {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Very elegant and simple.\n\
    <|/ c |>\n<| c |>\nI like this answer because it doesn't require a library and\
    \ it's easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Very elegant and simple.\n<|/ c |>\n<| c |>\nI like this answer because it doesn't\
    \ require a library and it's easy to understand.\n<|/ c |>\n<| c |>\nI like this\
    \ answer because it doesn't require a library and it's easy to understand.\n<|/\
    \ c |>\n<| a tags=algorithm,sorting,go |>\nI like using sort.IntSlice\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    m := make(map[int]int,\
    \ len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n    }\n    for\
    \ _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int, 0, len(m))\n\
    \    for v := range m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := make(map[int]int, len(l1))\n    for _,\
    \ v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n       \
    \ m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range m {\n\
    \        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
