language: go_test.go
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c > a {\n\
    \        return -1\n    }\n    \n    return float64(a * b * c) / float64(4.0 *\
    \ float64(a + b + c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwq7pm79n_test.go:54: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwq7pm79n_test.go:54:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwq7pm79n_test.go:54: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwq7pm79n_test.go:54:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwq7pm79n_test.go:54: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    area_triangle := 0.0\n    if a + b > c {\n      \
    \  return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if b +\
    \ c > a {\n        return -1\n    }\n    area_triangle = float64(a+b+c) / 2\n\
    \    return round(area_triangle, 2)\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9kipljy_test.go:28:12: undefined: round

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b+c {\n        return -1\n    }\n    if b\
    \ > a+c {\n        return -1\n    }\n    if c > a+b {\n        return -1\n   \
    \ }\n    return float64(a+b+c) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpw1r4jk1y_test.go:50: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpw1r4jk1y_test.go:50:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpw1r4jk1y_test.go:50: expected '%!s(int=-1)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpw1r4jk1y_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpw1r4jk1y_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return -1\n\
    \    }\n    \n    if area == a {\n        return b * c\n    }\n    \n    if area\
    \ == b {\n        return a * c\n    }\n    \n    if area == c {\n        return\
    \ a * b\n    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ka1gvf9_test.go:29:16: cannot use b * c (value of type int) as type float64
    in return statement

    /tmp/tmp0ka1gvf9_test.go:33:16: cannot use a * c (value of type int) as type float64
    in return statement

    /tmp/tmp0ka1gvf9_test.go:37:16: cannot use a * b (value of type int) as type float64
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c > a {\n\
    \        return -1\n    }\n    \n    return float64(a * b * c) / float64(a + b\
    \ + c)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpbdez_y1x_test.go:54: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpbdez_y1x_test.go:54:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpbdez_y1x_test.go:54: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpbdez_y1x_test.go:54:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpbdez_y1x_test.go:54: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a * a\
    \ + b * b + c * c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukj55b0t_test.go:26:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp70l2o4z0_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp70l2o4z0_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp70l2o4z0_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp70l2o4z0_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp70l2o4z0_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a > b {\n        if b > c {\n          \
    \  return a * b * c / 2\n        } else {\n            return -1\n        }\n\
    \    } else {\n        if c > b {\n            return -1\n        } else {\n \
    \           return a * b * c / 2\n        }\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpltbv6zz4_test.go:20:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    /tmp/tmpltbv6zz4_test.go:28:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a > b {\n        if b > c {\n          \
    \  return a * b * c / 2\n        } else {\n            return -1\n        }\n\
    \    } else {\n        if c > b {\n            return -1\n        } else {\n \
    \           return a * b * c / 2\n        }\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpltbv6zz4_test.go:20:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    /tmp/tmpltbv6zz4_test.go:28:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b+c {\n        return -1\n    }\n    if b\
    \ > a+c {\n        return -1\n    }\n    if c > a+b {\n        return -1\n   \
    \ }\n    \n    area := 0\n    \n    area += a * b * c\n    \n    area /= (a +\
    \ b + c)\n    \n    return fmt.Sprintf(\"%.2f\", area)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1_4xufrm_test.go:33:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c > a {\n\
    \        return -1\n    }\n    \n    area := (a + b + c) / 2\n    \n    if area\
    \ == 0 {\n        return -1\n    }\n    \n    return fmt.Sprintf(\"%.2f\", area)\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqd83ran_test.go:36:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return -1\n\
    \    }\n    \n    if a > b {\n        if b > c {\n            return -1\n    \
    \    }\n        return area / b\n    }\n    \n    if b > c {\n        if a > c\
    \ {\n            return -1\n        }\n        return area / c\n    }\n    \n\
    \    return area / a\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp64vr5z8u_test.go:32:16: cannot use area / b (value of type int) as type
    float64 in return statement

    /tmp/tmp64vr5z8u_test.go:39:16: cannot use area / c (value of type int) as type
    float64 in return statement

    /tmp/tmp64vr5z8u_test.go:42:12: cannot use area / a (value of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    \n    area := a * b * c\n    \n    return fmt.Sprintf(\"%.2f\"\
    , area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0zsld6bw_test.go:30:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b+c {\n        return -1\n    }\n    if b\
    \ > a+c {\n        return -1\n    }\n    if c > a+b {\n        return -1\n   \
    \ }\n    \n    area := a * b * c\n    \n    if area > 0 {\n        return float64(area)\
    \ / float64(3.0)\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpp9vx39vo_test.go:56: expected '%!s(float64=6)', got '%!s(float64=20)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpp9vx39vo_test.go:56:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=53.333333333333336)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpp9vx39vo_test.go:56:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=2.6666666666666665)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpp9vx39vo_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(float64=2)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpp9vx39vo_test.go:56: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=116.66666666666667)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpp9vx39vo_test.go:56: expected '%!s(float64=0.43)', got '%!s(float64=0.3333333333333333)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b+c {\n        return -1\n    }\n    if b\
    \ > a+c {\n        return -1\n    }\n    if c > a+b {\n        return -1\n   \
    \ }\n    return float64(a+b+c) / float64(2.0 * float64(a+b+c))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkz8b4iyw_test.go:50: expected '%!s(float64=6)', got '%!s(float64=0.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkz8b4iyw_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=0.5)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkz8b4iyw_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=0.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpkz8b4iyw_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(float64=0.5)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpkz8b4iyw_test.go:50: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=0.5)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpkz8b4iyw_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=0.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    // Check that the three sides are valid\n \
    \   if a + b > c || a + c > b || b + c > a {\n        return -1\n    }\n\n   \
    \ // Calculate the area of the triangle\n    s := a + b + c\n    area := s * (s\
    \ - a) * (s - b) * (s - c)\n\n    // Round the area to 2 decimal points\n    return\
    \ fmt.Sprintf(\"%.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb1bk8_dv_test.go:28:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    // Check if all sides are positive\n    if\
    \ a < 0 || b < 0 || c < 0 {\n        return -1\n    }\n\n    // Check if all sides\
    \ are equal\n    if a == 0 || b == 0 || c == 0 {\n        return 0\n    }\n\n\
    \    // Check if all sides are equal\n    if a == b {\n        return c\n    }\n\
    \n    // Check if all sides are equal\n    if a == c {\n        return b\n   \
    \ }\n\n    // Check if all sides are equal\n    if b == c {\n        return a\n\
    \    }\n\n    // Check if all sides are equal\n    if a == b+c {\n        return\
    \ a\n    }\n\n    // Check if all sides are equal\n    if b == c+a {\n       \
    \ return b\n    }\n\n    // Check if all sides are equal\n    if c == a+b {\n\
    \        return c\n    }\n\n    // Check if all sides are equal\n    if a == b+c+a\
    \ {\n        return a\n    }\n\n    // Check if all sides are equal\n    if b\
    \ == c+a+b {\n        return b\n    }\n\n    // Check if all sides are equal\n\
    \    if c == a+b+c {\n        return c\n    }\n\n    // Check if all sides are\
    \ equal\n    if a == b+c+a+b {\n        return a\n    }\n\n    // Check if all\
    \ sides are equal\n    if b == c+a+b+c {\n        return b\n    }\n\n    // Check\
    \ if all sides are equal\n    if c == a+b+c+a+b {\n        return c\n    }\n\n\
    \    // Check if all sides are equal\n    if a == b+c+a+b+c {\n        return\
    \ a\n    }\n\n    // Check if all sides are equal\n    if b == c+a+b+c+a {\n \
    \       return b\n    }\n\n    // Check if all sides are equal\n    if c == a+b+c+a+b+c\
    \ {\n        return c\n    }\n\n    // Check if all sides are equal\n    if a\
    \ == b+c+a+b+c+a {\n        return a\n    }\n\n    // Check if all sides are equal\n\
    \    if b == c+a+b+c+a+b {\n        return b\n    }\n\n    // Check if all sides\
    \ are equal\n    if c == a+b+c+a+b+c {\n        return c\n    }\n\n    // Check\
    \ if all sides are equal\n    if a == b+c+a+b+c+a+b {\n        return a\n    }\n\
    \n    // Check if all sides are equal\n    if b == c+a+b+c+a+b+c {\n        return\
    \ b\n    }\n\n    // Check if all sides are equal\n    if c == a+b+c+a+b+c+a+b\
    \ {\n        return c\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2yjoeadm_test.go:132:6: expected ''('', found TestTriangle_Area

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075299
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a * a\
    \ + b * b + c * c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukj55b0t_test.go:26:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    // Check if all sides are positive\n    if\
    \ a < 0 || b < 0 || c < 0 {\n        return -1\n    }\n\n    // Check if all sides\
    \ are equal\n    if a == 0 || b == 0 || c == 0 {\n        return 0\n    }\n\n\
    \    // Check if all sides are equal\n    if a == b {\n        return a\n    }\n\
    \n    // Check if all sides are equal\n    if a == c {\n        return b\n   \
    \ }\n\n    // Check if all sides are equal\n    if b == c {\n        return a\n\
    \    }\n\n    // Check if all sides are equal\n    if a == b+c {\n        return\
    \ a\n    }\n\n    // Check if all sides are equal\n    if b == c+a {\n       \
    \ return b\n    }\n\n    // Check if all sides are equal\n    if c == a+b {\n\
    \        return c\n    }\n\n    // Check if all sides are equal\n    if a == b+c+a\
    \ {\n        return b\n    }\n\n    // Check if all sides are equal\n    if b\
    \ == c+a+b {\n        return c\n    }\n\n    // Check if all sides are equal\n\
    \    if c == a+b+c {\n        return a\n    }\n\n    // Check if all sides are\
    \ equal\n    if a == b+c+a {\n        return b\n    }\n\n    // Check if all sides\
    \ are equal\n    if b == c+a+b {\n        return c\n    }\n\n    // Check if all\
    \ sides are equal\n    if c == a+b+c {\n        return a\n    }\n\n    // Check\
    \ if all sides are equal\n    if a == b+c+a {\n        return b\n    }\n\n   \
    \ // Check if all sides are equal\n    if b == c+a+b {\n        return c\n   \
    \ }\n\n    // Check if all sides are equal\n    if c == a+b+c {\n        return\
    \ a\n    }\n\n    // Check if all sides are equal\n    if a == b+c+a {\n     \
    \   return b\n    }\n\n    // Check if all sides are equal\n    if b == c+a+b\
    \ {\n        return c\n    }\n\n    // Check if all sides are equal\n    if c\
    \ == a+b+c {\n        return a\n    }\n\n    // Check if all sides are equal\n\
    \    if a == b+c+a {\n        return b\n    }\n\n    // Check if all sides are\
    \ equal\n    if b == c+a+b {\n        return c\n    }\n\n    // Check if all sides\
    \ are equal\n    if c == a+b+c {\n        return a\n    }\n\n    // Check if all\
    \ sides are equal\n    if a == b+c+a {\n        return b\n    }\n\n    // Check\
    \ if all sides are equal\n    if b == c+a+b {\n        return c\n    }\n\n   \
    \ // Check if all sides are equal\n    if c == a+b+c \nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgwmu4kfe_test.go:145:6: expected ''('', found TestTriangle_Area

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075299
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp70l2o4z0_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp70l2o4z0_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp70l2o4z0_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp70l2o4z0_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp70l2o4z0_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    // If the sum of any two sides is greater than\
    \ the third side, \n    // then we know that the triangle is invalid.\n    if\
    \ a + b > c {\n        return -1\n    }\n    \n    // If the sum of any two sides\
    \ is equal to the third side, \n    // then we know that the triangle is valid.\n\
    \    if a + b == c {\n        return a * b * 0.5\n    }\n    \n    // If the sum\
    \ of any two sides is less than the third side, \n    // then we know that the\
    \ triangle is valid.\n    if a + b < c {\n        return a * b * 0.5\n    }\n\
    \    \n    // If the sum of any two sides is greater than the third side, \n \
    \   // then we know that the triangle is valid.\n    if a + b > c {\n        return\
    \ a * b * 0.5\n    }\n    \n    // If the sum of any two sides is equal to the\
    \ third side, \n    // then we know that the triangle is valid.\n    if a + b\
    \ == c {\n        return a * b * 0.5\n    }\n    \n    // If the sum of any two\
    \ sides is less than the third side, \n    // then we know that the triangle is\
    \ valid.\n    if a + b < c {\n        return a * b * 0.5\n    }\n    \n    //\
    \ If the sum of any two sides is greater than the third side, \n    // then we\
    \ know that the triangle is valid.\n    if a + b > c {\n        return a * b *\
    \ 0.5\n    }\n    \n    // If the sum of any two sides is equal to the third side,\
    \ \n    // then we know that the triangle is valid.\n    if a + b == c {\n   \
    \     return a * b * 0.5\n    }\n    \n    // If the sum of any two sides is less\
    \ than the third side, \n    // then we know that the triangle is valid.\n   \
    \ if a + b < c {\n        return a * b * 0.5\n    }\n    \n    // If the sum of\
    \ any two sides is greater than the third side, \n    // then we know that the\
    \ triangle is valid.\n    if a + b > c {\n        return a * b * 0.5\n    }\n\
    \    \n    // If the sum of any two sides is equal to the third side, \n    //\
    \ then we know that the triangle is valid.\n    if a + b == c {\n        return\
    \ a * b * 0.5\n    }\n    \n    // If the sum of any two sides is less than the\
    \ third side, \n    // then we know that the triangle is valid.\n    if a + b\
    \ < c {\n        return a * b * 0.5\n    }\n    \n    // If the sum of any two\
    \ sides is greater than the third side, \n    // then we know that the triangle\
    \ is valid.\n    if a + b > c {\n        return a * b * 0.5\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph6g_5bqk_test.go:95:6: expected ''('', found TestTriangle_Area

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075299
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ a * b * c / 2\n        } else {\n            return -1\n        }\n    } else\
    \ {\n        if c > b {\n            return -1\n        } else {\n           \
    \ return a * b * c / 2\n        }\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv6b5idqy_test.go:19:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    /tmp/tmpv6b5idqy_test.go:27:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a < 0 || b < 0 || c < 0 {\n        return -1\n\
    \    }\n    if a + b > c {\n        return -1\n    }\n    if a + c > b {\n   \
    \     return -1\n    }\n    if b + c > a {\n        return -1\n    }\n    return\
    \ float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpioq0fwa4_test.go:53: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpioq0fwa4_test.go:53:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpioq0fwa4_test.go:53: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpioq0fwa4_test.go:53:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpioq0fwa4_test.go:53: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a+b+c)))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmuc1e7y7_test.go:26:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    // Check if all sides are positive\n    if\
    \ a < 0 || b < 0 || c < 0 {\n        return -1\n    }\n    \n    // Check if all\
    \ sides are equal\n    if a == b {\n        return c\n    }\n    \n    // Check\
    \ if all sides are equal\n    if a == c {\n        return b\n    }\n    \n   \
    \ // Check if all sides are equal\n    if b == c {\n        return a\n    }\n\
    \    \n    // Check if all sides are equal\n    if a == b+c {\n        return\
    \ a\n    }\n    \n    // Check if all sides are equal\n    if b == c+a {\n   \
    \     return b\n    }\n    \n    // Check if all sides are equal\n    if c ==\
    \ a+b {\n        return c\n    }\n    \n    // Check if all sides are equal\n\
    \    if a == b+c+a {\n        return a\n    }\n    \n    // Check if all sides\
    \ are equal\n    if b == c+a+b {\n        return b\n    }\n    \n    // Check\
    \ if all sides are equal\n    if c == a+b+c {\n        return c\n    }\n    \n\
    \    // Check if all sides are equal\n    if a == b+c+a+b {\n        return a\n\
    \    }\n    \n    // Check if all sides are equal\n    if b == c+a+b+c {\n   \
    \     return b\n    }\n    \n    // Check if all sides are equal\n    if c ==\
    \ a+b+c+a+b {\n        return c\n    }\n    \n    // Check if all sides are equal\n\
    \    if a == b+c+a+b+c {\n        return a\n    }\n    \n    // Check if all sides\
    \ are equal\n    if b == c+a+b+c+a {\n        return b\n    }\n    \n    // Check\
    \ if all sides are equal\n    if c == a+b+c+a+b+c {\n        return c\n    }\n\
    \    \n    // Check if all sides are equal\n    if a == b+c+a+b+c+a {\n      \
    \  return a\n    }\n    \n    // Check if all sides are equal\n    if b == c+a+b+c+a+b\
    \ {\n        return b\n    }\n    \n    // Check if all sides are equal\n    if\
    \ c == a+b+c+a+b+c {\n        return c\n    }\n    \n    // Check if all sides\
    \ are equal\n    if a == b+c+a+b+c+a+b {\n        return a\n    }\n    \n    //\
    \ Check if all sides are equal\n    if b == c+a+b+c+a+b+c {\n        return b\n\
    \    }\n    \n    // Check if all side\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8z3hzwgm_test.go:124:6: expected ''('', found TestTriangle_Area

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ -1\n        }\n        return b * triangle_area(b,c,a)\n    }\n    if b > c\
    \ {\n        return -1\n    }\n    return a * triangle_area(a,c,b)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9tjzfqb4_test.go:21:16: invalid operation: b * triangle_area(b, c, a)
    (mismatched types int and float64)

    /tmp/tmp9tjzfqb4_test.go:26:12: invalid operation: a * triangle_area(a, c, b)
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075302
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a*a +\
    \ b*b + c*c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdywarx_e_test.go:26:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075302
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    area_triangle := 0.0\n    if a > b {\n        area_triangle\
    \ += b\n    }\n    if a > c {\n        area_triangle += c\n    }\n    if b > c\
    \ {\n        area_triangle += a\n    }\n    return float64(area_triangle) / 2.0\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0f7f0exe_test.go:19:9: invalid operation: area_triangle += b (mismatched
    types float64 and int)

    /tmp/tmp0f7f0exe_test.go:22:9: invalid operation: area_triangle += c (mismatched
    types float64 and int)

    /tmp/tmp0f7f0exe_test.go:25:9: invalid operation: area_triangle += a (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    \n    area := 0\n    \n    if a > b {\n        area = area + (b - c) * (a\
    \ / b)\n    } else {\n        area = area + (c - a) * (b / c)\n    }\n    \n \
    \   if a > c {\n        area = area + (c - a) * (a / c)\n    }\n    \n    if b\
    \ > c {\n        area = area + (b - c) * (b / c)\n    }\n    \n    return area\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7x47u6f_test.go:38:12: cannot use area (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a * a\
    \ + b * b + c * c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukj55b0t_test.go:26:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b+c {\n        return -1\n    }\n    if b\
    \ > a+c {\n        return -1\n    }\n    if c > a+b {\n        return -1\n   \
    \ }\n    \n    area_of_triangle := 0\n    \n    area_of_triangle += a\n    area_of_triangle\
    \ += b\n    area_of_triangle += c\n    \n    if area_of_triangle == 0 {\n    \
    \    return -1\n    }\n    \n    area_of_triangle /= 3\n    \n    return round(area_of_triangle,\
    \ 2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg0ffnc5c_test.go:39:12: undefined: round

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b+c {\n        return -1\n    }\n    if b\
    \ > a+c {\n        return -1\n    }\n    if c > a+b {\n        return -1\n   \
    \ }\n    return float64(a * b * c) / float64(2.0 * math.Sqrt(float64(a+b+c)))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzaxvye7d_test.go:26:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a*a +\
    \ b*b + c*c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdywarx_e_test.go:26:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075302
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ float64(a * b * c)\n        } else {\n            return -1\n        }\n   \
    \ } else {\n        if c > b {\n            return -1\n        } else {\n    \
    \        return float64(a * b * c)\n        }\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpla86yxui_test.go:53: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpla86yxui_test.go:53:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=160)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpla86yxui_test.go:53: expected '%!s(float64=1.73)', got '%!s(float64=8)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpla86yxui_test.go:53:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpla86yxui_test.go:53: expected '%!s(int=-1)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpla86yxui_test.go:53:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c > a {\n\
    \        return -1\n    }\n    \n    return float64(a * b * c) / float64(2.0 *\
    \ math.Sqrt(float64(a * a + b * b + c * c)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8bszgl3j_test.go:30:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a+b+c))\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpcuj9gtae_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpcuj9gtae_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpcuj9gtae_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpcuj9gtae_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpcuj9gtae_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    // If the sum of any two sides is greater than\
    \ the third side, return -1\n    if a + b > c {\n        return -1\n    }\n  \
    \  \n    // If the sum of any two sides is greater than the third side, return\
    \ -1\n    if a + c > b {\n        return -1\n    }\n    \n    // If the sum of\
    \ any two sides is greater than the third side, return -1\n    if b + c > a {\n\
    \        return -1\n    }\n    \n    // If the sum of any two sides is greater\
    \ than the third side, return -1\n    if a + b + c > 0 {\n        return -1\n\
    \    }\n    \n    // If the sum of any two sides is greater than the third side,\
    \ return -1\n    if a + c + b > 0 {\n        return -1\n    }\n    \n    // If\
    \ the sum of any two sides is greater than the third side, return -1\n    if b\
    \ + c + a > 0 {\n        return -1\n    }\n    \n    // If the sum of any two\
    \ sides is greater than the third side, return -1\n    if a + b + c > 0 {\n  \
    \      return -1\n    }\n    \n    // If the sum of any two sides is greater than\
    \ the third side, return -1\n    if a + c + b > 0 {\n        return -1\n    }\n\
    \    \n    // If the sum of any two sides is greater than the third side, return\
    \ -1\n    if b + c + a > 0 {\n        return -1\n    }\n    \n    // If the sum\
    \ of any two sides is greater than the third side, return -1\n    if a + b + c\
    \ > 0 {\n        return -1\n    }\n    \n    // If the sum of any two sides is\
    \ greater than the third side, return -1\n    if a + c + b > 0 {\n        return\
    \ -1\n    }\n    \n    // If the sum of any two sides is greater than the third\
    \ side, return -1\n    if b + c + a > 0 {\n        return -1\n    }\n    \n  \
    \  // If the sum of any two sides is greater than the third side, return -1\n\
    \    if a + b + c > 0 {\n        return -1\n    }\n    \n    // If the sum of\
    \ any two sides is greater than the third side, return -1\n    if a + c + b >\
    \ 0 {\n        return -1\n    }\n    \n    // If the sum of any two sides is greater\
    \ than the third side, return -1\n    if b + c + a > 0 {\n        return -1\n\
    \    }\n    \n    // If the sum of any two sides is greater than the third side,\
    \ return -1\n    if a + b + c > 0 {\n        return -1\n    }\n    \n    // If\
    \ the sum of any two sides is greater than the third side, return -1\n    if a\
    \ + c + b > 0 {\n        return -1\n    }\n    \n    // If the sum of any two\
    \ sides is greater than \nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3xdyhhge_test.go:104:6: expected ''('', found TestTriangle_Area

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ a * b * c / 2\n        }\n        return -1\n    }\n    if b > c {\n       \
    \ return -1\n    }\n    return a * b * c / 2\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0qmrdx5_test.go:19:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    /tmp/tmpo0qmrdx5_test.go:26:12: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp70l2o4z0_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp70l2o4z0_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp70l2o4z0_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp70l2o4z0_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp70l2o4z0_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ -1\n        }\n        return b * triangle_area(b, c) + triangle_area(b, a -\
    \ b, c)\n    }\n    if b > c {\n        return -1\n    }\n    return a * triangle_area(a,\
    \ b - a, c) + triangle_area(a, a - b, c)\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t5y5r97_test.go:21:16:\
    \ invalid operation: b * triangle_area(b, c) (mismatched types int and float64)\n\
    /tmp/tmp8t5y5r97_test.go:21:37: not enough arguments in call to triangle_area\n\
    \thave (int, int)\n\twant (int, int, int)\n/tmp/tmp8t5y5r97_test.go:26:12: invalid\
    \ operation: a * triangle_area(a, b - a, c) (mismatched types int and float64)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b+c {\n        return -1\n    }\n    if b\
    \ > a+c {\n        return -1\n    }\n    if c > a+b {\n        return -1\n   \
    \ }\n    return float64(a+b+c) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpw1r4jk1y_test.go:50: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpw1r4jk1y_test.go:50:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpw1r4jk1y_test.go:50: expected '%!s(int=-1)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpw1r4jk1y_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpw1r4jk1y_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ -1\n        } else {\n            return b * triangle_area(b,c,a)\n        }\n\
    \    } else {\n        if c > b {\n            return -1\n        } else {\n \
    \           return c * triangle_area(a,c,b)\n        }\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprao74ubo_test.go:21:20: invalid operation: b * triangle_area(b, c, a)
    (mismatched types int and float64)

    /tmp/tmprao74ubo_test.go:27:20: invalid operation: c * triangle_area(a, c, b)
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    area := 0.0\n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    area = 0.5 * float64(a + b + c)\n    return round(area,\
    \ 2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6z_l0nnm_test.go:28:12: undefined: round

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ a * b * c / 2\n        } else {\n            return -1\n        }\n    } else\
    \ {\n        if c > b {\n            return -1\n        } else {\n           \
    \ return a * b * c / 2\n        }\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv6b5idqy_test.go:19:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    /tmp/tmpv6b5idqy_test.go:27:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ -1\n        }\n        return b * triangle_area(b,c,a)\n    }\n    if b > c\
    \ {\n        return -1\n    }\n    return a * triangle_area(a,b,c)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjbcck1b_test.go:21:16: invalid operation: b * triangle_area(b, c, a)
    (mismatched types int and float64)

    /tmp/tmpfjbcck1b_test.go:26:12: invalid operation: a * triangle_area(a, b, c)
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c > a {\n\
    \        return -1\n    }\n    \n    area := (a + b + c) / 2\n    \n    if area\
    \ == 0 {\n        return -1\n    }\n    \n    return fmt.Sprintf(\"%.2f\", area)\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqd83ran_test.go:36:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b+c {\n        return -1\n    }\n    if b\
    \ > a+c {\n        return -1\n    }\n    if c > a+b {\n        return -1\n   \
    \ }\n    return float64(a+b+c) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpw1r4jk1y_test.go:50: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpw1r4jk1y_test.go:50:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpw1r4jk1y_test.go:50: expected '%!s(int=-1)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpw1r4jk1y_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpw1r4jk1y_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return -1\n\
    \    }\n    \n    if area == 1 {\n        return area\n    }\n    \n    if area\
    \ == 2 {\n        return area\n    }\n    \n    if area > 2 {\n        return\
    \ area\n    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv2gi1v82_test.go:29:16: cannot use area (variable of type int) as type
    float64 in return statement

    /tmp/tmpv2gi1v82_test.go:33:16: cannot use area (variable of type int) as type
    float64 in return statement

    /tmp/tmpv2gi1v82_test.go:37:16: cannot use area (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ -1\n        }\n        return b * triangle_area(b,c,a)\n    }\n    if a > c\
    \ {\n        return -1\n    }\n    return a * triangle_area(a,c,b)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnz9m74ew_test.go:21:16: invalid operation: b * triangle_area(b, c, a)
    (mismatched types int and float64)

    /tmp/tmpnz9m74ew_test.go:26:12: invalid operation: a * triangle_area(a, c, b)
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    area_sum := a + b + c\n    if area_sum > c {\n  \
    \      return -1\n    }\n    area_sum /= 2\n    if area_sum < a {\n        return\
    \ -1\n    }\n    area_sum /= 2\n    if area_sum < b {\n        return -1\n   \
    \ }\n    return area_sum\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmply3kllqu_test.go:29:12: cannot use area_sum (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a+b+c))\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpcuj9gtae_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpcuj9gtae_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpcuj9gtae_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpcuj9gtae_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpcuj9gtae_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ a * b * c / 2\n        } else {\n            return -1\n        }\n    } else\
    \ {\n        if c > b {\n            return -1\n        } else {\n           \
    \ return a * b * c / 2\n        }\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv6b5idqy_test.go:19:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    /tmp/tmpv6b5idqy_test.go:27:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ a * b * c / 2\n        } else {\n            return -1\n        }\n    } else\
    \ {\n        if c > b {\n            return -1\n        } else {\n           \
    \ return a * b * c / 2\n        }\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv6b5idqy_test.go:19:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    /tmp/tmpv6b5idqy_test.go:27:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    area_sum := a + b + c\n    if area_sum > c {\n  \
    \      return -1\n    }\n    if area_sum < a {\n        return -1\n    }\n   \
    \ if area_sum < b {\n        return -1\n    }\n    return float64(area_sum) /\
    \ float64(2) * float64(3.14159)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp0fzvgwk5_test.go:51: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp0fzvgwk5_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp0fzvgwk5_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp0fzvgwk5_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp0fzvgwk5_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075304
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a * a\
    \ + b * b + c * c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukj55b0t_test.go:26:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    area_a := a * b\n    area_b := c * b\n    area_c\
    \ := a * c\n    area_ab := area_a + area_b\n    area_ac := area_a + area_c\n \
    \   area_ca := area_c + area_a\n    area_abc := area_ab + area_ac\n    area_abca\
    \ := area_abc + area_ca\n    area_abcac := area_abca + area_ac\n    area_abcaca\
    \ := area_abcac + area_a\n    area_abcacab := area_abcaca + area_b\n    area_abcacabc\
    \ := area_abcacab + area_c\n    area_abcacabca := area_abcacabc + area_ab\n  \
    \  area_abcacabcaa := area_abcacabcaa + area_c\n    area_abcacabcaab := area_abcacabcaab\
    \ + area_a\n    area_abcacabcaabc := area_abcacabcaabc + area_b\n    area_abcacabcaabca\
    \ := area_abcacabcaabca + area_c\n    area_abcacabcaabcac := area_abcacabcaabcac\
    \ + area_ab\n    area_abcacabcaabcaca := area_abcacabcaabcaca + area_ac\n    area_abcacabcaabcacab\
    \ := area_abcacabcaabcacab + area_a\n    area_abcacabcaabcacabc := area_abcacabcaabcacabc\
    \ + area_b\n    area_abcacabcaabcacabca := area_abcacabcaabcacabca + area_c\n\
    \    area_abcacabcaabcacabcac := area_abcacabcaabcacabcac + area_ab\n    area_abcacabcaabcacabcaca\
    \ := area_abcacabcaabcacabcaca + area_ac\n    area_abcacabcaabcacabcacab := area_abcacabcaabcacabcacab\
    \ + area_a\n    area_abcacabcaabcacabcacabc := area_abcacabcaabcacabcacabc + area_b\n\
    \    area_abcacabcaabcacabcacabca := area_abcacabcaabcacabcacabca + area_c\n \
    \   area_abcacabcaabcacabcacabcac := area_abcacabcaabcacabcacabcac + area_ab\n\
    \    area_abcacabcaabcacabcacabcaca := area_abcacabcaabcac\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp51hefc95_test.go:46:6: expected ''('', found TestTriangle_Area

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return -1\n\
    \    }\n    \n    if area == 1 {\n        return area\n    }\n    \n    if area\
    \ == 2 {\n        return area / 2\n    }\n    \n    if area > 2 {\n        return\
    \ area / 2\n    }\n    \n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyc25wxzz_test.go:29:16: cannot use area (variable of type int) as type
    float64 in return statement

    /tmp/tmpyc25wxzz_test.go:33:16: cannot use area / 2 (value of type int) as type
    float64 in return statement

    /tmp/tmpyc25wxzz_test.go:37:16: cannot use area / 2 (value of type int) as type
    float64 in return statement

    /tmp/tmpyc25wxzz_test.go:40:12: cannot use area (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a*a +\
    \ b*b + c*c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdywarx_e_test.go:26:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075302
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    area_triangle := 0\n    if a > b {\n        area_triangle\
    \ += b\n    }\n    if a > c {\n        area_triangle += c\n    }\n    if b > c\
    \ {\n        area_triangle += a\n    }\n    return fmt.Sprintf(\"%.2f\", area_triangle/3)\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ce8wsuq_test.go:27:12: cannot use fmt.Sprintf("%.2f", area_triangle /
    3) (value of type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a+b+c)))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmuc1e7y7_test.go:26:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ a * b * c / 2\n        } else {\n            return -1\n        }\n    } else\
    \ {\n        if c > b {\n            return -1\n        } else {\n           \
    \ return a * b * c / 2\n        }\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv6b5idqy_test.go:19:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    /tmp/tmpv6b5idqy_test.go:27:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a > b {\n        if b > c {\n            return\
    \ a * b * c / 2\n        }\n        return -1\n    }\n    if b > c {\n       \
    \ return -1\n    }\n    if c > a {\n        return -1\n    }\n    return a * b\
    \ * c / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiyoolj7y_test.go:19:20: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    /tmp/tmpiyoolj7y_test.go:29:12: cannot use a * b * c / 2 (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpsgl5h6s1_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpsgl5h6s1_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(4.0 * float64(a+b+c))\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpcuj9gtae_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpcuj9gtae_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpcuj9gtae_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpcuj9gtae_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpcuj9gtae_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075303
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n    if\
    \ a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwpd22nim_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwpd22nim_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075301
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    area_triangle := 0\n    if a + b > c {\n        area_triangle\
    \ = a / 2\n    } else {\n        area_triangle = b / 2\n    }\n    if area_triangle\
    \ > c {\n        area_triangle = c\n    }\n    return area_triangle\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnmrne3nj_test.go:26:12: cannot use area_triangle (variable of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075304
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n   \
    \     return -1\n    }\n    \n    return fmt.Sprintf(\"%.2f\", area)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvgexmaag_test.go:34:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075304
