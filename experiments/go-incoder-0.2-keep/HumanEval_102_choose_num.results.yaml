language: go_test.go
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpuq5i1uao_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpuq5i1uao_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpuq5i1uao_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpuq5i1uao_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpuq5i1uao_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpuq5i1uao_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpuq5i1uao_test.go:49: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.048s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n        y\
    \ /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=12354)', got '%!s(int=3088)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660073641
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            y = y / 2\n        }\n\
    \        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            y = y / 2\n        }\n\
    \        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x >= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= 2\n    y -= 2\n    \n    x /= 2\n    y /= 2\n    \n   \
    \ x %= y\n    y %= x\n    \n    if x == 0 {\n        return y\n    }\n    \n \
    \   return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpznr8du_1_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpznr8du_1_test.go:58:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpznr8du_1_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpznr8du_1_test.go:58:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.046s\nFAIL\n"
  timestamp: 1660073641
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x >= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n    if\
    \ y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaaaa98?,\
    \ 0xaaaa9a?)\n\t/tmp/tmpnammb8hf_test.go:14 +0x85 fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6e5\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnammb8hf_test.go:27\
    \ +0x45 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnammb8hf_test.go:25 +0x2d fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef68d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnammb8hf_test.go:22\
    \ +0x57 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnammb8hf_test.go:27 +0x45 fp=0xc020160420 sp=0xc020160400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnammb8hf_test.go:25\
    \ +0x2d fp=0xc020160440 sp=0xc020160420 pc=0x4ef68d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnammb8hf_test.go:22 +0x57 fp=0xc020160460 sp=0xc020160440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnammb8hf_test.go:27\
    \ +0x45 fp=0xc020160480 sp=0xc020160460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnammb8hf_test.go:25 +0x2d fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef68d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnammb8hf_test.go:22\
    \ +0x57 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnammb8hf_test.go:27 +0x45 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnammb8hf_test.go:25\
    \ +0x2d fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef68d\ncomman"
  timestamp: 1660073642
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            x = x / 2\n        } else {\n            x = (x + y) / 2\n\
    \        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpn7n0ow_k_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpn7n0ow_k_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpn7n0ow_k_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpn7n0ow_k_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=2617)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpn7n0ow_k_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpn7n0ow_k_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpn7n0ow_k_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.019s\nFAIL\n"
  timestamp: 1660073641
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            y = y / 2\n        }\n\
    \        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    if x %\
    \ 2 == 0 {\n        return x\n    }\n    \n    return choose_num(x + 1, y)\n}\n\
    \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpzl3yi4on_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpzl3yi4on_test.go:48:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpzl3yi4on_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpzl3yi4on_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpzl3yi4on_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpzl3yi4on_test.go:48:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073641
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    \n    for {\n        if x % 2\
    \ == 0 {\n            x = x / 2\n        } else {\n            y = y / 2\n   \
    \     }\n        if x == y {\n            return x\n        }\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    if x == y {\n        return\
    \ x\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x / 2, y)\n \
    \   }\n    \n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp33b96bre_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp33b96bre_test.go:54:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp33b96bre_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp33b96bre_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.024s\nFAIL\n"
  timestamp: 1660073641
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    \n    x -= y\n    x /= 2\n\
    \    \n    if x > y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    \n    x -= y\n    x\
    \ /= 2\n    \n    if x > y {\n        return -1\n    }\n    if x == y {\n    \
    \    return x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n   \
    \     return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    x\
    \ -= y\n    x /= 2\n    \n    if x > y {\n        return -1\n    }\n    if x ==\
    \ y {\n        return x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x >\
    \ y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n  \
    \  \n    x -= y\n    x /= 2\n    \n    if x > y {\n        return -1\n    }\n\
    \    if x == y {\n        return x\n    }\n    \n    x -= y\n    x /= 2\n    \n\
    \    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    \n    x -= y\n    x /= 2\n\
    \    \n    if x > y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    \n    x -= y\n    x\
    \ /= 2\n    \n    if x > y {\n        return -1\n    }\n    if x == y {\n    \
    \    return x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n   \
    \     return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    x\
    \ -= y\n    x /= 2\n    \n    if x > y {\n        return -1\n    }\n    if x ==\
    \ y {\n        return x\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1syt8cg3_test.go:171:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    \n    for {\n        if x % 2\
    \ == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7tsge222_test.go:56: expected '%!s(int=14)', got '%!s(int=46)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7tsge222_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=40)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7tsge222_test.go:56: expected '%!s(int=12354)', got '%!s(int=6177)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7tsge222_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=7852)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7tsge222_test.go:56: expected '%!s(int=28)', got '%!s(int=88)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7tsge222_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=82)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7tsge222_test.go:56: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp7tsge222_test.go:56:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.028s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n        }\n\
    \        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.034s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    \n    for {\n        if x%2 ==\
    \ 0 && y%2 == 0 {\n            return x\n        }\n        \n        x /= 2\n\
    \        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7wblsmfa_test.go:49: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7wblsmfa_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7wblsmfa_test.go:49: expected '%!s(int=12354)', got '%!s(int=3088)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7wblsmfa_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7wblsmfa_test.go:49: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7wblsmfa_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7wblsmfa_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    \n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    \n    return choose_num(x, y)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpdq3xa6dx_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpdq3xa6dx_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpdq3xa6dx_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpdq3xa6dx_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpdq3xa6dx_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpdq3xa6dx_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpdq3xa6dx_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073641
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ && y % 2 == 0 {\n            return x\n        }\n        if x % 2 == 0 {\n\
    \            x /= 2\n        } else {\n            y /= 2\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return i\n        }\n        x /= 2\n    }\n    \n \
    \   return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmppg1qdk_e_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmppg1qdk_e_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmppg1qdk_e_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmppg1qdk_e_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmppg1qdk_e_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmppg1qdk_e_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmppg1qdk_e_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n        }\n\
    \        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1d2m1qll_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1d2m1qll_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1d2m1qll_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1d2m1qll_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1d2m1qll_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1d2m1qll_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1d2m1qll_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1d2m1qll_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.041s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y - 1\n    }\n    if x % 2 != 0 && y %\
    \ 2 != 0 {\n        return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwc_9d6fg_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwc_9d6fg_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=24)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwc_9d6fg_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwc_9d6fg_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwc_9d6fg_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwc_9d6fg_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=36)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwc_9d6fg_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    if x %\
    \ 2 == 0 {\n        return x + y\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw9zhhoiz_test.go:48: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw9zhhoiz_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpw9zhhoiz_test.go:48: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpw9zhhoiz_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpw9zhhoiz_test.go:48: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpw9zhhoiz_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpw9zhhoiz_test.go:48: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.019s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x == 0 {\n            return x\n        }\n      \
    \  \n        if x > y {\n            return -1\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp10916hll_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp10916hll_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp10916hll_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp10916hll_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp10916hll_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp10916hll_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp10916hll_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp10916hll_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073644
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073656
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n        }\n\
    \        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1d2m1qll_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1d2m1qll_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1d2m1qll_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1d2m1qll_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1d2m1qll_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1d2m1qll_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1d2m1qll_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1d2m1qll_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.041s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n    \
    \    }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n   \
    \         y = y * 3 + 1\n        }\n        if x >= y {\n            return x\n\
    \        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpkuwlcsqv_test.go:55: expected '%!s(int=14)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpkuwlcsqv_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpkuwlcsqv_test.go:55: expected '%!s(int=12354)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpkuwlcsqv_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=15700)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpkuwlcsqv_test.go:55: expected '%!s(int=28)', got '%!s(int=16)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpkuwlcsqv_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpkuwlcsqv_test.go:55: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpkuwlcsqv_test.go:55:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.034s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp28gbmqkh_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp28gbmqkh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp28gbmqkh_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp28gbmqkh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp28gbmqkh_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp28gbmqkh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp28gbmqkh_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp28gbmqkh_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.018s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x >= y {\n        return -1\n    }\n    \n    x -= 2\n    y -= 2\n   \
    \ \n    var result int\n    \n    for {\n        result ^= x\n        x >>= 1\n\
    \        y >>= 1\n        if x == 0 {\n            break\n        }\n        if\
    \ y == 0 {\n            break\n        }\n        x ^= y\n    }\n    \n    return\
    \ result\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpixlu72ql_test.go:60: expected '%!s(int=14)', got '%!s(int=11)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpixlu72ql_test.go:60:\
    \ expected '%!s(int=12354)', got '%!s(int=7741)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpixlu72ql_test.go:60: expected '%!s(int=28)', got '%!s(int=10)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpixlu72ql_test.go:60:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.021s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x + i\n       \
    \ }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpxtxk_4l3_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpxtxk_4l3_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpxtxk_4l3_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpxtxk_4l3_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpxtxk_4l3_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpxtxk_4l3_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpxtxk_4l3_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpxtxk_4l3_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.035s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 &&\
    \ y % 2 == 0 {\n            return x\n        }\n        \n        x /= 2\n  \
    \      y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmprcb64p2g_test.go:55: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmprcb64p2g_test.go:55:\
    \ expected '%!s(int=12354)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmprcb64p2g_test.go:55: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmprcb64p2g_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.027s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x >= y {\n        return -1\n    }\n    \n    x -= 2\n    y -= 2\n   \
    \ \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    x -=\
    \ 2\n    y -= 2\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n \
    \   }\n    \n    x -= 2\n    y -= 2\n    \n    x %= y\n    \n    if x == 0 {\n\
    \        return x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    x %= y\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    x -= 2\n    y -= 2\n \
    \   \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    x\
    \ -= 2\n    y -= 2\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n\
    \    }\n    \n    x -= 2\n    y -= 2\n    \n    x %= y\n    \n    if x == 0 {\n\
    \        return x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    x %= y\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    x -= 2\n    y -= 2\n \
    \   \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    x\
    \ -= 2\n    y -= 2\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n\
    \    }\n    \n    x -= 2\n    y -= 2\n    \n    x %= y\n    \n    if x == 0 {\n\
    \        return x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    x %= y\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    x -= 2\n    y -= 2\n \
    \   \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    x\
    \ -= 2\n    y -= 2\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n\
    \    }\n    \n    x -= 2\n    y -= 2\n    \n    x %= y\n    \n    if x == 0 {\n\
    \        return x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    x %= y\n   \
    \ \n    if x == 0 {\n        return x\n    }\n    \n    x -= 2\n    y -= 2\n \
    \   \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    x\
    \ -= 2\n    y \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpejg8k38t_test.go:174:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x >= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 {\n        return y\n    }\n    if y % 2 == 0 {\n        return x\n\
    \    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpyqual_wp_test.go:53: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpyqual_wp_test.go:53:\
    \ expected '%!s(int=12354)', got '%!s(int=33)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpyqual_wp_test.go:53: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpyqual_wp_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.018s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5cvoz2d1_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5cvoz2d1_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5cvoz2d1_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5cvoz2d1_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5cvoz2d1_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5cvoz2d1_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp5cvoz2d1_test.go:49: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ && y % 2 == 0 {\n            return x\n        }\n        if x % 2 == 0 {\n\
    \            return y\n        }\n        if y % 2 == 0 {\n            return\
    \ x\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1b13thg7_test.go:53: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1b13thg7_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1b13thg7_test.go:53: expected '%!s(int=12354)', got '%!s(int=33)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1b13thg7_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1b13thg7_test.go:53: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1b13thg7_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1b13thg7_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ && y % 2 == 0 {\n            return x\n        }\n        if x % 2 != 0 && y\
    \ % 2 != 0 {\n            return -1\n        }\n        x /= 2\n        y /= 2\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4km0bzix_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4km0bzix_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4km0bzix_test.go:50: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4km0bzix_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4km0bzix_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.029s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -= 2\n   \
    \ \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return x + y\n\
    \        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7keg0ney_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7keg0ney_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7keg0ney_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7keg0ney_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7keg0ney_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7keg0ney_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp7keg0ney_test.go:52: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    \n    for i := x; i <= y; i++\
    \ {\n        if i%2 == 0 {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp74zvzv8z_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp74zvzv8z_test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp74zvzv8z_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.052s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpf8ol5vs4_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpf8ol5vs4_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpf8ol5vs4_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpf8ol5vs4_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=5237)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpf8ol5vs4_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpf8ol5vs4_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpf8ol5vs4_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    \n    for {\n        if x%2 == 0 {\n\
    \            return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpt1kq5lmp_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpt1kq5lmp_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpt1kq5lmp_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpt1kq5lmp_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpt1kq5lmp_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpt1kq5lmp_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpt1kq5lmp_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073646
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x%2 == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7o8uf3b6_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7o8uf3b6_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7o8uf3b6_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7o8uf3b6_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7o8uf3b6_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7o8uf3b6_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp7o8uf3b6_test.go:49: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.020s\nFAIL\n"
  timestamp: 1660073646
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x%2 == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1fndqcit_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1fndqcit_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1fndqcit_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1fndqcit_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1fndqcit_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1fndqcit_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1fndqcit_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1fndqcit_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.025s\nFAIL\n"
  timestamp: 1660073646
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    // The first even number that is smaller than x and larger than\
    \ y\n    // is x.\n    x -= 2\n    \n    // The second even number that is smaller\
    \ than x and larger than y\n    // is y.\n    y -= 2\n    \n    // The biggest\
    \ even number that is smaller than x and larger than y\n    // is x + y.\n   \
    \ x += (x + y) / 2\n    \n    // The biggest even number that is smaller than\
    \ x and larger than y\n    // is x - y.\n    x -= (x + y) / 2\n    \n    // The\
    \ biggest even number that is smaller than x and larger than y\n    // is x -\
    \ y.\n    y -= (x + y) / 2\n    \n    // The biggest even number that is smaller\
    \ than x and larger than y\n    // is x + y.\n    x += (x + y) / 2\n    \n   \
    \ // The biggest even number that is smaller than x and larger than y\n    //\
    \ is x + y.\n    y += (x + y) / 2\n    \n    // The biggest even number that is\
    \ smaller than x and larger than y\n    // is x + y.\n    x += (x + y) / 2\n \
    \   \n    // The biggest even number that is smaller than x and larger than y\n\
    \    // is x + y.\n    y += (x + y) / 2\n    \n    // The biggest even number\
    \ that is smaller than x and larger than y\n    // is x + y.\n    x += (x + y)\
    \ / 2\n    \n    // The biggest even number that is smaller than x and larger\
    \ than y\n    // is x + y.\n    y += (x + y) / 2\n    \n    // The biggest even\
    \ number that is smaller than x and larger than y\n    // is x + y.\n    x +=\
    \ (x + y) / 2\n    \n    // The biggest even number that is smaller than x and\
    \ larger than y\n    // is x + y.\n    y += (x + y) / 2\n    \n    // The biggest\
    \ even number that is smaller than x and larger than y\n    // is x + y.\n   \
    \ x += (x + y) / 2\n    \n    // The biggest even number that is smaller than\
    \ x and larger than y\n    // is x + y.\n    y += (x + y) / 2\n    \n    // The\
    \ biggest even number that is smaller than x and larger than y\n    // is x +\
    \ y.\n    x += (x + y) / 2\n    \n    // The biggest even number that is smaller\
    \ than x and larger than y\n    // is x + y.\n    y += (x + y) / 2\n    \n   \
    \ // The biggest even number that is smaller than x and larger than y\n    //\
    \ is x + y.\n    x += (x + y) / 2\n    \n    // The biggest even number that is\
    \ smaller than x and larger than y\n    // is x + y.\n    y += (x + y) / 2\n \
    \   \n    // The big\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf6259f5i_test.go:99:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073646
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5cvoz2d1_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5cvoz2d1_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5cvoz2d1_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5cvoz2d1_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5cvoz2d1_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5cvoz2d1_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp5cvoz2d1_test.go:49: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= 2\n    y -= 2\n    \n    x /= 2\n    y /= 2\n    \n   \
    \ x -= y\n    \n    if x == 0 {\n        return x\n    }\n    \n    return x +\
    \ y\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwui1qf5j_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwui1qf5j_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwui1qf5j_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwui1qf5j_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=2616)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwui1qf5j_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwui1qf5j_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwui1qf5j_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.025s\nFAIL\n"
  timestamp: 1660073648
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    \n    x -= 2\n    y -= 2\n    \n\
    \    for {\n        if x % 2 == 0 {\n            x /= 2\n        } else {\n  \
    \          y /= 2\n        }\n        \n        if x == y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073659
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n        }\n\
    \        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.034s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    // x is smaller than y\n    if x % 2 == 0 {\n        return\
    \ choose_num(x / 2, y)\n    }\n    \n    // y is smaller than x\n    if y % 2\
    \ == 0 {\n        return choose_num(x, y / 2)\n    }\n    \n    // x and y are\
    \ even\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    \n\
    \    // x and y are odd\n    if x % 2 == 1 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    \n    // y is odd\n    if y % 2 == 1 {\n        return choose_num(x,\
    \ y / 2)\n    }\n    \n    // x and y are both even\n    if x % 2 == 0 && y %\
    \ 2 == 1 {\n        return x + y\n    }\n    \n    // x and y are both odd\n \
    \   if x % 2 == 1 {\n        return choose_num(x / 2, y)\n    }\n    \n    //\
    \ x and y are both even\n    if y % 2 == 1 {\n        return choose_num(x, y /\
    \ 2)\n    }\n    \n    // x and y are both odd\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpi70xwdks_test.go:86: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpi70xwdks_test.go:86:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpi70xwdks_test.go:86: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpi70xwdks_test.go:86:\
    \ expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpi70xwdks_test.go:86: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.024s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i\
    \ := 0; i < y; i++ {\n        if x%2 == 0 {\n            return i\n        }\n\
    \        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbmc7m90n_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpbmc7m90n_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpbmc7m90n_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpbmc7m90n_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbmc7m90n_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpbmc7m90n_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpbmc7m90n_test.go:51: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            return i\n        }\n        x /= 2\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbhu55tyg_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpbhu55tyg_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpbhu55tyg_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpbhu55tyg_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbhu55tyg_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpbhu55tyg_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpbhu55tyg_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.029s\nFAIL\n"
  timestamp: 1660073648
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i\
    \ := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n        }\n\
    \        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbyx8l9co_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpbyx8l9co_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpbyx8l9co_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpbyx8l9co_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbyx8l9co_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpbyx8l9co_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpbyx8l9co_test.go:50: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return\
    \ x\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n   \
    \ }\n    \n    if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n   \
    \ \n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    \n   \
    \ if x % 2 == 0 && y % 2 != 0 {\n        return choose_num(x, y/2)\n    }\n  \
    \  \n    if x % 2 != 0 && y % 2 == 0 {\n        return choose_num(x/2, y)\n  \
    \  }\n    \n    if x % 2 != 0 && y % 2 != 0 {\n        return choose_num(x, y/2)\n\
    \    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.choose_num(0xd?,\
    \ 0x0?)\n\t/tmp/tmphzz38v1h_test.go:14 +0xa9 fp=0xc0201e03a0 sp=0xc0201e0398 pc=0x4ef709\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmphzz38v1h_test.go:28\
    \ +0x3d fp=0xc0201e03c0 sp=0xc0201e03a0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmphzz38v1h_test.go:28 +0x3d fp=0xc0201e03e0 sp=0xc0201e03c0 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmphzz38v1h_test.go:28\
    \ +0x3d fp=0xc0201e0400 sp=0xc0201e03e0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmphzz38v1h_test.go:28 +0x3d fp=0xc0201e0420 sp=0xc0201e0400 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmphzz38v1h_test.go:28\
    \ +0x3d fp=0xc0201e0440 sp=0xc0201e0420 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmphzz38v1h_test.go:28 +0x3d fp=0xc0201e0460 sp=0xc0201e0440 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmphzz38v1h_test.go:28\
    \ +0x3d fp=0xc0201e0480 sp=0xc0201e0460 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmphzz38v1h_test.go:28 +0x3d fp=0xc0201e04a0 sp=0xc0201e0480 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmphzz38v1h_test.go:28\
    \ +0x3d fp=0xc0201e04c0 sp=0xc0201e04a0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmphzz38v1h_test.go:28 +0x3d fp=0xc0201e04e0 sp=0xc0201e04c0 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmphzz38v1h_test.go:28\
    \ +0x3d fp=0xc0201e0500 sp=0xc0201e04e0 pc=0x4ef69d\ncommand-line-ar"
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for {\n        if x % 2 == 0 {\n         \
    \   return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpcp5lzg92_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpcp5lzg92_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpcp5lzg92_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpcp5lzg92_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpcp5lzg92_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpcp5lzg92_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpcp5lzg92_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x%2 == 0\
    \ {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp80zb0oea_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp80zb0oea_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp80zb0oea_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp80zb0oea_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp80zb0oea_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp80zb0oea_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp80zb0oea_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            x = x / 2\n        } else\
    \ {\n            x = x * 3 + 1\n        }\n    }\n    \n    return x\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpd47dkcdg_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpd47dkcdg_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpd47dkcdg_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpd47dkcdg_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpd47dkcdg_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpd47dkcdg_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpd47dkcdg_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpd47dkcdg_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.041s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x%2 == 0 &&\
    \ y%2 == 0 {\n            return x\n        }\n        if x%2 == 0 && y%2 == 1\
    \ {\n            return y\n        }\n        if x%2 == 1 && y%2 == 0 {\n    \
    \        return x\n        }\n        if x%2 == 1 && y%2 == 1 {\n            return\
    \ y\n        }\n        if x == y {\n            return -1\n        }\n      \
    \  x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n \
    \ candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15),\
    \ expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual:\
    \ candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233),\
    \ expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual:\
    \ candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected:\
    \ -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6pymqbxo_test.go:59: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6pymqbxo_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6pymqbxo_test.go:59: expected '%!s(int=12354)', got '%!s(int=33)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6pymqbxo_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6pymqbxo_test.go:59: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6pymqbxo_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6pymqbxo_test.go:59: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n    \n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpx8_onxre_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpx8_onxre_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpx8_onxre_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpx8_onxre_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpx8_onxre_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpx8_onxre_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpx8_onxre_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.025s\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 &&\
    \ y % 2 == 0 {\n            return x + y\n        }\n        x /= 2\n        y\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpjuzea2fs_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpjuzea2fs_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpjuzea2fs_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpjuzea2fs_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpjuzea2fs_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpjuzea2fs_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpjuzea2fs_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 {\n        return y\n    }\n    if y % 2 == 0 {\n        return x\n\
    \    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpftjf_tjh_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpftjf_tjh_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpftjf_tjh_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpftjf_tjh_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpftjf_tjh_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpftjf_tjh_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpftjf_tjh_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x % 2 ==\
    \ 0 {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpolmsmar1_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpolmsmar1_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpolmsmar1_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpolmsmar1_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpolmsmar1_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpolmsmar1_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpolmsmar1_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.039s\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n    return\
    \ choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp9pk5pptp_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp9pk5pptp_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp9pk5pptp_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x == 0 {\n\
    \            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpe7uc3ogr_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpe7uc3ogr_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpe7uc3ogr_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x%2 == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7o8uf3b6_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7o8uf3b6_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7o8uf3b6_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7o8uf3b6_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7o8uf3b6_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7o8uf3b6_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp7o8uf3b6_test.go:49: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.020s\nFAIL\n"
  timestamp: 1660073646
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    y -= x\n   \
    \ \n    if y > 0 {\n        return y\n    }\n    \n    if x > 0 {\n        return\
    \ x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpswz_3np2_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpswz_3np2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=11)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpswz_3np2_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpswz_3np2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=5232)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpswz_3np2_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpswz_3np2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=17)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpswz_3np2_test.go:53: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.043s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    // We are going to use binary search to find the biggest even\
    \ number\n    // that is in [x, y] inclusive.\n    \n    // The first step is\
    \ to find the middle of the interval [x, y]\n    \n    middle := (x + y) / 2\n\
    \    \n    // The second step is to find the biggest even number that is smaller\
    \ \n    // than middle and bigger than y.\n    \n    biggest := -1\n    \n   \
    \ for i := 0; i < y; i++ {\n        if middle % 2 == 0 {\n            if middle\
    \ > biggest {\n                biggest = middle\n            }\n        }\n  \
    \      middle = middle / 2\n    }\n    \n    return biggest\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptihf0q5o_test.go:66: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmptihf0q5o_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmptihf0q5o_test.go:66: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmptihf0q5o_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=2616)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptihf0q5o_test.go:66: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmptihf0q5o_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=18)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmptihf0q5o_test.go:66: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.034s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    return\
    \ choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1w0m2fbf_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp1w0m2fbf_test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1w0m2fbf_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp1w0m2fbf_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.019s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n    if\
    \ y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmp7ehzinib_test.go:14 +0x8b fp=0xc0201e03a0 sp=0xc0201e0398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:27\
    \ +0x45 fp=0xc0201e03c0 sp=0xc0201e03a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7ehzinib_test.go:25 +0x30 fp=0xc0201e03e0 sp=0xc0201e03c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:22\
    \ +0x57 fp=0xc0201e0400 sp=0xc0201e03e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7ehzinib_test.go:27 +0x45 fp=0xc0201e0420 sp=0xc0201e0400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:25\
    \ +0x30 fp=0xc0201e0440 sp=0xc0201e0420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7ehzinib_test.go:22 +0x57 fp=0xc0201e0460 sp=0xc0201e0440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:27\
    \ +0x45 fp=0xc0201e0480 sp=0xc0201e0460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7ehzinib_test.go:25 +0x30 fp=0xc0201e04a0 sp=0xc0201e0480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:22\
    \ +0x57 fp=0xc0201e04c0 sp=0xc0201e04a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7ehzinib_test.go:27 +0x45 fp=0xc0201e04e0 sp=0xc0201e04c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:25\
    \ +0x30 fp=0xc0201e0500 sp=0xc0201e04e0 pc=0x4ef690\ncomma"
  timestamp: 1660073653
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y + 1\n    }\n    if x % 2 != 0 && y %\
    \ 2 != 0 {\n        return x + y - 1\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6oyg5ffd_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=26)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6oyg5ffd_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6oyg5ffd_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=38)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n"
  timestamp: 1660073651
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            y = y / 2\n        }\n\
    \        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.048s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    \n    for y > 0 {\n        if x % 2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n        y -= 1\n  \
    \  }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvt269s9d_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvt269s9d_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvt269s9d_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvt269s9d_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvt269s9d_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvt269s9d_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvt269s9d_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ && y % 2 == 0 {\n            return x\n        }\n        if x % 2 == 0 {\n\
    \            return y\n        }\n        if y % 2 == 0 {\n            return\
    \ x\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1b13thg7_test.go:53: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1b13thg7_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1b13thg7_test.go:53: expected '%!s(int=12354)', got '%!s(int=33)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1b13thg7_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1b13thg7_test.go:53: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1b13thg7_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1b13thg7_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660073644
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    y -= x\n    \n    for {\n        if x % 2 == 0 {\n\
    \            x /= 2\n        } else {\n            y /= 2\n        }\n       \
    \ if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073663
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x == 0 {\n\
    \            return x\n        }\n        if x > y {\n            return -1\n\
    \        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpnxc5d273_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpnxc5d273_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpnxc5d273_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpnxc5d273_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpnxc5d273_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpnxc5d273_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpnxc5d273_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n        y\
    \ /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=12354)', got '%!s(int=3088)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660073641
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y + 1\n    }\n    if x % 2 != 0 && y %\
    \ 2 != 0 {\n        return x + y + 1\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7wnaomlw_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7wnaomlw_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=26)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7wnaomlw_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7wnaomlw_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7wnaomlw_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7wnaomlw_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=38)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7wnaomlw_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.031s\nFAIL\n"
  timestamp: 1660073653
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    y /= 2\n    \n    if x == 0 {\n    \
    \    return y\n    }\n    if y == 0 {\n        return x\n    }\n    \n    return\
    \ choose_num(x, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp48yfnpuu_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp48yfnpuu_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp48yfnpuu_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp48yfnpuu_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=2616)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp48yfnpuu_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp48yfnpuu_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.034s\nFAIL\n"
  timestamp: 1660073653
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 && y % 2 == 0 {\n            return x\n        }\n        \n        x /= 2\n\
    \        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpy3eoehxn_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpy3eoehxn_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpy3eoehxn_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpy3eoehxn_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=40)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpy3eoehxn_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpy3eoehxn_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpy3eoehxn_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660073653
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    y -= x\n    \n    for {\n        if x % 2 == 0 &&\
    \ y % 2 == 0 {\n            return x\n        }\n        x /= 2\n        y /=\
    \ 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpz4er7pn2_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz4er7pn2_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpz4er7pn2_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz4er7pn2_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpz4er7pn2_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz4er7pn2_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpz4er7pn2_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660073653
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    if x %\
    \ 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x % 2 == 0\
    \ {\n        return x\n    }\n    \n    x /= 2\n    \n    if x % 2 == 0 {\n  \
    \      return x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for {\n        if x % 2 == 0 {\n     \
    \       return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpk4fuzh6l_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpk4fuzh6l_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpk4fuzh6l_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpk4fuzh6l_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpk4fuzh6l_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpk4fuzh6l_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpk4fuzh6l_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.021s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x >= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 && y % 2 != 0 {\n        return x + y\n    }\n    if x % 2 != 0 &&\
    \ y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 != 0 && y % 2 != 0 {\n\
    \        return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpf7h4xymw_test.go:56: expected '%!s(int=14)', got '%!s(int=27)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpf7h4xymw_test.go:56:\
    \ expected '%!s(int=12354)', got '%!s(int=12387)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpf7h4xymw_test.go:56: expected '%!s(int=28)', got '%!s(int=35)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpf7h4xymw_test.go:56:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.028s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    \n    for i := 0; i < y; i++\
    \ {\n        if x % 2 == 0 {\n            x = x / 2\n        } else {\n      \
    \      x = x * 3 + 1\n        }\n    }\n    return x\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp29ka5ez5_test.go:49: expected '%!s(int=14)', got '%!s(int=5)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp29ka5ez5_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp29ka5ez5_test.go:49: expected '%!s(int=12354)', got '%!s(int=526)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp29ka5ez5_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp29ka5ez5_test.go:49: expected '%!s(int=28)', got '%!s(int=17)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp29ka5ez5_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=214)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp29ka5ez5_test.go:49: expected '%!s(int=-1)', got '%!s(int=13)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp29ka5ez5_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.024s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x%2 == 0 {\n            return x\n        }\n  \
    \      x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6hm1v5kh_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6hm1v5kh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6hm1v5kh_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6hm1v5kh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6hm1v5kh_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6hm1v5kh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6hm1v5kh_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp6hm1v5kh_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.049s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i\
    \ := 0; i < y; i++ {\n        if x % 2 == 0 {\n            x = x / 2\n       \
    \ } else {\n            x = x * 3 + 1\n        }\n    }\n    \n    return x\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpn8_gc3cg_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpn8_gc3cg_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpn8_gc3cg_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpn8_gc3cg_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpn8_gc3cg_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpn8_gc3cg_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpn8_gc3cg_test.go:52: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.025s\nFAIL\n"
  timestamp: 1660073654
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x >= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpl_gx7wvb_test.go:55: expected '%!s(int=14)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpl_gx7wvb_test.go:55:\
    \ expected '%!s(int=12354)', got '%!s(int=-7)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpl_gx7wvb_test.go:55: expected '%!s(int=28)', got '%!s(int=-82)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpl_gx7wvb_test.go:55:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.029s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            x += y\n        }\n        x /= 2\n    }\n    \n    return\
    \ x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpoh09mf5v_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpoh09mf5v_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpoh09mf5v_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpoh09mf5v_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpoh09mf5v_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpoh09mf5v_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpoh09mf5v_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.048s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.054s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 &&\
    \ y % 2 == 0 {\n            return x\n        }\n        x /= 2\n        y /=\
    \ 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp770uoseq_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp770uoseq_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp770uoseq_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp770uoseq_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=40)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp770uoseq_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp770uoseq_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp770uoseq_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.034s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n        }\n\
    \        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.034s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    \n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    \n    x /= 2\n    y /= 2\n    \n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    \n    x /= 2\n    y /= 2\n    \n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2d0ra6sz_test.go:66: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2d0ra6sz_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2d0ra6sz_test.go:66: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2d0ra6sz_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2d0ra6sz_test.go:66: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2d0ra6sz_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2d0ra6sz_test.go:66: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x == 0 {\n\
    \            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpe7uc3ogr_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpe7uc3ogr_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpe7uc3ogr_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            x /= 2\n        } else {\n            return -1\n      \
    \  }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2a7eyemm_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp2a7eyemm_test.go:55:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2a7eyemm_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp2a7eyemm_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.023s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    // Initialize a variable called 'even' to zero\n    var even\
    \ int = 0\n    \n    // Initialize a variable called 'odd' to zero\n    var odd\
    \ int = 0\n    \n    // Initialize a variable called 'max' to zero\n    var max\
    \ int = 0\n    \n    // Initialize a variable called 'min' to zero\n    var min\
    \ int = 0\n    \n    // Initialize a variable called 'i' to zero\n    var i int\
    \ = 0\n    \n    // Initialize a variable called 'j' to zero\n    var j int =\
    \ 0\n    \n    // Initialize a variable called 'k' to zero\n    var k int = 0\n\
    \    \n    // Initialize a variable called 'l' to zero\n    var l int = 0\n  \
    \  \n    // Initialize a variable called 'm' to zero\n    var m int = 0\n    \n\
    \    // Initialize a variable called 'n' to zero\n    var n int = 0\n    \n  \
    \  // Initialize a variable called 'o' to zero\n    var o int = 0\n    \n    //\
    \ Initialize a variable called 'p' to zero\n    var p int = 0\n    \n    // Initialize\
    \ a variable called 'q' to zero\n    var q int = 0\n    \n    // Initialize a\
    \ variable called 'r' to zero\n    var r int = 0\n    \n    // Initialize a variable\
    \ called 's' to zero\n    var s int = 0\n    \n    // Initialize a variable called\
    \ 't' to zero\n    var t int = 0\n    \n    // Initialize a variable called 'u'\
    \ to zero\n    var u int = 0\n    \n    // Initialize a variable called 'v' to\
    \ zero\n    var v int = 0\n    \n    // Initialize a variable called 'w' to zero\n\
    \    var w int = 0\n    \n    // Initialize a variable called 'x' to zero\n  \
    \  var x int = 0\n    \n    // Initialize a variable called 'y' to zero\n    var\
    \ y int = 0\n    \n    // Initialize a variable called 'z' to zero\n    var z\
    \ int = 0\n    \n    // Initialize a variable called 'a' to zero\n    var a int\
    \ = 0\n    \n    // Initialize a variable called 'b' to zero\n    var b int =\
    \ 0\n    \n    // Initialize a variable called 'c' to zero\n    var c int = 0\n\
    \    \n    // Initialize a variable called 'd' to zero\n    var d int = 0\n  \
    \  \n    // Initialize a variable called 'e' to zero\n    var e int = 0\n    \n\
    \    // Initialize a variable called 'f' to zero\n    var f int = 0\n    \n  \
    \  // Initialize a variable called 'g' to zero\n    var g int = 0\n    \nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8wqfldjr_test.go:109:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073653
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    if x % 2 == 0 {\n        return x + y\n\
    \    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw4pu22wm_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw4pu22wm_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpw4pu22wm_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpw4pu22wm_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpw4pu22wm_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpw4pu22wm_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpw4pu22wm_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.031s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x%2 == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1fndqcit_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1fndqcit_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1fndqcit_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1fndqcit_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1fndqcit_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1fndqcit_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1fndqcit_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp1fndqcit_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.025s\nFAIL\n"
  timestamp: 1660073646
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x % 2 ==\
    \ 0 {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpolmsmar1_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpolmsmar1_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpolmsmar1_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpolmsmar1_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpolmsmar1_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpolmsmar1_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpolmsmar1_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.039s\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    y -= x\n    \n    for {\n        if x % 2 == 0 &&\
    \ y % 2 == 0 {\n            return x\n        }\n        if x % 2 == 0 && y %\
    \ 2 != 0 {\n            return y\n        }\n        if x % 2 != 0 && y % 2 ==\
    \ 0 {\n            return x\n        }\n        if x % 2 != 0 && y % 2 != 0 {\n\
    \            return y\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpe7amjzu4_test.go:63: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpe7amjzu4_test.go:63:\
    \ expected '%!s(int=-1)', got '%!s(int=11)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpe7amjzu4_test.go:63: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpe7amjzu4_test.go:63:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpe7amjzu4_test.go:63: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpe7amjzu4_test.go:63:\
    \ expected '%!s(int=-1)', got '%!s(int=-7)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpe7amjzu4_test.go:63: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 && y % 2 != 0 {\n        return x + 1\n    }\n    if x % 2 != 0 &&\
    \ y % 2 == 0 {\n        return x + 1\n    }\n    if x % 2 != 0 && y % 2 != 0 {\n\
    \        return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpzl1lwcrj_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpzl1lwcrj_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpzl1lwcrj_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpzl1lwcrj_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpzl1lwcrj_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpzl1lwcrj_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpzl1lwcrj_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660073657
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for {\n        x -= 2\n        if x % 2 ==\
    \ 0 {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073668
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 != 0 && y % 2 !=\
    \ 0 {\n        return x + y - 1\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpz72q5gn0_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz72q5gn0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpz72q5gn0_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz72q5gn0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpz72q5gn0_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz72q5gn0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpz72q5gn0_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n"
  timestamp: 1660073657
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 == 0 {\n\
    \            x = x / 2\n        } else {\n            y = y / 2\n        }\n \
    \       if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073668
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    \n    for {\n        if x%2 == 0 {\n\
    \            return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpt1kq5lmp_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpt1kq5lmp_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpt1kq5lmp_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpt1kq5lmp_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpt1kq5lmp_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpt1kq5lmp_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpt1kq5lmp_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073646
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpf8ol5vs4_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpf8ol5vs4_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpf8ol5vs4_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpf8ol5vs4_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=5237)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpf8ol5vs4_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpf8ol5vs4_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpf8ol5vs4_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660073644
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            x /= 2\n        } else\
    \ {\n            return i\n        }\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpkk7u3cxb_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpkk7u3cxb_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpkk7u3cxb_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpkk7u3cxb_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpkk7u3cxb_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpkk7u3cxb_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpkk7u3cxb_test.go:52: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i\
    \ := 0; i < y; i++ {\n        if x % 2 == 0 {\n            x = x / 2\n       \
    \ } else {\n            x = x * 3 + 1\n        }\n    }\n    \n    return x\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpn8_gc3cg_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpn8_gc3cg_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpn8_gc3cg_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpn8_gc3cg_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpn8_gc3cg_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpn8_gc3cg_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpn8_gc3cg_test.go:52: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.025s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    y /= 2\n    \n    if x % 2 == 0 {\n\
    \        return x + y\n    }\n    return x - y\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpmuysldov_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpmuysldov_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpmuysldov_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpmuysldov_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=2616)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpmuysldov_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpmuysldov_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpmuysldov_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.026s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n    if\
    \ y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmp7ehzinib_test.go:14 +0x8b fp=0xc0201e03a0 sp=0xc0201e0398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:27\
    \ +0x45 fp=0xc0201e03c0 sp=0xc0201e03a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7ehzinib_test.go:25 +0x30 fp=0xc0201e03e0 sp=0xc0201e03c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:22\
    \ +0x57 fp=0xc0201e0400 sp=0xc0201e03e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7ehzinib_test.go:27 +0x45 fp=0xc0201e0420 sp=0xc0201e0400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:25\
    \ +0x30 fp=0xc0201e0440 sp=0xc0201e0420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7ehzinib_test.go:22 +0x57 fp=0xc0201e0460 sp=0xc0201e0440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:27\
    \ +0x45 fp=0xc0201e0480 sp=0xc0201e0460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7ehzinib_test.go:25 +0x30 fp=0xc0201e04a0 sp=0xc0201e0480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:22\
    \ +0x57 fp=0xc0201e04c0 sp=0xc0201e04a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7ehzinib_test.go:27 +0x45 fp=0xc0201e04e0 sp=0xc0201e04c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp7ehzinib_test.go:25\
    \ +0x30 fp=0xc0201e0500 sp=0xc0201e04e0 pc=0x4ef690\ncomma"
  timestamp: 1660073653
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.054s\nFAIL\n"
  timestamp: 1660073655
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n    return\
    \ choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp9pk5pptp_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp9pk5pptp_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp9pk5pptp_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= 2\n    y -= 2\n    \n    var result int\n    \n    for\
    \ {\n        result ^= x\n        result ^= y\n        result *= 2\n        \n\
    \        if result > x {\n            break\n        }\n        \n        x -=\
    \ 2\n        y -= 2\n    }\n    \n    return result\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpfb423hee_test.go:63: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpfb423hee_test.go:63:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpfb423hee_test.go:63: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpfb423hee_test.go:63:\
    \ expected '%!s(int=-1)', got '%!s(int=8146)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpfb423hee_test.go:63: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpfb423hee_test.go:63:\
    \ expected '%!s(int=-1)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpfb423hee_test.go:63: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660073658
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    \n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7dnqiyr9_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7dnqiyr9_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7dnqiyr9_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7dnqiyr9_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7dnqiyr9_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7dnqiyr9_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7dnqiyr9_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073658
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    if\
    \ y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp95zvjct2_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp95zvjct2_test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp95zvjct2_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp95zvjct2_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073658
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x%2 == 0 &&\
    \ y%2 == 0 {\n            return x\n        }\n        if x%2 == 0 {\n       \
    \     return y\n        }\n        if y%2 == 0 {\n            return x\n     \
    \   }\n        x, y = y, x%2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073669
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    if\
    \ y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n    return choose_num(x\
    \ / 2, y / 2)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0200f0390\
    \ stack=[0xc0200f0000, 0xc0400f0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0x1?,\
    \ 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:14 +0xb9 fp=0xc0200f03a0 sp=0xc0200f0398 pc=0x4ef719\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:25\
    \ +0x3d fp=0xc0200f03c0 sp=0xc0200f03a0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:25 +0x3d fp=0xc0200f03e0 sp=0xc0200f03c0 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:25\
    \ +0x3d fp=0xc0200f0400 sp=0xc0200f03e0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:25 +0x3d fp=0xc0200f0420 sp=0xc0200f0400 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:25\
    \ +0x3d fp=0xc0200f0440 sp=0xc0200f0420 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:25 +0x3d fp=0xc0200f0460 sp=0xc0200f0440 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:25\
    \ +0x3d fp=0xc0200f0480 sp=0xc0200f0460 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:25 +0x3d fp=0xc0200f04a0 sp=0xc0200f0480 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:25\
    \ +0x3d fp=0xc0200f04c0 sp=0xc0200f04a0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:25 +0x3d fp=0xc0200f04e0 sp=0xc0200f04c0 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpkogbmjz9_test.go:25\
    \ +0x3d fp=0xc0200f0500 sp=0xc0200f04e0 pc=0x4ef69d\ncommand-line-arg"
  timestamp: 1660073661
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            x = x / 2\n        } else\
    \ {\n            return i\n        }\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpmn24pu91_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpmn24pu91_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpmn24pu91_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpmn24pu91_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpmn24pu91_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpmn24pu91_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpmn24pu91_test.go:52: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.026s\nFAIL\n"
  timestamp: 1660073658
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x%2 == 0 &&\
    \ y%2 == 0 {\n            return x\n        }\n        if x%2 == 0 {\n       \
    \     return y\n        }\n        if y%2 == 0 {\n            return x\n     \
    \   }\n        x, y = y, x%2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073669
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    \n    if x%2 == 0 {\n        return\
    \ x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_7affrvi_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_7affrvi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp_7affrvi_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp_7affrvi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_7affrvi_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp_7affrvi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp_7affrvi_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n"
  timestamp: 1660073659
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return\
    \ x\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x / 2, y)\n \
    \   }\n    \n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    \n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    \n\
    \    if x % 2 == 1 && y % 2 == 1 {\n        return x + y\n    }\n    \n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp34k4da1z_test.go:62: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp34k4da1z_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp34k4da1z_test.go:62: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp34k4da1z_test.go:62:\
    \ expected '%!s(int=28)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmp34k4da1z_test.go:62: expected '%!s(int=-1)', got '%!s(int=32)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp34k4da1z_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.053s\nFAIL\n"
  timestamp: 1660073659
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9phh4hkn_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp9phh4hkn_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp9phh4hkn_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp9phh4hkn_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp9phh4hkn_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp9phh4hkn_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp9phh4hkn_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp9phh4hkn_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.035s\nFAIL\n"
  timestamp: 1660073659
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y + 1\n    }\n    if x % 2 != 0 && y %\
    \ 2 != 0 {\n        return x + y - 1\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6oyg5ffd_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=26)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6oyg5ffd_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6oyg5ffd_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=38)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n"
  timestamp: 1660073651
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= 2\n    y -= 2\n    \n    var result int\n    \n    for\
    \ {\n        if x % 2 == 0 {\n            x /= 2\n            result += 1\n  \
    \      }\n        if y % 2 == 0 {\n            y /= 2\n            result += 1\n\
    \        }\n        if x == y {\n            break\n        }\n        x -= 2\n\
    \        y -= 2\n    }\n    \n    return result\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073670
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x >= y {\n        return -1\n    }\n    \n    x -= 2\n    y -= 2\n   \
    \ \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return x + y\n\
    \        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpeur1pzwl_test.go:52: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpeur1pzwl_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=386)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpeur1pzwl_test.go:52: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpeur1pzwl_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073659
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y + 1\n    }\n    if x % 2 != 0 && y %\
    \ 2 != 0 {\n        return x + y - 1\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6oyg5ffd_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=26)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6oyg5ffd_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6oyg5ffd_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=38)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6oyg5ffd_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n        y\
    \ /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpeql96jl4_test.go:48: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpeql96jl4_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpeql96jl4_test.go:48: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpeql96jl4_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpeql96jl4_test.go:48: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpeql96jl4_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpeql96jl4_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073660
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            y = y / 2\n        }\n\
    \        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n        }\n\
    \        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7_wlnh_5_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7_wlnh_5_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7_wlnh_5_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7_wlnh_5_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7_wlnh_5_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7_wlnh_5_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7_wlnh_5_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp7_wlnh_5_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x%2 == 0 &&\
    \ y%2 == 0 {\n            return x\n        }\n        if x%2 != 0 && y%2 != 0\
    \ {\n            return -1\n        }\n        x /= 2\n        y /= 2\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpij8prjbh_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpij8prjbh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpij8prjbh_test.go:50: expected '%!s(int=12354)', got '%!s(int=3088)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpij8prjbh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpij8prjbh_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.025s\nFAIL\n"
  timestamp: 1660073660
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073672
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x%2 == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvxfo45rf_test.go:49: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpvxfo45rf_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvxfo45rf_test.go:49: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpvxfo45rf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpvxfo45rf_test.go:49: expected '%!s(int=546)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.034s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    if x %\
    \ 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x % 2 == 0\
    \ {\n        return x\n    }\n    \n    x /= 2\n    \n    if x % 2 == 0 {\n  \
    \      return x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x%2 == 0 {\n            return x\n        }\n  \
    \      x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6hm1v5kh_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6hm1v5kh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6hm1v5kh_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6hm1v5kh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6hm1v5kh_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6hm1v5kh_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6hm1v5kh_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp6hm1v5kh_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.049s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp28756sn2_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp28756sn2_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x == 0 {\n\
    \            return x\n        }\n        y /= 2\n        if y == 0 {\n      \
    \      return y\n        }\n        if x > y {\n            return -1\n      \
    \  }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp3tkcyag0_test.go:59: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp3tkcyag0_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp3tkcyag0_test.go:59: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp3tkcyag0_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp3tkcyag0_test.go:59: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp3tkcyag0_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.030s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n    return\
    \ choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp9pk5pptp_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp9pk5pptp_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp9pk5pptp_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp9pk5pptp_test.go:47: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    \n    for {\n        if x%2 ==\
    \ 0 && y%2 == 0 {\n            return x\n        }\n        \n        x /= 2\n\
    \        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7wblsmfa_test.go:49: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7wblsmfa_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7wblsmfa_test.go:49: expected '%!s(int=12354)', got '%!s(int=3088)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7wblsmfa_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7wblsmfa_test.go:49: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7wblsmfa_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7wblsmfa_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    if\
    \ y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmph53o9n33_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmph53o9n33_test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmph53o9n33_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmph53o9n33_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.048s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.048s\nFAIL\n"
  timestamp: 1660073641
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            y = y / 2\n        }\n\
    \        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n        y\
    \ /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=12354)', got '%!s(int=3088)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpinkogy8d_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpinkogy8d_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x >= y {\n        return -1\n    }\n    \n    x -= y\n    x /= 2\n   \
    \ \n    for {\n        if x % 2 == 0 {\n            return x\n        }\n    \
    \    x /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpo4f5ujwk_test.go:50: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpo4f5ujwk_test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpo4f5ujwk_test.go:50: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpo4f5ujwk_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.023s\nFAIL\n"
  timestamp: 1660073662
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n        y\
    \ /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=12354)', got '%!s(int=3088)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    if x %\
    \ 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x % 2 == 0\
    \ {\n        return x\n    }\n    \n    x /= 2\n    \n    if x % 2 == 0 {\n  \
    \      return x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4hinpt7d_test.go:60: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4hinpt7d_test.go:60:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x % 2 == 0 {\n            return x\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9phh4hkn_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp9phh4hkn_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp9phh4hkn_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp9phh4hkn_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp9phh4hkn_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp9phh4hkn_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp9phh4hkn_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp9phh4hkn_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.035s\nFAIL\n"
  timestamp: 1660073659
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    // The loop will run at most y times.\n    for i := 0; i < y;\
    \ i++ {\n        if x % 2 == 0 {\n            return x\n        }\n        x /=\
    \ 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpmdjilqv2_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpmdjilqv2_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpmdjilqv2_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpmdjilqv2_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpmdjilqv2_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpmdjilqv2_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpmdjilqv2_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660073662
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.048s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    y /= 2\n    \n    if x % 2 == 0 {\n\
    \        return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2_f38_0s_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2_f38_0s_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2_f38_0s_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2_f38_0s_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=2616)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2_f38_0s_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2_f38_0s_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2_f38_0s_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.024s\nFAIL\n"
  timestamp: 1660073662
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n    \
    \    }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n   \
    \         y = y * 3 + 1\n        }\n        if x >= y {\n            return x\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n \
    \ candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15),\
    \ expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual:\
    \ candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233),\
    \ expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual:\
    \ candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected:\
    \ -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpsz_zoyl0_test.go:56: expected '%!s(int=14)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpsz_zoyl0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpsz_zoyl0_test.go:56: expected '%!s(int=12354)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpsz_zoyl0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=15700)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpsz_zoyl0_test.go:56: expected '%!s(int=28)', got '%!s(int=16)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpsz_zoyl0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpsz_zoyl0_test.go:56: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpsz_zoyl0_test.go:56:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.035s\nFAIL\n"
  timestamp: 1660073662
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x == 0 {\n\
    \            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpe7uc3ogr_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpe7uc3ogr_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpe7uc3ogr_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpe7uc3ogr_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    \n    for i := x; i <= y; i++\
    \ {\n        if i%2 == 0 {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptkur75tx_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmptkur75tx_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmptkur75tx_test.go:47: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmptkur75tx_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptkur75tx_test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmptkur75tx_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.030s\nFAIL\n"
  timestamp: 1660073663
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            x /= 2\n        } else {\n            return i\n       \
    \ }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp71prvk7k_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp71prvk7k_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp71prvk7k_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp71prvk7k_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp71prvk7k_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp71prvk7k_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp71prvk7k_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.031s\nFAIL\n"
  timestamp: 1660073663
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    \n    for {\n        if x % 2\
    \ == 0 && y % 2 == 0 {\n            return x\n        }\n        \n        x /=\
    \ 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp75vfrdmh_test.go:49: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp75vfrdmh_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp75vfrdmh_test.go:49: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp75vfrdmh_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp75vfrdmh_test.go:49: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp75vfrdmh_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp75vfrdmh_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.043s\nFAIL\n"
  timestamp: 1660073663
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x%2 == 0 &&\
    \ y%2 == 0 {\n            return x\n        }\n        x /= 2\n        y /= 2\n\
    \    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpou0ggljl_test.go:48: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpou0ggljl_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpou0ggljl_test.go:48: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpou0ggljl_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpou0ggljl_test.go:48: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpou0ggljl_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpou0ggljl_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073663
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpk0ux2hjn_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpk0ux2hjn_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpk0ux2hjn_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpk0ux2hjn_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpk0ux2hjn_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpk0ux2hjn_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpk0ux2hjn_test.go:50: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.034s\nFAIL\n"
  timestamp: 1660073663
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x /= 2\n        if x == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp5142pj15_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp5142pj15_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.048s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if\
    \ x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 != 0 && y % 2 !=\
    \ 0 {\n        return x + y - 1\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpz72q5gn0_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz72q5gn0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpz72q5gn0_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz72q5gn0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpz72q5gn0_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz72q5gn0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpz72q5gn0_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n"
  timestamp: 1660073657
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x >= y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x%2 == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073675
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            y = y / 2\n        }\n\
    \        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for {\n\
    \        x -= 2\n        if x%2 == 0 {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073675
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -= 2\n   \
    \ \n    var result int\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n\
    \            result = x + y\n            break\n        }\n        \n        x\
    \ /= 2\n        y /= 2\n    }\n    \n    return result\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpkx_zeaqs_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpkx_zeaqs_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpkx_zeaqs_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpkx_zeaqs_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpkx_zeaqs_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpkx_zeaqs_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpkx_zeaqs_test.go:57: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660073663
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n    for i :=\
    \ 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n        }\n\
    \        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp8tpacj3d_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp8tpacj3d_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.034s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 +\
    \ 1\n        }\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpm0nd9tm0_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpm0nd9tm0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpm0nd9tm0_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpm0nd9tm0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=5237)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpm0nd9tm0_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpm0nd9tm0_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpm0nd9tm0_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660073664
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -= 2\n   \
    \ \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return x + y\n\
    \        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7keg0ney_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7keg0ney_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7keg0ney_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7keg0ney_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7keg0ney_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7keg0ney_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp7keg0ney_test.go:52: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073644
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        x -= 2\n     \
    \   y -= 2\n        if x == y {\n            return x\n        }\n        if x\
    \ % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073676
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            y = y / 2\n        }\n\
    \        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x%2 == 0 &&\
    \ y%2 == 0 {\n            return x\n        }\n        x /= 2\n        y /= 2\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_ewy7z48_test.go:47: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_ewy7z48_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp_ewy7z48_test.go:47: expected '%!s(int=12354)', got '%!s(int=3088)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp_ewy7z48_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_ewy7z48_test.go:47: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp_ewy7z48_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp_ewy7z48_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660073664
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.054s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    // Initialize a variable called \"even\" to store whether x\
    \ is even\n    // or odd.\n    var even bool\n    \n    // Initialize a variable\
    \ called \"result\" to store the biggest\n    // even number that is in the range\
    \ [x, y] inclusive.\n    var result int\n    \n    // Initialize a variable called\
    \ \"i\" to store the number of times\n    // x is even.\n    var i int\n    \n\
    \    // Initialize a variable called \"j\" to store the number of times\n    //\
    \ y is even.\n    var j int\n    \n    // Initialize a variable called \"k\" to\
    \ store the number of times\n    // x is odd.\n    var k int\n    \n    // Initialize\
    \ a variable called \"l\" to store the number of times\n    // y is odd.\n   \
    \ var l int\n    \n    // Initialize a variable called \"count\" to store the\
    \ number of\n    // times x is even.\n    var count int\n    \n    // Initialize\
    \ a variable called \"count2\" to store the number of\n    // times y is even.\n\
    \    var count2 int\n    \n    // Initialize a variable called \"count3\" to store\
    \ the number of\n    // times x is odd.\n    var count3 int\n    \n    // Initialize\
    \ a variable called \"count4\" to store the number of\n    // times y is odd.\n\
    \    var count4 int\n    \n    // Initialize a variable called \"count5\" to store\
    \ the number of\n    // times x is even and y is even.\n    var count5 int\n \
    \   \n    // Initialize a variable called \"count6\" to store the number of\n\
    \    // times y is even and x is even.\n    var count6 int\n    \n    // Initialize\
    \ a variable called \"count7\" to store the number of\n    // times x is odd and\
    \ y is even.\n    var count7 int\n    \n    // Initialize a variable called \"\
    count8\" to store the number of\n    // times y is odd and x is even.\n    var\
    \ count8 int\n    \n    // Initialize a variable called \"count9\" to store the\
    \ number of\n    // times x is even and y is odd.\n    var count9 int\n    \n\
    \    // Initialize a variable called \"count10\" to store the number of\n    //\
    \ times y is even and x is odd.\n    var count10 int\n    \n    // Initialize\
    \ a variable called \"count11\" to store the number of\n    // times x is odd\
    \ and y is odd.\n    var count11 int\n    \n    // Initialize a variable called\
    \ \"count12\" to store the number of\n    // times y is odd and x is odd.\n  \
    \  var count12 int\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa2xw4d4m_test.go:94:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073663
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n        y\
    \ /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=12354)', got '%!s(int=3088)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpl760cn3i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpl760cn3i_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    // The first even number in the range [x, y] inclusive.\n  \
    \  x -= 2\n    y -= 2\n    \n    // The biggest even number in the range [x, y]\
    \ inclusive.\n    x -= 2\n    y -= 2\n    \n    // The biggest even number in\
    \ the range [x, y] inclusive.\n    x -= 2\n    y -= 2\n    \n    // The biggest\
    \ even number in the range [x, y] inclusive.\n    x -= 2\n    y -= 2\n    \n \
    \   // The biggest even number in the range [x, y] inclusive.\n    x -= 2\n  \
    \  y -= 2\n    \n    // The biggest even number in the range [x, y] inclusive.\n\
    \    x -= 2\n    y -= 2\n    \n    // The biggest even number in the range [x,\
    \ y] inclusive.\n    x -= 2\n    y -= 2\n    \n    // The biggest even number\
    \ in the range [x, y] inclusive.\n    x -= 2\n    y -= 2\n    \n    // The biggest\
    \ even number in the range [x, y] inclusive.\n    x -= 2\n    y -= 2\n    \n \
    \   // The biggest even number in the range [x, y] inclusive.\n    x -= 2\n  \
    \  y -= 2\n    \n    // The biggest even number in the range [x, y] inclusive.\n\
    \    x -= 2\n    y -= 2\n    \n    // The biggest even number in the range [x,\
    \ y] inclusive.\n    x -= 2\n    y -= 2\n    \n    // The biggest even number\
    \ in the range [x, y] inclusive.\n    x -= 2\n    y -= 2\n    \n    // The biggest\
    \ even number in the range [x, y] inclusive.\n    x -= 2\n    y -= 2\n    \n \
    \   // The biggest even number in the range [x, y] inclusive.\n    x -= 2\n  \
    \  y -= 2\n    \n    // The biggest even number in the range [x, y] inclusive.\n\
    \    x -= 2\n    y -= 2\n    \n    // The biggest even number in the range [x,\
    \ y] inclusive.\n    x -= 2\n    y -= 2\n    \n    // The biggest even number\
    \ in the range [x, y] inclusive.\n    x -= 2\n    y -= 2\n    \n    // The biggest\
    \ even number in the range [x, y] inclusive.\n    x -= 2\n    y -= 2\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjbda8ntq_test.go:98:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073663
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    y -= x\n    \n    x /= 2\n    y /= 2\n    \n   \
    \ if x == 0 {\n        return y\n    }\n    if y == 0 {\n        return x\n  \
    \  }\n    \n    return x + choose_num(x - y, y)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp65e1s83a_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp65e1s83a_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp65e1s83a_test.go:58: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp65e1s83a_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=2616)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp65e1s83a_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp65e1s83a_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=-8888169825573067489)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp65e1s83a_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.034s\nFAIL\n"
  timestamp: 1660073664
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x%2 ==\
    \ 0 {\n            x = x/2\n        } else {\n            x = x + 1\n        }\n\
    \    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbuvi5b7m_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpbuvi5b7m_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpbuvi5b7m_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpbuvi5b7m_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbuvi5b7m_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpbuvi5b7m_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpbuvi5b7m_test.go:55: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660073664
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    if\
    \ y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp95zvjct2_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp95zvjct2_test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp95zvjct2_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp95zvjct2_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073658
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            y = y / 2\n        }\n\
    \        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n    if\
    \ y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp95zvjct2_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp95zvjct2_test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp95zvjct2_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp95zvjct2_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073658
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x % 2\
    \ == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpv18no103_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpv18no103_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.054s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        return -1\n    }\n    \n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    \n \
    \   return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwyx0yvaq_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwyx0yvaq_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwyx0yvaq_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwyx0yvaq_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwyx0yvaq_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwyx0yvaq_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwyx0yvaq_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660073664
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x % 2 == 0\
    \ {\n            x = x / 2\n        } else {\n            y = y / 2\n        }\n\
    \        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073650
