name: HumanEval_80_is_happy
language: go_test.go
prompt: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You are given a string s.\n// Your task is to check if the string is happy or\
  \ not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
  \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
  \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n"
tests: "func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
  aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true },\n\
  \     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
  adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false },\n\
  \     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual: candidate(\"\
  iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(s) < 3 {\n        return false\n    }\n    \n    lastIndex\
    \ := len(s) - 1\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[i+1]\
    \ {\n            return false\n        }\n        lastIndex = i\n    }\n    return\
    \ true\n}\n", "    if len(s) < 3 {\n        return false\n    }\n    last3 :=\
    \ s[len(s)-3:]\n    set := make(map[string]bool)\n    for _, c := range last3\
    \ {\n        set[c] = true\n    }\n    for _, c := range s {\n        if set[c]\
    \ {\n            return false\n        }\n        set[c] = true\n    }\n    return\
    \ true\n}\n", "    if len(s) < 3 {\n        return false\n    }\n    result :=\
    \ true\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n     \
    \       result = false\n            break\n        }\n    }\n    return result\n\
    }\n", "    if len(s) < 3 {\n        return false\n    }\n    lastLetter := s[len(s)-1]\n\
    \    for i := 0; i < len(s)-3; i++ {\n        if s[i] != lastLetter {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    if len(s) <\
    \ 3 {\n        return false\n    }\n    result := true\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == s[i+1] {\n            result = false\n        }\n\
    \    }\n    return result\n}\n", "    if len(s) < 3 {\n        return false\n\
    \    }\n    lastLetter := s[0]\n    for _, letter := range s[1:] {\n        if\
    \ letter == lastLetter {\n            return false\n        }\n        lastLetter\
    \ = letter\n    }\n    return true\n}\n", "    if len(s) < 3 {\n        return\
    \ false\n    }\n    result := true\n    for i := 0; i < len(s); i++ {\n      \
    \  if s[i] == s[i+1] {\n            result = false\n        }\n    }\n    return\
    \ result\n}\n", "    if len(s) < 3 {\n        return false\n    }\n    \n    last3\
    \ := s[len(s)-3:]\n    \n    seen := make(map[string]bool)\n    for _, c := range\
    \ last3 {\n        if seen[c] {\n            return false\n        }\n       \
    \ seen[c] = true\n    }\n    \n    return true\n}\n", "    if len(s) < 3 {\n \
    \       return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, c := range last3 {\n        set[c] = true\n    }\n    for _, c :=\
    \ range s {\n        if set[c] {\n            return false\n        }\n      \
    \  set[c] = true\n    }\n    return true\n}\n", "    if len(s) < 3 {\n       \
    \ return false\n    }\n    result := true\n    for i := 0; i < len(s); i++ {\n\
    \        if s[i] != s[i+1] {\n            result = false\n            break\n\
    \        }\n    }\n    return result\n}\n", "    if len(s) < 3 {\n        return\
    \ false\n    }\n    result := true\n    for i := 0; i < len(s); i++ {\n      \
    \  if s[i] == s[i+1] {\n            result = false\n        }\n    }\n    return\
    \ result\n}\n", "    if len(s) < 3 {\n        return false\n    }\n    result\
    \ := true\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[i] {\n    \
    \        result = false\n            break\n        }\n    }\n    return result\n\
    }\n", "    if len(s) < 3 {\n        return false\n    }\n    \n    lastIndex :=\
    \ len(s) - 1\n    \n    for i := 0; i < lastIndex; i++ {\n        if s[i] == s[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n",
  "    if len(s) < 3 {\n        return false\n    }\n    result := true\n    for i\
    \ := 0; i < len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n\
    \        }\n    }\n    return result\n}\n", "    if len(s) < 3 {\n        return\
    \ false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, c := range last3 {\n        set[c] = true\n    }\n    for _, c :=\
    \ range s {\n        if _, ok := set[c]; !ok {\n            return false\n   \
    \     }\n    }\n    return true\n}\n", "    if len(s) < 3 {\n        return false\n\
    \    }\n    result := true\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ != s[i] {\n            result = false\n            break\n        }\n    }\n\
    \    return result\n}\n", "    if len(s) < 3 {\n        return false\n    }\n\
    \    result := true\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[i]\
    \ {\n            result = false\n            break\n        }\n    }\n    return\
    \ result\n}\n", "    if len(s) < 3 {\n        return false\n    }\n    chars :=\
    \ make(map[rune]bool)\n    for _, r := range s {\n        chars[r] = true\n  \
    \  }\n    for i := 0; i < len(s); i += 3 {\n        if chars[s[i]] == true {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n", "    if len(s) < 3\
    \ {\n        return false\n    }\n    last3 := s[len(s)-3]\n    for i := 0; i\
    \ < len(s)-3 && s[i] != last3; i++ {\n        if s[i] != s[i+1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
