language: go_test.go
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmphe440sef_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmphe440sef_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int = 0\n \
    \   for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        sum += arr[i] - arr[i-k-1]\n    }\n    return sum\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpe_obshkk_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpe_obshkk_test.go:34\
    \ +0x6b2\ntesting.tRunner(0xc000103380, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmphe440sef_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmphe440sef_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    i :=\
    \ 0\n    for i < k {\n        sum += arr[i]\n        i++\n    }\n    return sum\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmptfhuyhlr_test.go:43: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptfhuyhlr_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum = 0\n    for\
    \ i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpr915_mtz_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpr915_mtz_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    start\
    \ := 0\n    end := k\n    for start < len(arr) {\n        if end > len(arr) {\n\
    \            end = len(arr)\n        }\n        result += arr[start]\n       \
    \ start += k\n        end -= k\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpjwjwfqco_test.go:48: expected '%!s(int=-4)', got '%!s(int=129)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpjwjwfqco_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=119)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpjwjwfqco_test.go:48: expected '%!s(int=125)', got '%!s(int=25)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpjwjwfqco_test.go:48:\
    \ expected '%!s(int=24)', got '%!s(int=125)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var result int\n  \
    \  for i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmph640wjld_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmph640wjld_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmphe440sef_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmphe440sef_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    max :=\
    \ len(arr) - k\n    for i := 0; i < max; i++ {\n        sum += arr[i]\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpa406eu8s_test.go:42: expected '%!s(int=-4)', got '%!s(int=170)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpa406eu8s_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=4235)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpa406eu8s_test.go:42: expected '%!s(int=125)', got '%!s(int=130)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpa406eu8s_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4140)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmpa406eu8s_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmphe440sef_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmphe440sef_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmphe440sef_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmphe440sef_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int = 0\n \
    \   for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp08l8xbe7_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp08l8xbe7_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ _, v := range arr[:k] {\n        result += v\n    }\n    return result\n}\n\n\
    func TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp5ae8l5rq_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5ae8l5rq_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int = 0\n \
    \   for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\n\
    func TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmppbyo7y5x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmppbyo7y5x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmppbyo7y5x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmppbyo7y5x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int = 0\n \
    \   for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpa1w_2dgg_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpa1w_2dgg_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpa1w_2dgg_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpa1w_2dgg_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    i :=\
    \ 0\n    for i < k {\n        sum += arr[i]\n        i++\n    }\n    return sum\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmptfhuyhlr_test.go:43: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptfhuyhlr_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum = 0\n    for\
    \ i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpr915_mtz_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpr915_mtz_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum = 0\n    for\
    \ i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpr915_mtz_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpr915_mtz_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    i\
    \ := 0\n    for i < k {\n        result += arr[i]\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp_0ktrwkn_test.go:43: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp_0ktrwkn_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var result int\n  \
    \  for i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmph640wjld_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmph640wjld_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    // Write your code\
    \ here\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n  \
    \  }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpjy8fz7pg_test.go:42: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpjy8fz7pg_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    k +=\
    \ 1 // k is 1-indexed\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_mc9xy9s_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_mc9xy9s_test.go:39\
    \ +0x64a\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    k %=\
    \ len(arr)\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpllk5d6_8_test.go:42: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpllk5d6_8_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmpllk5d6_8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    i :=\
    \ 0\n    for i < k {\n        sum += arr[i]\n        i++\n    }\n    return sum\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmptfhuyhlr_test.go:43: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptfhuyhlr_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum = 0\n    for\
    \ i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpr915_mtz_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpr915_mtz_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum = 0\n    for\
    \ _, v := range arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp14j5l6_k_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp14j5l6_k_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var result int\n  \
    \  for i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmph640wjld_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmph640wjld_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    i :=\
    \ 0\n    for i < k {\n        sum += arr[i]\n        i++\n    }\n    return sum\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmptfhuyhlr_test.go:43: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptfhuyhlr_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var result int\n  \
    \  for i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmph640wjld_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmph640wjld_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmphe440sef_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmphe440sef_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmprdtflo2z_test.go:44: expected '%!s(int=-4)', got '%!s(int=274)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmprdtflo2z_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=11)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmprdtflo2z_test.go:44: expected '%!s(int=125)', got '%!s(int=30)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmprdtflo2z_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmprdtflo2z_test.go:44: expected '%!s(int=-4)', got '%!s(int=274)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmprdtflo2z_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=11)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmprdtflo2z_test.go:44: expected '%!s(int=125)', got '%!s(int=30)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmprdtflo2z_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    // Write your code\
    \ here\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n  \
    \  }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpjy8fz7pg_test.go:42: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpjy8fz7pg_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    k +=\
    \ 2\n    for _, v := range arr[:k] {\n        sum += v\n    }\n    return sum\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:3] with capacity 1 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:3] with capacity 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpi4m47qv5_test.go:19\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpi4m47qv5_test.go:36\
    \ +0x56\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    // Write your code\
    \ here\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n  \
    \  }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpjy8fz7pg_test.go:42: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpjy8fz7pg_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmphe440sef_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmphe440sef_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    i :=\
    \ 0\n    for i < k {\n        sum += arr[i]\n        i++\n    }\n    return sum\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmptfhuyhlr_test.go:43: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptfhuyhlr_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    i :=\
    \ 0\n    for i < k {\n        sum += arr[i]\n        i++\n    }\n    return sum\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmptfhuyhlr_test.go:43: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptfhuyhlr_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    // write your code\
    \ here\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n  \
    \  }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp_o5b_3tg_test.go:42: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp_o5b_3tg_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmphe440sef_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmphe440sef_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmprdtflo2z_test.go:44: expected '%!s(int=-4)', got '%!s(int=274)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmprdtflo2z_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=11)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmprdtflo2z_test.go:44: expected '%!s(int=125)', got '%!s(int=30)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmprdtflo2z_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var result int\n  \
    \  \n    for i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    \n   \
    \ return result\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp8sjk1tie_test.go:43: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp8sjk1tie_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - arr[i-k-1]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpif6g7rd8_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpif6g7rd8_test.go:34\
    \ +0x6b2\ntesting.tRunner(0xc000199040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int = 0\n \
    \   for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        sum += arr[i] - arr[i-k-1]\n    }\n    return sum\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpe_obshkk_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpe_obshkk_test.go:34\
    \ +0x6b2\ntesting.tRunner(0xc000103380, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    // Write your code\
    \ here\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n  \
    \  }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpjy8fz7pg_test.go:42: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpjy8fz7pg_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmprdtflo2z_test.go:44: expected '%!s(int=-4)', got '%!s(int=274)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmprdtflo2z_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=11)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmprdtflo2z_test.go:44: expected '%!s(int=125)', got '%!s(int=30)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmprdtflo2z_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ _, v := range arr[:k] {\n        result += v\n    }\n    return result\n}\n\n\
    func TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp5ae8l5rq_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5ae8l5rq_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    i\
    \ := 0\n    for i < k {\n        result += arr[i]\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp_0ktrwkn_test.go:43: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp_0ktrwkn_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmphe440sef_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmphe440sef_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var result int\n  \
    \  for i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmph640wjld_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmph640wjld_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    i :=\
    \ 0\n    for i < k {\n        sum += arr[i]\n        i++\n    }\n    return sum\n\
    }\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmptfhuyhlr_test.go:43: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptfhuyhlr_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmphe440sef_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmphe440sef_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    for\
    \ i := 0; i < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmphe440sef_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmphe440sef_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    result := 0\n    i\
    \ := 0\n    for i < k {\n        result += arr[i]\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp_0ktrwkn_test.go:43: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp_0ktrwkn_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpj4a8s6ju_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpj4a8s6ju_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum = 0\n    for\
    \ i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpr915_mtz_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpr915_mtz_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected:\
    \ -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected:\
    \ 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected:\
    \ 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ expected: 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7buig3dk_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp7buig3dk_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    k +=\
    \ 1 // k starts at 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n  \
    \  }\n    for i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp556abfsv_test.go:20\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp556abfsv_test.go:39\
    \ +0x64a\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpivixht7x_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivixht7x_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    // Your code here\n\
    \    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n  \
    \  return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpn9u440ow_test.go:42: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpn9u440ow_test.go:42:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmp_m3cqiuc_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmp_m3cqiuc_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073725
