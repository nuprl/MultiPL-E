language: go_test.go
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,math,language-agnostic\
    \ |>\n<code>\npublic int largestDivisor(int n) {\n    int maxDivisor = 1;\n  \
    \  int maxNumber = n;\n    for(int i = 1; i < n; i++) {\n        if(n % i == 0)\
    \ {\n            maxDivisor = i;\n            maxNumber = n;\n        }\n    }\n\
    \    return maxDivisor;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public int largestDivisor(int n) {\n    int maxDivisor = 1;\n    int maxNumber\
    \ = n;\n    for(int i = 1; i < n; i++) {\n        if(n % i == 0) {\n         \
    \   maxDivisor = i;\n            maxNumber = n;\n        }\n    }\n    return\
    \ maxDivisor;\n}\n</code>\n<|/ a tags=algorithm,math,language-agnostic |>\n<|\
    \ a tags=algorithm,math,language-agnostic |>\n<code>\npublic int largestDivisor(int\
    \ n) {\n    int maxDivisor = 1;\n    int maxNumber = n;\n    for(int i = 1; i\
    \ < n; i++) {\n        if(n % i == 0) {\n            maxDivisor = i;\n       \
    \     maxNumber = n;\n        }\n    }\n    return maxDivisor;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic int largestDivisor(int n) {\n\
    \    int maxDivisor = 1;\n    int maxNumber = n;\n    for(int i = 1; i < n; i++)\
    \ {\n        if(n % i == 0) {\n            maxDivisor = i;\n            maxNumber\
    \ = n;\n        }\n    }\n    return maxDivisor;\n}\n</code>\n<|/ a tags=algorithm,math,language-agnostic\
    \ |>\n<| a dscore=1 |>\n<code>\npublic int largestDivisor(int n) {\n    int maxDivisor\
    \ = 1;\n    int maxNumber = n;\n    for(int i = 1; i < n; i++) {\n        if(n\
    \ % i == 0) {\n            maxDivisor = i;\n            maxNumber = n;\n     \
    \   }\n    }\n    return maxDivisor;\n}\n</code>\n<|/ a tags=algorithm,math,language-agnostic\
    \ |>\n<| a |>\n<code>\npublic int largestDivisor(int n) {\n    int maxDivisor\
    \ = 1;\n    int maxNumber = n;\n    for(int i = 1; i < n; i++) {\n        if(n\
    \ % i == 0) {\n            maxDivisor = i;\n            maxNumber = n;\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp64cjd75g_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073348
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= n / 2 {\n      \
    \  if n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= max / 2; divisor++\
    \ {\n        if n%divisor == 0 {\n            return divisor\n        }\n    }\n\
    \    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp80e__tqr_test.go:14:29: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073300
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    max := n\n    max /= 2\n\
    \    for i := 3; i <= max; i++ {\n        if n%i == 0 {\n            max /= i\n\
    \        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__1\
    \ (0.00s)\n        tmpf2otks10_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__2 (0.00s)\n        tmpf2otks10_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmpf2otks10_test.go:42: expected '%!s(int=50)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__4 (0.00s)\n        tmpf2otks10_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n</code>\n<|/ a tags=algorithm,math,go |>\n<| c |>\nThis does\
    \ not work. Try it with `largest_divisor(15)`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `largest_divisor(15)`\n<|/ c |>\n<| c |>\nIt does work. Try it with\
    \ `largest_divisor(15)`\n<|/ c |>\n<| c |>\nIt does work. Try it with `largest_divisor(15)`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `largest_divisor(15)`\n<|/ c |>\n\
    <| a tags=algorithm,math,go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n\
    \    \"math\"\n)\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu2za6znj_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073348
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= max / 2; divisor++\
    \ {\n        if n % divisor == 0 {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8v84y5n3_test.go:14:29: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor <<= 1\n        if divisor > n {\n            break\n        }\n\
    \        divisor_count++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpfdw1tw6h_test.go:41: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpfdw1tw6h_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpfdw1tw6h_test.go:41: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpfdw1tw6h_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpfdw1tw6h_test.go:41: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n%2 == 0 {\n        return n\n    }\n    max := n\n    for i :=\
    \ 3; i <= max; i++ {\n        if n%i == 0 {\n            max = i\n        }\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmptocjlrh2_test.go:41: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmptocjlrh2_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmptocjlrh2_test.go:41: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmptocjlrh2_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 1\n    for divisor_count < n {\n\
    \        if n%divisor == 0 {\n            divisor++\n            divisor_count++\n\
    \        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073312
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 1\n    for divisor_count < n {\n\
    \        divisor *= 2\n        divisor_count++\n    }\n    return divisor\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpttfd7lzj_test.go:38: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpttfd7lzj_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpttfd7lzj_test.go:38: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpttfd7lzj_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpttfd7lzj_test.go:38: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073301
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmprw0vdzyq_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmprw0vdzyq_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= n / 2 {\n      \
    \  if n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpk80tciz8_test.go:41: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpk80tciz8_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpk80tciz8_test.go:41: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= n / 2 {\n      \
    \  if n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    max := n\n    max /= 2\n\
    \    for i := 3; i <= max; i++ {\n        if n % i == 0 {\n            max /=\
    \ i\n        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__1\
    \ (0.00s)\n        tmpz1dg8yha_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__2 (0.00s)\n        tmpz1dg8yha_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmpz1dg8yha_test.go:42: expected '%!s(int=50)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__4 (0.00s)\n        tmpz1dg8yha_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073301
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    max := n\n    max /= 2\n\
    \    for i := 3; i <= max; i++ {\n        if n%i == 0 {\n            max /= i\n\
    \        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__1\
    \ (0.00s)\n        tmpf2otks10_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__2 (0.00s)\n        tmpf2otks10_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmpf2otks10_test.go:42: expected '%!s(int=50)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__4 (0.00s)\n        tmpf2otks10_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        if n%divisor == 0 {\n            divisor++\n            divisor_count++\n\
    \        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073360
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor += 1\n        if n%divisor == 0 {\n            divisor_count++\n\
    \        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073312
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        if n%divisor == 0 {\n            divisor++\n            divisor_count++\n\
    \        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073360
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max / 2 {\n    \
    \    if n%divisor == 0 {\n            return divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmprbq7gn3q_test.go:42: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmprbq7gn3q_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmprbq7gn3q_test.go:42: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max / 2 {\n    \
    \    if n%divisor == 0 {\n            return divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmprbq7gn3q_test.go:42: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmprbq7gn3q_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmprbq7gn3q_test.go:42: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max / 2 {\n    \
    \    if n%divisor == 0 {\n            return divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,math,c++,c\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int\
    \ n, i, j, k;\n    printf(\"Enter the number: \");\n    scanf(\"%d\", &n);\n \
    \   for(i=1;i<=n;i++)\n    {\n        for(j=1;j<=i;j++)\n        {\n         \
    \   if(i%j==0)\n            {\n                k=j;\n                break;\n\
    \            }\n        }\n        if(k==i)\n        {\n            printf(\"\\\
    nThe largest number which divides %d evenly is %d\", i, k);\n            break;\n\
    \        }\n    }\n    return 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,math,c++,c\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int\
    \ n, i, j, k;\n    printf(\"Enter the number: \");\n    scanf(\"%d\", &n);\n \
    \   for(i=1;i<=n;i++)\n    {\n        for(j=1;j<=i;j++)\n        {\n         \
    \   if(i%j==0)\n            {\n                k=j;\n                break;\n\
    \            }\n        }\n        if(k==i)\n        {\n            printf(\"\\\
    nThe largest number which divides %d evenly is %d\", i, k);\n            break;\n\
    \        }\n    }\n    return 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease\
    \ don't post only code as an answer, but also provide an explanation of what your\
    \ code does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| a tags=algorithm,math,c++,c |>\n<code>\n#include <stdio.h>\n\
    #include <stdlib.h>\n\nint main()\n{\n    int n, i, j, k;\n    printf(\"Enter\
    \ the number: \");\n    scanf(\"%d\", &n);\n    for(i=1;i<=n;i++)\n    {\n   \
    \     for(j=1;j<=i;j++)\n        {\n            if(i%j==0)\n            {\n  \
    \              k=j;\n                break;\n            }\n        }\n      \
    \  if(k==i)\n        {\n            printf(\"\\nThe largest number which divides\
    \ %d \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1d9ixs9b_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    max := n\n    for i := 2;\
    \ i <= n; i++ {\n        if n % i == 0 {\n            max = i\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpfng5c2hz_test.go:41: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpfng5c2hz_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpfng5c2hz_test.go:41: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpfng5c2hz_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpfng5c2hz_test.go:41: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n%2 == 0 {\n        return n\n    }\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp79ue1yj6_test.go:41: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp79ue1yj6_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp79ue1yj6_test.go:41: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp79ue1yj6_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp79ue1yj6_test.go:41: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp1tz66ewo_test.go:42: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp1tz66ewo_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp1tz66ewo_test.go:42: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor *= 2\n        if divisor > n {\n            divisor = n\n   \
    \     }\n        divisor_count++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpg03bwr8l_test.go:41: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpg03bwr8l_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpg03bwr8l_test.go:41: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpg03bwr8l_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpg03bwr8l_test.go:41: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n%2 == 0 {\n        return n\n    }\n    divisor := n\n    for\
    \ divisor > 2 {\n        if n%divisor == 0 {\n            return divisor\n   \
    \     }\n        divisor--\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmplzvsrpam_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmplzvsrpam_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmplzvsrpam_test.go:42: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmplzvsrpam_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmplzvsrpam_test.go:42: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    divisor := 1\n    max :=\
    \ n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor > max\
    \ {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp4tkdaypr_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp4tkdaypr_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp4tkdaypr_test.go:43: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp4tkdaypr_test.go:43:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp4tkdaypr_test.go:43: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 1\n    for divisor_count < n {\n\
    \        divisor *= 2\n        if divisor > n {\n            break\n        }\n\
    \        divisor_count++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdp4d2970_test.go:41: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdp4d2970_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdp4d2970_test.go:41: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdp4d2970_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdp4d2970_test.go:41: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073300
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= n / 2 {\n      \
    \  if n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073349
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        if n%divisor == 0 {\n            divisor++\n            divisor_count++\n\
    \        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073360
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n%2 == 0 {\n        return n\n    }\n    max := n\n    for i :=\
    \ 3; i <= max; i++ {\n        if n%i == 0 {\n            max = i\n        }\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmptocjlrh2_test.go:41: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmptocjlrh2_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmptocjlrh2_test.go:41: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmptocjlrh2_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < n {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor *= 2\n        divisor_count++\n    }\n    return divisor\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmppyf3oz20_test.go:38: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmppyf3oz20_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmppyf3oz20_test.go:38: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmppyf3oz20_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmppyf3oz20_test.go:38: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= max {\n        if\
    \ n%divisor == 0 {\n            return divisor\n        }\n        divisor++\n\
    \    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpkek41bjq_test.go:40: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpkek41bjq_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpkek41bjq_test.go:40: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073300
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    max := n\n    for i := 2;\
    \ i <= n; i++ {\n        if n % i == 0 {\n            max = i\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpfng5c2hz_test.go:41: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpfng5c2hz_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpfng5c2hz_test.go:41: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpfng5c2hz_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpfng5c2hz_test.go:41: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        if n%divisor == 0 {\n            divisor++\n            divisor_count++\n\
    \        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073360
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor *= 2\n        if divisor > n {\n            break\n        }\n\
    \        divisor_count++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpa_0mx3ac_test.go:42: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpa_0mx3ac_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpa_0mx3ac_test.go:42: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    max := n\n    max /= 2\n\
    \    for i := 3; i <= max; i++ {\n        if n%i == 0 {\n            max /= i\n\
    \        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__1\
    \ (0.00s)\n        tmpf2otks10_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__2 (0.00s)\n        tmpf2otks10_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmpf2otks10_test.go:42: expected '%!s(int=50)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__4 (0.00s)\n        tmpf2otks10_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max {\n        if\
    \ n%divisor == 0 {\n            divisor++\n        }\n    }\n\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073360
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,math,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n   \
    \ int n;\n    cin >> n;\n    int maxDivisor = 1;\n    int maxDivisorValue = n;\n\
    \    for(int i = 1; i < n; i++)\n    {\n        if(maxDivisorValue % i == 0)\n\
    \        {\n            maxDivisor = i;\n            maxDivisorValue = maxDivisorValue\
    \ / i;\n        }\n    }\n    cout << maxDivisor;\n    return 0;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=algorithm,math,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    int maxDivisor\
    \ = 1;\n    int maxDivisorValue = n;\n    for(int i = 1; i < n; i++)\n    {\n\
    \        if(maxDivisorValue % i == 0)\n        {\n            maxDivisor = i;\n\
    \            maxDivisorValue = maxDivisorValue / i;\n        }\n    }\n    cout\
    \ << maxDivisor;\n    return 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,math,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n   \
    \ int n;\n    cin >> n;\n    int maxDivisor = 1;\n    int maxDivisorValue = n;\n\
    \    for(int i = 1; i < n; i++)\n    {\n        if(maxDivisorValue % i == 0)\n\
    \        {\n            maxDivisor = i;\n            maxDivisorValue = maxDivisorValue\
    \ / i;\n        }\n    }\n    cout << maxDivisor;\n    return 0;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,math,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    int maxDivisor\
    \ = 1;\n    int maxDivisorValue = n;\n    for(int i = 1; i < n; i++)\n    {\n\
    \        if(maxDivisorValue % i == 0)\n        {\n            maxDivisor = i;\n\
    \            maxDivisorValue = maxDivisorValue / i;\n        }\n    }\n    cout\
    \ << maxDivisor;\n    return 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n\nfunc TestLargest_Divisor(t *testing.T) {\n\
    \  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphoqznkpi_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073348
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 1\n    for divisor_count < n {\n\
    \        divisor *= 2\n        divisor_count++\n    }\n    return divisor\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpttfd7lzj_test.go:38: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpttfd7lzj_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpttfd7lzj_test.go:38: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpttfd7lzj_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpttfd7lzj_test.go:38: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073301
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
