name: HumanEval_152_compare
language: go_test.go
prompt: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// I\
  \ think we all remember that feeling when the result of some long-awaited\n// event\
  \ is finally known. The feelings and thoughts you have at that moment are\n// definitely\
  \ worth noting down and comparing.\n// Your task is to determine if a person correctly\
  \ guessed the results of a number of matches.\n// You are given two arrays of scores\
  \ and guesses of equal length, where each index shows a match. \n// Return an array\
  \ of the same length denoting how far off each guess was. If they have guessed correctly,\n\
  // the value is 0, and if not, the value is the absolute difference between the\
  \ guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
  \ [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nfunc\
  \ compare(game []int, guess []int) []int {\n"
tests: "func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
  \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
  \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
  \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n  \
  \   { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
  \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
  \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
  \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, len(guess))\n    for i := range guess {\n\
    \        result[i] = 0\n    }\n    for i := range game {\n        if game[i] >\
    \ 0 {\n            result[guess[i]-1]++\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = game[i] - guess[i]\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for i := 0; i < len(game); i++ {\n        if game[i] != guess[i]\
    \ {\n            result = append(result, abs(game[i] - guess[i]))\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for i := 0; i < len(game);\
    \ i++ {\n        if game[i] != guess[i] {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}\n", "    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // ", "    result := make([]int, len(guess))\n   \
    \ for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range result {\n        result[i] = 0\n    }\n    for i := range guess {\n \
    \       if game[i] > 0 {\n            result[i] = game[i] - guess[i]\n       \
    \ } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for i := 0; i < len(guess);\
    \ i++ {\n        if game[i] != guess[i] {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        } else {\n            result = append(result,\
    \ 0)\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        result[i] = game[i] - guess[i]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] !=\
    \ guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    var result []int\n    var i int\n    var j\
    \ int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n\
    \    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n \
    \   var u int\n    var v int\n    var w int\n    var x int\n    var y int\n  \
    \  var z int\n    var a int\n    var b int\n    var c int\n    var d int\n   \
    \ var e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var\
    \ j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o\
    \ int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n\
    \    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n \
    \   var z int\n    var a int\n    var b int\n    var c int\n    var d int\n  \
    \  var e int\n    var f int\n    var g int\n    var h int\n    var i int\n   \
    \ var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var\
    \ o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t\
    \ int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n\
    \    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n \
    \   var e int\n    var f int\n    var g int\n    var h int\n    var i int\n  \
    \  var j int\n    var k int\n    var l int\n    var m int\n    var n int\n   \
    \ var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var\
    \ t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y\
    \ int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n\
    \    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n \
    \   var j int\n    var k int\n    var l int\n    var m int\n    var n int\n  \
    \  var o int\n    var p int\n    var q int\n    var r int\n    var s int\n   \
    \ var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var\
    \ y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d\
    \ int\n    var e int", "    result := make([]int, len(guess))\n    for i := range\
    \ guess {\n        result[i] = 0\n    }\n    for i := range game {\n        if\
    \ game[i] > 0 {\n            result[guess[i]-1]++\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range result\
    \ {\n        result[i] = 0\n    }\n    for i := range guess {\n        if game[i]\
    \ != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    result\
    \ := make([]int, len(guess))\n    for i := 0; i < len(guess); i++ {\n        result[i]\
    \ = abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = 0\n    }\n    for i := range game {\n\
    \        if game[i] != 0 {\n            result[guess[i]] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n", "    var result []int\n    \n    \n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        } else {\n            result[i] = 0\n   \
    \     }\n    }\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        } else {\n            result[i] = 0\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range result {\n        result[i] = 0\n    }\n    for i := range guess {\n \
    \       if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    \n   \
    \ \n    return guess\n}\n", "    result := make([]int, len(guess))\n    for i\
    \ := range result {\n        result[i] = 0\n    }\n    for i := range guess {\n\
    \        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        } else {\n            result[i] = 0\n        }\n    }\n    return result\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    //\
    \ Your code here\n    \n    return guess\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    \n    for i :=\
    \ range guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        } else {\n            result[i] = 0\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    \n    \n    return guess\n}\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    \n    for i := range result {\n        result[i] = 0\n    }\n\
    \    \n    for i := range guess {\n        if game[i] != guess[i] {\n        \
    \    result[i] = abs(game[i] - guess[i])\n        } else {\n            result[i]\
    \ = 0\n        }\n    }\n    \n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    \n\
    \    // Your code here\n    \n    return guess\n}\n", "    // Write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    //\
    \ Your code here\n    \n    \n    return guess\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ \n    for i := range guess {\n        if game[i] != guess[i] {\n           \
    \ result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n",
  "    // Your code here\n    \n    return guess\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = game[i] - guess[i]\n    }\n    return\
    \ result\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   result := make([]int, len(guess))\n    for i := range result {\n        result[i]\
    \ = game[i] - guess[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        } else {\n            result[i] = 0\n   \
    \     }\n    }\n    return result\n}\n", "    var result []int\n    \n    for\
    \ i := 0; i < len(guess); i++ {\n        diff := game[i] - guess[i]\n        if\
    \ diff < 0 {\n            diff *= -1\n        }\n        result = append(result,\
    \ diff)\n    }\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    \n    for i := 0; i < len(game); i++ {\n        if game[i]\
    \ != guess[i] {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    \n    // Your code here\n    \n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = game[i] - guess[i]\n\
    \    }\n    return result\n}\n", "    var result []int\n    \n    // Your code\
    \ here\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = 0\n    }\n    for i := range\
    \ game {\n        if game[i] > 0 {\n            result[guess[i]-1] = game[i] -\
    \ game[guess[i]-1]\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    \n    for i := 0; i < len(guess); i++ {\n        diff := abs(game[i]\
    \ - guess[i])\n        if diff == 0 {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = diff\n        }\n    }\n    \n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] ==\
    \ guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = 0\n    }\n    for i := range game {\n\
    \        if game[i] > 0 {\n            result[guess[i]-1] = game[i] - game[guess[i]-1]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    // Your code here\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    var result []int\n    \n    for i := 0; i < len(game);\
    \ i++ {\n        if game[i] != guess[i] {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        } else {\n            result = append(result,\
    \ 0)\n        }\n    }\n    \n    return result\n}\n", "    // Your code here\n\
    \    \n    \n    return guess\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] > 0 {\n            result[i] = game[i] - guess[i]\n\
    \        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = game[i] - guess[i]\n    }\n\
    \    return result\n}\n", "    \n    // Your code here\n    \n    return guess\n\
    }\n", "    result := make([]int, len(guess))\n    \n    for i := range result\
    \ {\n        result[i] = 0\n    }\n    \n    for i := range guess {\n        if\
    \ game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     } else {\n            result[i] = 0\n        }\n    }\n    \n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = 0\n    }\n    for i := range game {\n        if game[i] > 0 {\n          \
    \  result[guess[i]-1] = game[i] - game[i]\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = game[i] - guess[i]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] == guess[i] {\n   \
    \         result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = game[i] - guess[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] > 0 {\n            result[guess[i]-1]++\n      \
    \  }\n    }\n    return result\n}\n", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    result := make([]int, len(guess))\n    for i := range\
    \ result {\n        result[i] = 0\n    }\n    for i := range guess {\n       \
    \ if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        } else {\n            result[i] = 0\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var correct bool\n    var i int\n    var j int\n\
    \    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n \
    \   var p int\n    var q int\n    var r int\n    var s int\n    var t int\n  \
    \  var u int\n    var v int\n    var w int\n    var x int\n    var y int\n   \
    \ var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var\
    \ e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var j\
    \ int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n\
    \    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n \
    \   var u int\n    var v int\n    var w int\n    var x int\n    var y int\n  \
    \  var z int\n    var a int\n    var b int\n    var c int\n    var d int\n   \
    \ var e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var\
    \ j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o\
    \ int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n\
    \    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n \
    \   var z int\n    var a int\n    var b int\n    var c int\n    var d int\n  \
    \  var e int\n    var f int\n    var g int\n    var h int\n    var i int\n   \
    \ var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var\
    \ o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t\
    \ int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n\
    \    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n \
    \   var e int\n    var f int\n    var g int\n    var h int\n    var i int\n  \
    \  var j int\n    var k int\n    var l int\n    var m int\n    var n int\n   \
    \ var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var\
    \ t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y\
    \ int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int",
  "    // Your code here\n    \n    \n    return guess\n}\n", "    \n    // Your code\
    \ here\n    \n    return guess\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        } else {\n            result[i] = 0\n        }\n    }\n\
    \    return result\n}\n", "    \n    // Your code here\n    \n    return guess\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = game[i] - guess[i]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] != guess[i] {\n   \
    \         result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for i := 0; i < len(guess); i++ {\n        diff\
    \ := game[i] - guess[i]\n        if diff > 0 {\n            result = append(result,\
    \ diff)\n        } else {\n            result = append(result, -diff)\n      \
    \  }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(guess))\n    for i := range\
    \ result {\n        result[i] = 0\n    }\n    for i := range guess {\n       \
    \ if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        } else {\n            result[i] = 0\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := 0; i < len(guess);\
    \ i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    // Write your code here\n    \n    \n    return guess\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, g := range guess {\n        result := 0\n        for _, s := range\
    \ game {\n            if g == s {\n                result += 1\n            }\n\
    \        }\n        if result > 0 {\n            result = result - g\n       \
    \ }\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = result * -1\n \
    \       result = result + g\n        result = result * -1\n        result = result\
    \ + g\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = result * -1\n \
    \       result = result + g\n        result = result * -1\n        result = result\
    \ + g\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = result * -1\n \
    \       result = result + g\n        result = result * -1\n        result = result\
    \ + g\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = result * -1\n \
    \       result = result + g\n        result = result * -1\n        result = result\
    \ + g\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = result * -1\n \
    \       result = result + g\n        result = result * -1\n        result = result\
    \ + g\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = result * -1\n \
    \       result = result + g\n        result = result * -1\n        result = result\
    \ + g\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = result * -1\n \
    \       result = result + g\n        result = result * -1\n        result = result\
    \ + g\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = result * -1\n \
    \       result = result + g\n        result = result * -1\n        result = result\
    \ + g\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = result * -1\n \
    \       result = result + g\n        result = result * -1\n        result = result\
    \ + g\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = result * -1\n \
    \       result = result + g\n        result = result * -1\n        result = result\
    \ + g\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = result * -1\n \
    \       result = result + g\n        result = result * -1\n        result = result\
    \ + g\n        result = result * -1\n        result = result + g\n        result\
    \ = result * -1\n        result = result + g\n        result = ", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ 0\n    }\n    for i := range game {\n        if game[i] > 0 {\n            result[guess[i]-1]\
    \ = game[i] - game[guess[i]-1]\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    \n    // Your code here\n    \n    return result\n}\n",
  "    result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = 0\n    }\n    for i := range game {\n        if game[i] > 0 {\n          \
    \  result[guess[i]-1] = game[i] - game[guess[i]-1]\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range result\
    \ {\n        result[i] = 0\n    }\n    for i := range guess {\n        if game[i]\
    \ != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(guess))\n    for i := range\
    \ result {\n        result[i] = 0\n    }\n    for i := range guess {\n       \
    \ if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    result := make([]int, len(guess))\n\
    \    for i := 0; i < len(guess); i++ {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    \n    // Your code here\n    \n    return\
    \ guess\n}\n", "    // Your code here\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    result := make([]int, len(guess))\n    for i := 0; i < len(guess);\
    \ i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range guess {\n   \
    \     result[i] = game[i] - guess[i]\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for i := 0; i < len(game); i++ {\n        if game[i] != guess[i]\
    \ {\n            result = append(result, abs(game[i] - guess[i]))\n        }\n\
    \    }\n    return result\n}\n", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = 0\n    }\n    for i := range game {\n        if game[i]\
    \ > 0 {\n            result[guess[i]-1] = game[i] - game[guess[i]-1]\n       \
    \ }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := 0; i < len(guess); i++ {\n        result[i] = abs(game[i]\
    \ - guess[i])\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    \n    for i := range guess {\n        if game[i] != guess[i] {\n\
    \            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range result\
    \ {\n        result[i] = 0\n    }\n    for i := range guess {\n        if game[i]\
    \ != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \    }\n    return result\n}\n", "    // Your code here\n    \n    \n    return\
    \ guess\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = 0\n    }\n    for i := range game {\n        if game[i]\
    \ > 0 {\n            result[guess[i]-1] = game[i] - game[guess[i]-1]\n       \
    \ }\n    }\n    return result\n}\n", "    var result []int\n    \n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    result := make([]int, len(guess))\n    for i := range result {\n\
    \        result[i] = 0\n    }\n    for i := range guess {\n        if game[i]\
    \ != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    var result []int\n    var score int\n    var\
    \ i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n\
    \ int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n\
    \    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n \
    \   var y int\n    var z int\n    var a int\n    var b int\n    var c int\n  \
    \  var d int\n    var e int\n    var f int\n    var g int\n    var h int\n   \
    \ var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var\
    \ n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s\
    \ int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n\
    \    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n \
    \   var d int\n    var e int\n    var f int\n    var g int\n    var h int\n  \
    \  var i int\n    var j int\n    var k int\n    var l int\n    var m int\n   \
    \ var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var\
    \ s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x\
    \ int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n\
    \    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n \
    \   var i int\n    var j int\n    var k int\n    var l int\n    var m int\n  \
    \  var n int\n    var o int\n    var p int\n    var q int\n    var r int\n   \
    \ var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var\
    \ x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c\
    \ int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n\
    \    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n \
    \   var n int\n    var o int\n    var p int\n    var q int\n    var r int\n  \
    \  var s int\n    var t int\n    var u int\n    var v int\n    var w int\n   \
    \ var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var\
    \ c int\n    var d int", "    result := make([]int, len(guess))\n    \n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    \n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        } else {\n            result[i] = 0\n        }\n    }\n\
    \    \n    return result\n}\n", "    var result []int\n    \n    // Your code\
    \ here\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    \n    gameLen := len(game)\n    guessLen := len(guess)\n    \n    if gameLen\
    \ != guessLen {\n        return nil\n    }\n    \n    for i := 0; i < gameLen;\
    \ i++ {\n        if game[i] != guess[i] {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        }\n    }\n    \n    return result\n}\n", " \
    \   result := make([]int, len(guess))\n    for i := range result {\n        result[i]\
    \ = 0\n    }\n    for i := range guess {\n        if game[i] != guess[i] {\n \
    \           result[i] = abs(game[i] - guess[i])\n        } else {\n          \
    \  result[i] = 0\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := 0; i < len(guess); i++ {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := 0; i < len(guess); i++ {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    var correct bool\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = game[i] - guess[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    \n   \
    \ \n    return guess\n}\n", "    result := make([]int, len(guess))\n    for i\
    \ := range result {\n        result[i] = 0\n    }\n    for i := range guess {\n\
    \        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    \n   \
    \ \n    return guess\n}\n", "    result := make([]int, len(guess))\n    for i\
    \ := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = 0\n    }\n    for i := range game {\n        if game[i]\
    \ == guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] != guess[i] {\n   \
    \         result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] !=\
    \ guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    \n    // Your code here\n    \n    return guess\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range guess {\n   \
    \     result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(guess))\n    for i := 0; i < len(guess); i++ {\n\
    \        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ \n    for i := range guess {\n        if game[i] != guess[i] {\n           \
    \ result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(guess))\n    for i := range result {\n        result[i]\
    \ = 0\n    }\n    for i := range guess {\n        if game[i] != guess[i] {\n \
    \           result[i] = abs(game[i] - guess[i])\n        } else {\n          \
    \  result[i] = 0\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := 0; i < len(guess); i++ {\n        result[i] = abs(game[i]\
    \ - guess[i])\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = 0\n    }\n    for\
    \ i := range game {\n        if game[i] > 0 {\n            result[guess[i]-1]\
    \ = game[i] - game[guess[i]-1]\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(guess))\n    for i := range result {\n        result[i]\
    \ = 0\n    }\n    for i := range guess {\n        if game[i] != guess[i] {\n \
    \           result[i] = abs(game[i] - guess[i])\n        } else {\n          \
    \  result[i] = 0\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(guess))\n    for i := range\
    \ result {\n        result[i] = 0\n    }\n    for i := range guess {\n       \
    \ if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n    \
    \        result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range guess {\n   \
    \     result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = game[i] - guess[i]\n    }\n    return result\n}\n", "    // Your code here\n\
    \    \n    \n    return guess\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = game[i] - guess[i]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = game[i] - guess[i]\n    }\n    return result\n}\n", "    var result []int\n\
    \    var correct bool\n    var i int\n    var j int\n    for i = 0; i < len(game);\
    \ i++ {\n        correct = false\n        for j = 0; j < len(guess); j++ {\n \
    \           if game[i] == guess[j] {\n                correct = true\n       \
    \         break\n            }\n        }\n        if !correct {\n           \
    \ result = append(result, game[i] - guess[j])\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] !=\
    \ guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    // Your code here\n    \n    \n    return guess\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] !=\
    \ guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = game[i] - guess[i]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = 0\n    }\n    for i := range game {\n        if game[i]\
    \ == guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] == guess[i] {\n   \
    \         result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] != guess[i] {\n   \
    \         result[i] = abs(game[i] - guess[i])\n        } else {\n            result[i]\
    \ = 0\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    // Your code here\n    \n    \n    return guess\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range guess {\n   \
    \     result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = 0\n    }\n    for i := range game {\n        if game[i] > 0 {\n          \
    \  result[guess[i]-1]++\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := 0; i < len(guess); i++ {\n        result[i] = abs(game[i]\
    \ - guess[i])\n    }\n    return result\n}\n", "    // Your code here\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        } else {\n            result[i] = 0\n   \
    \     }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        } else {\n            result[i] = 0\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := 0; i < len(guess);\
    \ i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] !=\
    \ guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        } else\
    \ {\n            result[i] = 0\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(guess))\n    for i := range result {\n        result[i]\
    \ = game[i] - guess[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    \n    // Your code here\n    \n    return\
    \ guess\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    result := make([]int, len(guess))\n    for i := range result {\n        result[i]\
    \ = 0\n    }\n    for i := range guess {\n        if game[i] == guess[i] {\n \
    \           result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        } else {\n            result[i] = 0\n   \
    \     }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
