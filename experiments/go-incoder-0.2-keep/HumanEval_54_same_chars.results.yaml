language: go_test.go
name: HumanEval_54_same_chars
results:
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n \
    \   n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t\
    \ := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    switch {\n    case len(s0) > len(s1):\n        l = len(s0)\n        m = len(s1)\n\
    \        n = len(s0)\n        o = l\n        p = m\n        r = n\n        s =\
    \ l\n        t = m\n        u = n\n        v = o\n        w = p\n        x = r\n\
    \        y = s\n        z = t\n    case len(s0) == len(s1):\n        l = len(s0)\n\
    \        m = len(s1)\n        n = l\n        o = l\n        p = m\n        r =\
    \ n\n        s = l\n        t = m\n        u = n\n        v = o\n        w = p\n\
    \        x = r\n        y = s\n        z = t\n    case len(s0) < len(s1):\n  \
    \      l = len(s0)\n        m = len(s1)\n        n = l\n        o = l\n      \
    \  p = m\n        r = n\n        s = l\n        t = m\n        u = n\n       \
    \ v = o\n        w = p\n        x = r\n        y = s\n        z = t\n    }\n \
    \   for ; i < o; i++ {\n        if s0[i] != s1[i] {\n            return false\n\
    \        }\n    }\n    for ; j < p; j++ {\n        if s0[j] != s1[j] {\n     \
    \       return false\n        }\n    }\n    for ; k < r; k++ {\n        if s0[k]\
    \ != s1[k] {\n            return false\n        }\n    }\n    for ; l < s; l++\
    \ {\n        if s0[l] != s1[l] {\n            return false\n        }\n    }\n\
    \    for ; m < t; m++ {\n        if s0[m] != s1[m] {\n            return false\n\
    \        }\n    }\n    for ; n < u; n++ {\n        if s0[n] != s1[n] {\n     \
    \       return false\n        }\n    }\n    for ; o < v; o++ {\n        if s0[o]\
    \ != s1[o] {\n            return false\n        }\n    }\n    for ; p < w; p++\
    \ {\n        if s0[p] != s1[p] {\n            return false\n        }\n    }\n\
    \    for ; r < x; r++ {\n        if s0[r] != s1[r] {\n            return false\n\
    \        }\n    }\n    for ; s < y; s++ \nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp86te_6b3_test.go:135:22: expected ''{'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0); i++ {\n       \
    \ if s0[i] != s1[j] {\n            return false\n        }\n        j++\n    \
    \    if j == len(s1) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpnobwr35y_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpnobwr35y_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpnobwr35y_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n \
    \   n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t\
    \ := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    switch {\n    case len(s0) == 1 && len(s1) == 1:\n        return s0[0] ==\
    \ s1[0]\n    case len(s0) == 1 && len(s1) == 0:\n        return true\n    case\
    \ len(s0) == 0 && len(s1) == 1:\n        return true\n    case len(s0) == 0 &&\
    \ len(s1) == 0:\n        return false\n    }\n    for ; i < len(s0); i++ {\n \
    \       if s0[i] != s1[i] {\n            return false\n        }\n    }\n    for\
    \ ; j < len(s1); j++ {\n        if s0[j] != s1[j] {\n            return false\n\
    \        }\n    }\n    for ; k < len(s0); k++ {\n        if s0[k] != s1[k] {\n\
    \            return false\n        }\n    }\n    for ; l < len(s1); l++ {\n  \
    \      if s0[l] != s1[l] {\n            return false\n        }\n    }\n    for\
    \ ; m < len(s0); m++ {\n        if s0[m] != s1[m] {\n            return false\n\
    \        }\n    }\n    for ; n < len(s0); n++ {\n        if s0[n] != s1[n] {\n\
    \            return false\n        }\n    }\n    for ; o < len(s1); o++ {\n  \
    \      if s0[o] != s1[o] {\n            return false\n        }\n    }\n    for\
    \ ; p < len(s0); p++ {\n        if s0[p] != s1[p] {\n            return false\n\
    \        }\n    }\n    for ; q < len(s1); q++ {\n        if s0[q] != s1[q] {\n\
    \            return false\n        }\n    }\n    for ; r < len(s0); r++ {\n  \
    \      if s0[r] != s1[r] {\n            return false\n        }\n    }\n    for\
    \ ; s < len(s0); s++ {\n        if s0[s] != s1[s] {\n            return false\n\
    \        }\n    }\n    for ; t < len(s1); t++ {\n        if s0[t] != s1[t] {\n\
    \            return false\n        }\n    }\n    for ; u < len(s0); u++ {\n  \
    \      if s0[u] != s1[u] {\n            return false\n        }\n    }\n    for\
    \ ; v < len(s1); v++ {\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate :=\
    \ same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjzkuniri_test.go:120:6: expected ''('', found TestSame_Chars

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    for i < len(s0) && j < len(s1) {\n\
    \        if s0[i] != s1[j] {\n            return false\n        }\n        i++\n\
    \        j++\n    }\n    return i == len(s0)\n}\n\nfunc TestSame_Chars(t *testing.T)\
    \ {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp3kef6567_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp3kef6567_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp3kef6567_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n \
    \   n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t\
    \ := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    for i < len(s0) && j < len(s1) {\n        if s0[i] == s1[j] {\n         \
    \   i++\n            j++\n        } else {\n            if s0[i] < s1[j] {\n \
    \               if s0[i] < 'a' || s1[j] < 'a' {\n                    i++\n   \
    \             } else {\n                    j++\n                }\n         \
    \   } else {\n                if s0[i] > s1[j] {\n                    if s0[i]\
    \ > 'a' || s1[j] > 'a' {\n                        j++\n                    } else\
    \ {\n                        i++\n                    }\n                } else\
    \ {\n                    i++\n                    j++\n                }\n   \
    \         }\n        }\n    }\n    if i == len(s0) {\n        return true\n  \
    \  }\n    if j == len(s1) {\n        return true\n    }\n    if s0[i] < s1[j]\
    \ {\n        if s0[i] < 'a' || s1[j] < 'a' {\n            i++\n        } else\
    \ {\n            j++\n        }\n    } else {\n        if s0[i] > s1[j] {\n  \
    \          if s0[i] > 'a' || s1[j] > 'a' {\n                j++\n            }\
    \ else {\n                i++\n            }\n        } else {\n            i++\n\
    \            j++\n        }\n    }\n    for i < len(s0) && j < len(s1) {\n   \
    \     if s0[i] == s1[j] {\n            i++\n            j++\n        } else {\n\
    \            if s0[i] < s1[j] {\n                if s0[i] < 'a' || s1[j] < 'a'\
    \ {\n                    i++\n                } else {\n                    j++\n\
    \                }\n            } else {\n                if s0[i] > s1[j] {\n\
    \                    if s0[i] > 'a' || s1[j] > 'a' {\n                       \
    \ j++\n                    } else {\n                        i++\n           \
    \         }\n                } else {\n                    i++\n             \
    \       j++\n                }\n            }\n        }\n    }\n    if i == len(s0)\
    \ {\n        return true\n    }\n    if j == len(s1) {\n        return true\n\
    \    }\n    if s0[i] < s1[j] {\n        if s0[i] < 'a' || s1[j] < 'a' {\n    \
    \        i++\n        } else {\n            j++\n        }\n    } else {\n   \
    \     if s0[i] > s1[j] {\n            if s0[i] > 'a' || s1[j] > \nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwo75ez2e_test.go:132:6: expected ''('', found TestSame_Chars

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0); i++ {\n       \
    \ if s0[i] != s1[j] {\n            return false\n        }\n        j++\n    \
    \    if j == len(s1) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpnobwr35y_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpnobwr35y_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpnobwr35y_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 {\n        return len(s1) ==\
    \ 0\n    }\n    if len(s1) == 0 {\n        return false\n    }\n    if len(s0)\
    \ > len(s1) {\n        s0, s1 = s1, s0\n    }\n    for i := 0; i < len(s0); i++\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpbjk2ponf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpbjk2ponf_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpbjk2ponf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 {\n        return len(s1) ==\
    \ 0\n    }\n    if len(s1) == 0 {\n        return len(s0) == 0\n    }\n    if\
    \ len(s0) > len(s1) {\n        s0, s1 = s1, s0\n    }\n    for i := 0; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[i] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate :=\
    \ same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmplbr5djx5_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmplbr5djx5_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmplbr5djx5_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpu8saaimi_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpu8saaimi_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpu8saaimi_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    \n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    \n \
    \   for i < len(s0) && j < len(s1) {\n        if s0[i] != s1[j] {\n          \
    \  return false\n        }\n        \n        i++\n        j++\n    }\n    \n\
    \    if i == len(s0) && j == len(s1) {\n        return true\n    }\n    \n   \
    \ for i < len(s0) {\n        for j < len(s1) {\n            if s0[i] != s1[j]\
    \ {\n                return false\n            }\n            \n            j++\n\
    \        }\n        \n        if i == len(s0) {\n            return true\n   \
    \     }\n        \n        i++\n    }\n    \n    for j < len(s1) {\n        for\
    \ i < len(s0) {\n            if s0[i] != s1[j] {\n                return false\n\
    \            }\n            \n            i++\n        }\n        \n        if\
    \ j == len(s1) {\n            return true\n        }\n        \n        j++\n\
    \    }\n    \n    return false\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplj1u6v_u_test.go:28:5: k declared but not used

    /tmp/tmplj1u6v_u_test.go:29:5: l declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0); i++ {\n       \
    \ if s0[i] != s1[j] {\n            return false\n        }\n        j++\n    }\n\
    \    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpj1mbep54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpj1mbep54_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpj1mbep54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 {\n        return len(s1) ==\
    \ 0\n    }\n    if len(s1) == 0 {\n        return len(s0) == 0\n    }\n    if\
    \ s0[len(s0)-1] != s1[0] {\n        return false\n    }\n    return same_chars(s0[:len(s0)-1],\
    \ s1[1:])\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmplpwjvvy0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmplpwjvvy0_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmplpwjvvy0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0); i++ {\n       \
    \ if s0[i] != s1[j] {\n            return false\n        }\n        j++\n    }\n\
    \    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpj1mbep54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpj1mbep54_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpj1mbep54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    k := 0\n    for ; i < len(s0); i++\
    \ {\n        if s0[i] != s1[j] {\n            return false\n        }\n      \
    \  j++\n        if j == len(s1) {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgvk0mgtj_test.go:27:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n \
    \   n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t\
    \ := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    switch {\n    case len(s0) > len(s1):\n        l = len(s0)\n        m = len(s1)\n\
    \        n = len(s0)\n        o = l\n        p = m\n        r = o\n        s =\
    \ p\n        t = r\n        u = s\n        v = t\n        w = u\n        x = v\n\
    \        y = w\n        z = x\n    case len(s0) == len(s1):\n        l = len(s0)\n\
    \        m = len(s1)\n        n = l\n        o = l\n        p = m\n        r =\
    \ o\n        s = p\n        t = r\n        u = s\n        v = t\n        w = u\n\
    \        x = v\n        y = w\n        z = x\n    default:\n        return false\n\
    \    }\n    for ; i < n; i++ {\n        if s0[i] != s1[i] {\n            return\
    \ false\n        }\n    }\n    for ; i < o; i++ {\n        if s0[i] != s1[i] {\n\
    \            return false\n        }\n    }\n    for ; i < p; i++ {\n        if\
    \ s0[i] != s1[i] {\n            return false\n        }\n    }\n    for ; i <\
    \ r; i++ {\n        if s0[i] != s1[i] {\n            return false\n        }\n\
    \    }\n    for ; i < s; i++ {\n        if s0[i] != s1[i] {\n            return\
    \ false\n        }\n    }\n    for ; i < t; i++ {\n        if s0[i] != s1[i] {\n\
    \            return false\n        }\n    }\n    for ; i < u; i++ {\n        if\
    \ s0[i] != s1[i] {\n            return false\n        }\n    }\n    for ; i <\
    \ v; i++ {\n        if s0[i] != s1[i] {\n            return false\n        }\n\
    \    }\n    for ; i < w; i++ {\n        if s0[i] != s1[i] {\n            return\
    \ false\n        }\n    }\n    for ; i < x; i++ {\n        if s0[i] != s1[i] {\n\
    \            return false\n        }\n    }\n    for ; i < y; i++ {\n        if\
    \ s0[i] != s1[i] {\n            return false\n        }\n    }\n    for ; i <\
    \ z; i++ {\n        if s0[i] != s1[i] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppot_vtkj_test.go:26:5: j declared but not used

    /tmp/tmppot_vtkj_test.go:27:5: k declared but not used

    /tmp/tmppot_vtkj_test.go:33:5: q declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 {\n        return len(s1) ==\
    \ 0\n    }\n    if len(s1) == 0 {\n        return len(s0) == 0\n    }\n    if\
    \ len(s0) != len(s1) {\n        return false\n    }\n    for i := 0; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[i] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate :=\
    \ same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpw1y863w1_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpw1y863w1_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpw1y863w1_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpu8saaimi_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpu8saaimi_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpu8saaimi_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 {\n        return len(s1) ==\
    \ 0\n    }\n    if len(s1) == 0 {\n        return len(s0) == 0\n    }\n    if\
    \ len(s0) > len(s1) {\n        return false\n    }\n    for i := 0; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[i] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate :=\
    \ same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpjbm2yatg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpjbm2yatg_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpjbm2yatg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n \
    \   n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t\
    \ := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    l := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r\
    \ := 0\n    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n\
    \    y := 0\n    z := 0\n    l := 0\n    m := 0\n    n := 0\n    o := 0\n    p\
    \ := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n    v := 0\n\
    \    w := 0\n    x := 0\n    y := 0\n    z := 0\n    l := 0\n    m := 0\n    n\
    \ := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n\
    \    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    l\
    \ := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n\
    \    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y\
    \ := 0\n    z := 0\n    l := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n\
    \    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w\
    \ := 0\n    x := 0\n    y := 0\n    z := 0\n    l := 0\n    m := 0\n    n := 0\n\
    \    o := 0\n    p := 0\n    q := 0\n    r := \nfunc TestSame_Chars(t *testing.T)\
    \ {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp07x7fb6p_test.go:125:6: expected ''('', found TestSame_Chars

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    \n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    \n \
    \   for ; i < len(s0); i++ {\n        if s0[i] != s1[j] {\n            return\
    \ false\n        }\n        j++\n        if j == len(s1) {\n            return\
    \ true\n        }\n    }\n    \n    for ; k < len(s1); k++ {\n        if s1[k]\
    \ != s0[l] {\n            return false\n        }\n        l++\n        if l ==\
    \ len(s0) {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp6mpdw3kk_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp6mpdw3kk_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp6mpdw3kk_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 {\n        return len(s1) ==\
    \ 0\n    }\n    if len(s1) == 0 {\n        return len(s0) == 0\n    }\n    if\
    \ len(s0) > len(s1) {\n        s0, s1 = s1, s0\n    }\n    for i := 0; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[i] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate :=\
    \ same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmplbr5djx5_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmplbr5djx5_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmplbr5djx5_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 {\n        return len(s1) ==\
    \ 0\n    }\n    if len(s1) == 0 {\n        return len(s0) == 0\n    }\n    if\
    \ len(s0) > len(s1) {\n        s0, s1 = s1, s0\n    }\n    for i := 0; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[i] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate :=\
    \ same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmplbr5djx5_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmplbr5djx5_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmplbr5djx5_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    if len(s0) > len(s1) {\n        s0, s1 = s1, s0\n    }\n \
    \   for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T)\
    \ {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpn9w1kjmi_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpn9w1kjmi_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpn9w1kjmi_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0); i++ {\n       \
    \ if s0[i] != s1[j] {\n            return false\n        }\n        j++\n    }\n\
    \    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpj1mbep54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpj1mbep54_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpj1mbep54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 {\n        return len(s1) ==\
    \ 0\n    }\n    if len(s1) == 0 {\n        return len(s0) == 0\n    }\n    if\
    \ len(s0) > len(s1) {\n        return s0 != s1\n    }\n    if len(s1) > len(s0)\
    \ {\n        return s1 != s0\n    }\n    for i := 0; i < len(s0); i++ {\n    \
    \    if s0[i] != s1[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__3\
    \ (0.00s)\n        tmp3nv9wvzk_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSame_Chars/test_num__4 (0.00s)\n        tmp3nv9wvzk_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSame_Chars/test_num__5\
    \ (0.00s)\n        tmp3nv9wvzk_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSame_Chars/test_num__6 (0.00s)\n        tmp3nv9wvzk_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n \
    \   n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t\
    \ := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    switch {\n    case len(s0) > len(s1):\n        l = len(s0)\n        m = len(s1)\n\
    \        n = len(s0)\n        o = l\n        p = m\n        r = n\n        s =\
    \ o\n        t = p\n        u = s\n        v = t\n        w = o\n        x = r\n\
    \        y = w\n        z = v\n    case len(s0) == len(s1):\n        l = len(s0)\n\
    \        m = len(s1)\n        n = l\n        o = l\n        p = m\n        r =\
    \ n\n        s = o\n        t = p\n        u = s\n        v = t\n        w = o\n\
    \        x = r\n        y = w\n        z = v\n    case len(s0) < len(s1):\n  \
    \      l = len(s0)\n        m = len(s1)\n        n = l\n        o = l\n      \
    \  p = m\n        r = n\n        s = o\n        t = p\n        u = s\n       \
    \ v = t\n        w = o\n        x = r\n        y = w\n        z = v\n    }\n \
    \   for ; i < o; i++ {\n        if s0[i] != s1[i] {\n            return false\n\
    \        }\n    }\n    for ; j < p; j++ {\n        if s0[j] != s1[j] {\n     \
    \       return false\n        }\n    }\n    for ; k < r; k++ {\n        if s0[k]\
    \ != s1[k] {\n            return false\n        }\n    }\n    for ; l < s; l++\
    \ {\n        if s0[l] != s1[l] {\n            return false\n        }\n    }\n\
    \    for ; m < t; m++ {\n        if s0[m] != s1[m] {\n            return false\n\
    \        }\n    }\n    for ; n < u; n++ {\n        if s0[n] != s1[n] {\n     \
    \       return false\n        }\n    }\n    for ; o < x; o++ {\n        if s0[o]\
    \ != s1[o] {\n            return false\n        }\n    }\n    for ; p < y; p++\
    \ {\n        if s0[p] != s1[p] {\n            return false\n        }\n    }\n\
    \    for ; q < z; q++ {\n        if s0[q] != s1[q] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpa17z7zye_test.go:157: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpa17z7zye_test.go:157:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpa17z7zye_test.go:157: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0); i++ {\n       \
    \ if s0[i] != s1[j] {\n            return false\n        }\n        j++\n    }\n\
    \    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpj1mbep54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpj1mbep54_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpj1mbep54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0); i++ {\n       \
    \ if s0[i] != s1[j] {\n            return false\n        }\n        j++\n    }\n\
    \    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpj1mbep54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpj1mbep54_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpj1mbep54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 || len(s1) == 0 {\n        return\
    \ false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpu8saaimi_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpu8saaimi_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpu8saaimi_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) == 0 {\n        return len(s1) ==\
    \ 0\n    }\n    if len(s1) == 0 {\n        return len(s0) == 0\n    }\n    if\
    \ len(s0) > len(s1) {\n        return s0 != s1\n    }\n    if len(s1) > len(s0)\
    \ {\n        return s1 != s0\n    }\n    for i := 0; i < len(s0); i++ {\n    \
    \    if s0[i] != s1[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__3\
    \ (0.00s)\n        tmp3nv9wvzk_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSame_Chars/test_num__4 (0.00s)\n        tmp3nv9wvzk_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSame_Chars/test_num__5\
    \ (0.00s)\n        tmp3nv9wvzk_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSame_Chars/test_num__6 (0.00s)\n        tmp3nv9wvzk_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n//\
    \ True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n\
    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunc same_chars(s0\
    \ string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n\
    \    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpldm_cl6d_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpldm_cl6d_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
