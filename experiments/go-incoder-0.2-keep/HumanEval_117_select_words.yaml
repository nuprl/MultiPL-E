name: HumanEval_117_select_words
language: go_test.go
prompt: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s and a natural number n, you have been tasked to implement \n\
  // a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2)\
  \ ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nfunc select_words(s string, n int) []string {\n"
tests: "func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
  \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\",\
  \ 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
  \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello world\"\
  , 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle sam\",\
  \ 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\", 4), expected:\
  \ []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected: []string{\"\
  b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    words := []string{}\n    words := append(words, select_words_test.select_words(s,\
    \ n)...)\n    return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    words :=\
    \ []string{}\n    \n    if s == \"\" {\n        return words\n    }\n    \n  \
    \  for _, letter := range s {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            words = append(words,\
    \ letter)\n        }\n    }\n    \n    return words\n}\n", "    \n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    if s == \"\" {\n        return words\n    }\n    \n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    \n    for _, letter := range s {\n        if letter\
    \ == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            vowels = append(vowels, letter)\n        }\n    }\n    \n    for\
    \ _, letter := range s {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            vowels = append(vowels,\
    \ letter)\n        }\n    }\n    \n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter ==\
    \ 'u' {\n            vowels = append(vowels, letter)\n        }\n    }\n    \n\
    \    for _, letter := range s {\n        if letter == 'a' || letter == 'e' ||\
    \ letter == 'i' || letter == 'o' || letter == 'u' {\n            vowels = append(vowels,\
    \ letter)\n        }\n    }\n    \n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter ==\
    \ 'u' {\n            vowels = append(vowels, letter)\n        }\n    }\n    \n\
    \    for _, letter := range s {\n        if letter == 'a' || letter == 'e' ||\
    \ letter == 'i' || letter == 'o' || letter == 'u' {\n            vowels = append(vowels,\
    \ letter)\n        }\n    }\n    \n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter ==\
    \ 'u' {\n            vowels = append(vowels, letter)\n        }\n    }\n    \n\
    \    for _, letter := range s {\n        if letter == 'a' || letter == 'e' ||\
    \ letter == 'i' || letter == 'o' || letter == 'u' {\n            vowels = append(vowels,\
    \ letter)\n        }\n    }\n    \n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter ==\
    \ 'u' {\n            vowels = append(vowels, letter)\n        }\n    }\n    \n\
    \    for _, letter := range s {\n        if letter == 'a' || letter == 'e' ||\
    \ letter == 'i' || letter == 'o' || letter == 'u' {\n            vowels = append(vowels,\
    \ letter)\n        }\n    }\n    \n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || ", "   \
    \ words := []string{}\n    for _, word := range strings.Split(s, \" \") {\n  \
    \      if strings.ContainsAny(word, []rune(\"bcdfghjklmnpqrstvwxyz\")) {\n   \
    \         words = append(words, word)\n        }\n    }\n    return words\n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    words := []string{}\n\
    \    for _, word := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word,\
    \ []rune(\"bcdfghjklmnpqrstvwxyz\")) {\n            words = append(words, word)\n\
    \        }\n    }\n    return words\n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    words := []string{}\n    \n    if len(s) == 0 {\n   \
    \     return words\n    }\n    \n    i := 0\n    \n    for ; i < len(s); i++ {\n\
    \        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' {\n            i++\n            continue\n        }\n        \n        if\
    \ s[i] == 'b' || s[i] == 'c' || s[i] == 'd' || s[i] == 'f' || s[i] == 'g' || s[i]\
    \ == 'h' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i] ==\
    \ 'n' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] == 's' || s[i] == 't'\
    \ || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y' || s[i] == 'z' {\n\
    \            i++\n            continue\n        }\n        \n        if s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n        \
    \    i++\n            continue\n        }\n        \n        if s[i] == 'B' ||\
    \ s[i] == 'C' || s[i] == 'D' || s[i] == 'F' || s[i] == 'G' || s[i] == 'H' || s[i]\
    \ == 'J' || s[i] == 'K' || s[i] == 'L' || s[i] == 'M' || s[i] == 'N' || s[i] ==\
    \ 'P' || s[i] == 'Q' || s[i] == 'R' || s[i] == 'S' || s[i] == 'T' || s[i] == 'V'\
    \ || s[i] == 'W' || s[i] == 'X' || s[i] == 'Y' || s[i] == 'Z' {\n            i++\n\
    \            continue\n        }\n        \n        if s[i] == '0' {\n       \
    \     i++\n            continue\n        }\n        \n        if s[i] == '1' {\n\
    \            i++\n            continue\n        }\n        \n        if s[i] ==\
    \ '2' {\n            i++\n            continue\n        }\n        \n        if\
    \ s[i] == '3' {\n            i++\n            continue\n        }\n        \n\
    \        if s[i] == '4' {\n            i++\n            continue\n        }\n\
    \        \n        if s[i] == '5' {\n            i++\n            continue\n \
    \       }\n        \n        if s[i] == '6' {\n            i++\n            continue\n\
    \        }\n        \n        if s[i] == '7' {\n            i++\n            continue\n\
    \        }\n        \n        if s[i] == '8' {\n            i++\n            continue\n\
    \        }\n        \n        if s[i] == '9' {\n            i++\n            continue\n\
    \        }\n        \n        if s[i] == ' ' {\n            i++\n            continue\n\
    \        }\n        \n        if s[i] == '.' {\n            i++\n            continue\n\
    \        }\n        \n        if s[i] == '-' {\n            i++\n            continue\n\
    \        }\n        \n        if s[i] == '_' {\n            i++\n            continue\n\
    \        }\n        ", "    // Your code here\n    \n    words := make([]string,\
    \ 0)\n    \n    if len(s) == 0 {\n        return words\n    }\n    \n    words\
    \ := strings.Split(s, \" \")\n    \n    for _, word := range words {\n       \
    \ \n        if strings.Contains(word, \"a\") {\n            \n            words\
    \ = append(words, word)\n            \n        }\n        \n    }\n    \n    return\
    \ words\n}\n", "    words := make([]string, 0)\n    \n    if len(s) == 0 {\n \
    \       return words\n    }\n    \n    for _, word := range strings.Split(s, \"\
    \ \") {\n        if strings.ContainsAny(word, []rune(\"aeiou\")) {\n         \
    \   words = append(words, word)\n        }\n    }\n    \n    return words\n}\n",
  "    // Write your code here\n    \n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    // Your code here\n    \n\
    \    \n    return []string{}\n}\n", "    // Your code here\n    \n    return nil\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
