language: go_test.go
name: HumanEval_80_is_happy
results:
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n        lastIndex = i\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo774sbrc_test.go:23:5: lastIndex declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, c := range last3 {\n        set[c] = true\n    }\n    for _, c :=\
    \ range s {\n        if set[c] {\n            return false\n        }\n      \
    \  set[c] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps27_gr2l_test.go:25:13: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmps27_gr2l_test.go:28:16: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmps27_gr2l_test.go:31:13: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[len(s)-1]\n    for i\
    \ := 0; i < len(s)-3; i++ {\n        if s[i] != lastLetter {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpb_7lux65_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpb_7lux65_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpb_7lux65_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[0]\n    for _, letter\
    \ := range s[1:] {\n        if letter == lastLetter {\n            return false\n\
    \        }\n        lastLetter = letter\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2azyoiy5_test.go:24:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    /tmp/tmp2azyoiy5_test.go:27:22: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n    \n\
    \    seen := make(map[string]bool)\n    for _, c := range last3 {\n        if\
    \ seen[c] {\n            return false\n        }\n        seen[c] = true\n   \
    \ }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_fumat_a_test.go:27:17: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_fumat_a_test.go:30:14: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, c := range last3 {\n        set[c] = true\n    }\n    for _, c :=\
    \ range s {\n        if set[c] {\n            return false\n        }\n      \
    \  set[c] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps27_gr2l_test.go:25:13: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmps27_gr2l_test.go:28:16: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmps27_gr2l_test.go:31:13: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    \n\
    \    for i := 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n         \
    \   return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp9766vdkc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, c := range last3 {\n        set[c] = true\n    }\n    for _, c :=\
    \ range s {\n        if _, ok := set[c]; !ok {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwbgnqep1_test.go:25:13: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpwbgnqep1_test.go:28:25: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    chars := make(map[rune]bool)\n    for\
    \ _, r := range s {\n        chars[r] = true\n    }\n    for i := 0; i < len(s);\
    \ i += 3 {\n        if chars[s[i]] == true {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgrvy777j_test.go:27:18: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3]\n    for i := 0;\
    \ i < len(s)-3 && s[i] != last3; i++ {\n        if s[i] != s[i+1] {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpjo0g06lc_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__3 (0.00s)\n        tmpjo0g06lc_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmpjo0g06lc_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__6 (0.00s)\n        tmpjo0g06lc_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjo0g06lc_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ strings.Split(last3, \"\")\n    last3 := strings.Split(last3[0], \"\")\n   \
    \ last3 := strings.Split(last3[1], \"\")\n    last3 := strings.Split(last3[2],\
    \ \"\")\n    last3 := strings.Split(last3[3], \"\")\n    last3 := strings.Split(last3[4],\
    \ \"\")\n    last3 := strings.Split(last3[5], \"\")\n    last3 := strings.Split(last3[6],\
    \ \"\")\n    last3 := strings.Split(last3[7], \"\")\n    last3 := strings.Split(last3[8],\
    \ \"\")\n    last3 := strings.Split(last3[9], \"\")\n    last3 := strings.Split(last3[10],\
    \ \"\")\n    last3 := strings.Split(last3[11], \"\")\n    last3 := strings.Split(last3[12],\
    \ \"\")\n    last3 := strings.Split(last3[13], \"\")\n    last3 := strings.Split(last3[14],\
    \ \"\")\n    last3 := strings.Split(last3[15], \"\")\n    last3 := strings.Split(last3[16],\
    \ \"\")\n    last3 := strings.Split(last3[17], \"\")\n    last3 := strings.Split(last3[18],\
    \ \"\")\n    last3 := strings.Split(last3[19], \"\")\n    last3 := strings.Split(last3[20],\
    \ \"\")\n    last3 := strings.Split(last3[21], \"\")\n    last3 := strings.Split(last3[22],\
    \ \"\")\n    last3 := strings.Split(last3[23], \"\")\n    last3 := strings.Split(last3[24],\
    \ \"\")\n    last3 := strings.Split(last3[25], \"\")\n    last3 := strings.Split(last3[26],\
    \ \"\")\n    last3 := strings.Split(last3[27], \"\")\n    last3 := strings.Split(last3[28],\
    \ \"\")\n    last3 := strings.Split(last3[29], \"\")\n    last3 := strings.Split(last3[30],\
    \ \"\")\n    last3 := strings.Split(last3[31], \"\")\n    last3 := strings.Split(last3[32],\
    \ \"\")\n    last3 := strings.Split(last3[33], \"\")\n    last3 := strings.Split(last3[34],\
    \ \"\")\n    last3 := strings.Split(last3[35\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcriwmcnx_test.go:59:36: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastLetter := s[0]\n    \n   \
    \ for i := 1; i < len(s); i++ {\n        if s[i] != lastLetter {\n           \
    \ return false\n        }\n        lastLetter = s[i]\n    }\n    \n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpaxvb6uhy_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpaxvb6uhy_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpaxvb6uhy_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, char := range last3 {\n        set[char] = true\n    }\n    for _,\
    \ char := range s {\n        if set[char] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpylufw6xe_test.go:25:13: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpylufw6xe_test.go:28:16: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[0]\n    for _, letter\
    \ := range s[1:] {\n        if letter == lastLetter {\n            return false\n\
    \        }\n        lastLetter = letter\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2azyoiy5_test.go:24:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    /tmp/tmp2azyoiy5_test.go:27:22: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, letter := range last3 {\n        set[letter] = true\n    }\n    for\
    \ _, letter := range s {\n        if set[letter] {\n            return false\n\
    \        }\n        set[letter] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfkq4f2f_test.go:25:13: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpsfkq4f2f_test.go:28:16: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpsfkq4f2f_test.go:31:13: cannot use letter (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    for\
    \ i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpbgxd7z6e_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpbgxd7z6e_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpbgxd7z6e_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpmoym3vco_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n   \
    \ for _, letter := range s {\n        letters[letter] = true\n    }\n    for i\
    \ := 0; i < len(s); i += 3 {\n        if _, ok := letters[s[i]]; !ok {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdi0fa85a_test.go:27:29: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, c := range last3 {\n        set[c] = true\n    }\n    for _, c :=\
    \ range s {\n        if set[c] {\n            return false\n        }\n      \
    \  set[c] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps27_gr2l_test.go:25:13: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmps27_gr2l_test.go:28:16: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmps27_gr2l_test.go:31:13: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    freqs := make(map[string]int)\n    for\
    \ _, c := range s {\n        freqs[c]++\n    }\n    for i := 0; i < len(s); i++\
    \ {\n        if freqs[s[i]] == 3 {\n            for j := i + 1; j < len(s); j++\
    \ {\n                if freqs[s[j]] == 1 {\n                    return false\n\
    \                }\n            }\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprg7zd4nl_test.go:24:15: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmprg7zd4nl_test.go:27:18: cannot use s[i] (value of type byte) as type string
    in map index

    /tmp/tmprg7zd4nl_test.go:29:26: cannot use s[j] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpmoym3vco_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    \n\
    \    for i := 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n         \
    \   return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp9766vdkc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    distinctLetters\
    \ := make(map[rune]bool)\n    for _, letter := range last3 {\n        distinctLetters[letter]\
    \ = true\n    }\n    return len(distinctLetters) >= 3\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, v := range last3 {\n        set[v] = true\n    }\n    for _, v :=\
    \ range s {\n        if !set[v] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzwkfswq7_test.go:25:13: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpzwkfswq7_test.go:28:17: cannot use v (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    \n\
    \    for i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n         \
    \   return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpa3hfokxd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpa3hfokxd_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpa3hfokxd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ last3[:len(last3)-1]\n    set := make(map[string]bool)\n    for _, c := range\
    \ last3 {\n        set[c] = true\n    }\n    for _, c := range s {\n        if\
    \ set[c] {\n            return false\n        }\n        set[c] = true\n    }\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphez6qsv5_test.go:23:11: no new variables on left side of :=

    /tmp/tmphez6qsv5_test.go:26:13: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmphez6qsv5_test.go:29:16: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmphez6qsv5_test.go:32:13: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075182
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ last3[:len(last3)-1]\n    set := make(map[string]bool)\n    for _, letter :=\
    \ range last3 {\n        set[letter] = true\n    }\n    for _, letter := range\
    \ s {\n        if set[letter] {\n            return false\n        }\n       \
    \ set[letter] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9q3029zp_test.go:23:11: no new variables on left side of :=

    /tmp/tmp9q3029zp_test.go:26:13: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmp9q3029zp_test.go:29:16: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmp9q3029zp_test.go:32:13: cannot use letter (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, v := range last3 {\n        set[v] = true\n    }\n    for _, v :=\
    \ range s {\n        if !set[v] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzwkfswq7_test.go:25:13: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpzwkfswq7_test.go:28:17: cannot use v (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, letter := range last3 {\n        set[letter] = true\n    }\n    for\
    \ _, letter := range s {\n        if _, ok := set[letter]; !ok {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcjde09y4_test.go:25:13: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpcjde09y4_test.go:28:25: cannot use letter (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9iw7qy5b_test.go:61:6: expected ''('', found TestIs_Happy

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075182
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    distinctLetters\
    \ := make(map[rune]bool)\n    for _, letter := range last3 {\n        distinctLetters[letter]\
    \ = true\n    }\n    for _, letter := range s {\n        if distinctLetters[letter]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpmfzg60p3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpmfzg60p3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpmfzg60p3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, char := range last3 {\n        set[char] = true\n    }\n    for _,\
    \ char := range s {\n        if set[char] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpylufw6xe_test.go:25:13: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpylufw6xe_test.go:28:16: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpj6x28qu4_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    s := make(map[rune]bool)\n    for _,\
    \ r := range s {\n        s[r] = true\n    }\n    for i := 0; i < len(s)-3; i++\
    \ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7ea4t3e_test.go:22:7: no new variables on left side of :=

    /tmp/tmpp7ea4t3e_test.go:22:10: cannot use make(map[rune]bool) (value of type
    map[rune]bool) as type string in assignment

    /tmp/tmpp7ea4t3e_test.go:24:9: cannot assign to s[r] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 3\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp_q3l3tve_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__3 (0.00s)\n        tmp_q3l3tve_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmp_q3l3tve_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__6 (0.00s)\n        tmp_q3l3tve_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastLetter := s[len(s)-1]\n  \
    \  \n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] {\n      \
    \      return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpchd4_owy_test.go:23:5: lastLetter declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastLetter := s[0]\n    \n   \
    \ for i := 1; i < len(s); i++ {\n        if s[i] != lastLetter {\n           \
    \ return false\n        }\n        lastLetter = s[i]\n    }\n    \n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpaxvb6uhy_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpaxvb6uhy_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpaxvb6uhy_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ last3[:len(last3)-1]\n    set := make(map[string]bool)\n    for _, v := range\
    \ last3 {\n        set[v] = true\n    }\n    for _, v := range s {\n        if\
    \ set[v] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphkysd9x_test.go:23:11: no new variables on left side of :=

    /tmp/tmpphkysd9x_test.go:26:13: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpphkysd9x_test.go:29:16: cannot use v (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    distinctLetters\
    \ := make(map[rune]bool)\n    for _, letter := range last3 {\n        if distinctLetters[letter]\
    \ {\n            return false\n        }\n        distinctLetters[letter] = true\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s); i++ {\n\
    \        if s[i] != s[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp0yqu6ast_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp0yqu6ast_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp0yqu6ast_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    \nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj35f2h2r_test.go:65:6: expected ''('', found TestIs_Happy

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[len(s)-1]\n    lastLetterCount\
    \ := 0\n    for _, letter := range s {\n        if letter == lastLetter {\n  \
    \          lastLetterCount++\n        } else {\n            lastLetterCount =\
    \ 0\n        }\n        if lastLetterCount > 3 {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuyjkvxxw_test.go:25:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    distinctLetters\
    \ := make(map[rune]bool)\n    for _, letter := range last3 {\n        distinctLetters[letter]\
    \ = true\n    }\n    for _, letter := range s {\n        if distinctLetters[letter]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpmfzg60p3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpmfzg60p3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpmfzg60p3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[0]\n    result := true\n\
    \    for i := 1; i < len(s); i++ {\n        if s[i] != lastLetter {\n        \
    \    result = false\n            break\n        }\n        lastLetter = s[i]\n\
    \    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpfw8xzii2_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpfw8xzii2_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpfw8xzii2_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075184
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    \nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj35f2h2r_test.go:65:6: expected ''('', found TestIs_Happy

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpmoym3vco_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    freqs := make(map[string]int)\n    for\
    \ _, c := range s {\n        freqs[c]++\n    }\n    for i := 0; i < len(s); i++\
    \ {\n        if freqs[s[i]] == 3 {\n            if s[i] != s[i+1] && s[i] != s[i+2]\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkol_mbri_test.go:24:15: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpkol_mbri_test.go:27:18: cannot use s[i] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075184
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[0]\n    for i := 1;\
    \ i < len(s); i++ {\n        if s[i] != lastLetter {\n            return false\n\
    \        }\n        lastLetter = s[i]\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp8ccfczhi_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp8ccfczhi_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp8ccfczhi_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075184
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9iw7qy5b_test.go:61:6: expected ''('', found TestIs_Happy

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075182
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, v := range last3 {\n        set[v] = true\n    }\n    for _, v :=\
    \ range s {\n        if !set[v] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzwkfswq7_test.go:25:13: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpzwkfswq7_test.go:28:17: cannot use v (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, v := range last3 {\n        set[v] = true\n    }\n    for _, v :=\
    \ range s {\n        if set[v] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzcqlkfx0_test.go:25:13: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpzcqlkfx0_test.go:28:16: cannot use v (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075184
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n   \
    \ for _, letter := range s {\n        if letters[letter] {\n            return\
    \ false\n        }\n        letters[letter] = true\n    }\n    return true\n}\n\
    \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpq2yk1eek_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075184
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpmoym3vco_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[len(s)-1]\n    for i\
    \ := 0; i < len(s)-3; i++ {\n        if s[i] == lastLetter {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpj8cval5h_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpj8cval5h_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpj8cval5h_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075184
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpmoym3vco_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:len(s)]\n\
    \    \n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7t8jksfg_test.go:26:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:len(s)]\n    result\
    \ := true\n    for _, letter := range last3 {\n        if letter == last3[len(last3)-1]\
    \ {\n            result = false\n            break\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1cu7yj8_test.go:25:22: invalid operation: letter == last3[len(last3)
    - 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    \nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj35f2h2r_test.go:65:6: expected ''('', found TestIs_Happy

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, v := range last3 {\n        set[v] = true\n    }\n    for _, v :=\
    \ range s {\n        if set[v] {\n            return false\n        }\n      \
    \  set[v] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4a2_tq_test.go:25:13: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpjw4a2_tq_test.go:28:16: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpjw4a2_tq_test.go:31:13: cannot use v (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075184
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    chars := make(map[rune]bool)\n    for\
    \ _, r := range s {\n        chars[r] = true\n    }\n    for i := 0; i < len(s);\
    \ i += 3 {\n        if chars[s[i]] == true {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgrvy777j_test.go:27:18: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpj6x28qu4_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    distinctLetters\
    \ := make(map[rune]bool)\n    for _, letter := range last3 {\n        distinctLetters[letter]\
    \ = true\n    }\n    return len(distinctLetters) >= 3\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpmoym3vco_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[0]\n    lastCount :=\
    \ 1\n    for _, letter := range s[1:] {\n        if letter == lastLetter {\n \
    \           lastCount++\n        } else {\n            lastCount = 1\n       \
    \     lastLetter = letter\n        }\n        if lastCount >= 3 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjuhj2651_test.go:25:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    /tmp/tmpjuhj2651_test.go:29:26: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075184
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[0]\n    for _, letter\
    \ := range s[1:] {\n        if letter == lastLetter {\n            return false\n\
    \        }\n        lastLetter = letter\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2azyoiy5_test.go:24:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    /tmp/tmp2azyoiy5_test.go:27:22: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[0]\n    for _, letter\
    \ := range s[1:] {\n        if letter == lastLetter {\n            return false\n\
    \        }\n        lastLetter = letter\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2azyoiy5_test.go:24:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    /tmp/tmp2azyoiy5_test.go:27:22: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9iw7qy5b_test.go:61:6: expected ''('', found TestIs_Happy

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075182
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    i := 0\n    for ; i < len(s); i++ {\n\
    \        if s[i] != s[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjwctyo0h_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjwctyo0h_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjwctyo0h_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075185
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    distinctLetters\
    \ := make(map[rune]bool)\n    for _, letter := range last3 {\n        if distinctLetters[letter]\
    \ {\n            return false\n        }\n        distinctLetters[letter] = true\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, v := range last3 {\n        set[v] = true\n    }\n    for _, v :=\
    \ range s {\n        if set[v] {\n            return false\n        }\n      \
    \  set[v] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4a2_tq_test.go:25:13: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpjw4a2_tq_test.go:28:16: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpjw4a2_tq_test.go:31:13: cannot use v (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075184
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n   \
    \ for _, letter := range s {\n        letters[letter] = true\n    }\n    for i\
    \ := 0; i < len(s)-3; i++ {\n        if letters[s[i]] == true {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphr0bvhc9_test.go:27:20: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075185
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    for\
    \ i := 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpydy2eszu_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, letter := range last3 {\n        set[letter] = true\n    }\n    for\
    \ _, letter := range s {\n        if set[letter] {\n            return false\n\
    \        }\n        set[letter] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfkq4f2f_test.go:25:13: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpsfkq4f2f_test.go:28:16: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpsfkq4f2f_test.go:31:13: cannot use letter (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    chars := make(map[rune]bool)\n    for\
    \ _, char := range s {\n        chars[char] = true\n    }\n    for i := 0; i <\
    \ len(s); i += 3 {\n        if chars[s[i]] == true {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv09v_dtb_test.go:27:18: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075185
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, letter := range last3 {\n        set[letter] = true\n    }\n    for\
    \ _, letter := range s {\n        if set[letter] {\n            return false\n\
    \        }\n        set[letter] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfkq4f2f_test.go:25:13: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpsfkq4f2f_test.go:28:16: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpsfkq4f2f_test.go:31:13: cannot use letter (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, c := range last3 {\n        set[c] = true\n    }\n    for _, c :=\
    \ range s {\n        if set[c] {\n            return false\n        }\n      \
    \  set[c] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps27_gr2l_test.go:25:13: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmps27_gr2l_test.go:28:16: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmps27_gr2l_test.go:31:13: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpu2pjl2ut_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpu2pjl2ut_test.go:41\
    \ +0x48c\ntesting.tRunner(0xc0001031e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    \n\
    \    for i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n         \
    \   return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpa3hfokxd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpa3hfokxd_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpa3hfokxd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    return len(last3)\
    \ == 1 && last3[0] == last3[0]\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe23u5da9_test.go:23:11: no new variables on left side of :=

    /tmp/tmpe23u5da9_test.go:24:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075185
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    s := make(map[rune]bool)\n    for _,\
    \ r := range s {\n        if _, ok := s[r]; !ok {\n            s[r] = true\n \
    \       }\n    }\n    return len(s) == 3\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xlysl82_test.go:22:7: no new variables on left side of :=

    /tmp/tmp1xlysl82_test.go:22:10: cannot use make(map[rune]bool) (value of type
    map[rune]bool) as type string in assignment

    /tmp/tmp1xlysl82_test.go:24:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp1xlysl82_test.go:25:13: cannot assign to s[r] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075185
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    for\
    \ i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpjh40m7be_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpjh40m7be_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpjh40m7be_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n   \
    \ for i < len(s) {\n        if s[i] == s[j] {\n            i++\n            j++\n\
    \            k++\n        } else {\n            if k == 3 {\n                return\
    \ true\n            }\n            k = 0\n            i++\n            j++\n \
    \       }\n    }\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpy86erjii_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpy86erjii_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpy86erjii_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[len(s)-1]\n    for i\
    \ := 0; i < len(s)-3; i++ {\n        if s[i] == lastLetter {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpj8cval5h_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpj8cval5h_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpj8cval5h_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075184
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    \n\
    \    for i := 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n         \
    \   return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp9766vdkc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ strings.Split(last3, \"\")\n    for _, v := range last3 {\n        if v != last3[len(last3)-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy34k0tju_test.go:23:11: no new variables on left side of :=

    /tmp/tmpy34k0tju_test.go:23:14: undefined: strings

    /tmp/tmpy34k0tju_test.go:25:17: invalid operation: v != last3[len(last3) - 1]
    (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpmoym3vco_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    s := strings.ToLower(s)\n    result\
    \ := true\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[i] {\n    \
    \        result = false\n            break\n        }\n    }\n    return result\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4moiqvq_test.go:22:7: no new variables on left side of :=

    /tmp/tmpj4moiqvq_test.go:22:10: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpj6x28qu4_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[0]\n    for _, letter\
    \ := range s[1:] {\n        if letter == lastLetter {\n            return false\n\
    \        }\n        lastLetter = letter\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2azyoiy5_test.go:24:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    /tmp/tmp2azyoiy5_test.go:27:22: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 3\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp_q3l3tve_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__3 (0.00s)\n        tmp_q3l3tve_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmp_q3l3tve_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__6 (0.00s)\n        tmp_q3l3tve_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    \n\
    \    for i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n         \
    \   return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpa3hfokxd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpa3hfokxd_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpa3hfokxd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpmoym3vco_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    last3 :=\
    \ last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n\
    \    last3 := last3[:len(last3)-1]\n    last3 := last3[:len(last3)-1]\n    last3\
    \ := last3[:len(last3)-1]\n    \nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj35f2h2r_test.go:65:6: expected ''('', found TestIs_Happy

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 2\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpot5ljp2a_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpot5ljp2a_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpot5ljp2a_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n   \
    \ for _, r := range s {\n        letters[r] = true\n    }\n    for i := 0; i <\
    \ len(s); i += 3 {\n        if !letters[s[i]] == true {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg5mlmq9s_test.go:27:21: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[len(s)-1]\n    lastLetterCount\
    \ := 0\n    for _, letter := range s {\n        if letter == lastLetter {\n  \
    \          lastLetterCount++\n        } else {\n            lastLetterCount =\
    \ 0\n        }\n        if lastLetterCount > 3 {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuyjkvxxw_test.go:25:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    distinctLetters\
    \ := make(map[rune]bool)\n    for _, letter := range last3 {\n        distinctLetters[letter]\
    \ = true\n    }\n    return len(distinctLetters) >= 3\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    chars := make(map[rune]bool)\n    for\
    \ _, c := range s {\n        chars[c] = true\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        if chars[s[i]] == true {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9e_7wlqj_test.go:27:18: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 3\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp_q3l3tve_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__3 (0.00s)\n        tmp_q3l3tve_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmp_q3l3tve_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__6 (0.00s)\n        tmp_q3l3tve_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    letters :=\
    \ make(map[rune]bool)\n    for _, letter := range last3 {\n        letters[letter]\
    \ = true\n    }\n    for _, letter := range s {\n        if letters[letter] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmprtdofr8c_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmprtdofr8c_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmprtdofr8c_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpu2pjl2ut_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpu2pjl2ut_test.go:41\
    \ +0x48c\ntesting.tRunner(0xc0001031e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpj6x28qu4_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    distinctLetters\
    \ := make(map[rune]bool)\n    for _, r := range last3 {\n        if distinctLetters[r]\
    \ {\n            return false\n        }\n        distinctLetters[r] = true\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075186
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, letter := range last3 {\n        set[letter] = true\n    }\n    for\
    \ _, letter := range s {\n        if set[letter] {\n            return false\n\
    \        }\n        set[letter] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfkq4f2f_test.go:25:13: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpsfkq4f2f_test.go:28:16: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpsfkq4f2f_test.go:31:13: cannot use letter (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n   \
    \ for i < len(s) {\n        if s[i] == s[j] {\n            i++\n            j++\n\
    \            k++\n        } else {\n            if k == 3 {\n                return\
    \ false\n            }\n            k = 0\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpkbfp7act_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpkbfp7act_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpkbfp7act_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, v := range last3 {\n        set[v] = true\n    }\n    for _, v :=\
    \ range s {\n        if set[v] {\n            return false\n        }\n      \
    \  set[v] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4a2_tq_test.go:25:13: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpjw4a2_tq_test.go:28:16: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpjw4a2_tq_test.go:31:13: cannot use v (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075184
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    s := make([]rune, len(s))\n    for i\
    \ := range s {\n        s[i] = s[i]\n    }\n    sort.Sort(sort.Reverse(s))\n \
    \   for i := 0; i < len(s)-3; i++ {\n        if s[i] != s[i+1] && s[i] != s[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14a3957b_test.go:22:7: no new variables on left side of :=

    /tmp/tmp14a3957b_test.go:22:10: cannot use make([]rune, len(s)) (value of type
    []rune) as type string in assignment

    /tmp/tmp14a3957b_test.go:24:9: cannot assign to s[i] (value of type byte)

    /tmp/tmp14a3957b_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpu2pjl2ut_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpu2pjl2ut_test.go:41\
    \ +0x48c\ntesting.tRunner(0xc0001031e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < len(s); i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjssfz27c_test.go:22:5: lastIndex declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpmoym3vco_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpmoym3vco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    chars := make(map[rune]bool)\n    for\
    \ _, r := range s {\n        chars[r] = true\n    }\n    for i := 0; i < len(s);\
    \ i += 3 {\n        if chars[s[i]] == true {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgrvy777j_test.go:27:18: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    distinctLetters\
    \ := make(map[rune]bool)\n    for _, letter := range last3 {\n        if distinctLetters[letter]\
    \ {\n            return false\n        }\n        distinctLetters[letter] = true\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s); i++ {\n\
    \        if s[i] != s[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp0yqu6ast_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp0yqu6ast_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp0yqu6ast_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    distinctLetters\
    \ := make(map[rune]bool)\n    for _, letter := range last3 {\n        distinctLetters[letter]\
    \ = true\n    }\n    return len(distinctLetters) >= 3\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpu2pjl2ut_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpu2pjl2ut_test.go:41\
    \ +0x48c\ntesting.tRunner(0xc0001031e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    letters :=\
    \ make(map[rune]bool)\n    for _, letter := range last3 {\n        letters[letter]\
    \ = true\n    }\n    for _, letter := range s {\n        if letters[letter] {\n\
    \            return false\n        }\n        letters[letter] = true\n    }\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp97l99fe4_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp97l99fe4_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp97l99fe4_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    for\
    \ i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1] {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpbgxd7z6e_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpbgxd7z6e_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpbgxd7z6e_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    seen := make(map[string]bool)\n\
    \    for _, c := range last3 {\n        if seen[c] {\n            return false\n\
    \        }\n        seen[c] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpua3sglpv_test.go:25:17: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpua3sglpv_test.go:28:14: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpj6x28qu4_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075183
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[len(s)-1]\n    for i\
    \ := 0; i < len(s)-2;i++ {\n        if s[i] == lastLetter && s[i+1] == s[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp1n6v0c30_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp1n6v0c30_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp1n6v0c30_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, v := range last3 {\n        set[v] = true\n    }\n    for _, v :=\
    \ range s {\n        if set[v] {\n            return false\n        }\n      \
    \  set[v] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4a2_tq_test.go:25:13: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpjw4a2_tq_test.go:28:16: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpjw4a2_tq_test.go:31:13: cannot use v (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075184
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[0]\n    for _, letter\
    \ := range s[1:] {\n        if letter == lastLetter {\n            return false\n\
    \        }\n        lastLetter = letter\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2azyoiy5_test.go:24:22: invalid operation: letter == lastLetter (mismatched
    types rune and byte)

    /tmp/tmp2azyoiy5_test.go:27:22: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastLetter := s[0]\n    result := true\n\
    \    for _, letter := range s[1:] {\n        if letter != lastLetter {\n     \
    \       result = false\n            break\n        }\n        lastLetter = letter\n\
    \    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo_5km018_test.go:25:22: invalid operation: letter != lastLetter (mismatched
    types rune and byte)

    /tmp/tmpo_5km018_test.go:29:22: cannot use letter (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    count := 0\n    for _, char := range\
    \ s {\n        if char != s[count] {\n            return false\n        }\n  \
    \      count++\n        if count == 3 {\n            count = 0\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuygatws__test.go:24:20: invalid operation: char != s[count] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    lastIndex := len(s) - 2\n    for i :=\
    \ 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmpadv4ytu7_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__7 (0.00s)\n        tmpadv4ytu7_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n   \
    \ for _, letter := range s {\n        letters[letter] = true\n    }\n    for i\
    \ := 0; i < len(s)-3; i++ {\n        if letters[s[i+0]] == true && letters[s[i+1]]\
    \ == true && letters[s[i+2]] == true {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppt6lpue7_test.go:27:20: cannot use s[i + 0] (value of type byte) as type
    rune in map index

    /tmp/tmppt6lpue7_test.go:27:47: cannot use s[i + 1] (value of type byte) as type
    rune in map index

    /tmp/tmppt6lpue7_test.go:27:74: cannot use s[i + 2] (value of type byte) as type
    rune in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    chars := make(map[rune]bool)\n    for\
    \ _, char := range s {\n        chars[char] = true\n    }\n    for i := 0; i <\
    \ len(s); i += 3 {\n        if _, ok := chars[s[i]]; !ok {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07ipue4w_test.go:27:27: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    \n\
    \    for i := 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n         \
    \   return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp9766vdkc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i] {\n            result = false\n     \
    \       break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpjiswqnb4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjiswqnb4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    \n\
    \    for i := 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n         \
    \   return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp9766vdkc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    freqs := make(map[string]int)\n    for\
    \ _, v := range s {\n        freqs[v]++\n    }\n    for i := 0; i < len(s); i++\
    \ {\n        if freqs[s[i]] == 3 {\n            if s[i] != s[i+1] {\n        \
    \        return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj94hxy4z_test.go:24:15: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmpj94hxy4z_test.go:27:18: cannot use s[i] (value of type byte) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpu2pjl2ut_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpu2pjl2ut_test.go:41\
    \ +0x48c\ntesting.tRunner(0xc0001031e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075186
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n    \n\
    \    set := make(map[string]bool)\n    for _, letter := range last3 {\n      \
    \  set[letter] = true\n    }\n    \n    for _, letter := range s {\n        if\
    \ set[letter] {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxbwnd85p_test.go:27:13: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpxbwnd85p_test.go:31:16: cannot use letter (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, letter := range last3 {\n        set[letter] = true\n    }\n    for\
    \ _, letter := range s {\n        if set[letter] {\n            return false\n\
    \        }\n        set[letter] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfkq4f2f_test.go:25:13: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpsfkq4f2f_test.go:28:16: cannot use letter (variable of type rune) as type
    string in map index

    /tmp/tmpsfkq4f2f_test.go:31:13: cannot use letter (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n   \
    \ for _, r := range s {\n        letters[r] = true\n    }\n    for i := 0; i <\
    \ len(s); i += 3 {\n        if _, ok := letters[s[i]]; !ok {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd04tuig2_test.go:27:29: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n    set := make(map[string]bool)\n\
    \    for _, c := range last3 {\n        set[c] = true\n    }\n    for _, c :=\
    \ range s {\n        if set[c] {\n            return false\n        }\n      \
    \  set[c] = true\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps27_gr2l_test.go:25:13: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmps27_gr2l_test.go:28:16: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmps27_gr2l_test.go:31:13: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    freqs := make(map[string]int)\n    for\
    \ _, v := range s {\n        freqs[v]++\n    }\n    for i := 0; i < len(s); i++\
    \ {\n        if freqs[s[i]] == 3 {\n            if freqs[s[i+1]] == freqs[s[i+2]]\
    \ {\n                freqs[s[i+1]]--\n            }\n        }\n    }\n    return\
    \ len(freqs) == 3\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp08sg8bzj_test.go:24:15: cannot use v (variable of type rune) as type string
    in map index

    /tmp/tmp08sg8bzj_test.go:27:18: cannot use s[i] (value of type byte) as type string
    in map index

    /tmp/tmp08sg8bzj_test.go:28:22: cannot use s[i + 1] (value of type byte) as type
    string in map index

    /tmp/tmp08sg8bzj_test.go:28:39: cannot use s[i + 2] (value of type byte) as type
    string in map index

    /tmp/tmp08sg8bzj_test.go:29:23: cannot use s[i + 1] (value of type byte) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075186
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    letters := make(map[rune]bool)\n   \
    \ for _, letter := range s {\n        letters[letter] = true\n    }\n    for i\
    \ := 0; i < len(s); i += 3 {\n        if _, ok := letters[s[i]]; !ok {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdi0fa85a_test.go:27:29: cannot use s[i] (value of type byte) as type rune
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] != s[i+1] {\n            result = false\n   \
    \         break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp3hun0omf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3hun0omf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    result := true\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == s[i+1] {\n            result = false\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpa1htqw0u_test.go:24\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpa1htqw0u_test.go:40\
    \ +0x47f\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is happy\
    \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
    \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
    \ => True\n// is_happy(xyy) => False\nfunc is_happy(s string) bool {\n    if len(s)\
    \ < 3 {\n        return false\n    }\n    \n    lastIndex := len(s) - 1\n    \n\
    \    for i := 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n         \
    \   return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp9766vdkc_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075181
