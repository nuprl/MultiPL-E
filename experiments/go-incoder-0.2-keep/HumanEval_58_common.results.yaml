language: go_test.go
name: HumanEval_58_common
results:
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, x := range l1 {\n        for _, y := range l2\
    \ {\n            if x == y {\n                result = append(result, x)\n   \
    \         }\n        }\n    }\n    return append(result, l2...)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpz4undopc_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpz4undopc_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpz4undopc_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n\
    )\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprbxt5tb6_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073749
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var res []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx8m8mirq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    result := make([]int, 0)\n    for _, v :=\
    \ range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n       \
    \ if m[v] {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpwlslyyjj_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpwlslyyjj_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpwlslyyjj_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var result []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return append(result, 0)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmps9q2l_hf_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, x := range l1 {\n        for _, y := range l2\
    \ {\n            if x == y {\n                result = append(result, x)\n   \
    \         }\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpan0i7fnz_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n        \
    \    return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7aews86s_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp7aews86s_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp7aews86s_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, x := range l1 {\n        if _, ok := l2[x]; ok\
    \ {\n            result = append(result, x)\n        }\n    }\n    for _, x :=\
    \ range l2 {\n        if _, ok := l1[x]; ok {\n            result = append(result,\
    \ x)\n        }\n    }\n    return append(result, l1...)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyg0pu765_test.go:16:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpyg0pu765_test.go:21:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := map[int]int{}\n    for _, v := range l1 {\n        m[v]++\n    }\n    for\
    \ _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0, len(m))\n\
    \    for v := range m {\n        result = append(result, v)\n    }\n    return\
    \ append(result, 0)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpuoggru3h_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpuoggru3h_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=0)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpuoggru3h_test.go:44: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpuoggru3h_test.go:44:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var res []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx8m8mirq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n</code>\n<|/ a tags=sorting,algorithm,go\
    \ |>\n<| a tags=sorting,algorithm,go |>\n<code>\npackage main\n\nimport (\n  \
    \  \"fmt\"\n    \"sort\"\n)\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjkehz3mj_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073749
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, i := range l1 {\n        for _, j := range l2\
    \ {\n            if i == j {\n                continue\n            }\n      \
    \      if i > j {\n                break\n            }\n            result =\
    \ append(result, i)\n        }\n    }\n    return append(result, l2...)\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp84399zj6_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5)\
    \ %!s(int=7) %!s(int=1) %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n  \
    \  --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp84399zj6_test.go:45: expected\
    \ '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=2)]'\n    ---\
    \ FAIL: TestCommon/test_num__2 (0.00s)\n        tmp84399zj6_test.go:45: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    result := make([]int, 0)\n    for _, v :=\
    \ range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n       \
    \ if m[v] {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpwlslyyjj_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpwlslyyjj_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpwlslyyjj_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    j := 0\n    for i := 0; i < len(l1); i++ {\n        if\
    \ j == len(l2) {\n            break\n        }\n        if l1[i] == l2[j] {\n\
    \            result = append(result, l1[i])\n            j++\n        }\n    }\n\
    \    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp2j44pzc4_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp2j44pzc4_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmp2j44pzc4_test.go:44: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    j := 0\n    for i := 0; i < len(l1); i++ {\n        for\
    \ k := 0; k < len(l2); k++ {\n            if l1[i] == l2[k] {\n              \
    \  j++\n            }\n        }\n        if j > 0 {\n            result = append(result,\
    \ l1[i])\n            j = 0\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjeqqkvz6_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpjeqqkvz6_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpjeqqkvz6_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l1\
    \ {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok\
    \ := m[v]; ok {\n            result = append(result, v)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpqddu42ro_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpqddu42ro_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpqddu42ro_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n        \
    \    return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7aews86s_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp7aews86s_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp7aews86s_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, x := range l1 {\n        if !contains(result,\
    \ x) {\n            result = append(result, x)\n        }\n    }\n    for _, x\
    \ := range l2 {\n        if !contains(result, x) {\n            result = append(result,\
    \ x)\n        }\n    }\n    return sort(result)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw853ksq8_test.go:16:13: undefined: contains

    /tmp/tmpw853ksq8_test.go:21:13: undefined: contains

    /tmp/tmpw853ksq8_test.go:25:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx_y2ls40_test.go:15:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073749
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l1\
    \ {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok\
    \ := m[v]; ok {\n            result = append(result, v)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpqddu42ro_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpqddu42ro_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpqddu42ro_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    result := make([]int, 0)\n    for _, v :=\
    \ range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n       \
    \ if m[v] {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpwlslyyjj_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpwlslyyjj_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpwlslyyjj_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, x := range l1 {\n        for _, y := range l2\
    \ {\n            if x == y {\n                result = append(result, x)\n   \
    \             break\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmphnj3zvj7_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmphnj3zvj7_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmphnj3zvj7_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    result := make([]int, 0)\n    for _, v :=\
    \ range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n       \
    \ if m[v] {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpwlslyyjj_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpwlslyyjj_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpwlslyyjj_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, x := range l1 {\n        if _, ok := l2[x]; ok\
    \ {\n            result = append(result, x)\n        }\n    }\n    for _, x :=\
    \ range l2 {\n        if _, ok := l1[x]; ok {\n            result = append(result,\
    \ x)\n        }\n    }\n    return append(result, l1...)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyg0pu765_test.go:16:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpyg0pu765_test.go:21:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := map[int]int{}\n    for _, v := range l1 {\n        m[v]++\n    }\n    for\
    \ _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0, len(m))\n\
    \    for v := range m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_wbwzqrd_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    result := make([]int, 0, len(l1))\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n\
    \        if m[v] {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpxb4c_xj6_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpxb4c_xj6_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpxb4c_xj6_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        result = append(result, v)\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6nscc49_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        result = append(result, v)\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6nscc49_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        result = append(result, v)\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6nscc49_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    j := 0\n    for i := 0; i < len(l1); i++ {\n        for\
    \ k := 0; k < len(l2); k++ {\n            if l1[i] == l2[k] {\n              \
    \  j++\n            }\n        }\n        result = append(result, l1[i])\n   \
    \ }\n    for k := 0; k < len(l2); k++ {\n        result = append(result, l2[k])\n\
    \    }\n    for k := 0; k < len(l1); k++ {\n        result = append(result, l1[k])\n\
    \    }\n    return append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpnaihbgw__test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)\
    \ %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpnaihbgw__test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpnaihbgw__test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpnaihbgw__test.go:49:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    j := 0\n    for i := 0; i < len(l1); i++ {\n        for\
    \ k := 0; k < len(l2); k++ {\n            if l1[i] == l2[k] {\n              \
    \  j++\n            }\n        }\n        if j > 0 {\n            result = append(result,\
    \ l1[i])\n            j = 0\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjeqqkvz6_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpjeqqkvz6_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpjeqqkvz6_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n        \
    \    return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7aews86s_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp7aews86s_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp7aews86s_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var result []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return append(result, 0)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmps9q2l_hf_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := map[int]bool{}\n    for _, v := range l1 {\n        m[v] = true\n    }\n\
    \    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n            return\
    \ nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp17bayhju_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp17bayhju_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp17bayhju_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l1\
    \ {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if m[v] {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpu9vu2i9k_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpu9vu2i9k_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpu9vu2i9k_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        result = append(result, v)\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6nscc49_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, x := range l1 {\n        for _, y := range l2\
    \ {\n            if x == y {\n                result = append(result, x)\n   \
    \         }\n        }\n    }\n    return append(result, l2...)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpz4undopc_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpz4undopc_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpz4undopc_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    var res []int\n    for v\
    \ := range m {\n        if m[v] == 0 {\n            res = append(res, v)\n   \
    \     }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq5u80a7a_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpq5u80a7a_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    result := append(result, l1...)\n    result := append(result,\
    \ l2...)\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9tin1hd8_test.go:15:12: no new variables on left side of :=

    /tmp/tmp9tin1hd8_test.go:16:12: no new variables on left side of :=

    /tmp/tmp9tin1hd8_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    result := append(result, l1...)\n    result := append(result,\
    \ l2...)\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9tin1hd8_test.go:15:12: no new variables on left side of :=

    /tmp/tmp9tin1hd8_test.go:16:12: no new variables on left side of :=

    /tmp/tmp9tin1hd8_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        result = append(result, v)\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6nscc49_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    result := make([]int, 0, len(l1))\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n\
    \        if m[v] {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpxb4c_xj6_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpxb4c_xj6_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpxb4c_xj6_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l1\
    \ {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if m[v] {\n\
    \            result = append(result, v)\n        }\n    }\n    return append(result,\
    \ l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmppwzp6a6l_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653) %!s(int=1) %!s(int=4) %!s(int=3)\
    \ %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmppwzp6a6l_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmppwzp6a6l_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=3) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmppwzp6a6l_test.go:43: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, v := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v == v2 {\n                result = append(result, v)\n  \
    \          }\n        }\n    }\n    return append(result, l2...)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp4b2i5fih_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1)\
    \ %!s(int=5) %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp4b2i5fih_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp4b2i5fih_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    var result []int\n    for\
    \ v := range m {\n        if m[v] == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return append(result, 0)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp27ohb0fg_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp27ohb0fg_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp27ohb0fg_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp27ohb0fg_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var res []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx8m8mirq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n        \
    \    return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7aews86s_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp7aews86s_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp7aews86s_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if m[v] {\n            return append([]int{v},\
    \ l1[len(l1)-1])\n        }\n    }\n    return nil\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmppgazjakp_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmppgazjakp_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmppgazjakp_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=3) %!s(int=8)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        result = append(result, v)\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6nscc49_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, x := range l1 {\n        for _, y := range l2\
    \ {\n            if x == y {\n                result = append(result, x)\n   \
    \             break\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmphnj3zvj7_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmphnj3zvj7_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmphnj3zvj7_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        result = append(result, v)\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6nscc49_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, x := range l1 {\n        for _, y := range l2\
    \ {\n            if x == y {\n                result = append(result, x)\n   \
    \             break\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmphnj3zvj7_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmphnj3zvj7_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmphnj3zvj7_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    var result []int\n    for\
    \ v := range m {\n        if m[v] == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return append(result, 0)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp27ohb0fg_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp27ohb0fg_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp27ohb0fg_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp27ohb0fg_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var res []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx8m8mirq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var res []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx8m8mirq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n        \
    \    return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7aews86s_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp7aews86s_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp7aews86s_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var res []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx8m8mirq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var res []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpx8m8mirq_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpx8m8mirq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var result []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return append(result, 0)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmps9q2l_hf_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        result = append(result, v)\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n</code>\n<|/ a tags=go,sorting |>\n\
    <| c |>\nThis solution does not work if there are duplicates in the lists.\n<|/\
    \ c |>\n<| c |>\nIt does work if there are duplicates in the lists. You just need\
    \ to add `map[int]int` to your `common` function and increment the count in the\
    \ map instead of adding it to the list. I've updated the answer to show this.\n\
    <|/ c |>\n<| c |>\nThis solution does not work if there are duplicates in the\
    \ lists.\n<|/ c |>\n<| c |>\nIt does work if there are duplicates in the lists.\
    \ You just need to add `map[int]int` to your `common` function and increment the\
    \ count in the map instead of adding it to the list. I've updated the answer to\
    \ show this.\n<|/ c |>\n<| a tags=go,sorting |>\nI wrote a package that does this\
    \ for you:\nhttps://github.com/jmoiron/go-set\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"github.com/jmoiron/go-set\"\n)\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdz_idp25_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n        \
    \    return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7aews86s_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp7aews86s_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp7aews86s_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    result := make([]int, 0, len(l1))\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n\
    \        if m[v] {\n            result = append(result, v)\n            m[v] =\
    \ false\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpkvhq6duo_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpkvhq6duo_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpkvhq6duo_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. Very elegant and simple.\n<|/ c |>\n\
    <| c |>\nI like this answer because it doesn't require a library and it's easy\
    \ to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Very\
    \ elegant and simple.\n<|/ c |>\n<| c |>\nI like this answer because it doesn't\
    \ require a library and it's easy to understand.\n<|/ c |>\n<| c |>\nI like this\
    \ answer because it doesn't require a library and it's easy to understand.\n<|/\
    \ c |>\n<| a tags=algorithm,sorting,go |>\nI like using sort.IntSlice\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3n87zp8a_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n        \
    \    return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7aews86s_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp7aews86s_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp7aews86s_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n        \
    \    return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7aews86s_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp7aews86s_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp7aews86s_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for k := range m {\n        result = append(result, k)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu216_x7o_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n        \
    \    return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7aews86s_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp7aews86s_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp7aews86s_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for k := range m {\n        result = append(result, k)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu216_x7o_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    result := append(result, l1...)\n    result := append(result,\
    \ l2...)\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9tin1hd8_test.go:15:12: no new variables on left side of :=

    /tmp/tmp9tin1hd8_test.go:16:12: no new variables on left side of :=

    /tmp/tmp9tin1hd8_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        result = append(result, v)\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6nscc49_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    j := 0\n    for i := 0; i < len(l1); i++ {\n        for\
    \ k := 0; k < len(l2); k++ {\n            if l1[i] == l2[k] {\n              \
    \  j++\n            }\n        }\n        if j > 0 {\n            result = append(result,\
    \ l1[i])\n            j = 0\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjeqqkvz6_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpjeqqkvz6_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpjeqqkvz6_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,sorting,go |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2usvt_nk_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx_y2ls40_test.go:15:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073749
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var result []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return append(result, 0)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmps9q2l_hf_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmps9q2l_hf_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, v := range l1 {\n        if _, ok := l2[v]; ok\
    \ {\n            result = append(result, v)\n        }\n    }\n    for _, v :=\
    \ range l2 {\n        if _, ok := l1[v]; ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return append(result, l1...)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_rjvgyc_test.go:16:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpe_rjvgyc_test.go:21:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    for _, v := range l1 {\n        found := false\n    \
    \    for _, v2 := range l2 {\n            if v == v2 {\n                found\
    \ = true\n                break\n            }\n        }\n        if !found {\n\
    \            result = append(result, v)\n        }\n    }\n    for _, v := range\
    \ l2 {\n        found := false\n        for _, v2 := range l1 {\n            if\
    \ v == v2 {\n                found = true\n                break\n           \
    \ }\n        }\n        if !found {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n \
    \ candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5poyttxx_test.go:58: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=34) %!s(int=2) %!s(int=7) %!s(int=9) %!s(int=121)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5poyttxx_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5) %!s(int=8)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmp5poyttxx_test.go:58: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp5poyttxx_test.go:58: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n   \
    \ }\n    for _, v := range l2 {\n        if _, ok := m[v]; !ok {\n           \
    \ return nil\n        }\n    }\n    return make([]int, 0, len(m))\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe2m_zpu4_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpe2m_zpu4_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpe2m_zpu4_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    result\
    \ := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    for _, v := range l2 {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return append(result, l1...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpmqiikz4w_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmqiikz4w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpmqiikz4w_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1)+len(l2))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49wwdze2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt8t3xhn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
    \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunc common(l1 []int, l2 []int) []int {\n    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int, 0,\
    \ len(m))\n    for v := range m {\n        result = append(result, v)\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6nscc49_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
