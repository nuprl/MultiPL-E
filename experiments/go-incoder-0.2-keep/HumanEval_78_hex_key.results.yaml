language: go_test.go
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]int, n)\n    prime[0] = prime[1]\
    \ = 2\n    prime[2] = prime[3] = 5\n    prime[4] = prime[5] = 7\n    prime[6]\
    \ = prime[7] = 11\n    prime[8] = prime[9] = 13\n    prime[10] = prime[11] = 17\n\
    \    prime[12] = prime[13] = 19\n    prime[14] = prime[15] = 23\n    prime[16]\
    \ = prime[17] = 29\n    prime[18] = prime[19] = 31\n    prime[20] = prime[21]\
    \ = 37\n    prime[22] = prime[23] = 41\n    prime[24] = prime[25] = 43\n    prime[26]\
    \ = prime[27] = 47\n    prime[28] = prime[29] = 53\n    prime[30] = prime[31]\
    \ = 51\n    prime[32] = prime[33] = 59\n    prime[34] = prime[35] = 61\n    prime[36]\
    \ = prime[37] = 67\n    prime[38] = prime[39] = 71\n    prime[40] = prime[41]\
    \ = 73 \n    prime[42] = prime[43] = 79\n    prime[44] = prime[45] = 83\n    prime[46]\
    \ = prime[47] = 89\n    prime[48] = prime[49] = 97\n    prime[50] = prime[51]\n\
    \    prime[52] = prime[53] = 101\n    prime[54] = prime[55] = 107\n    prime[56]\
    \ = prime[57] = 113\n    prime[58] = prime[59] = 119\n    prime[60] = prime[61]\n\
    \    prime[62] = prime[63] = 121\n    prime[64] = prime[65] = 127\n    prime[66]\
    \ = prime[67] = 131\n    prime[68] = prime[69] = 137\n    prime[70] = prime[71]\n\
    \    prime[72] = prime[73] = 139\n    prime[74] = prime[75] = 141\n    prime[76]\
    \ = prime[77] = 147\n    prime[78] = prime[79] = 151\n    prime[80] = prime[81]\n\
    \    prime[82] = prime[83] = 157\n    prime[84] = prime[85] = 161\n    prime[86]\
    \ = prime[87] = 167\n    prime[88] = prime[89] = 173\n    prime[90] = prime[91]\n\
    \    prime[92] = prime[93] = 179\n    prime[94] = \nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuw1w2zyx_test.go:27:25: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    \n    // Your code here\n    \n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpw4qc7ct1_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpw4qc7ct1_test.go:50: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpw4qc7ct1_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpw4qc7ct1_test.go:50: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpw4qc7ct1_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpw4qc7ct1_test.go:50: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, char := range\
    \ num {\n        if char == 'A' || char == 'B' || char == 'C' || char == 'D' ||\
    \ char == 'E' || char == 'F' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp2spljv0_test.go:25:9: no new variables on left side of :=

    /tmp/tmpp2spljv0_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        if r == 'A' || r ==\
    \ 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            n += 2\n\
    \        } else {\n            n += 1\n        }\n    }\n    return n\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpbr15sytx_test.go:54: expected '%!s(int=1)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpbr15sytx_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=6)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpbr15sytx_test.go:54: expected '%!s(int=4)', got '%!s(int=13)'\n  \
    \  --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpbr15sytx_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpbr15sytx_test.go:54: expected '%!s(int=6)', got '%!s(int=22)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpbr15sytx_test.go:54:\
    \ expected '%!s(int=12)', got '%!s(int=44)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, c := range\
    \ num {\n        if c >= '0' && c <= '9' {\n            count++\n        }\n \
    \   }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqd_6vyg6_test.go:25:9: no new variables on left side of :=

    /tmp/tmpqd_6vyg6_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, char := range\
    \ num {\n        if char == 'A' || char == 'B' || char == 'C' || char == 'D' ||\
    \ char == 'E' || char == 'F' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp2spljv0_test.go:25:9: no new variables on left side of :=

    /tmp/tmpp2spljv0_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        if r == 'A' || r\
    \ == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    hexDigits := []int{0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, A, B, C, D, E, F}\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primesLen :=\
    \ len(primes)\n    result := 0\n    for i := 0; i < n; i++ {\n        c := num[i]\n\
    \        if c >= '0' && c <= '9' {\n            c -= '0'\n        } else {\n \
    \           c -= 'A'\n        }\n        if c >= '0' && c <= '9' {\n         \
    \   c -= '0'\n        } else {\n            c -= 'A'\n        }\n        if c\
    \ >= '0' && c <= '9' {\n            c -= '0'\n        } else {\n            c\
    \ -= 'A'\n        }\n        if c >= '0' && c <= '9' {\n            c -= '0'\n\
    \        } else {\n            c -= 'A'\n        }\n        if c >= '0' && c <=\
    \ '9' {\n            c -= '0'\n        } else {\n            c -= 'A'\n      \
    \  }\n        if c >= '0' && c <= '9' {\n            c -= '0'\n        } else\
    \ {\n            c -= 'A'\n        }\n        if c >= '0' && c <= '9' {\n    \
    \        c -= '0'\n        } else {\n            c -= 'A'\n        }\n       \
    \ if c >= '0' && c <= '9' {\n            c -= '0'\n        } else {\n        \
    \    c -= 'A'\n        }\n        if c >= '0' && c <= '9' {\n            c -=\
    \ '0'\n        } else {\n            c -= 'A'\n        }\n        if c >= '0'\
    \ && c <= '9' {\n            c -= '0'\n        } else {\n            c -= 'A'\n\
    \        }\n        if c >= '0' && c <= '9' {\n            c -= '0'\n        }\
    \ else {\n            c -= 'A'\n        }\n        if c >= '0' && c <= '9' {\n\
    \            c -= '0'\n        } else {\n            c -= 'A'\n        }\n   \
    \     if c >= '0' && c <= '9' {\n            c -= '0'\n        } else {\n    \
    \        c -= 'A'\n        }\n        if c >= '0' && c <= '9' {\n            c\
    \ -= '0'\n        } else {\n            c -= 'A'\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6mr90lfm_test.go:101:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1w4s65yr_test.go:280:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == 'A' ||\
    \ v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpn7079_9s_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpn7079_9s_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpn7079_9s_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpn7079_9s_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, v := range num {\n        if v == 'A'\
    \ || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpu9y803wk_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpu9y803wk_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpu9y803wk_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpu9y803wk_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]int, n)\n    prime[0] = 2\n  \
    \  prime[1] = 3\n    prime[2] = 5\n    prime[3] = 7\n    prime[4] = 11\n    prime[5]\
    \ = 13\n    prime[6] = 17\n    prime[7] = 19\n    prime[8] = 23\n    prime[9]\
    \ = 29\n    prime[10] = 31\n    prime[11] = 31\n    prime[12] = 37\n    prime[13]\
    \ = 37\n    prime[14] = 37\n    prime[15] = 39\n    prime[16] = 41\n    prime[17]\
    \ = 43\n    prime[18] = 47\n    prime[19] = 53\n    prime[20] = 59\n    prime[21]\
    \ = 61\n    prime[22] = 67\n    prime[23] = 71\n    prime[24] = 73\n    prime[25]\
    \ = 79\n    prime[26] = 83\n    prime[27] = 89\n    prime[28] = 97\n    prime[29]\
    \ = 101\n    prime[30] = 103\n    prime[31] = 105\n    prime[32] = 107\n    prime[33]\
    \ = 109\n    prime[34] = 311\n    prime[35] = 313\n    prime[36] = 317\n    prime[37]\
    \ = 319\n    prime[38] = 329\n    prime[39] = 331\n    prime[40] = 333\n    prime[41]\
    \ = 339\n    prime[42] = 371\n    prime[43] = 373\n    prime[44] = 379\n    prime[45]\
    \ = 381\n    prime[46] = 383\n    prime[47] = 389\n    prime[48] = 401\n    prime[49]\
    \ = 403\n    prime[50] = 407\n    prime[51] = 409\n    prime[52] = 421\n    prime[53]\
    \ = 423\n    prime[54] = 427\n    prime[55] = 429\n    prime[56] = 431\n    prime[57]\
    \ = 433\n    prime[58] = 439\n    prime[59] = 443\n    prime[60] = 447\n    prime[61]\
    \ = 449\n    prime[62] = 479\n    prime[63] = 481\n    prime[64] = 483\n    prime[65]\
    \ = 487\n    prime[66] = 489\n    prime[67] = 493\n    prime[68] = 499\n    prime[69]\
    \ = \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgx2bo78m_test.go:97:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    result := 0\n    i := 0\n    for\
    \ ; i < len(num); i++ {\n        digit := num[i]\n        if digit == \"A\" ||\
    \ digit == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit\
    \ == \"F\" {\n            result += 1\n        }\n    }\n    return result\n}\n\
    \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcglhra4z_test.go:25:9: no new variables on left side of :=

    /tmp/tmpcglhra4z_test.go:25:12: undefined: strings

    /tmp/tmpcglhra4z_test.go:30:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmpcglhra4z_test.go:30:37: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmpcglhra4z_test.go:30:53: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmpcglhra4z_test.go:30:69: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmpcglhra4z_test.go:30:85: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmpcglhra4z_test.go:30:101: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, v := range\
    \ num {\n        if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' ||\
    \ v == 'F' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp922b__1r_test.go:25:9: no new variables on left side of :=

    /tmp/tmp922b__1r_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, c := range num {\n        switch c {\n       \
    \ case 'A', 'B', 'C', 'D', 'E', 'F':\n            n += 10\n        case '0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9':\n            n += int(c - '0')\n   \
    \     }\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpxts1wn0w_test.go:55: expected '%!s(int=1)', got '%!s(int=20)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpxts1wn0w_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=25)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpxts1wn0w_test.go:55: expected '%!s(int=4)', got '%!s(int=57)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpxts1wn0w_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpxts1wn0w_test.go:55: expected '%!s(int=6)', got '%!s(int=105)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpxts1wn0w_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    n := len(num)\n    result := 0\n\
    \    i := 0\n    for i < n {\n        digit := num[i]\n        switch digit {\n\
    \        case 'A', 'B', 'C', 'D', 'E', 'F':\n            result += 1\n       \
    \ default:\n            result += 2\n        }\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ookwvuf_test.go:25:9: no new variables on left side of :=

    /tmp/tmp9ookwvuf_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    count := 0\n    for _, v := range num {\n\
    \        if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpin1498v8_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpin1498v8_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpin1498v8_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpin1498v8_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        if r == 'A' || r\
    \ == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    count := 0\n    i := 0\n    for ; i < n; i++ {\n\
    \        c := num[i]\n        if c >= '0' && c <= '9' {\n            count++\n\
    \        }\n    }\n    if count > 0 {\n        count += hex_key(num)\n    }\n\
    \    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f366?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.hex_key({0x51d49f?,\
    \ 0x5?})\n\t/tmp/tmpl_q6369k_test.go:24 +0x6e fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef6ce\ncommand-line-arguments_test.hex_key({0x51d49f?, 0x0?})\n\t/tmp/tmpl_q6369k_test.go:35\
    \ +0x49 fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6a9\ncommand-line-arguments_test.hex_key({0x51d49f?,\
    \ 0x0?})\n\t/tmp/tmpl_q6369k_test.go:35 +0x49 fp=0xc0201e03f8 sp=0xc0201e03d0\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.hex_key({0x51d49f?, 0x0?})\n\t/tmp/tmpl_q6369k_test.go:35\
    \ +0x49 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6a9\ncommand-line-arguments_test.hex_key({0x51d49f?,\
    \ 0x0?})\n\t/tmp/tmpl_q6369k_test.go:35 +0x49 fp=0xc0201e0448 sp=0xc0201e0420\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.hex_key({0x51d49f?, 0x0?})\n\t/tmp/tmpl_q6369k_test.go:35\
    \ +0x49 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6a9\ncommand-line-arguments_test.hex_key({0x51d49f?,\
    \ 0x0?})\n\t/tmp/tmpl_q6369k_test.go:35 +0x49 fp=0xc0201e0498 sp=0xc0201e0470\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.hex_key({0x51d49f?, 0x0?})\n\t/tmp/tmpl_q6369k_test.go:35\
    \ +0x49 fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6a9\ncommand-line-arguments_test.hex_key({0x51d49f?,\
    \ 0x0?})\n\t/tmp/tmpl_q6369k_test.go:35 +0x49 fp=0xc0201e04e8 sp=0xc0201e04c0\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.hex_key({0x51d49f?, 0x0?})\n\t/tmp/tmpl_q6369k_test.go:35\
    \ +0x49 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6a9\ncommand-line-arguments_test.hex_key({0x51d49f?,\
    \ 0x0?})\n\t/tmp/tmpl_q6369k_test.go:35 +0x49 fp=0xc0201e0538 sp=0xc0201e0510\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.hex_key({0x51d49f?, 0x0?})\n\t/tmp/tmpl_q6369k_test.go:35\
    \ +0x49 fp=0xc0201e0"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    count := 0\n    i := 0\n    for i < n {\n    \
    \    c := num[i]\n        if c >= '0' && c <= '9' {\n            count++\n   \
    \     }\n        if c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' ||\
    \ c == 'F' {\n            count++\n        }\n        i++\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp7nd0byn1_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp7nd0byn1_test.go:59: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp7nd0byn1_test.go:59: expected '%!s(int=4)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp7nd0byn1_test.go:59: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp7nd0byn1_test.go:59: expected '%!s(int=6)', got '%!s(int=16)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp7nd0byn1_test.go:59:\
    \ expected '%!s(int=12)', got '%!s(int=32)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, v := range num {\n        if v == 'A' || v\
    \ == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpwo7hpllr_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpwo7hpllr_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpwo7hpllr_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpwo7hpllr_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]bool, len(num))\n    prime[0]\
    \ = true\n    prime[1] = true\n    prime[2] = true\n    prime[3] = true\n    prime[4]\
    \ = true\n    prime[5] = true\n    prime[6] = true\n    prime[7] = true\n    prime[8]\
    \ = true\n    prime[9] = true\n    prime[10] = true\n    prime[11] = true\n  \
    \  prime[12] = true\n    prime[13] = true\n    prime[14] = true\n    prime[15]\
    \ = true\n    prime[16] = true\n    prime[17] = true\n    prime[18] = true\n \
    \   prime[19] = true\n    prime[20] = true\n    prime[21] = true\n    prime[22]\
    \ = true\n    prime[23] = true\n    prime[24] = true\n    prime[25] = true\n \
    \   prime[26] = true\n    prime[27] = true\n    prime[28] = true\n    prime[29]\
    \ = true\n    prime[30] = true\n    prime[31] = true\n    prime[32] = true\n \
    \   prime[33] = true\n    prime[34] = true\n    prime[35] = true\n    prime[36]\
    \ = true\n    prime[37] = true\n    prime[38] = true\n    prime[39] = true\n \
    \   prime[40] = true\n    prime[41] = true\n    prime[42] = true\n    prime[43]\
    \ = true\n    prime[44] = true\n    prime[45] = true\n    prime[46] = true\n \
    \   prime[47] = true\n    prime[48] = true\n    prime[49] = true\n    prime[50]\
    \ = true\n    prime[51] = true\n    prime[52] = true\n    prime[53] = true\n \
    \   prime[54] = true\n    prime[55] = true\n    prime[56] = true\n    prime[57]\
    \ = true\n    prime[58] = true\n    prime[59] = true\n    prime[60] = true\n \
    \   prime[61] = true\n    prime[62] = true\n    prime[63] = true\n    prime[64]\
    \ = true\n    prime[65] = true\n    prime[66] = true\n    prime[67] = true\n \
    \   prime[68] = true\n    prime[69] = true\n    prime[70] = true\n    prime[71]\
    \ = true\n    prime[72] = true\n    prime[73] = true\n    prime[74\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb7e8qqyf_test.go:101:13: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    hexDigitsCount\
    \ := 0\n    for _, digit := range num {\n        hexDigitsCount++\n        if\
    \ hexDigitsCount > len(hexDigits) {\n            break\n        }\n        if\
    \ hexDigits[hexDigitsCount] == digit {\n            hexDigitsCount++\n       \
    \ }\n    }\n    return hexDigitsCount\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdphmly__test.go:32:41: invalid operation: hexDigits[hexDigitsCount] ==
    digit (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]int, n)\n    prime[0] = prime[1]\
    \ = 1\n    for i := 2; i < n; i++ {\n        if num[i] == 'A' || num[i] == 'B'\
    \ || num[i] == 'C' || num[i] == 'D' || num[i] == 'E' || num[i] == 'F' {\n    \
    \        prime[i] = 0\n        } else {\n            prime[i] = prime[i-1] + 1\n\
    \        }\n    }\n    for i := 2; i < n; i++ {\n        if prime[i] == 0 {\n\
    \            prime[i] = 1\n        }\n    }\n    return prime[n-1]\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpietwo7yu_test.go:27:25: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        n += int(rune(r) - '0')\n\
    \    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp3y69wuu0_test.go:50: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmp3y69wuu0_test.go:50: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmp3y69wuu0_test.go:50: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        if r == 'A' || r\
    \ == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    \n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    hexDigits := []int{2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99}\n    primes := []int{2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991}\n    primesCount := 0\n    for _, prime := range primes {\n      \
    \  if prime == num[0] {\n            primesCount++\n        }\n    }\n    hexDigitsCount\
    \ := 0\n    for _, \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0x6o6m7y_test.go:35:9: expected 1 expression

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, v := range\
    \ num {\n        if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' ||\
    \ v == 'F' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp922b__1r_test.go:25:9: no new variables on left side of :=

    /tmp/tmp922b__1r_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        if r == 'A' || r ==\
    \ 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            n += 1\n\
    \        }\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpdxo5gel8_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpdxo5gel8_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpdxo5gel8_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpdxo5gel8_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    digits := []int{}\n    for _, d\
    \ := range num {\n        digits = append(digits, int(d))\n    }\n    sort.Ints(digits)\n\
    \    prime := 0\n    i := 0\n    for i < len(digits) {\n        if digits[i] ==\
    \ 2 {\n            prime++\n        }\n        if digits[i] == 3 {\n         \
    \   prime++\n        }\n        if digits[i] == 5 {\n            prime++\n   \
    \     }\n        if digits[i] == 7 {\n            prime++\n        }\n       \
    \ if digits[i] == 11 {\n            prime++\n        }\n        if digits[i] ==\
    \ 13 {\n            prime++\n        }\n        if digits[i] == 17 {\n       \
    \     prime++\n        }\n        if digits[i] == 19 {\n            prime++\n\
    \        }\n        if digits[i] == 23 {\n            prime++\n        }\n   \
    \     if digits[i] == 29 {\n            prime++\n        }\n        if digits[i]\
    \ == 31 {\n            prime++\n        }\n        if digits[i] == 37 {\n    \
    \        prime++\n        }\n        if digits[i] == 43 {\n            prime++\n\
    \        }\n        if digits[i] == 71 {\n            prime++\n        }\n   \
    \     if digits[i] == 79 {\n            prime++\n        }\n        if digits[i]\
    \ == 89 {\n            prime++\n        }\n        if digits[i] == 91 {\n    \
    \        prime++\n        }\n        if digits[i] == 93 {\n            prime++\n\
    \        }\n        if digits[i] == 97 {\n            prime++\n        }\n   \
    \     if digits[i] == 99 {\n            prime++\n        }\n        if digits[i]\
    \ == 101 {\n            prime++\n        }\n        if digits[i] == 103 {\n  \
    \          prime++\n        }\n        if digits[i] == 107 {\n            prime++\n\
    \        }\n        if digits[i] == 109 {\n            prime++\n        }\n  \
    \      if digits[i] == 111 {\n            prime++\n        }\n        if digits[i]\
    \ == 113 {\n            prime++\n        }\n        if digits[i] == 127 {\n  \
    \          prime++\n        }\n        if digits[i] == 131 {\n            prime++\n\
    \        }\n        if digits[i] == 137 {\n            prime++\n        }\n  \
    \      if digits[i] == 139 { // prime number 13\n            prime++\n       \
    \ }\n        if digits[i] == 143 { // prime number 14\n            prime++\n \
    \       }\n        if digits[i] == 151 { // prime number 15\n            prime++\n\
    \        }\n        if digits[i] == 159 { // prime number 16\n            prime++\n\
    \        }\n        if digits[i] == 163 { // prime number 17\n            prime++\n\
    \        }\n        if \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprrf_oiy4_test.go:137:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074628
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    hexDigits := []string{\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\"}\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primesLen\
    \ := len(primes)\n    result := 0\n    for _, digit := range num {\n        result\
    \ += (hexDigits.Index(digit) * primes[primesLen-1])\n        primesLen--\n   \
    \ }\n    return result\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswgfmgxn_test.go:25:9: no new variables on left side of :=

    /tmp/tmpswgfmgxn_test.go:25:12: undefined: strings

    /tmp/tmpswgfmgxn_test.go:31:30: hexDigits.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    num := strings.ToUpper(num)\n    \n\
    \    count := 0\n    \n    for _, char := range num {\n        if char == 'A'\
    \ || char == 'B' || char == 'C' || char == 'D' || char == 'E' || char == 'F' {\n\
    \            count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpllvk2wzb_test.go:27:9: no new variables on left side of :=

    /tmp/tmpllvk2wzb_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    hexDigits := []int{0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31}\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    result := 0\n    i\
    \ := 0\n    for i < n {\n        result += (hexDigits[num[i]] * (primes[i]))\n\
    \        i++\n    }\n    return result\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\npanic: runtime error: index out of range\
    \ [65] with length 32 [recovered]\n\tpanic: runtime error: index out of range\
    \ [65] with length 32\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.hex_key({0x51e1d4?, 0xc0000c4728?})\n\t\
    /tmp/tmpr8s0p9jy_test.go:31 +0x356\ncommand-line-arguments_test.TestHex_Key(0x0?)\n\
    \t/tmp/tmpr8s0p9jy_test.go:44 +0x4a\ntesting.tRunner(0xc0001924e0, 0x528f80)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, v := range num {\n        if v == 'A' || v\
    \ == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpwo7hpllr_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpwo7hpllr_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpwo7hpllr_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpwo7hpllr_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        if r == 'A' || r\
    \ == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, r := range num {\n        if r == 'A' ||\
    \ r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpdftcx61z_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpdftcx61z_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpdftcx61z_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpdftcx61z_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074629
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    i := 0\n    for\
    \ ; i < len(num); i++ {\n        digit := num[i]\n        if digit == \"A\" ||\
    \ digit == \"B\" {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1odp0s9q_test.go:25:9: no new variables on left side of :=

    /tmp/tmp1odp0s9q_test.go:25:12: undefined: strings

    /tmp/tmp1odp0s9q_test.go:30:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmp1odp0s9q_test.go:30:37: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]bool, len(num))\n    prime[0]\
    \ = true\n    prime[1] = true\n    prime[2] = true\n    prime[3] = true\n    prime[4]\
    \ = true\n    prime[5] = true\n    prime[6] = true\n    prime[7] = true\n    prime[8]\
    \ = true\n    prime[9] = true\n    prime[10] = true\n    prime[11] = true\n  \
    \  prime[12] = true\n    prime[13] = true\n    prime[14] = true\n    prime[15]\
    \ = true\n    prime[16] = true\n    prime[17] = true\n    prime[18] = true\n \
    \   prime[19] = true\n    prime[20] = true\n    prime[21] = true\n    prime[22]\
    \ = true\n    prime[23] = true\n    prime[24] = true\n    prime[25] = true\n \
    \   prime[26] = true\n    prime[27] = true\n    prime[28] = true\n    prime[29]\
    \ = true\n    prime[30] = true\n    prime[31] = true\n    prime[32] = true\n \
    \   prime[33] = true\n    prime[34] = true\n    prime[35] = true\n    prime[36]\
    \ = true\n    prime[37] = true\n    prime[38] = true\n    prime[39] = true\n \
    \   prime[40] = true\n    prime[41] = true\n    prime[42] = true\n    prime[43]\
    \ = true\n    prime[44] = true\n    prime[45] = true\n    prime[46] = true\n \
    \   prime[47] = true\n    prime[48] = true\n    prime[49] = true\n    prime[50]\
    \ = true\n    prime[51] = true\n    prime[52] = true\n    prime[53] = true\n \
    \   prime[54] = true\n    prime[55] = true\n    prime[56] = true\n    prime[57]\
    \ = true\n    prime[58] = true\n    prime[59] = true\n    prime[60] = true\n \
    \   prime[61] = true\n    prime[62] = true\n    prime[63] = true\n    prime[64]\
    \ = true\n    prime[65] = true\n    prime[66] = true\n    prime[67] = true\n \
    \   prime[68] = true\n    prime[69] = true\n    prime[70] = true\n    prime[71]\
    \ = true\n    prime[72] = true\n    prime[73] = true\n    prime[74\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb7e8qqyf_test.go:101:13: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    base := len(num)\n    for i := 0; i < base; i++ {\n\
    \        digit := int(num[i])\n        if digit > 9 {\n            digit = digit\
    \ - 10\n        }\n        if digit == 0 || digit == 1 {\n            continue\n\
    \        }\n        count += digit\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp3l598aak_test.go:58: expected '%!s(int=1)', got '%!s(int=111)'\n \
    \   --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp3l598aak_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=226)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmp3l598aak_test.go:58: expected '%!s(int=4)', got '%!s(int=404)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp3l598aak_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=156)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmp3l598aak_test.go:58: expected '%!s(int=6)', got '%!s(int=770)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp3l598aak_test.go:58:\
    \ expected '%!s(int=12)', got '%!s(int=1540)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        if r == 'A' || r\
    \ == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    base := \"0123456789ABCDEF\"\n    for _, r := range num\
    \ {\n        if r == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r\
    \ == 'F' {\n            continue\n        }\n        n += base[r]\n    }\n   \
    \ return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6_im5z7h_test.go:31:9: invalid operation: n += base[r] (mismatched types
    int and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f\
    \ int\n    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n\
    \    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n \
    \   var q int\n    var r int\n    var s int\n    var t int\n    var u int\n  \
    \  var v int\n    var w int\n    var x int\n    var y int\n    var z int\n   \
    \ var a int\n    var b int\n    var c int\n    var d int\n    var e int\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvdndnt7p_test.go:154:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    \n    for _, v := range num {\n        count +=\
    \ int(v) - int(v)%10\n    }\n    \n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpt7nde580_test.go:52: expected '%!s(int=1)', got '%!s(int=120)'\n \
    \   --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpt7nde580_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=240)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpt7nde580_test.go:52: expected '%!s(int=4)', got '%!s(int=440)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpt7nde580_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=180)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpt7nde580_test.go:52: expected '%!s(int=6)', got '%!s(int=850)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpt7nde580_test.go:52:\
    \ expected '%!s(int=12)', got '%!s(int=1700)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    result := 0\n    i := 0\n    for ; i < n; i++\
    \ {\n        digit := int(num[i])\n        if digit >= '0' && digit <= '9' {\n\
    \            result += 1\n        }\n    }\n    return result\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp6i7soq0__test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp6i7soq0__test.go:55: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp6i7soq0__test.go:55: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp6i7soq0__test.go:55: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp6i7soq0__test.go:55: expected '%!s(int=6)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp6i7soq0__test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    base := len(num)\n    for i := 0; i < base; i++ {\n\
    \        digit := int(num[i])\n        if digit == 0 || digit == 1 {\n       \
    \     continue\n        }\n        count += digit\n        if count > 2 {\n  \
    \          break\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpm973qb9w_test.go:58: expected '%!s(int=1)', got '%!s(int=65)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpm973qb9w_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=49)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpm973qb9w_test.go:58: expected '%!s(int=4)', got '%!s(int=65)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpm973qb9w_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=50)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpm973qb9w_test.go:58: expected '%!s(int=6)', got '%!s(int=49)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpm973qb9w_test.go:58:\
    \ expected '%!s(int=12)', got '%!s(int=49)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, v := range num {\n        if v == 'A' || v\
    \ == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpwo7hpllr_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpwo7hpllr_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpwo7hpllr_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpwo7hpllr_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    \n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvwyn84yg_test.go:172:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    digits := []int{2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primes2 := []int{2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n    primes3 := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primes4 := []int{2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97}\n    primes5 := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primes6 := []int{2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n    primes7 := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primes8 := []int{2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n    primes9 := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primes10 := []int{2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n    primes11 := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primes12 := []int{2,\
    \ 3, 5, 7, 11, 13, 17, \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmvpuwctg_test.go:39:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, v := range num {\n        if v == 'A' || v\
    \ == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpwo7hpllr_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpwo7hpllr_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpwo7hpllr_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpwo7hpllr_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, c := range num {\n        if c >= '0'\
    \ && c <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp4inyuv53_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp4inyuv53_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp4inyuv53_test.go:52: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp4inyuv53_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp4inyuv53_test.go:52: expected '%!s(int=6)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp4inyuv53_test.go:52:\
    \ expected '%!s(int=12)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074629
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    n := len(num)\n    result := 0\n\
    \    for i := 0; i < n; i++ {\n        digit := num[i]\n        if digit == \"\
    A\" || digit == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" ||\
    \ digit == \"F\" {\n            result += int(digit) - int(digit)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8l8x71f_test.go:25:9: no new variables on left side of :=

    /tmp/tmpc8l8x71f_test.go:25:12: undefined: strings

    /tmp/tmpc8l8x71f_test.go:30:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmpc8l8x71f_test.go:30:37: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmpc8l8x71f_test.go:30:53: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmpc8l8x71f_test.go:30:69: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmpc8l8x71f_test.go:30:85: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmpc8l8x71f_test.go:30:101: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    count := 0\n    i := 0\n    for i < n {\n    \
    \    c := num[i]\n        if c >= '0' && c <= '9' {\n            count++\n   \
    \     }\n        if c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' ||\
    \ c == 'F' {\n            count++\n        }\n        i++\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp7nd0byn1_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp7nd0byn1_test.go:59: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp7nd0byn1_test.go:59: expected '%!s(int=4)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp7nd0byn1_test.go:59: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp7nd0byn1_test.go:59: expected '%!s(int=6)', got '%!s(int=16)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp7nd0byn1_test.go:59:\
    \ expected '%!s(int=12)', got '%!s(int=32)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, c := range num {\n        if c >= '0' && c\
    \ <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp4kqngh8d_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp4kqngh8d_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp4kqngh8d_test.go:52: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp4kqngh8d_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp4kqngh8d_test.go:52: expected '%!s(int=6)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp4kqngh8d_test.go:52:\
    \ expected '%!s(int=12)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074629
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        n += int(string(r))\n\
    \    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf_557uwt_test.go:27:18: cannot convert string(r) (value of type string)
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    i := 0\n    for ; i < len(num); i++ {\n        count\
    \ += int(num[i]) - '0'\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkasxb38f_test.go:51: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkasxb38f_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpkasxb38f_test.go:51: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkasxb38f_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpkasxb38f_test.go:51: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkasxb38f_test.go:51:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]int, n)\n    prime[0] = 2\n  \
    \  prime[1] = 2\n    prime[2] = 2\n    prime[3] = 2\n    prime[4] = 2\n    prime[5]\
    \ = 2\n    prime[6] = 2\n    prime[7] = 2\n    prime[8] = 2\n    prime[9] = 2\n\
    \    prime[10] = 2\n    prime[11] = 2\n    prime[12] = 2\n    prime[13] = 2\n\
    \    prime[14] = 2\n    prime[15] = 2\n    prime[16] = 2\n    prime[17] = 2\n\
    \    prime[18] = 2\n    prime[19] = 2\n    prime[20] = 2\n    prime[21] = 2\n\
    \    prime[22] = 2\n    prime[23] = 2\n    prime[24] = 2\n    prime[25] = 2\n\
    \    prime[26] = 2\n    prime[27] = 2\n    prime[28] = 2\n    prime[29] = 2\n\
    \    prime[30] = 2\n    prime[31] = 2\n    prime[32] = 2\n    prime[33] = 2\n\
    \    prime[34] = 2\n    prime[35] = 2\n    prime[36] = 2\n    prime[37] = 2\n\
    \    prime[38] = 2\n    prime[39] = 2\n    prime[40] = 2\n    prime[41] = 2\n\
    \    prime[42] = 2\n    prime[43] = 2\n    prime[44] = 2\n    prime[45] = 2\n\
    \    prime[46] = 2\n    prime[47] = 2\n    prime[48] = 2\n    prime[49] = 2\n\
    \    prime[50] = 2\n    prime[51] = 2\n    prime[52] = 2\n    prime[53] = 2\n\
    \    prime[54] = 2\n    prime[55] = 2\n    prime[56] = 2\n    prime[57] = 2\n\
    \    prime[58] = 2\n    prime[59] = 2\n    prime[60] = 2\n    prime[61] = 2\n\
    \    prime[62] = 2\n    prime[63] = 2\n    prime[64] = 2\n    prime[65] = 2\n\
    \    prime[66] = 2\n    prime[67] = 2\n    prime[68] = 2\n    prime[69] = 2\n\
    \    prime[70] = 2\n    prime[71] = 2\n    prime[72] = 2\n    prime[73] = 2\n\
    \    prime[74] = 2\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph4q3tpwq_test.go:102:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        n += int(rune(r) - '0')\n\
    \    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp3y69wuu0_test.go:50: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmp3y69wuu0_test.go:50: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmp3y69wuu0_test.go:50: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074628
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    hexDigitsCount\
    \ := 0\n    \n    for _, digit := range num {\n        hexDigitsCount++\n    \
    \    if hexDigitsCount > len(hexDigits) {\n            return hexDigitsCount\n\
    \        }\n        if hexDigits[hexDigitsCount] != digit {\n            return\
    \ hexDigitsCount\n        }\n        hexDigitsCount++\n    }\n    return hexDigitsCount\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4d_2v4dj_test.go:33:41: invalid operation: hexDigits[hexDigitsCount] !=
    digit (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: null
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    count := 0\n    i := 0\n    for i < n {\n    \
    \    j := i + 1\n        for j < n {\n            k := j + 1\n            for\
    \ k < n {\n                l := k + 1\n                for l < n {\n         \
    \           m := l + 1\n                    for m < n {\n                    \
    \    n := m + 1\n                        for n < n {\n                       \
    \     count += int(num[i]) * int(num[j]) * int(num[k]) * int(num[l]) * int(num[m])\
    \ * int(num[n])\n                            i++\n                           \
    \ j++\n                            k++\n                            l++\n    \
    \                        m++\n                            n++\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074643
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    base := 16\n    for _, r := range num {\n        n +=\
    \ base * int(r) - int('A') + int('0')\n        base /= 16\n    }\n    return n\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpp2pcaif3_test.go:52: expected '%!s(int=1)', got '%!s(int=1072)'\n\
    \    --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpp2pcaif3_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=747)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpp2pcaif3_test.go:52: expected '%!s(int=4)', got '%!s(int=970)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpp2pcaif3_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=780)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpp2pcaif3_test.go:52: expected '%!s(int=6)', got '%!s(int=562)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpp2pcaif3_test.go:52:\
    \ expected '%!s(int=12)', got '%!s(int=289)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, r := range\
    \ num {\n        if r == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' ||\
    \ r == 'F' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2haxuju6_test.go:25:9: no new variables on left side of :=

    /tmp/tmp2haxuju6_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    base := 16\n    digits, err := strconv.Atoi(num)\n\
    \    if err != nil {\n        return count\n    }\n    for i := 0; i < digits;\
    \ i++ {\n        digit := digits[i]\n        if digit == 'A' || digit == 'B' ||\
    \ digit == 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n           \
    \ continue\n        }\n        count += digit\n        count += digit\n      \
    \  count += digit\n        count += digit\n        count += digit\n        count\
    \ += digit\n        count += digit\n        count += digit\n        count += digit\n\
    \        count += digit\n        count += digit\n        count += digit\n    \
    \    count += digit\n        count += digit\n        count += digit\n        count\
    \ += digit\n        count += digit\n        count += digit\n        count += digit\n\
    \        count += digit\n        count += digit\n        count += digit\n    \
    \    count += digit\n        count += digit\n        count += digit\n        count\
    \ += digit\n        count += digit\n        count += digit\n        count += digit\n\
    \        count += digit\n        count += digit\n        count += digit\n    \
    \    count += digit\n        count += digit\n        count += digit\n        count\
    \ += digit\n        count += digit\n        count += digit\n        count += digit\n\
    \        count += digit\n        count += digit\n        count += digit\n    \
    \    count += digit\n        count += digit\n        count += digit\n        count\
    \ += digit\n        count += digit\n        count += digit\n        count += digit\n\
    \        count += digit\n        count += digit\n        count += digit\n    \
    \    count += digit\n        count += digit\n        count += digit\n        count\
    \ += digit\n        count += digit\n        count += digit\n        count += digit\n\
    \        count += digit\n        count += digit\n        count += digit\n    \
    \    count += digit\n        count += digit\n        count += digit\n        count\
    \ += digit\n        count += digit\n        count += digit\n        count += digit\n\
    \        count += digit\n        count += digit\n        count += digit\n    \
    \    count += digit\n        count += digit\n        count += digit\n        count\
    \ += digit\n        count += digit\n        count += digit\n        count += digit\n\
    \        count += digit\n        count += digit\n        count += digit\n    \
    \    count += digit\n        count += digit\n        count += digit\n        count\
    \ += digit\n        count += \nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv2ag5okl_test.go:123:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == 'A' ||\
    \ v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpn7079_9s_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpn7079_9s_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpn7079_9s_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpn7079_9s_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    result := 0\n    for _, char :=\
    \ range num {\n        result += (int(char) - 'A') * int(char) - 'A'\n    }\n\
    \    return result\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxrr14g_m_test.go:25:9: no new variables on left side of :=

    /tmp/tmpxrr14g_m_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwf90pr1f_test.go:280:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F}\n\
    \    hexDigitsCount := 0\n    for _, d := range num {\n        hexDigitsCount\
    \ += hexDigits[int(d)]\n    }\n    return hexDigitsCount\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeq34jz6g_test.go:25:54: undefined: A

    /tmp/tmpeq34jz6g_test.go:25:57: undefined: B

    /tmp/tmpeq34jz6g_test.go:25:60: undefined: C

    /tmp/tmpeq34jz6g_test.go:25:63: undefined: D

    /tmp/tmpeq34jz6g_test.go:25:66: undefined: E

    /tmp/tmpeq34jz6g_test.go:25:69: undefined: F

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    num := strings.ToUpper(num)\n    hexDigits\
    \ := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    primes := []int{2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n    primesCount := 0\n    for _, digit := range hexDigits {\n     \
    \   if num == digit {\n            primesCount++\n        }\n    }\n    for _,\
    \ prime := range primes {\n        if num == fmt.Sprintf(\"%c\", prime) {\n  \
    \          primesCount++\n        }\n    }\n    return primesCount\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps5q1uy7t_test.go:26:9: no new variables on left side of :=

    /tmp/tmps5q1uy7t_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    hexDigitsPrime\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\"\
    , \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime2 := []string{\"2\", \"3\"\
    , \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\"\
    , \"41\"}\n    hexDigitsPrime3 := []string{\"2\", \"3\", \"5\", \"7\", \"11\"\
    , \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime4\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\"\
    , \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime5 := []string{\"2\", \"3\"\
    , \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\"\
    , \"41\"}\n    hexDigitsPrime6 := []string{\"2\", \"3\", \"5\", \"7\", \"11\"\
    , \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime7\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\"\
    , \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime8 := []string{\"2\", \"3\"\
    , \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\"\
    , \"41\"}\n    hexDigitsPrime9 := []string{\"2\", \"3\", \"5\", \"7\", \"11\"\
    , \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime10\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\"\
    , \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime11 := []string{\"2\", \"\
    3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"\
    37\", \"41\"}\n    hexDigitsPrime12 := []string{\"2\", \"3\", \"5\", \"7\", \"\
    11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime13\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\"\
    , \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime14 := []\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw5a6z5lz_test.go:39:27: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    base := 0\n    switch num[0] {\n    case 'A', 'B', 'C',\
    \ 'D', 'E', 'F':\n        base = 16\n    case '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9':\n        base = 8\n    }\n    for _, c := range num {\n     \
    \   if c >= '0' && c <= '9' {\n            n = n*base + int(c-'0')\n        }\
    \ else {\n            fmt.Printf(\"%c is not a hexadecimal digit\\n\", c)\n  \
    \      }\n    }\n    if n%2 == 0 {\n        return 2\n    }\n    if n%5 == 0 {\n\
    \        return 4\n    }\n    if n%7 == 0 {\n        return 6\n    }\n    return\
    \ 2\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "A is not a hexadecimal digit\nB is not a hexadecimal digit\nE is not a\
    \ hexadecimal digit\nA is not a hexadecimal digit\nB is not a hexadecimal digit\n\
    E is not a hexadecimal digit\nD is not a hexadecimal digit\nA is not a hexadecimal\
    \ digit\nA is not a hexadecimal digit\nB is not a hexadecimal digit\nC is not\
    \ a hexadecimal digit\nD is not a hexadecimal digit\nE is not a hexadecimal digit\n\
    F is not a hexadecimal digit\nA is not a hexadecimal digit\nA is not a hexadecimal\
    \ digit\nB is not a hexadecimal digit\nB is not a hexadecimal digit\nC is not\
    \ a hexadecimal digit\nC is not a hexadecimal digit\nD is not a hexadecimal digit\n\
    D is not a hexadecimal digit\nE is not a hexadecimal digit\nE is not a hexadecimal\
    \ digit\nF is not a hexadecimal digit\nF is not a hexadecimal digit\n--- FAIL:\
    \ TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n       \
    \ tmpipmwj1qh_test.go:70: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL:\
    \ TestHex_Key/test_num__1 (0.00s)\n        tmpipmwj1qh_test.go:70: expected '%!s(int=2)',\
    \ got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n        tmpipmwj1qh_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpipmwj1qh_test.go:70: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpipmwj1qh_test.go:70:\
    \ expected '%!s(int=12)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\"\
    , \"1\", -1)\n    num := strings.Replace(num, \"B\", \"2\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"3\", -1)\n    num := strings.Replace(num, \"D\", \"4\", -1)\n    num\
    \ := strings.Replace(num, \"E\", \"5\", -1)\n    num := strings.Replace(num, \"\
    F\", \"6\", -1)\n    num := strings.Replace(num, \"0\", \"7\", -1)\n    num :=\
    \ strings.Replace(num, \"1\", \"8\", -1)\n    num := strings.Replace(num, \"2\"\
    , \"9\", -1)\n    num := strings.Replace(num, \"3\", \"A\", -1)\n    num := strings.Replace(num,\
    \ \"4\", \"B\", -1)\n    num := strings.Replace(num, \"5\", \"C\", -1)\n    num\
    \ := strings.Replace(num, \"6\", \"D\", -1)\n    num := strings.Replace(num, \"\
    7\", \"E\", -1)\n    num := strings.Replace(num, \"8\", \"F\", -1)\n    num :=\
    \ strings.Replace(num, \"9\", \"0\", -1)\n    num := strings.Replace(num, \"+\"\
    , \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"_\", -1)\n    num := strings.Replace(num, \"_\", \".\", -1)\n    num\
    \ := strings.Replace(num, \"/\", \"_\", -1)\n    num := strings.Replace(num, \"\
    -\", \"_\", -1)\n    num := strings.Replace(num, \"_\", \"-\", -1)\n    num :=\
    \ strings.Replace(num, \"=\", \"_\", -1)\n    num := strings.Replace(num, \"_\"\
    , \"=\", -1)\n    num := strings.Replace(num, \"+\", \"_\", -1)\n    num := strings.Replace(num,\
    \ \"_\", \"+\", -1)\n    num := strings.Replace(num, \"-\", \"_\", -1)\n    num\
    \ := strings.Replace(num, \"_\", \"-\", -1)\n    num := strings.Replace(num, \"\
    *\", \"_\", -1)\n    num := strings.Replace(num, \"_\", \"*\", -1)\n    num :=\
    \ strings.Replace(num, \"/\", \"_\", -1)\n    num := strings.Replace(num, \"_\"\
    , \"/\", -1)\n    num := strings.Replace(num, \"%\", \"_\", -1)\n    num := strings.Replace(num,\
    \ \"_\", \"%\", -1)\n    num := strings.Replace(num, \"(\", \"_\", -1)\n    num\
    \ := strings.Replace(num, \"_\", \"(\", -1)\n    num := strings.Replace(num, \"\
    )\", \"_\", -1)\n    num := strings.Replace(num, \"_\", \")\", -1)\n    num :=\
    \ strings.Replace(num, \"[\", \"\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjvdifma5_test.go:65:38: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1w4s65yr_test.go:280:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, v := range num {\n        if v == 'A' || v\
    \ == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            continue\n\
    \        }\n        if v == '0' {\n            continue\n        }\n        count\
    \ += int(v)\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmph6k0z5t__test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmph6k0z5t__test.go:56: expected\
    \ '%!s(int=2)', got '%!s(int=159)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmph6k0z5t__test.go:56: expected '%!s(int=4)', got '%!s(int=151)'\n \
    \   --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmph6k0z5t__test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=100)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmph6k0z5t__test.go:56: expected '%!s(int=6)', got '%!s(int=477)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmph6k0z5t__test.go:56:\
    \ expected '%!s(int=12)', got '%!s(int=954)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    primes\
    \ := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97}\n    primesMap := map[int]bool{}\n    for _, prime\
    \ := range primes {\n        primesMap[prime] = true\n    }\n    primesMap[0]\
    \ = true\n    primesMap[1] = true\n    primesMap[2] = true\n    primesMap[3] =\
    \ true\n    primesMap[4] = true\n    primesMap[5] = true\n    primesMap[6] = true\n\
    \    primesMap[7] = true\n    primesMap[8] = true\n    primesMap[9] = true\n \
    \   primesMap[10] = true\n    primesMap[11] = true\n    primesMap[12] = true\n\
    \    primesMap[13] = true\n    primesMap[14] = true\n    primesMap[15] = true\n\
    \    primesMap[16] = true\n    primesMap[17] = true\n    primesMap[18] = true\n\
    \    primesMap[19] = true\n    primesMap[20] = true\n    primesMap[21] = true\n\
    \    primesMap[22] = true\n    primesMap[23] = true\n    primesMap[24] = true\n\
    \    primesMap[25] = true\n    primesMap[26] = true\n    primesMap[27] = true\n\
    \    primesMap[28] = true\n    primesMap[29] = true\n    primesMap[30] = true\n\
    \    primesMap[31] = true\n    primesMap[32] = true\n    primesMap[33] = true\n\
    \    primesMap[34] = true\n    primesMap[35] = true\n    primesMap[36] = true\n\
    \    primesMap[37] = true\n    primesMap[38] = true\n    primesMap[39] = true\n\
    \    primesMap[40] = true\n    primesMap[41] = true\n    primesMap[42] = true\n\
    \    primesMap[43] = true\n    primesMap[44] = true\n    primesMap[45] = true\n\
    \    primesMap[46] = true\n    primesMap[47] = true\n    primesMap[48] = true\n\
    \    primesMap[49] = true\n    primesMap[50] = true\n    primesMap\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmparpjjanc_test.go:83:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]bool, len(num)+1)\n    prime[0]\
    \ = true\n    prime[1] = true\n    prime[2] = true\n    prime[3] = true\n    prime[4]\
    \ = true\n    prime[5] = true\n    prime[6] = true\n    prime[7] = true\n    prime[8]\
    \ = true\n    prime[9] = true\n    prime[10] = true\n    prime[11] = true\n  \
    \  prime[12] = true\n    prime[13] = true\n    prime[14] = true\n    prime[15]\
    \ = true\n    prime[16] = true\n    prime[17] = true\n    prime[18] = true\n \
    \   prime[19] = true\n    prime[20] = true\n    prime[21] = true\n    prime[22]\
    \ = true\n    prime[23] = true\n    prime[24] = true\n    prime[25] = true\n \
    \   prime[26] = true\n    prime[27] = true\n    prime[28] = true\n    prime[29]\
    \ = true\n    prime[30] = true\n    prime[31] = true\n    prime[32] = true\n \
    \   prime[33] = true\n    prime[34] = true\n    prime[35] = true\n    prime[36]\
    \ = true\n    prime[37] = true\n    prime[38] = true\n    prime[39] = true\n \
    \   prime[40] = true\n    prime[41] = true\n    prime[42] = true\n    prime[43]\
    \ = true\n    prime[44] = true\n    prime[45] = true\n    prime[46] = true\n \
    \   prime[47] = true\n    prime[48] = true\n    prime[49] = true\n    prime[50]\
    \ = true\n    prime[51] = true\n    prime[52] = true\n    prime[53] = true\n \
    \   prime[54] = true\n    prime[55] = true\n    prime[56] = true\n    prime[57]\
    \ = true\n    prime[58] = true\n    prime[59] = true\n    prime[60] = true\n \
    \   prime[61] = true\n    prime[62] = true\n    prime[63] = true\n    prime[64]\
    \ = true\n    prime[65] = true\n    prime[66] = true\n    prime[67] = true\n \
    \   prime[68] = true\n    prime[69] = true\n    prime[70] = true\n    prime[71]\
    \ = true\n    prime[72] = true\n    prime[73] = true\n    prime[74\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9qn_xv5_test.go:101:13: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    primes := make([]int, n)\n    primes[0] = 2\n\
    \    primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n\
    \    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n\
    \    primes[9] = 29\n    primes[10] = 31\n    primes[11] = 31\n    primes[12]\
    \ = 31\n    primes[13] = 31\n    primes[14] = 31\n    primes[15] = 31\n    primes[16]\
    \ = 31\n    primes[17] = 31\n    primes[18] = 31\n    primes[19] = 31\n    primes[20]\
    \ = 31\n    primes[21] = 31\n    primes[22] = 31\n    primes[23] = 31\n    primes[24]\
    \ = 31\n    primes[25] = 31\n    primes[26] = 31\n    primes[27] = 31\n    primes[28]\
    \ = 31\n    primes[29] = 31\n    primes[30] = 31\n    primes[31] = 31\n    primes[32]\
    \ = 31\n    primes[33] = 31\n    primes[34] = 31\n    primes[35] = 31\n    primes[36]\
    \ = 31\n    primes[37] = 31\n    primes[38] = 31\n    primes[39] = 31\n    primes[40]\
    \ = 31\n    primes[41] = 31\n    primes[42] = 31\n    primes[43] = 31\n    primes[44]\
    \ = 31\n    primes[45] = 31\n    primes[46] = 31\n    primes[47] = 31\n    primes[48]\
    \ = 31\n    primes[49] = 31\n    primes[50] = 31\n    primes[51] = 31\n    primes[52]\
    \ = 31\n    primes[53] = 31\n    primes[54] = 31\n    primes[55] = 31\n    primes[56]\
    \ = 31\n    primes[57] = 31\n    primes[58] = 31\n    primes[59] = 31\n    primes[60]\
    \ = 31\n    primes[61] = 31\n    primes[62] = 31\n    primes[63] = 31\n    primes[\n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpixj998rq_test.go:92:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        if r == 'A' || r ==\
    \ 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            n += 2\n\
    \        } else {\n            n += r - '0'\n        }\n    }\n    return n\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0tznmyy3_test.go:30:13: invalid operation: n += r - ''0'' (mismatched
    types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    result := 0\n    i := 0\n    for ; i < n; i++\
    \ {\n        digit := int(num[i])\n        if digit < 'A' || digit > 'F' {\n \
    \           continue\n        }\n        result += 1\n    }\n    return result\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpcssyh4jy_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpcssyh4jy_test.go:56: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpcssyh4jy_test.go:56: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpcssyh4jy_test.go:56: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        count += int(unicode.ToLower(r)\
    \ - 'a')\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz61837p1_test.go:27:22: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, v := range\
    \ num {\n        if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' ||\
    \ v == 'F' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp922b__1r_test.go:25:9: no new variables on left side of :=

    /tmp/tmp922b__1r_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        n += int(rune(r) - 'A'\
    \ + 10)\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpmlih98jc_test.go:50: expected '%!s(int=1)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpmlih98jc_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpmlih98jc_test.go:50: expected '%!s(int=4)', got '%!s(int=44)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpmlih98jc_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=-24)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpmlih98jc_test.go:50: expected '%!s(int=6)', got '%!s(int=50)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpmlih98jc_test.go:50:\
    \ expected '%!s(int=12)', got '%!s(int=100)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, c := range num {\n        if c >= '0' && c <=\
    \ '9' {\n            n = n*16 + int(c-'0')\n        } else if c >= 'A' && c <=\
    \ 'F' {\n            n = n*16 + int(c-'A') + 10\n        } else if c >= 'a' &&\
    \ c <= 'f' {\n            n = n*16 + int(c-'a') + 10\n        }\n    }\n    return\
    \ n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpju_se42e_test.go:56: expected '%!s(int=1)', got '%!s(int=171)'\n \
    \   --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpju_se42e_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=67454)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpju_se42e_test.go:56: expected '%!s(int=4)', got '%!s(int=2884442675)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpju_se42e_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=8224)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpju_se42e_test.go:56: expected '%!s(int=6)', got '%!s(int=1311768467463790320)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpju_se42e_test.go:56:\
    \ expected '%!s(int=12)', got '%!s(int=-7373874951294615808)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1w4s65yr_test.go:280:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    base := 16\n    for _, r := range num {\n        n +=\
    \ base\n        base /= 16\n    }\n    n += base\n    return n\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi5jy_j1g_test.go:27:12: r declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    n := len(num)\n    prime := make([]int,\
    \ n)\n    prime[0] = 2\n    prime[1] = 3\n    prime[2] = 5\n    prime[3] = 7\n\
    \    prime[4] = 11\n    prime[5] = 13\n    prime[6] = 17\n    prime[7] = 19\n\
    \    prime[8] = 23\n    prime[9] = 29\n    prime[10] = 31\n    prime[11] = 31\n\
    \    prime[12] = 37\n    prime[13] = 41\n    prime[14] = 43\n    prime[15] = 47\n\
    \    prime[16] = 53\n    prime[17] = 59\n    prime[18] = 61\n    prime[19] = 67\n\
    \    prime[20] = 71\n    prime[21] = 73\n    prime[22] = 79\n    prime[23] = 83\n\
    \    prime[24] = 89\n    prime[25] = 97\n    prime[26] = 101\n    prime[27] =\
    \ 103\n    prime[28] = 107\n    prime[29] = 109\n    prime[30] = 110\n    prime[31]\
    \ = 112\n    prime[32] = 114\n    prime[33] = 117\n    prime[34] = 119\n    prime[35]\
    \ = 121\n    prime[36] = 123\n    prime[37] = 127\n    prime[38] = 131\n    prime[39]\
    \ = 137\n    prime[40] = 139\n    prime[41] = 147\n    prime[42] = 151\n    prime[43]\
    \ = 157\n    prime[44] = 163\n    prime[45] = 179\n    prime[46] = 181\n    prime[47]\
    \ = 191\n    prime[48] = 193\n    prime[49] = 197\n    prime[50] = 231\n    prime[51]\
    \ = 239\n    prime[52] = 241\n    prime[53] = 251\n    prime[54] = 253\n    prime[55]\
    \ = 257\n    prime[56] = 263\n    prime[57] = 269\n    prime[58] = 271\n    prime[59]\
    \ = 277\n    prime[60] = 283\n    prime[61] = 283\n    prime[62] = 293\n    prime[63]\
    \ = 307\n    prime[64] = 311\n    prime[65] = 317\n    prime[66] = 319\n    prime[67]\
    \ = 329\n    prime[68] = 331\n    prime[69] = 3\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpogq2xdsp_test.go:98:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    hexDigitsMap\
    \ := map[string]int{}\n    for _, v := range hexDigits {\n        hexDigitsMap[v]\
    \ = hexDigitsMap[v] + 1\n    }\n    primes := []int{}\n    for _, v := range hexDigitsMap\
    \ {\n        if v > 1 {\n            primes = append(primes, v)\n        }\n \
    \   }\n    primesMap := map[int]bool{}\n    for _, v := range primes {\n     \
    \   primesMap[v] = true\n    }\n    primesMap[2] = true\n    primesMap[3] = true\n\
    \    primesMap[5] = true\n    primesMap[7] = true\n    primesMap[11] = true\n\
    \    primesMap[13] = true\n    primesMap[17] = true\n    primesMap[19] = true\n\
    \    primesMap[23] = true\n    primesMap[29] = true\n    primesMap[37] = true\n\
    \    primesMap[43] = true\n    primesMap[59] = true\n    primesMap[73] = true\n\
    \    primesMap[89] = true\n    primesMap[97] = true\n    primesMap[109] = true\n\
    \    primesMap[127] = true\n    primesMap[143] = true\n    primesMap[157] = true\n\
    \    primesMap[179] = true\n    primesMap[193] = true\n    primesMap[199] = true\n\
    \    primesMap[223] = true\n    primesMap[257] = true\n    primesMap[283] = true\n\
    \    primesMap[297] = true\n    primesMap[311] = true\n    primesMap[343] = true\n\
    \    primesMap[349] = true\n    primesMap[373] = true\n    primesMap[407] = true\n\
    \    primesMap[423] = true\n    primesMap[429] = true\n    primesMap[451] = true\n\
    \    primesMap[457] = true\n    primesMap[479] = true\n    primesMap[493] = true\n\
    \    primesMap[509] = true\n    primesMap[523] = true\n    primesMap[539] = true\n\
    \    primesMap[567] = true\n    primesMap[587] = true\n    primesMap[609] = true\n\
    \    primesMap[631] = true\n    primesMap[\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3zd5s69w_test.go:86:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    \n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    result := 0\n    \n    for i := 0; i < n; i++\
    \ {\n        digit := int(num[i])\n        \n        if digit == 0 || digit ==\
    \ 1 {\n            continue\n        }\n        \n        result += 1\n      \
    \  \n        for j := 2; j < digit; j++ {\n            if digit % j == 0 {\n \
    \               break\n            }\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpo2id38xy_test.go:65: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpo2id38xy_test.go:65: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpo2id38xy_test.go:65: expected '%!s(int=4)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpo2id38xy_test.go:65: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpo2id38xy_test.go:65: expected '%!s(int=6)', got '%!s(int=16)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpo2id38xy_test.go:65:\
    \ expected '%!s(int=12)', got '%!s(int=32)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074633
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    digit := 0\n    for _, c := range num {\n       \
    \ if c >= '0' && c <= '9' {\n            digit = c - '0'\n        } else {\n \
    \           digit = c - 'A' + 10\n        }\n        if digit % 2 == 0 {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5npchv5k_test.go:29:21: cannot use c - ''0'' (value of type rune) as type
    int in assignment

    /tmp/tmp5npchv5k_test.go:31:21: cannot use c - ''A'' + 10 (value of type rune)
    as type int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    length := len(num)\n    for i := 0; i < length; i++\
    \ {\n        digit := int(num[i])\n        if digit > 9 {\n            digit =\
    \ digit - 10\n        }\n        if digit == 0 || digit == 1 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpreq5_2___test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpreq5_2___test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpreq5_2___test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpreq5_2___test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpreq5_2___test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpreq5_2___test.go:57: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074633
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    i := 0\n    for _, r := range num {\n        if r ==\
    \ 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n        \
    \    n += 2\n        } else {\n            n += r - '0'\n        }\n    }\n  \
    \  for i < len(num) {\n        if num[i] == 'A' || num[i] == 'B' || num[i] ==\
    \ 'C' || num[i] == 'D' || num[i] == 'E' || num[i] == 'F' {\n            n += 2\n\
    \        } else {\n            n += num[i] - '0'\n        }\n        i++\n   \
    \ }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf_z_w5ee_test.go:31:13: invalid operation: n += r - ''0'' (mismatched
    types int and rune)

    /tmp/tmpf_z_w5ee_test.go:38:13: invalid operation: n += num[i] - ''0'' (mismatched
    types int and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074633
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, v := range\
    \ num {\n        if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' ||\
    \ v == 'F' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp922b__1r_test.go:25:9: no new variables on left side of :=

    /tmp/tmp922b__1r_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpper_lq8l_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpper_lq8l_test.go:50: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpper_lq8l_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpper_lq8l_test.go:50: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpper_lq8l_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpper_lq8l_test.go:50: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074633
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    base := 0\n    for _, r := range num {\n        if r\
    \ == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n     \
    \       base = 16\n        } else {\n            base = 8\n        }\n       \
    \ if base == 16 {\n            n += 16\n        } else {\n            n += base\n\
    \        }\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_njn5xp8_test.go:60: expected '%!s(int=1)', got '%!s(int=32)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_njn5xp8_test.go:60:\
    \ expected '%!s(int=2)', got '%!s(int=48)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmp_njn5xp8_test.go:60: expected '%!s(int=4)', got '%!s(int=104)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_njn5xp8_test.go:60:\
    \ expected '%!s(int=2)', got '%!s(int=32)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmp_njn5xp8_test.go:60: expected '%!s(int=6)', got '%!s(int=176)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_njn5xp8_test.go:60:\
    \ expected '%!s(int=12)', got '%!s(int=352)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074633
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]int, n)\n    prime[0] = 2\n  \
    \  prime[1] = 3\n    prime[2] = 5\n    prime[3] = 7\n    prime[4] = 11\n    prime[5]\
    \ = 13\n    prime[6] = 17\n    prime[7] = 19\n    prime[8] = 23\n    prime[9]\
    \ = 29\n    prime[10] = 31\n    prime[11] = 31\n    prime[12] = 37\n    prime[13]\
    \ = 41\n    prime[14] = 43\n    prime[15] = 47\n    prime[16] = 53\n    prime[17]\
    \ = 59\n    prime[18] = 61\n    prime[19] = 67\n    prime[20] = 71\n    prime[21]\
    \ = 73\n    prime[22] = 79\n    prime[23] = 83\n    prime[24] = 89\n    prime[25]\
    \ = 97\n    prime[26] = 101\n    prime[27] = 103\n    prime[28] = 107\n    prime[29]\
    \ = 109\n    prime[30] = 112\n    prime[31] = 116\n    prime[32] = 120\n    prime[33]\
    \ = 124\n    prime[34] = 128\n    prime[35] = 132\n    prime[36] = 136\n    prime[37]\
    \ = 140\n    prime[38] = 144\n    prime[39] = 148\n    prime[40] = 152\n    prime[41]\
    \ = 156\n    prime[42] = 160\n    prime[43] = 164\n    prime[44] = 168\n    prime[45]\
    \ = 172\n    prime[46] = 176\n    prime[47] = 180\n    prime[48] = 184\n    prime[49]\
    \ = 188\n    prime[50] = 192\n    prime[51] = 196\n    prime[52] = 200\n    prime[53]\
    \ = 204\n    prime[54] = 208\n    prime[55] = 212\n    prime[56] = 216\n    prime[57]\
    \ = 220\n    prime[58] = 224\n    prime[59] = 228\n    prime[60] = 224\n    prime[61]\
    \ = 230\n    prime[62] = 236\n    prime[63] = 240\n    prime[64] = 244\n    prime[65]\
    \ = 248\n    prime[66] = 252\n    prime[67] = 256\n    prime[68] = 260\n    prime[69]\
    \ = 264\n    prime[70] = 268\n    prime[71] = 272\n    prime[72] = 276\n    prime[73]\
    \ = \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfswt6bs2_test.go:101:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        if r == 'A' || r\
    \ == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1w4s65yr_test.go:280:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1w4s65yr_test.go:280:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        n += int(rune(r) - '0')\n\
    \    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp3y69wuu0_test.go:50: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmp3y69wuu0_test.go:50: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmp3y69wuu0_test.go:50: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        if r == 'A' || r ==\
    \ 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            n += 2\n\
    \        } else {\n            n += 1\n        }\n    }\n    return n\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpbr15sytx_test.go:54: expected '%!s(int=1)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpbr15sytx_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=6)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpbr15sytx_test.go:54: expected '%!s(int=4)', got '%!s(int=13)'\n  \
    \  --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpbr15sytx_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpbr15sytx_test.go:54: expected '%!s(int=6)', got '%!s(int=22)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpbr15sytx_test.go:54:\
    \ expected '%!s(int=12)', got '%!s(int=44)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]bool, len(num)+1)\n    prime[0]\
    \ = true\n    prime[1] = true\n    prime[2] = true\n    prime[3] = true\n    prime[4]\
    \ = true\n    prime[5] = true\n    prime[6] = true\n    prime[7] = true\n    prime[8]\
    \ = true\n    prime[9] = true\n    prime[10] = true\n    prime[11] = true\n  \
    \  prime[12] = true\n    prime[13] = true\n    prime[14] = true\n    prime[15]\
    \ = true\n    prime[16] = true\n    prime[17] = true\n    prime[18] = true\n \
    \   prime[19] = true\n    prime[20] = true\n    prime[21] = true\n    prime[22]\
    \ = true\n    prime[23] = true\n    prime[24] = true\n    prime[25] = true\n \
    \   prime[26] = true\n    prime[27] = true\n    prime[28] = true\n    prime[29]\
    \ = true\n    prime[30] = true\n    prime[31] = true\n    prime[32] = true\n \
    \   prime[33] = true\n    prime[34] = true\n    prime[35] = true\n    prime[36]\
    \ = true\n    prime[37] = true\n    prime[38] = true\n    prime[39] = true\n \
    \   prime[40] = true\n    prime[41] = true\n    prime[42] = true\n    prime[43]\
    \ = true\n    prime[44] = true\n    prime[45] = true\n    prime[46] = true\n \
    \   prime[47] = true\n    prime[48] = true\n    prime[49] = true\n    prime[50]\
    \ = true\n    prime[51] = true\n    prime[52] = true\n    prime[53] = true\n \
    \   prime[54] = true\n    prime[55] = true\n    prime[56] = true\n    prime[57]\
    \ = true\n    prime[58] = true\n    prime[59] = true\n    prime[60] = true\n \
    \   prime[61] = true\n    prime[62] = true\n    prime[63] = true\n    prime[64]\
    \ = true\n    prime[65] = true\n    prime[66] = true\n    prime[67] = true\n \
    \   prime[68] = true\n    prime[69] = true\n    prime[70] = true\n    prime[71]\
    \ = true\n    prime[72] = true\n    prime[73] = true\n    prime[74\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9qn_xv5_test.go:101:13: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    hexDigitsCount\
    \ := 0\n    hexDigitsCount += hexDigits[len(num)%len(hexDigits)]\n    hexDigitsCount\
    \ += hexDigits[len(num)%len(hexDigits)/2]\n    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/3]\n\
    \    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/4]\n    hexDigitsCount\
    \ += hexDigits[len(num)%len(hexDigits)/5]\n    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/6]\n\
    \    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/7]\n    hexDigitsCount\
    \ += hexDigits[len(num)%len(hexDigits)/8]\n    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/9]\n\
    \    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/10]\n    hexDigitsCount\
    \ += hexDigits[len(num)%len(hexDigits)/11]\n    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/12]\n\
    \    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/13]\n    hexDigitsCount\
    \ += hexDigits[len(num)%len(hexDigits)/14]\n    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/15]\n\
    \    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/16]\n    hexDigitsCount\
    \ += hexDigits[len(num)%len(hexDigits)/17]\n    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/18]\n\
    \    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/19]\n    hexDigitsCount\
    \ += hexDigits[len(num)%len(hexDigits)/20]\n    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/21]\n\
    \    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/22]\n    hexDigitsCount\
    \ += hexDigits[len(num)%len(hexDigits)/23]\n    hexDigitsCount += hexDigits[len(num)%len(hexDigits)/24]\n\
    \    \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmsawl9k7_test.go:52:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        n += int(rune(r) - '0')\n\
    \    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp3y69wuu0_test.go:50: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmp3y69wuu0_test.go:50: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmp3y69wuu0_test.go:50: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp3y69wuu0_test.go:50:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074628
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        if r == 'A' || r ==\
    \ 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            n += 2\n\
    \        } else {\n            n += r - '0'\n        }\n    }\n    return n\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0tznmyy3_test.go:30:13: invalid operation: n += r - ''0'' (mismatched
    types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    count := 0\n    for i := 0; i < n; i++ {\n   \
    \     digit := int(num[i])\n        if digit < 'A' || digit > 'F' {\n        \
    \    fmt.Println(\"Invalid input\")\n            return -1\n        }\n      \
    \  count += digit - 'A'\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid input\n\
    --- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__1 (0.00s)\n\
    \        tmpsbrzeab9_test.go:56: expected '%!s(int=2)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestHex_Key/test_num__2 (0.00s)\n        tmpsbrzeab9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestHex_Key/test_num__3\
    \ (0.00s)\n        tmpsbrzeab9_test.go:56: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n        tmpsbrzeab9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestHex_Key/test_num__5\
    \ (0.00s)\n        tmpsbrzeab9_test.go:56: expected '%!s(int=12)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074633
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    length := len(num)\n    digit := 0\n    primes :=\
    \ []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97}\n    for i := 0; i < length; i++ {\n        digit =\
    \ num[i] - '0'\n        if digit >= 0 && digit <= 9 {\n            count++\n \
    \           if primes[digit] == true {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9536bpy_test.go:30:17: cannot use num[i] - ''0'' (value of type byte)
    as type int in assignment

    /tmp/tmpv9536bpy_test.go:33:33: invalid operation: primes[digit] == true (mismatched
    types int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074633
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    result := 0\n    for i := 0; i < n; i++ {\n  \
    \      digit := int(num[i])\n        if digit == 0 || digit == 1 {\n         \
    \   continue\n        }\n        result += 1\n        for j := 0; j < digit; j++\
    \ {\n            result += 1\n        }\n    }\n    return result\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpt3dyt6kq_test.go:58: expected '%!s(int=1)', got '%!s(int=133)'\n \
    \   --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpt3dyt6kq_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=281)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpt3dyt6kq_test.go:58: expected '%!s(int=4)', got '%!s(int=492)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpt3dyt6kq_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=200)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpt3dyt6kq_test.go:58: expected '%!s(int=6)', got '%!s(int=946)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpt3dyt6kq_test.go:58:\
    \ expected '%!s(int=12)', got '%!s(int=1892)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    base := 0\n    switch num[0] {\n    case 'A', 'B', 'C',\
    \ 'D', 'E', 'F':\n        base = 16\n    case '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9':\n        base = 10\n    }\n    for _, c := range num {\n    \
    \    if c >= '0' && c <= '9' {\n            n = n*base + int(c-'0')\n        }\
    \ else {\n            n = n*base + int(c-'A'+10)\n        }\n    }\n    return\
    \ n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpl7kxa5tm_test.go:61: expected '%!s(int=1)', got '%!s(int=171)'\n \
    \   --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpl7kxa5tm_test.go:61:\
    \ expected '%!s(int=2)', got '%!s(int=10784)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpl7kxa5tm_test.go:61: expected '%!s(int=4)', got '%!s(int=2884442675)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpl7kxa5tm_test.go:61:\
    \ expected '%!s(int=2)', got '%!s(int=2020)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpl7kxa5tm_test.go:61: expected '%!s(int=6)', got '%!s(int=1234567901234550)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpl7kxa5tm_test.go:61:\
    \ expected '%!s(int=12)', got '%!s(int=3254929104126093780)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        n += int(rune(r) - 'A')\
    \ + 1\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpi6qdhhqa_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpi6qdhhqa_test.go:50: expected\
    \ '%!s(int=2)', got '%!s(int=-44)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpi6qdhhqa_test.go:50: expected '%!s(int=4)', got '%!s(int=-28)'\n \
    \   --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpi6qdhhqa_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=-60)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpi6qdhhqa_test.go:50: expected '%!s(int=6)', got '%!s(int=-94)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpi6qdhhqa_test.go:50:\
    \ expected '%!s(int=12)', got '%!s(int=-188)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074634
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    base := len(num)\n    switch base {\n    case 2:\n  \
    \      n = hex_key2(num)\n    case 4:\n        n = hex_key4(num)\n    case 8:\n\
    \        n = hex_key8(num)\n    default:\n        fmt.Println(\"Invalid input\"\
    )\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyinm88fn_test.go:29:13: undefined: hex_key2

    /tmp/tmpyinm88fn_test.go:31:13: undefined: hex_key4

    /tmp/tmpyinm88fn_test.go:33:13: undefined: hex_key8

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    result := 0\n    \n    for i := 0; i < n; i++\
    \ {\n        digit := int(num[i])\n        \n        if digit >= '0' && digit\
    \ <= '9' {\n            result += 1\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkln0yrbf_test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkln0yrbf_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkln0yrbf_test.go:57: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkln0yrbf_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkln0yrbf_test.go:57: expected '%!s(int=6)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkln0yrbf_test.go:57:\
    \ expected '%!s(int=12)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1w4s65yr_test.go:280:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    i := 0\n    for ; i < len(num); i++ {\n        digit\
    \ := int(num[i])\n        if digit >= '0' && digit <= '9' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpjhadse71_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpjhadse71_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpjhadse71_test.go:54: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpjhadse71_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpjhadse71_test.go:54: expected '%!s(int=6)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpjhadse71_test.go:54:\
    \ expected '%!s(int=12)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwf90pr1f_test.go:280:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, v := range num {\n        if v == 'A' || v\
    \ == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpwo7hpllr_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpwo7hpllr_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpwo7hpllr_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpwo7hpllr_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    count := 0\n    i := 0\n    for ; i < n; i++ {\n\
    \        c := num[i]\n        if c >= '0' && c <= '9' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp4589kxjy_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp4589kxjy_test.go:55: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp4589kxjy_test.go:55: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp4589kxjy_test.go:55: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp4589kxjy_test.go:55: expected '%!s(int=6)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp4589kxjy_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, r := range num {\n        if r == 'A' ||\
    \ r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpdftcx61z_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpdftcx61z_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpdftcx61z_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpdftcx61z_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"}\n    for _, digit := range hexDigits {\n        if num == digit {\n \
    \           count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpddj3f_7a_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpddj3f_7a_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpddj3f_7a_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpddj3f_7a_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpddj3f_7a_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpddj3f_7a_test.go:53: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074634
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    num := strings.ToUpper(num)\n    count :=\
    \ 0\n    for _, v := range num {\n        if v == 'A' || v == 'B' || v == 'C'\
    \ || v == 'D' || v == 'E' || v == 'F' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu0pdvt2q_test.go:26:9: no new variables on left side of :=

    /tmp/tmpu0pdvt2q_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074634
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    count := 0\n    for i := 0; i < n; i++ {\n   \
    \     digit := int(num[i])\n        if digit > 9 {\n            digit = digit\
    \ - 10\n        }\n        if digit == 0 || digit == 1 {\n            continue\n\
    \        }\n        for j := 2; j < digit; j++ {\n            if digit % j ==\
    \ 0 {\n                break\n            }\n        }\n        if j == digit\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe330qrf4_test.go:40:12: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        if r == 'A' || r\
    \ == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    hexDigits := []string{\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\"}\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primesCount\
    \ := 0\n    for _, digit := range num {\n        if digit == \"A\" || digit ==\
    \ \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\"\
    \ {\n            primesCount++\n        }\n    }\n    for _, prime := range primes\
    \ {\n        if prime == primesCount {\n            primesCount++\n        }\n\
    \    }\n    return primesCount\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdsmprcy6_test.go:25:9: no new variables on left side of :=

    /tmp/tmpdsmprcy6_test.go:25:12: undefined: strings

    /tmp/tmpdsmprcy6_test.go:26:5: hexDigits declared but not used

    /tmp/tmpdsmprcy6_test.go:30:21: invalid operation: digit == "A" (mismatched types
    rune and untyped string)

    /tmp/tmpdsmprcy6_test.go:30:37: invalid operation: digit == "B" (mismatched types
    rune and untyped string)

    /tmp/tmpdsmprcy6_test.go:30:53: invalid operation: digit == "C" (mismatched types
    rune and untyped string)

    /tmp/tmpdsmprcy6_test.go:30:69: invalid operation: digit == "D" (mismatched types
    rune and untyped string)

    /tmp/tmpdsmprcy6_test.go:30:85: invalid operation: digit == "E" (mismatched types
    rune and untyped string)

    /tmp/tmpdsmprcy6_test.go:30:101: invalid operation: digit == "F" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    base := len(num) / 2\n    for i := 0; i < base; i++ {\n\
    \        n += int(num[i*2]) * 16 + int(num[i*2+1])\n    }\n    return n\n}\n\n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2hqsek3v_test.go:51: expected '%!s(int=1)', got '%!s(int=1106)'\n\
    \    --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2hqsek3v_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1767)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmp2hqsek3v_test.go:51: expected '%!s(int=4)', got '%!s(int=3994)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2hqsek3v_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1696)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmp2hqsek3v_test.go:51: expected '%!s(int=6)', got '%!s(int=7965)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp2hqsek3v_test.go:51:\
    \ expected '%!s(int=12)', got '%!s(int=15810)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074635
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    n := len(num)\n    count := 0\n\
    \    i := 0\n    for ; i < n; i++ {\n        if num[i] == 'A' || num[i] == 'B'\
    \ || num[i] == 'C' || num[i] == 'D' || num[i] == 'E' || num[i] == 'F' {\n    \
    \        count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0jdqzga0_test.go:25:9: no new variables on left side of :=

    /tmp/tmp0jdqzga0_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    base := len(num)\n    for i := 0; i < base; i++ {\n \
    \       digit := int(num[i])\n        if digit == 0 || digit == 1 {\n        \
    \    continue\n        }\n        n += digit\n        for j := 0; j < digit; j++\
    \ {\n            n += int(num[i+j])\n        }\n    }\n    return n\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.hex_key(...)\n\t/tmp/tmpmtp5kzuj_test.go:34\n\
    command-line-arguments_test.TestHex_Key(0x0?)\n\t/tmp/tmpmtp5kzuj_test.go:47 +0x533\n\
    testing.tRunner(0xc000103380, 0x527f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    \n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmplavh_4b3_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmplavh_4b3_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074628
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        n += int(unicode.ToLower(r))\
    \ - 'a'\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gi_kr_x_test.go:27:18: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074635
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        count += int(unicode.ToLower(r)\
    \ - 'a')\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz61837p1_test.go:27:22: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    n := len(num)\n    result := 0\n\
    \    for i := 0; i < n; i++ {\n        digit := num[i]\n        if digit == \"\
    A\" || digit == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" ||\
    \ digit == \"F\" {\n            result += 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpylhk8147_test.go:25:9: no new variables on left side of :=

    /tmp/tmpylhk8147_test.go:25:12: undefined: strings

    /tmp/tmpylhk8147_test.go:30:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmpylhk8147_test.go:30:37: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmpylhk8147_test.go:30:53: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmpylhk8147_test.go:30:69: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmpylhk8147_test.go:30:85: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmpylhk8147_test.go:30:101: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n\
    \    num := strings.Replace(num, \"A\", \"1\", -1)\n    num := strings.Replace(num,\
    \ \"B\", \"2\", -1)\n    num := strings.Replace(num, \"C\", \"3\", -1)\n    num\
    \ := strings.Replace(num, \"D\", \"4\", -1)\n    num := strings.Replace(num, \"\
    E\", \"5\", -1)\n    num := strings.Replace(num, \"F\", \"6\", -1)\n    num :=\
    \ strings.Replace(num, \"0\", \"7\", -1)\n    num := strings.Replace(num, \"1\"\
    , \"8\", -1)\n    num := strings.Replace(num, \"2\", \"9\", -1)\n    num := strings.Replace(num,\
    \ \"3\", \"A\", -1)\n    num := strings.Replace(num, \"4\", \"B\", -1)\n    num\
    \ := strings.Replace(num, \"5\", \"C\", -1)\n    num := strings.Replace(num, \"\
    6\", \"D\", -1)\n    num := strings.Replace(num, \"7\", \"E\", -1)\n    num :=\
    \ strings.Replace(num, \"8\", \"F\", -1)\n    num := strings.Replace(num, \"9\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"+\", \"-\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"+\", -1)\n    num := strings.Replace(num, \"/\", \"*\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"/\", -1)\n    num := strings.Replace(num, \"\
    =\", \"+\", -1)\n    num := strings.Replace(num, \"%\", \"%\", -1)\n    num :=\
    \ strings.Replace(num, \"(\", \"\", -1)\n    num := strings.Replace(num, \")\"\
    , \"\", -1)\n    num := strings.Replace(num, \".\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"\", -1)\n    num := strings.Replace(num, \"+\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"\", -1)\n    num := strings.Replace(num, \"\
    /\", \"\", -1)\n    num := strings.Replace(num, \"%\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"=\", \"\", -1)\n    num := strings.Replace(num, \"+\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"-\", \"\", -1)\n    num := strings.Replace(num, \"\
    %\", \"\", -1)\n    num := strings.Replace(num, \"(\", \"\", -1)\n    num := strings.Replace(num,\
    \ \")\", \"\", -1)\n    num := strings.Replace(num, \".\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"-\", \"\", -1)\n    num := strings.Replace(num, \"\
    +\", \"\", -1)\n    num := strings.Replace(num, \"*\", \"\", -1)\n    \nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcs27izla_test.go:68:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074634
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    hexDigitsCount\
    \ := 0\n    for _, digit := range num {\n        if digit == \"A\" || digit ==\
    \ \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\"\
    \ {\n            hexDigitsCount++\n        }\n    }\n    hexDigitsCount += hexDigitsCount\
    \ / 2\n    hexDigitsCount += hexDigitsCount / 3\n    hexDigitsCount += hexDigitsCount\
    \ / 5\n    hexDigitsCount += hexDigitsCount / 7\n    hexDigitsCount += hexDigitsCount\
    \ / 11\n    hexDigitsCount += hexDigitsCount / 13\n    return hexDigitsCount\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp75weugb7_test.go:25:5: hexDigits declared but not used

    /tmp/tmp75weugb7_test.go:28:21: invalid operation: digit == "A" (mismatched types
    rune and untyped string)

    /tmp/tmp75weugb7_test.go:28:37: invalid operation: digit == "B" (mismatched types
    rune and untyped string)

    /tmp/tmp75weugb7_test.go:28:53: invalid operation: digit == "C" (mismatched types
    rune and untyped string)

    /tmp/tmp75weugb7_test.go:28:69: invalid operation: digit == "D" (mismatched types
    rune and untyped string)

    /tmp/tmp75weugb7_test.go:28:85: invalid operation: digit == "E" (mismatched types
    rune and untyped string)

    /tmp/tmp75weugb7_test.go:28:101: invalid operation: digit == "F" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        if r == 'A' || r ==\
    \ 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            n += 2\n\
    \        } else if r == '0' {\n            n += 1\n        } else {\n        \
    \    fmt.Println(\"Invalid input\")\n            return -1\n        }\n    }\n\
    \    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid input\n\
    --- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpgyn66xue_test.go:57: expected '%!s(int=1)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpgyn66xue_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpgyn66xue_test.go:57: expected '%!s(int=4)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpgyn66xue_test.go:57:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpgyn66xue_test.go:57: expected '%!s(int=6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpgyn66xue_test.go:57:\
    \ expected '%!s(int=12)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    base := 0\n    digit := 0\n    for _, char := range\
    \ num {\n        digit = char - 'A'\n        base += digit * 16\n    }\n    for\
    \ i := 2; i <= base; i++ {\n        if i%base == 0 {\n            count++\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfcg_xr3_test.go:29:17: cannot use char - ''A'' (value of type rune) as
    type int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    n := len(num)\n    prime := make([]int,\
    \ n)\n    prime[0] = 2\n    prime[1] = 3\n    prime[2] = 5\n    prime[3] = 7\n\
    \    prime[4] = 11\n    prime[5] = 13\n    prime[6] = 17\n    prime[7] = 19\n\
    \    prime[8] = 23\n    prime[9] = 29\n    prime[10] = 31\n    prime[11] = 31\n\
    \    prime[12] = 37\n    prime[13] = 41\n    prime[14] = 43\n    prime[15] = 47\n\
    \    prime[16] = 53\n    prime[17] = 59\n    prime[18] = 61\n    prime[19] = 67\n\
    \    prime[20] = 71\n    prime[21] = 73\n    prime[22] = 79\n    prime[23] = 83\n\
    \    prime[24] = 89\n    prime[25] = 97\n    prime[26] = 101\n    prime[27] =\
    \ 103\n    prime[28] = 107\n    prime[29] = 109\n    prime[30] = 112\n    prime[31]\
    \ = 116\n    prime[32] = 122\n    prime[33] = 128\n    prime[34] = 132\n    prime[35]\
    \ = 136\n    prime[36] = 142\n    prime[37] = 148\n    prime[38] = 156\n    prime[39]\
    \ = 160\n    prime[40] = 164\n    prime[41] = 168\n    prime[42] = 172\n    prime[43]\
    \ = 178\n    prime[44] = 186\n    prime[45] = 192\n    prime[46] = 196\n    prime[47]\
    \ = 200\n    prime[48] = 204\n    prime[49] = 208\n    prime[50] = 212\n    prime[51]\
    \ = 216\n    prime[52] = 220\n    prime[53] = 224\n    prime[54] = 228\n    prime[55]\
    \ = 232\n    prime[56] = 236\n    prime[57] = 240\n    prime[58] = 244\n    prime[59]\
    \ = 248\n    prime[60] = 252\n    prime[61] = 256\n    prime[62] = 262\n    prime[63]\
    \ = 268\n    prime[64] = 272\n    prime[65] = 276\n    prime[66] = 282\n    prime[67]\
    \ = 288\n    prime[68] = 294\n    prime[69] = 300\n    prime[70] = 304\n    prime[71]\
    \ = 308\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7ndbg6ik_test.go:101:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]int, n)\n    prime[0] = prime[1]\
    \ = prime[2] = prime[3] = prime[4] = prime[5] = prime[6] = prime[7] = prime[8]\
    \ = prime[9] = prime[10] = prime[11] = prime[12] = prime[13] = prime[14] = prime[15]\
    \ = prime[16] = prime[17] = prime[18] = prime[19] = prime[20] = prime[21] = prime[22]\
    \ = prime[23] = prime[24] = prime[25] = prime[26] = prime[27] = prime[28] = prime[29]\
    \ = prime[30] = prime[31] = prime[32] = prime[33] = prime[34] = prime[35] = prime[36]\
    \ = prime[37] = prime[38] = prime[39] = prime[40] = prime[41] = prime[42] = prime[43]\
    \ = prime[44] = prime[45] = prime[46] = prime[47] = prime[48] = prime[49] = prime[50]\
    \ = prime[51] = prime[52] = prime[53] = prime[54] = prime[55] = prime[56] = prime[57]\
    \ = prime[58] = prime[59] = prime[60] = prime[61] = prime[62] = prime[63] = prime[64]\
    \ = prime[65] = prime[66] = prime[67] = prime[68] = prime[69] = prime[70] = prime[71]\
    \ = prime[72] = prime[73] = prime[74] = prime[75] = prime[76] = prime[77] = prime[78]\
    \ = prime[79] = prime[80] = prime[81] = prime[82] = prime[83] = prime[84] = prime[85]\
    \ = prime[86] = prime[87] = prime[88] = prime[89] = prime[90] = prime[91] = prime[92]\
    \ = prime[93] = prime[94] = prime[95] = prime[96] = prime[97] = prime[98] = prime[99]\
    \ = prime[100] = prime[101] = prime[102] = prime[103] = prime[104] = prime[105]\
    \ = prime[106] = prime[107] = prime[108] = prime[109] = prime[110] = prime[111]\
    \ = prime[112] = prime[113] = prime[114] = prime[115] = prime[116] = prime[117]\
    \ = prime[118] = prime[119] = prime[120] = prime[121] = prime[122] = prime[123]\
    \ = prime[124] = prime[125] = prime[126] = prime[127] = prime[128] = prime[129]\
    \ = prime[130] = prime[131] = prime[132] = \nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpexe6hg6l_test.go:27:25: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == 'A' ||\
    \ v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpn7079_9s_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpn7079_9s_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpn7079_9s_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpn7079_9s_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    base := 0\n    for _, c := range num {\n        if\
    \ c >= '0' && c <= '9' {\n            count++\n            base = 10\n       \
    \ } else {\n            count += int(c-'A')\n            base += int(c-'0')\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__1 (0.00s)\n\
    \        tmpnq544dbv_test.go:57: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestHex_Key/test_num__2 (0.00s)\n        tmpnq544dbv_test.go:57: expected\
    \ '%!s(int=4)', got '%!s(int=11)'\n    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n\
    \        tmpnq544dbv_test.go:57: expected '%!s(int=2)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestHex_Key/test_num__4 (0.00s)\n        tmpnq544dbv_test.go:57: expected\
    \ '%!s(int=6)', got '%!s(int=25)'\n    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n\
    \        tmpnq544dbv_test.go:57: expected '%!s(int=12)', got '%!s(int=50)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    primes\
    \ := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97}\n    primesCount := 0\n    primesCount += primes[primes[0]]\n\
    \    for _, digit := range hexDigits {\n        primesCount += primes[primes[digit]]\n\
    \    }\n    return primesCount\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuuywr3_h_test.go:30:38: invalid argument: index digit (variable of type
    string) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    num := strings.ToUpper(num)\n    num := strings.Replace(num,\
    \ \"A\", \"1\", -1)\n    num := strings.Replace(num, \"B\", \"2\", -1)\n    num\
    \ := strings.Replace(num, \"C\", \"3\", -1)\n    num := strings.Replace(num, \"\
    D\", \"4\", -1)\n    num := strings.Replace(num, \"E\", \"5\", -1)\n    num :=\
    \ strings.Replace(num, \"F\", \"6\", -1)\n    num := strings.Replace(num, \"1\"\
    , \"2\", -1)\n    num := strings.Replace(num, \"2\", \"3\", -1)\n    num := strings.Replace(num,\
    \ \"3\", \"5\", -1)\n    num := strings.Replace(num, \"4\", \"7\", -1)\n    num\
    \ := strings.Replace(num, \"5\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"6\", \"13\", -1)\n    num := strings.Replace(num, \"7\", \"17\", -1)\n   \
    \ num := strings.Replace(num, \"8\", \"19\", -1)\n    num := strings.Replace(num,\
    \ \"9\", \"23\", -1)\n    num := strings.Replace(num, \"10\", \"29\", -1)\n  \
    \  num := strings.Replace(num, \"11\", \"31\", -1)\n    num := strings.Replace(num,\
    \ \"12\", \"37\", -1)\n    num := strings.Replace(num, \"13\", \"41\", -1)\n \
    \   num := strings.Replace(num, \"14\", \"43\", -1)\n    num := strings.Replace(num,\
    \ \"15\", \"47\", -1)\n    num := strings.Replace(num, \"16\", \"53\", -1)\n \
    \   num := strings.Replace(num, \"17\", \"59\", -1)\n    num := strings.Replace(num,\
    \ \"18\", \"61\", -1)\n    num := strings.Replace(num, \"19\", \"67\", -1)\n \
    \   num := strings.Replace(num, \"20\", \"71\", -1)\n    num := strings.Replace(num,\
    \ \"21\", \"73\", -1)\n    num := strings.Replace(num, \"22\", \"79\", -1)\n \
    \   num := strings.Replace(num, \"23\", \"83\", -1)\n    num := strings.Replace(num,\
    \ \"24\", \"89\", -1)\n    num := strings.Replace(num, \"25\", \"97\", -1)\n \
    \   num := strings.Replace(num, \"26\", \"101\", -1)\n    num := strings.Replace(num,\
    \ \"27\", \"103\", -1)\n    num := strings.Replace(num, \"28\", \"107\", -1)\n\
    \    num := strings.Replace(num, \"29\", \"109\", -1)\n    num := strings.Replace(num,\
    \ \"30\", \"111\", -1)\n    num := strings.Replace(num, \"31\", \"113\", -1)\n\
    \    num := strings.Replace(num, \"32\", \"117\", -1)\n    num := strings.Replace(num,\
    \ \"33\", \"119\", -1)\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0z6ao6n5_test.go:67:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074635
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    result := 0\n    i := 0\n    for\
    \ ; i < len(num); i++ {\n        digit := num[i]\n        if digit == 'A' || digit\
    \ == 'B' || digit == 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n \
    \           result += int(digit) - int(digit)\n        } else {\n            result\
    \ += int(digit)\n        }\n    }\n    return result\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdf8s8g1_test.go:25:9: no new variables on left side of :=

    /tmp/tmpqdf8s8g1_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    base := len(num)\n    for i := 0; i < base; i++ {\n \
    \       n += int(num[i]) - 'A' + 1\n    }\n    return n\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpcxyaax8i_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpcxyaax8i_test.go:51: expected\
    \ '%!s(int=2)', got '%!s(int=-44)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpcxyaax8i_test.go:51: expected '%!s(int=4)', got '%!s(int=-28)'\n \
    \   --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpcxyaax8i_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=-60)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpcxyaax8i_test.go:51: expected '%!s(int=6)', got '%!s(int=-94)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpcxyaax8i_test.go:51:\
    \ expected '%!s(int=12)', got '%!s(int=-188)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074637
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]bool, len(num)+1)\n    prime[0]\
    \ = true\n    prime[1] = true\n    prime[2] = true\n    prime[3] = true\n    prime[4]\
    \ = true\n    prime[5] = true\n    prime[6] = true\n    prime[7] = true\n    prime[8]\
    \ = true\n    prime[9] = true\n    prime[10] = true\n    prime[11] = true\n  \
    \  prime[12] = true\n    prime[13] = true\n    prime[14] = true\n    prime[15]\
    \ = true\n    prime[16] = true\n    prime[17] = true\n    prime[18] = true\n \
    \   prime[19] = true\n    prime[20] = true\n    prime[21] = true\n    prime[22]\
    \ = true\n    prime[23] = true\n    prime[24] = true\n    prime[25] = true\n \
    \   prime[26] = true\n    prime[27] = true\n    prime[28] = true\n    prime[29]\
    \ = true\n    prime[30] = true\n    prime[31] = true\n    prime[32] = true\n \
    \   prime[33] = true\n    prime[34] = true\n    prime[35] = true\n    prime[36]\
    \ = true\n    prime[37] = true\n    prime[38] = true\n    prime[39] = true\n \
    \   prime[40] = true\n    prime[41] = true\n    prime[42] = true\n    prime[43]\
    \ = true\n    prime[44] = true\n    prime[45] = true\n    prime[46] = true\n \
    \   prime[47] = true\n    prime[48] = true\n    prime[49] = true\n    prime[50]\
    \ = true\n    prime[51] = true\n    prime[52] = true\n    prime[53] = true\n \
    \   prime[54] = true\n    prime[55] = true\n    prime[56] = true\n    prime[57]\
    \ = true\n    prime[58] = true\n    prime[59] = true\n    prime[60] = true\n \
    \   prime[61] = true\n    prime[62] = true\n    prime[63] = true\n    prime[64]\
    \ = true\n    prime[65] = true\n    prime[66] = true\n    prime[67] = true\n \
    \   prime[68] = true\n    prime[69] = true\n    prime[70] = true\n    prime[71]\
    \ = true\n    prime[72] = true\n    prime[73] = true\n    prime[74\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9qn_xv5_test.go:101:13: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        if r == 'A' || r ==\
    \ 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            n += 2\n\
    \        } else {\n            n += 1\n        }\n    }\n    return n\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpbr15sytx_test.go:54: expected '%!s(int=1)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpbr15sytx_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=6)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpbr15sytx_test.go:54: expected '%!s(int=4)', got '%!s(int=13)'\n  \
    \  --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpbr15sytx_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpbr15sytx_test.go:54: expected '%!s(int=6)', got '%!s(int=22)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpbr15sytx_test.go:54:\
    \ expected '%!s(int=12)', got '%!s(int=44)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, c := range\
    \ num {\n        if c >= '0' && c <= '9' {\n            count++\n        }\n \
    \   }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqd_6vyg6_test.go:25:9: no new variables on left side of :=

    /tmp/tmpqd_6vyg6_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, v := range num {\n        if v == 'A'\
    \ || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpu9y803wk_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpu9y803wk_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpu9y803wk_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpu9y803wk_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        if r == 'A' || r ==\
    \ 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            n += 1\n\
    \        }\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpdxo5gel8_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpdxo5gel8_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpdxo5gel8_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpdxo5gel8_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074628
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, v := range\
    \ num {\n        if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' ||\
    \ v == 'F' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp922b__1r_test.go:25:9: no new variables on left side of :=

    /tmp/tmp922b__1r_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    count := 0\n    i := 0\n    for i < n {\n    \
    \    if num[i] == 'A' || num[i] == 'B' || num[i] == 'C' || num[i] == 'D' || num[i]\
    \ == 'E' || num[i] == 'F' {\n            count++\n        }\n        i++\n   \
    \ }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_01qwqf0_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_01qwqf0_test.go:55: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_01qwqf0_test.go:55: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_01qwqf0_test.go:55: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074637
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, r := range\
    \ num {\n        if r == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' ||\
    \ r == 'F' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2haxuju6_test.go:25:9: no new variables on left side of :=

    /tmp/tmp2haxuju6_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    hexDigitsCount\
    \ := 0\n    \n    for _, digit := range num {\n        if digit == \"A\" || digit\
    \ == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"\
    F\" {\n            hexDigitsCount++\n        }\n    }\n    \n    for _, digit\
    \ := range hexDigits {\n        if hexDigitsCount == 0 {\n            hexDigitsCount++\n\
    \        }\n        if hexDigitsCount % 2 == 0 {\n            if digit == num[hexDigitsCount]\
    \ {\n                hexDigitsCount++\n            }\n        }\n    }\n    \n\
    \    return hexDigitsCount\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzn8rok7l_test.go:29:21: invalid operation: digit == "A" (mismatched types
    rune and untyped string)

    /tmp/tmpzn8rok7l_test.go:29:37: invalid operation: digit == "B" (mismatched types
    rune and untyped string)

    /tmp/tmpzn8rok7l_test.go:29:53: invalid operation: digit == "C" (mismatched types
    rune and untyped string)

    /tmp/tmpzn8rok7l_test.go:29:69: invalid operation: digit == "D" (mismatched types
    rune and untyped string)

    /tmp/tmpzn8rok7l_test.go:29:85: invalid operation: digit == "E" (mismatched types
    rune and untyped string)

    /tmp/tmpzn8rok7l_test.go:29:101: invalid operation: digit == "F" (mismatched types
    rune and untyped string)

    /tmp/tmpzn8rok7l_test.go:39:25: invalid operation: digit == num[hexDigitsCount]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]int, n)\n    for i := 0; i < n;\
    \ i++ {\n        prime[i] = 0\n    }\n    prime[0] = 1\n    prime[1] = 2\n   \
    \ prime[2] = 2\n    prime[3] = 2\n    prime[4] = 2\n    prime[5] = 3\n    prime[6]\
    \ = 3\n    prime[7] = 3\n    prime[8] = 3\n    prime[9] = 3\n    prime[10] = 3\n\
    \    prime[11] = 3\n    prime[12] = 3\n    prime[13] = 3\n    prime[14] = 3\n\
    \    prime[15] = 3\n    prime[16] = 3\n    prime[17] = 3\n    prime[18] = 3\n\
    \    prime[19] = 3\n    prime[20] = 3\n    prime[21] = 3\n    prime[22] = 3\n\
    \    prime[23] = 3\n    prime[24] = 3\n    prime[25] = 3\n    prime[26] = 3\n\
    \    prime[27] = 3\n    prime[28] = 3\n    prime[29] = 3\n    prime[30] = 3\n\
    \    prime[31] = 3\n    prime[32] = 3\n    prime[33] = 3\n    prime[34] = 3\n\
    \    prime[35] = 3\n    prime[36] = 3\n    prime[37] = 3\n    prime[38] = 3\n\
    \    prime[39] = 3\n    prime[40] = 3\n    prime[41] = 3\n    prime[42] = 3\n\
    \    prime[43] = 3\n    prime[44] = 3\n    prime[45] = 3\n    prime[46] = 3\n\
    \    prime[47] = 3\n    prime[48] = 3\n    prime[49] = 3\n    prime[50] = 3\n\
    \    prime[51] = 3\n    prime[52] = 3\n    prime[53] = 3\n    prime[54] = 3\n\
    \    prime[55] = 3\n    prime[56] = 3\n    prime[57] = 3\n    prime[58] = 3\n\
    \    prime[59] = 3\n    prime[60] = 3\n    prime[61] = 3\n    prime[62] = 3\n\
    \    prime[63] = 3\n    prime[64] = 3\n    prime[65] = 3\n    prime[66] = 3\n\
    \    prime[67] = 3\n    prime[68] = 3\n    prime[69] = 3\n    prime[70] = 3\n\
    \    prime[71] = 3\n    prime[72] = 3\n    \nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8caateyz_test.go:104:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, r := range num {\n        if r == 'A' ||\
    \ r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpdftcx61z_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpdftcx61z_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpdftcx61z_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpdftcx61z_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        if r == 'A' || r\
    \ == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    hexDigits := make([]int, n)\n    for i := 0; i\
    \ < n; i++ {\n        hexDigits[i] = int(num[i])\n    }\n    hexDigitsCount :=\
    \ 0\n    for i := 0; i < n; i++ {\n        if hexDigits[i]%2 == 0 {\n        \
    \    hexDigitsCount++\n        }\n    }\n    return hexDigitsCount\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__1 (0.00s)\n\
    \        tmp13n5s0ra_test.go:57: expected '%!s(int=2)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestHex_Key/test_num__2 (0.00s)\n        tmp13n5s0ra_test.go:57: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n\
    \        tmp13n5s0ra_test.go:57: expected '%!s(int=2)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestHex_Key/test_num__4 (0.00s)\n        tmp13n5s0ra_test.go:57: expected\
    \ '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n\
    \        tmp13n5s0ra_test.go:57: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074637
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, v := range\
    \ num {\n        if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' ||\
    \ v == 'F' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp922b__1r_test.go:25:9: no new variables on left side of :=

    /tmp/tmp922b__1r_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    hexDigitsPrime\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\"\
    , \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime2 := []string{\"2\", \"3\"\
    , \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\"\
    , \"41\"}\n    hexDigitsPrime3 := []string{\"2\", \"3\", \"5\", \"7\", \"11\"\
    , \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime4\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\"\
    , \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime5 := []string{\"2\", \"3\"\
    , \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\"\
    , \"41\"}\n    hexDigitsPrime6 := []string{\"2\", \"3\", \"5\", \"7\", \"11\"\
    , \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime7\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\"\
    , \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime8 := []string{\"2\", \"3\"\
    , \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\"\
    , \"41\"}\n    hexDigitsPrime9 := []string{\"2\", \"3\", \"5\", \"7\", \"11\"\
    , \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime10\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\"\
    , \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime11 := []string{\"2\", \"\
    3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"\
    37\", \"41\"}\n    hexDigitsPrime12 := []string{\"2\", \"3\", \"5\", \"7\", \"\
    11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime13\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\"\
    , \"29\", \"31\", \"37\", \"41\"}\n    hexDigitsPrime14 := []\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw5a6z5lz_test.go:39:27: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    num := strings.ToUpper(num)\n    \n\
    \    count := 0\n    \n    for _, v := range num {\n        if v == 'A' || v ==\
    \ 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    \n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdx30dvcj_test.go:27:9: no new variables on left side of :=

    /tmp/tmpdx30dvcj_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        if r == 'A' || r ==\
    \ 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            n += 1\n\
    \        }\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpdxo5gel8_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpdxo5gel8_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpdxo5gel8_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpdxo5gel8_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        if r == 'A' || r\
    \ == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2mth6n4k_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2mth6n4k_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    \n    for _, v := range num {\n        if v ==\
    \ 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n        \
    \    continue\n        }\n        \n        count += int(v)\n    }\n    \n   \
    \ return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpu_ov8b_v_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpu_ov8b_v_test.go:56: expected\
    \ '%!s(int=2)', got '%!s(int=207)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpu_ov8b_v_test.go:56: expected '%!s(int=4)', got '%!s(int=151)'\n \
    \   --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpu_ov8b_v_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=196)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpu_ov8b_v_test.go:56: expected '%!s(int=6)', got '%!s(int=525)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpu_ov8b_v_test.go:56:\
    \ expected '%!s(int=12)', got '%!s(int=1050)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074637
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, v := range\
    \ num {\n        count += int(v)\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplddel208_test.go:25:9: no new variables on left side of :=

    /tmp/tmplddel208_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    hexDigitsPrime\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    hexDigitsPrimeCount\
    \ := 0\n    hexDigitsPrimeCount2 := 0\n    hexDigitsPrimeCount3 := 0\n    hexDigitsPrimeCount4\
    \ := 0\n    hexDigitsPrimeCount5 := 0\n    hexDigitsPrimeCount6 := 0\n    hexDigitsPrimeCount7\
    \ := 0\n    hexDigitsPrimeCount8 := 0\n    hexDigitsPrimeCount9 := 0\n    hexDigitsPrimeCount10\
    \ := 0\n    hexDigitsPrimeCount11 := 0\n    hexDigitsPrimeCount12 := 0\n    hexDigitsPrimeCount13\
    \ := 0\n    hexDigitsPrimeCount14 := 0\n    hexDigitsPrimeCount15 := 0\n    hexDigitsPrimeCount16\
    \ := 0\n    hexDigitsPrimeCount17 := 0\n    hexDigitsPrimeCount18 := 0\n    hexDigitsPrimeCount19\
    \ := 0\n    hexDigitsPrimeCount20 := 0\n    hexDigitsPrimeCount21 := 0\n    hexDigitsPrimeCount22\
    \ := 0\n    hexDigitsPrimeCount23 := 0\n    hexDigitsPrimeCount24 := 0\n    hexDigitsPrimeCount25\
    \ := 0\n    hexDigitsPrimeCount26 := 0\n    hexDigitsPrimeCount27 := 0\n    hexDigitsPrimeCount28\
    \ := 0\n    hexDigitsPrimeCount29 := 0\n    hexDigitsPrimeCount30 := 0\n    hexDigitsPrimeCount31\
    \ := 0\n    hexDigitsPrimeCount32 := 0\n    hexDigitsPrimeCount33 := 0\n    hexDigitsPrimeCount34\
    \ := 0\n    hexDigitsPrimeCount35 := 0\n    hexDigitsPrimeCount36 := 0\n    hexDigitsPrimeCount37\
    \ := 0\n    hexDigitsPrimeCount38 := 0\n    hexDigitsPrimeCount39 := 0\n    hexDigitsPrimeCount40\
    \ := 0\n    hexDigitsPrimeCount41 := 0\n    \nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp46g023n1_test.go:69:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := len(num)\n    prime := make([]bool, len(num)+1)\n    prime[0]\
    \ = true\n    prime[1] = true\n    prime[2] = true\n    prime[3] = true\n    prime[4]\
    \ = true\n    prime[5] = true\n    prime[6] = true\n    prime[7] = true\n    prime[8]\
    \ = true\n    prime[9] = true\n    prime[10] = true\n    prime[11] = true\n  \
    \  prime[12] = true\n    prime[13] = true\n    prime[14] = true\n    prime[15]\
    \ = true\n    prime[16] = true\n    prime[17] = true\n    prime[18] = true\n \
    \   prime[19] = true\n    prime[20] = true\n    prime[21] = true\n    prime[22]\
    \ = true\n    prime[23] = true\n    prime[24] = true\n    prime[25] = true\n \
    \   prime[26] = true\n    prime[27] = true\n    prime[28] = true\n    prime[29]\
    \ = true\n    prime[30] = true\n    prime[31] = true\n    prime[32] = true\n \
    \   prime[33] = true\n    prime[34] = true\n    prime[35] = true\n    prime[36]\
    \ = true\n    prime[37] = true\n    prime[38] = true\n    prime[39] = true\n \
    \   prime[40] = true\n    prime[41] = true\n    prime[42] = true\n    prime[43]\
    \ = true\n    prime[44] = true\n    prime[45] = true\n    prime[46] = true\n \
    \   prime[47] = true\n    prime[48] = true\n    prime[49] = true\n    prime[50]\
    \ = true\n    prime[51] = true\n    prime[52] = true\n    prime[53] = true\n \
    \   prime[54] = true\n    prime[55] = true\n    prime[56] = true\n    prime[57]\
    \ = true\n    prime[58] = true\n    prime[59] = true\n    prime[60] = true\n \
    \   prime[61] = true\n    prime[62] = true\n    prime[63] = true\n    prime[64]\
    \ = true\n    prime[65] = true\n    prime[66] = true\n    prime[67] = true\n \
    \   prime[68] = true\n    prime[69] = true\n    prime[70] = true\n    prime[71]\
    \ = true\n    prime[72] = true\n    prime[73] = true\n    prime[74\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9qn_xv5_test.go:101:13: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvwyn84yg_test.go:172:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074628
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    \n    count := 0\n    \n    for\
    \ _, char := range num {\n        switch char {\n        case 'A', 'B', 'C', 'D',\
    \ 'E', 'F':\n            count++\n        }\n    }\n    \n    return count\n}\n\
    \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0cy5jiw6_test.go:25:9: no new variables on left side of :=

    /tmp/tmp0cy5jiw6_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, r := range num {\n        if r == 'A'\
    \ || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp5lrn9vui_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp5lrn9vui_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp5lrn9vui_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp5lrn9vui_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074637
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1w4s65yr_test.go:280:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, r := range num {\n        count +=\
    \ int(unicode.ToLower(r) - '0')\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpce89hvxz_test.go:27:22: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    for _, v := range\
    \ num {\n        if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' ||\
    \ v == 'F' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp922b__1r_test.go:25:9: no new variables on left side of :=

    /tmp/tmp922b__1r_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp2sqwo_f__test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp2sqwo_f__test.go:48: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4rycat50_test.go:282:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    base := 16\n    for _, r := range num {\n        if r\
    \ == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n     \
    \       n = n*base\n        }\n        base = base*16\n    }\n    return n\n}\n\
    \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp33ule2sf_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp33ule2sf_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp33ule2sf_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp33ule2sf_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp33ule2sf_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp33ule2sf_test.go:54: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074637
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmp_udpza_h_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmp_udpza_h_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    count := 0\n    base := 0\n    for\
    \ _, r := range num {\n        count += base\n        base += int(r) - '0'\n \
    \   }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytl3nis8_test.go:25:9: no new variables on left side of :=

    /tmp/tmpytl3nis8_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074637
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    num := strings.ToUpper(num)\n    result := 0\n    for _, v := range\
    \ num {\n        result += (int(v)-48)\n    }\n    return result\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3hmi82nt_test.go:25:9: no new variables on left side of :=

    /tmp/tmp3hmi82nt_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074637
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, r := range num {\n        count += int(unicode.ToLower(r)\
    \ - 'a')\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz61837p1_test.go:27:22: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    hexDigitsPrime\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    hexDigitsPrime2 :=\
    \ []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\", \"E\"}\n    hexDigitsPrime3\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\", \"E\", \"F\"}\n    hexDigitsPrime4\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\", \"E\", \"F\", \"A\"}\n\
    \    hexDigitsPrime5 := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\", \"\
    E\", \"F\", \"A\", \"B\"}\n    hexDigitsPrime6 := []string{\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\", \"E\", \"F\", \"A\", \"B\", \"C\"}\n    hexDigitsPrime7\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\", \"E\", \"F\", \"A\", \"\
    B\", \"C\", \"D\"}\n    hexDigitsPrime8 := []string{\"2\", \"3\", \"5\", \"7\"\
    , \"B\", \"D\", \"E\", \"F\", \"A\", \"B\", \"C\", \"D\", \"E\"}\n    hexDigitsPrime9\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\", \"E\", \"F\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"}\n    hexDigitsPrime10 := []string{\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\", \"E\", \"F\", \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\", \"A\"}\n    hexDigitsPrime11 := []string{\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\", \"E\", \"F\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"A\"\
    , \"B\"}\n    hexDigitsPrime12 := []string{\"2\", \"3\", \"5\", \"7\", \"B\",\
    \ \"D\", \"E\", \"F\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"A\", \"B\"\
    , \"C\"}\n    hexDigitsPrime13 := []string{\"2\", \"3\", \"5\", \"7\", \"B\",\
    \ \"D\", \"E\", \"F\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"A\", \"B\"\
    , \"C\", \"D\"}\n    hexDigitsPrime14 := []string{\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\", \"E\", \"F\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"A\"\
    , \"B\", \"C\", \"D\", \"E\"}\n    \nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8qdlup2_test.go:41:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    n := 0\n    for _, r := range num {\n        if r == 'A' || r ==\
    \ 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            n += 2\n\
    \        } else if r == '0' {\n            n += 1\n        } else {\n        \
    \    fmt.Println(\"Invalid input\")\n        }\n    }\n    return n\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid input\n\
    Invalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid\
    \ input\nInvalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid input\n\
    Invalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid\
    \ input\nInvalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid input\n\
    Invalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid input\nInvalid\
    \ input\nInvalid input\nInvalid input\n--- FAIL: TestHex_Key (0.00s)\n    ---\
    \ FAIL: TestHex_Key/test_num__0 (0.00s)\n        tmpx2jzgqvm_test.go:56: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__1 (0.00s)\n\
    \        tmpx2jzgqvm_test.go:56: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__2 (0.00s)\n        tmpx2jzgqvm_test.go:56: expected\
    \ '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpx2jzgqvm_test.go:56: expected '%!s(int=6)', got '%!s(int=13)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpx2jzgqvm_test.go:56:\
    \ expected '%!s(int=12)', got '%!s(int=26)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074637
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, r := range num {\n        if r == 'A'\
    \ || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp5lrn9vui_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp5lrn9vui_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp5lrn9vui_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp5lrn9vui_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074637
