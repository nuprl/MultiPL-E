language: go_test.go
name: HumanEval_73_smallest_change
results:
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n\
    \    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            min = i\n            max = n-1\n            break\n\
    \        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < arr[min]\
    \ {\n            min = i\n        }\n    }\n    for i := 0; i < n; i++ {\n   \
    \     if arr[i] > arr[max] {\n            max = i\n        }\n    }\n    return\
    \ max - min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp682c2uka_test.go:59: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp682c2uka_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp682c2uka_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp682c2uka_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp682c2uka_test.go:59: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp682c2uka_test.go:59:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp682c2uka_test.go:59: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp682c2uka_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return -1\n    }\n    min -= 1 // to handle\
    \ case when min == max\n    max += 1 // to handle case when min == max\n    i\
    \ := 0\n    j := n - 1\n    k := 0\n    min := n\n    max := n\n    for i < n\
    \ && j < n {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \        if arr[j] < min {\n            min = arr[j]\n        }\n        if min\
    \ > max {\n            min = max\n        }\n        if min == max {\n       \
    \     arr[k] = min\n            i++\n            j--\n            k++\n      \
    \  }\n    }\n    return k\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0qgof4d5_test.go:38:9: no new variables on left side of :=

    /tmp/tmp0qgof4d5_test.go:39:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length / 2\n    max\
    \ := length - 1\n    for i := 0; i < max; i++ {\n        if arr[i] > arr[i+1]\
    \ {\n            min = i\n            break\n        }\n    }\n    for i := 0;\
    \ i < max; i++ {\n        if arr[i] < arr[i+1] {\n            max = i\n      \
    \      break\n        }\n    }\n    if min == max {\n        return length\n \
    \   }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_2i5kve0_test.go:60: expected '%!s(int=4)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_2i5kve0_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=15)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_2i5kve0_test.go:60: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_2i5kve0_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_2i5kve0_test.go:60: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp_2i5kve0_test.go:60:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp_2i5kve0_test.go:60: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp_2i5kve0_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] != arr[min] {\n            min = i\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpoq77q_em_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpoq77q_em_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpoq77q_em_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpoq77q_em_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpoq77q_em_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpoq77q_em_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] != arr[n-i-1] {\n            min = i\n      \
    \      break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp78212p19_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp78212p19_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp78212p19_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp78212p19_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp78212p19_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp78212p19_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i] !=\
    \ arr[length-i-1] {\n            min = length-i\n            break\n        }\n\
    \    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n  \
    \      if arr[i] > min {\n            min = i\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8826phy3_test.go:46: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp8826phy3_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp8826phy3_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp8826phy3_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8826phy3_test.go:46: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8826phy3_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    min\
    \ += min / 2\n    max += max / 2\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n  \
    \          min = arr[i]\n        }\n    }\n    return min + n - max\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp25wvf_v7_test.go:55: expected '%!s(int=4)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp25wvf_v7_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp25wvf_v7_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp25wvf_v7_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp25wvf_v7_test.go:55: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp25wvf_v7_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp25wvf_v7_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp25wvf_v7_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n-1\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n\
    \            break\n        }\n    }\n    for i := n - 1; i > 0; i-- {\n     \
    \   if arr[i] > arr[i-1] {\n            max = i\n            break\n        }\n\
    \    }\n    if min > max {\n        return min\n    }\n    return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of\
    \ range [3] with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0001d25f0?, 0x0?, 0x44e628?})\n\
    \t/tmp/tmpw8veaqhh_test.go:23 +0x150\ncommand-line-arguments_test.smallest_change({0xc00010ddf0,\
    \ 0x8, 0x8})\n\t/tmp/tmpw8veaqhh_test.go:37 +0xb4\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpw8veaqhh_test.go:47 +0xd5\ntesting.tRunner(0xc000199040, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] != arr[min] {\n            min = i\n        }\n   \
    \ }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min == max {\n        return n\n    }\n    min += 1\n    max -=\
    \ 1\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n \
    \       }\n    }\n    if min == max {\n        return n\n    }\n    min += 1\n\
    \    max -= 1\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n     \
    \       max = arr[i]\n        }\n        if arr[i] < min {\n            min =\
    \ arr[i]\n        }\n    }\n    if min == max {\n        return n\n    }\n   \
    \ min += 1\n    max -= 1\n    for i := 0; i < n; i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n        if arr[i] < min {\n        \
    \    min = arr[i]\n        }\n    }\n    if min == max {\n        return n\n \
    \   }\n    min += 1\n    max -= 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n  \
    \          min = arr[i]\n        }\n    }\n    if min == max {\n        return\
    \ n\n    }\n    min += 1\n    max -= 1\n    for i := 0; i < n; i++ {\n       \
    \ if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] <\
    \ min {\n            min = arr[i]\n        }\n    }\n    if min == max {\n   \
    \     return n\n    }\n    min += 1\n    max -= 1\n    for i := 0; i < n; i++\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if\
    \ arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if min == max\
    \ {\n        return n\n    }\n    min += 1\n    max -= 1\n    for i := 0; i <\
    \ n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n \
    \       if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    if\
    \ min == max {\n        return n\n    }\n    min += 1\n    max -= 1\n    for i\
    \ := 0; i < n; i++ {\n        if arr[i] > max \nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1hx5sobo_test.go:128:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := arr[0]\n    for i := 1; i\
    \ < n; i++ {\n        if arr[i] < min {\n            min = arr[i]\n        }\n\
    \    }\n    return n - min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpexbdlxlw_test.go:49: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpexbdlxlw_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpexbdlxlw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpexbdlxlw_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpexbdlxlw_test.go:49: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpexbdlxlw_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpexbdlxlw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmptfr2uzzz_test.go:45: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmptfr2uzzz_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmptfr2uzzz_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmptfr2uzzz_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmptfr2uzzz_test.go:45: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmptfr2uzzz_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ / 2\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[min-i] {\n   \
    \         min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp71f4yupa_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp71f4yupa_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp71f4yupa_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp71f4yupa_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp71f4yupa_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return n\n    }\n    max -= min\n    min +=\
    \ min\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n        return n\n    }\n    min -= min\n    max -=\
    \ max\n    if min > max {\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1j73dta_test.go:137:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    for\
    \ i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            max =\
    \ i\n        } else {\n            min = i\n        }\n    }\n    if min > max\
    \ {\n        return min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4z9mr15k_test.go:55: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4z9mr15k_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp4z9mr15k_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp4z9mr15k_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp4z9mr15k_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp4z9mr15k_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            min = i\n         \
    \   break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i\n            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n-1\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n\
    \            max = i+1\n        }\n    }\n    for i := 0; i < n; i++ {\n     \
    \   if arr[i] != arr[max] {\n            min = i\n            break\n        }\n\
    \    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpzsvmma56_test.go:23\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpzsvmma56_test.go:44\
    \ +0xa06\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ / 2\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[len(arr)-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8na6lj7l_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp8na6lj7l_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp8na6lj7l_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp8na6lj7l_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8na6lj7l_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8na6lj7l_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] != arr[n-i-1] {\n            min = i\n      \
    \      break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3_czbaa7_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3_czbaa7_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3_czbaa7_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3_czbaa7_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3_czbaa7_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3_czbaa7_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp3_czbaa7_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i-1\n            break\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    for\
    \ i := 1; i < n; i++ {\n        if arr[i] > arr[max] {\n            max = i\n\
    \        }\n        if arr[i] < arr[min] {\n            min = i\n        }\n \
    \   }\n    if min == max {\n        return n\n    }\n    return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[min+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpr1txqi2o_test.go:23 +0x170\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpr1txqi2o_test.go:43 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            min = i\n         \
    \   break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    length := len(arr)\n    min := length\n    for i := 0; i < length/2;\
    \ i++ {\n        if arr[i] > arr[len(arr)-i-1] {\n            min = i\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpp82p_zus_test.go:47: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpp82p_zus_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpp82p_zus_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpp82p_zus_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpp82p_zus_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpp82p_zus_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpp82p_zus_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpp82p_zus_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    max\
    \ -= 1\n    for i := 0; i < n; i++ {\n        if arr[i] > arr[max] {\n       \
    \     max = i\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ < arr[min] {\n            min = i\n        }\n    }\n    return max - min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmps53kysw8_test.go:29\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmps53kysw8_test.go:43\
    \ +0xa8c\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min == max {\n        return n\n    }\n    if min > max {\n    \
    \    min, max = max, min\n    }\n    min += 1\n    max -= 1\n    i := 0\n    j\
    \ := n - 1\n    for i < max && j >= min {\n        if arr[i] > arr[j] {\n    \
    \        i++\n        } else {\n            j--\n        }\n    }\n    return\
    \ j - i\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpyrutq70c_test.go:70: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpyrutq70c_test.go:70:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpyrutq70c_test.go:70: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := n\n    max := n\n\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i; j < n; j++ {\n            if arr[i] > arr[j] {\n                min = i\n\
    \                max = j\n                break\n            }\n        }\n  \
    \  }\n\n    for i := 0; i < n; i++ {\n        if arr[i] != arr[min] {\n      \
    \      min = i\n        }\n    }\n\n    for i := n-1; i >= 0; i-- {\n        if\
    \ arr[i] != arr[max] {\n            max = i\n        }\n    }\n\n    return max\
    \ - min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c4520?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpq0a314t0_test.go:31 +0xd6\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpq0a314t0_test.go:58 +0x34b\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 1; i < n; i++ {\n        if arr[i] > arr[max] {\n            max = i\n\
    \        }\n        if arr[i] < arr[min] {\n            min = i\n        }\n \
    \   }\n    if min == max {\n        return 0\n    }\n    max -= min\n    min +=\
    \ min\n    if min < n / 2 {\n        return smallest_change(arr[:min]) + smallest_change(arr[min+1:])\n\
    \    }\n    return smallest_change(arr[:min]) + smallest_change(arr[min+1:max])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp3jxygsx7_test.go:23 +0x232\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp3jxygsx7_test.go:48 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    for\
    \ i := 0; i < length/2; i++ {\n        if arr[i] != arr[length-i-1] {\n      \
    \      min = length\n            break\n        }\n    }\n    return min\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpw8buo5vs_test.go:50: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpw8buo5vs_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpw8buo5vs_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpw8buo5vs_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpw8buo5vs_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpw8buo5vs_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpw8buo5vs_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpw8buo5vs_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i\n        } else {\n \
    \           max = i\n        }\n    }\n    for i := 0; i < n; i++ {\n        if\
    \ arr[i] != arr[max] {\n            min = min + 1\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpdv8d1w56_test.go:20\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpdv8d1w56_test.go:42\
    \ +0xa25\ntesting.tRunner(0xc000184ea0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n - 1\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n \
    \       }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min > max {\n        return -1\n    }\n    min += 1\n    max -= 1\n  \
    \  for i := min; i <= max; i++ {\n        if arr[i] > arr[i-min] {\n         \
    \   arr[i-min] = arr[i]\n        }\n    }\n    return len(arr)\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4opdzewe_test.go:63: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4opdzewe_test.go:63:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp4opdzewe_test.go:63: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp4opdzewe_test.go:63:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp4opdzewe_test.go:63: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp4opdzewe_test.go:63:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp4opdzewe_test.go:63: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    arr2 := make([]int, len(arr))\n    i := 0\n    for i < len(arr)\
    \ {\n        arr2[i] = arr[i]\n        i++\n    }\n    j := len(arr) - 1\n   \
    \ for j < len(arr) {\n        arr2[j] = arr[j]\n        j--\n    }\n    k := 0\n\
    \    for k > len(arr) {\n        k--\n    }\n    arr2 := reverse(arr2)\n    return\
    \ len(arr2) - len(arr)\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8f1mrhyc_test.go:32:10: no new variables on left side of :=

    /tmp/tmp8f1mrhyc_test.go:32:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            max =\
    \ i\n        } else {\n            min = i\n        }\n    }\n    if min > max\
    \ {\n        return min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnuqiuyy0_test.go:55: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpnuqiuyy0_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpnuqiuyy0_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpnuqiuyy0_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpnuqiuyy0_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    min\
    \ += n\n    max -= n\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    return min - max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnrpg41uo_test.go:55: expected '%!s(int=4)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpnrpg41uo_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=-3)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpnrpg41uo_test.go:55: expected '%!s(int=1)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpnrpg41uo_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=-3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpnrpg41uo_test.go:55: expected '%!s(int=0)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpnrpg41uo_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpnrpg41uo_test.go:55: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    min\
    \ > max {\n        min, max = max, min\n    }\n    for i := 0; i < n; i++ {\n\
    \        max -= 1\n        if arr[i] > arr[max] {\n            max = i\n     \
    \   }\n    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpli4gegn2_test.go:23:18: missing '','' in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\n\
    \    for i := 0; i < min/2; i++ {\n        if arr[i] != arr[min-i-1] {\n     \
    \       min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4rqsw24l_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4rqsw24l_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp4rqsw24l_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp4rqsw24l_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp4rqsw24l_test.go:45: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp4rqsw24l_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp4rqsw24l_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp4rqsw24l_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            min = i\n         \
    \   break\n        }\n    }\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ < arr[n-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmpi6ps5og9_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmpi6ps5og9_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpi6ps5og9_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpi6ps5og9_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpi6ps5og9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpi6ps5og9_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpi6ps5og9_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n-1\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n     \
    \   }\n        if arr[i] < min {\n            min = i\n        }\n    }\n    if\
    \ min == max {\n        return 0\n    }\n    max -= min\n    min -= min\n    if\
    \ min == 0 {\n        return min + 1\n    }\n    if max == 0 {\n        return\
    \ min - 1\n    }\n    if arr[min] != arr[max] {\n        return min + 1\n    }\n\
    \    return min - 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpaiw97c16_test.go:67: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpaiw97c16_test.go:67:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpaiw97c16_test.go:67: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    max\
    \ -= 1\n    for i := 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n       \
    \     max = i\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[max] {\n            min = i\n        }\n    }\n    return min + 1 - max\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnhqic0ke_test.go:56: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpnhqic0ke_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpnhqic0ke_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpnhqic0ke_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpnhqic0ke_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpnhqic0ke_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n\
    \    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    for\
    \ i := 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n       \
    \     min = length-i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n - 1\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n \
    \       }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min == max {\n        return 0\n    }\n    min += 1\n    max -= 1\n  \
    \  for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n\
    \        }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min == max {\n        return 0\n    }\n    min += 1\n    max -= 1\n  \
    \  for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n\
    \        }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min == max {\n        return 0\n    }\n    min += 1\n    max -= 1\n  \
    \  for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n\
    \        }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min == max {\n        return 0\n    }\n    min += 1\n    max -= 1\n  \
    \  for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n\
    \        }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min == max {\n        return 0\n    }\n    min += 1\n    max -= 1\n  \
    \  for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n\
    \        }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min == max {\n        return 0\n    }\n    min += 1\n    max -= 1\n  \
    \  for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n\
    \        }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min == max {\n        return 0\n    }\n    min += 1\n    max -= 1\n  \
    \  for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n\
    \        }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min == max {\n        return 0\n    }\n    min += 1\n    max -= 1\n  \
    \  for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n\
    \        }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzuk242ed_test.go:135:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n-1\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n\
    \            max = i+1\n        }\n    }\n    for i := 0; i < n; i++ {\n     \
    \   if arr[i] != arr[max] {\n            min += 1\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmppl707kv2_test.go:23\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmppl707kv2_test.go:43\
    \ +0x9e6\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n  \
    \      for j := i; j < len(arr); j++ {\n            if arr[i] != arr[j] {\n  \
    \              min = min(min, j-i+1)\n            }\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp47i5vtza_test.go:21:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := arr[0]\n    for i := 1; i\
    \ < n; i++ {\n        if arr[i] < min {\n            min = arr[i]\n        }\n\
    \    }\n    return n - min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpexbdlxlw_test.go:49: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpexbdlxlw_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpexbdlxlw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpexbdlxlw_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpexbdlxlw_test.go:49: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpexbdlxlw_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpexbdlxlw_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n\
    \    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    arr := arr[:len(arr)/2]\n    arr2 := arr[len(arr)/2:]\n    arr2\
    \ := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2,\
    \ arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n\
    \    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2\
    \ := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2,\
    \ arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n\
    \    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2\
    \ := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2,\
    \ arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n\
    \    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2\
    \ := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2,\
    \ arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n\
    \    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2\
    \ := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2,\
    \ arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n\
    \    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2\
    \ := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2,\
    \ arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n\
    \    arr2 := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    arr2\
    \ := append(arr2, arr2...)\n    arr2 := append(arr2, arr2...)\n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsnufuvli_test.go:64:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[n-i] {\n            min = i\n         \
    \   break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpkz_4ag3a_test.go:22\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpkz_4ag3a_test.go:44\
    \ +0x754\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n - 1\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[max] {\n            max =\
    \ i\n        }\n        if arr[i] < arr[min] {\n            min = i\n        }\n\
    \    }\n    if min == max {\n        return min\n    }\n    if min > max {\n \
    \       min, max = max, min\n    }\n    min += 1\n    max -= 1\n    for i := min;\
    \ i <= max; i++ {\n        if arr[i] > arr[max] {\n            max = i\n     \
    \   }\n        if arr[i] < arr[min] {\n            min = i\n        }\n    }\n\
    \    return min + 1 - max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpk4wfrxka_test.go:69: expected '%!s(int=4)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpk4wfrxka_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpk4wfrxka_test.go:69: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpk4wfrxka_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpk4wfrxka_test.go:69: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpk4wfrxka_test.go:69:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpk4wfrxka_test.go:69: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n - 1\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n            max =\
    \ i\n        } else {\n            min = i\n        }\n    }\n    if min > max\
    \ {\n        return min\n    }\n    min += min\n    max -= min\n    return smallest_change(arr[:min])\
    \ + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:6] with capacity 4 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:6] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c4550?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp_tlmbq4m_test.go:34 +0x125\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp_tlmbq4m_test.go:49 +0x317\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i-1\n            break\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    for i := n - 1; i\
    \ > 0; i-- {\n        if arr[i] > arr[i-1] {\n            min = i\n          \
    \  break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8oy034bq_test.go:50: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp8oy034bq_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8oy034bq_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8oy034bq_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp8oy034bq_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n  \
    \      if arr[i] > arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpvqtzdn50_test.go:46: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpvqtzdn50_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpvqtzdn50_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpvqtzdn50_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    min := len(arr)\n    \n    for i := 0; i < len(arr); i++\
    \ {\n        if arr[i] > arr[len(arr)-i-1] {\n            min = i\n        }\n\
    \    }\n    \n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0x953zqq_test.go:49: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0x953zqq_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0x953zqq_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0x953zqq_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0x953zqq_test.go:49: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0x953zqq_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp0x953zqq_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    for\
    \ i := 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n       \
    \     min = length-i-1\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmpgyd423ys_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmpgyd423ys_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpgyd423ys_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpgyd423ys_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpgyd423ys_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpgyd423ys_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpgyd423ys_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2rhkjre8_test.go:45: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2rhkjre8_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2rhkjre8_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2rhkjre8_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n\
    \    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    min := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ > min {\n            min = arr[i]\n        }\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < min {\n            min = arr[i]\n        }\n    }\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpr6u3ruwr_test.go:51: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpr6u3ruwr_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpr6u3ruwr_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpr6u3ruwr_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpr6u3ruwr_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[min] {\n     \
    \       min++\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp0zdxndb9_test.go:18\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp0zdxndb9_test.go:32\
    \ +0x899\ntesting.tRunner(0xc000103520, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    max\
    \ := length\n    for i := 0; i < length/2; i++ {\n        if arr[i] > arr[max]\
    \ {\n            max = i\n        }\n        if arr[i] < arr[min] {\n        \
    \    min = i\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpwtm62ihr_test.go:23\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpwtm62ihr_test.go:40\
    \ +0x9d9\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr);\
    \ j++ {\n            if arr[i] > arr[j] {\n                min = j\n         \
    \       break\n            }\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpykd8sakq_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpykd8sakq_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpykd8sakq_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpykd8sakq_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpykd8sakq_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpykd8sakq_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[min] {\n     \
    \       min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp6qwnv6s2_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp6qwnv6s2_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp6qwnv6s2_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[0] {\n            max\
    \ = i\n            break\n        }\n    }\n    if min > max {\n        return\
    \ min\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxmwt6w8k_test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxmwt6w8k_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxmwt6w8k_test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxmwt6w8k_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpxmwt6w8k_test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    for\
    \ i := 0; i < length/2; i++ {\n        if arr[i] != arr[length-i-1] {\n      \
    \      min = length-i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdmz4w24i_test.go:50: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdmz4w24i_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpdmz4w24i_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpdmz4w24i_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpdmz4w24i_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpdmz4w24i_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpdmz4w24i_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpdmz4w24i_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return -1\n    }\n    max -= min\n    min +=\
    \ min\n    min += min\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpex_qern__test.go:59: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpex_qern__test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpex_qern__test.go:59: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpex_qern__test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpex_qern__test.go:59: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpex_qern__test.go:59:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpex_qern__test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\n\
    \    max := len(arr)\n    for i := 0; i < max; i++ {\n        for j := i; j <\
    \ max; j++ {\n            if arr[i] > arr[j] {\n                min = i\n    \
    \            max = j\n                break\n            }\n        }\n    }\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpc0679vvq_test.go:50: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpc0679vvq_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpc0679vvq_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpc0679vvq_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpc0679vvq_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[len(arr)-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnhsb2xda_test.go:45: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpnhsb2xda_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpnhsb2xda_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpnhsb2xda_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpnhsb2xda_test.go:45: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpnhsb2xda_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    length := len(arr)\n    if length < 2 {\n        return length\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpd8cihekj_test.go:51: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpd8cihekj_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpd8cihekj_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpd8cihekj_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpd8cihekj_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpd8cihekj_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpd8cihekj_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpd8cihekj_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            max =\
    \ i\n        } else {\n            min = i\n        }\n    }\n    if min > max\
    \ {\n        return min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnuqiuyy0_test.go:55: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpnuqiuyy0_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpnuqiuyy0_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpnuqiuyy0_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpnuqiuyy0_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    return min + smallest_change(arr[:max]) + smallest_change(arr[max:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:9] with capacity 8 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:9] with capacity 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp8u4xld39_test.go:30 +0x107\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp8u4xld39_test.go:40 +0xd5\ntesting.tRunner(0xc0001124e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return n\n    }\n    if min == max {\n    \
    \    return min\n    }\n    max -= min\n    min -= min\n    return smallest_change(arr[:min])\
    \ + min + smallest_change(arr[max:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdg6plewc_test.go:61: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdg6plewc_test.go:61:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpdg6plewc_test.go:61: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpdg6plewc_test.go:61:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpdg6plewc_test.go:61: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i] !=\
    \ arr[length-i-1] {\n            min = length-i\n            break\n        }\n\
    \    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i-1\n            break\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    max := len(arr) -\
    \ 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n        \
    \    max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n\
    \        }\n    }\n    if min > max {\n        return -1\n    }\n    min += 1\n\
    \    max -= 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    if min > max {\n        return -1\n    }\n \
    \   return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_kl3cpyc_test.go:68: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_kl3cpyc_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_kl3cpyc_test.go:68: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_kl3cpyc_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_kl3cpyc_test.go:68: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp_kl3cpyc_test.go:68:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp_kl3cpyc_test.go:68: expected '%!s(int=0)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ / 2\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpcxy00xjh_test.go:45: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpcxy00xjh_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpcxy00xjh_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpcxy00xjh_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpcxy00xjh_test.go:45: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpcxy00xjh_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        max := max\n        if arr[i] > max {\n      \
    \      max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n\
    \        }\n    }\n    if min == max {\n        return n\n    }\n    if min >\
    \ max {\n        return min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp6kgdgodn_test.go:60: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp6kgdgodn_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp6kgdgodn_test.go:60: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp6kgdgodn_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp6kgdgodn_test.go:60: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp6kgdgodn_test.go:60:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp6kgdgodn_test.go:60: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp6kgdgodn_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := n - 1; i\
    \ > 0; i-- {\n        if arr[i] > arr[i-1] {\n            min = i\n          \
    \  break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmposs96bv3_test.go:50: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmposs96bv3_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmposs96bv3_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmposs96bv3_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n-1\n    min\
    \ := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i] > max\
    \ {\n            max = i\n        }\n        if arr[i] < min {\n            min\
    \ = i\n        }\n    }\n    if min == max {\n        return n\n    }\n    if\
    \ min > max {\n        return smallest_change(arr[:min]) + smallest_change(arr[min+1:])\n\
    \    }\n    return smallest_change(arr[:max]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hbdzjnc_test.go:22:9: no new variables on left side of :=

    /tmp/tmp8hbdzjnc_test.go:23:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[i+1] {\n            min =\
    \ i\n            max = i+1\n            break\n        }\n    }\n    if min ==\
    \ max {\n        return min\n    }\n    min += 1\n    max -= 1\n    count := 0\n\
    \    for i := min; i <= max; i++ {\n        if arr[i] != arr[n-i-1] {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpavmrggt6_test.go:23 +0xe5\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpavmrggt6_test.go:50 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := arr[0]\n    for i := 1; i\
    \ < n; i++ {\n        if arr[i] < min {\n            min = arr[i]\n        }\n\
    \    }\n    max := arr[0]\n    for i := 0; i < n; i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n    }\n    return max - min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2fjj3qgc_test.go:55: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2fjj3qgc_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2fjj3qgc_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2fjj3qgc_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2fjj3qgc_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2fjj3qgc_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := arr[0]\n    for i := 1; i\
    \ < n; i++ {\n        if arr[i] < min {\n            min = arr[i]\n        }\n\
    \    }\n    max := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n    }\n    return max - min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpqx80kfpj_test.go:55: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpqx80kfpj_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpqx80kfpj_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpqx80kfpj_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpqx80kfpj_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpqx80kfpj_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    max\
    \ := length\n    for i := 0; i < length/2; i++ {\n        if arr[i] > arr[max]\
    \ {\n            max = i\n        }\n        if arr[i] < arr[min] {\n        \
    \    min = i\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpwtm62ihr_test.go:23\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpwtm62ihr_test.go:40\
    \ +0x9d9\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i] !=\
    \ arr[length-i-1] {\n            min = length-i\n            break\n        }\n\
    \    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min == max {\n        return 0\n    }\n    min += 1\n    max -=\
    \ 1\n    i := 0\n    j := n - 1\n    k := 0\n    count := 0\n    for i < n &&\
    \ j < n {\n        if arr[i] != arr[j] {\n            count++\n        }\n   \
    \     if arr[i] > arr[j] {\n            i++\n        } else {\n            j--\n\
    \        }\n        if i == j {\n            i++\n            j--\n        }\n\
    \    }\n    if count > min {\n        return count\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2fqjlruu_test.go:37:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min > max {\n        return -1\n    }\n\
    \    min += 1\n    max -= 1\n    for i := min; i <= max; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            arr[i] = arr[n-1]\n            arr[n-1] = arr[i]\n\
    \            arr[i] = arr[n-1]\n            arr[n-1] = arr[i]\n        }\n   \
    \ }\n    return len(arr)\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp9dgqb7h6_test.go:63: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp9dgqb7h6_test.go:63:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp9dgqb7h6_test.go:63: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp9dgqb7h6_test.go:63:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp9dgqb7h6_test.go:63: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp9dgqb7h6_test.go:63:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp9dgqb7h6_test.go:63: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp9dgqb7h6_test.go:63:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n - 1\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min =\
    \ i\n            max = i+1\n            break\n        }\n    }\n    if min ==\
    \ max {\n        return min\n    }\n    min += min / 2\n    max -= max / 2\n \
    \   for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min\
    \ = i\n            max = i+1\n            break\n        }\n    }\n    if min\
    \ == max {\n        return min\n    }\n    min += min / 2\n    max -= max / 2\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min\
    \ = i\n            max = i+1\n            break\n        }\n    }\n    if min\
    \ == max {\n        return min\n    }\n    min += min / 2\n    max -= max / 2\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min\
    \ = i\n            max = i+1\n            break\n        }\n    }\n    if min\
    \ == max {\n        return min\n    }\n    min += min / 2\n    max -= max / 2\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min\
    \ = i\n            max = i+1\n            break\n        }\n    }\n    if min\
    \ == max {\n        return min\n    }\n    min += min / 2\n    max -= max / 2\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min\
    \ = i\n            max = i+1\n            break\n        }\n    }\n    if min\
    \ == max {\n        return min\n    }\n    min += min / 2\n    max -= max / 2\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min\
    \ = i\n            max = i+1\n            break\n        }\n    }\n    if min\
    \ == max {\n        return min\n    }\n    min += min / 2\n    max -= max / 2\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min\
    \ = i\n            max = i+1\n            break\n        }\n    }\n    if min\
    \ == max {\n        return min\n    }\n    min += min / 2\n    max -= max / 2\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min\
    \ = i\n            \nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp68oh_oxs_test.go:122:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n - 1\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min =\
    \ i\n            max = i\n        } else {\n            max = i\n        }\n \
    \   }\n    if min == max {\n        return min\n    }\n    min += min + 1\n  \
    \  max -= max - min + 1\n    return smallest_change(arr[:min]) + smallest_change(arr[min:])\
    \ + min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpkzlbipn0_test.go:23 +0x146\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpkzlbipn0_test.go:45 +0xd5\ntesting.tRunner(0xc0001964e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    for\
    \ i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            max =\
    \ i\n        } else {\n            min = i\n        }\n    }\n    return min +\
    \ smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [3:2] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [3:2]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45e0, 0x0?, 0x2})\n\
    \t/tmp/tmpmzihdw20_test.go:29 +0x107\ncommand-line-arguments_test.smallest_change({0xc0000c45d8,\
    \ 0x3b?, 0x3})\n\t/tmp/tmpmzihdw20_test.go:29 +0xe5\ncommand-line-arguments_test.smallest_change({0xc0000c45d0,\
    \ 0x0?, 0x4})\n\t/tmp/tmpmzihdw20_test.go:29 +0xe5\ncommand-line-arguments_test.smallest_change({0xc0000c45b8,\
    \ 0x5e3ea0?, 0x7})\n\t/tmp/tmpmzihdw20_test.go:29 +0xe5\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpmzihdw20_test.go:40 +0x172\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > min {\n      \
    \      min = i\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] != arr[min] {\n            min++\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpcif_omf6_test.go:23\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpcif_omf6_test.go:37\
    \ +0x973\ntesting.tRunner(0xc000192680, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    for\
    \ i := 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n       \
    \     min = length-i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[i+1] {\n            min =\
    \ i\n            break\n        }\n    }\n    for i := 0; i < n; i++ {\n     \
    \   if arr[i] > arr[min] {\n            max = i\n            break\n        }\n\
    \    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp8yjyi38c_test.go:23\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp8yjyi38c_test.go:44\
    \ +0x986\ntesting.tRunner(0xc000192680, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    min\
    \ += min / 2\n    max += max / 2\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n  \
    \          min = arr[i]\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpcvnqdlqa_test.go:55: expected '%!s(int=4)', got '%!s(int=11)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpcvnqdlqa_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpcvnqdlqa_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpcvnqdlqa_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpcvnqdlqa_test.go:55: expected '%!s(int=0)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpcvnqdlqa_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpcvnqdlqa_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr)\n    max := len(arr)\n   \
    \ for i := 0; i < max; i++ {\n        if arr[i] > arr[len(arr)-i-1] {\n      \
    \      min = i\n            break\n        }\n    }\n    for i := 0; i < min;\
    \ i++ {\n        if arr[i] > arr[len(arr)-i-1] {\n            max = i\n      \
    \      break\n        }\n    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpt12umr4h_test.go:56: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpt12umr4h_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpt12umr4h_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpt12umr4h_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpt12umr4h_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpt12umr4h_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpt12umr4h_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpt12umr4h_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return -1\n    }\n    min += 1\n    max -=\
    \ 1\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n \
    \       }\n    }\n    if min > max {\n        return -1\n    }\n    return min\
    \ - max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpheu8s7o1_test.go:69: expected '%!s(int=4)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpheu8s7o1_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=-5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpheu8s7o1_test.go:69: expected '%!s(int=1)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpheu8s7o1_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=-3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpheu8s7o1_test.go:69: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpheu8s7o1_test.go:69:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpheu8s7o1_test.go:69: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    max\
    \ := length\n    for i := 0; i < length/2; i++ {\n        if arr[i] > arr[max]\
    \ {\n            max = i\n        }\n        if arr[i] < arr[min] {\n        \
    \    min = i\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpwtm62ihr_test.go:23\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpwtm62ihr_test.go:40\
    \ +0x9d9\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            max =\
    \ i\n        } else {\n            min = i\n        }\n    }\n    if min > max\
    \ {\n        return min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnuqiuyy0_test.go:55: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpnuqiuyy0_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpnuqiuyy0_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpnuqiuyy0_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpnuqiuyy0_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min == max {\n        return 0\n    }\n    min += 1\n    max -=\
    \ 1\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n \
    \       }\n    }\n    return min - max\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpv3kg0f2d_test.go:66: expected '%!s(int=4)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpv3kg0f2d_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=-5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpv3kg0f2d_test.go:66: expected '%!s(int=1)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpv3kg0f2d_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=-3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpv3kg0f2d_test.go:66: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpv3kg0f2d_test.go:66:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpv3kg0f2d_test.go:66: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := arr[0]\n    for i := 1; i\
    \ < n; i++ {\n        if arr[i] < min {\n            min = arr[i]\n        }\n\
    \    }\n    max := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n    }\n    diff := max - min\n    if\
    \ diff > 0 {\n        return diff + 1\n    }\n    return diff\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp9z3_yrlc_test.go:59: expected '%!s(int=4)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp9z3_yrlc_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp9z3_yrlc_test.go:59: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp9z3_yrlc_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp9z3_yrlc_test.go:59: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp9z3_yrlc_test.go:59:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp9z3_yrlc_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] != arr[n-i-1] {\n            min = i\n      \
    \      break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp78212p19_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp78212p19_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp78212p19_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp78212p19_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp78212p19_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp78212p19_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    for i := n - 1; i\
    \ > 0; i-- {\n        if arr[i] > arr[i-1] {\n            min = i\n          \
    \  break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8oy034bq_test.go:50: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp8oy034bq_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8oy034bq_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8oy034bq_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp8oy034bq_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    length := len(arr)\n    min := length\n    for i := 0; i < length/2;\
    \ i++ {\n        if arr[i] > arr[length-i-1] {\n            min = length-i\n \
    \       }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp23dg657__test.go:47: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp23dg657__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp23dg657__test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp23dg657__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp23dg657__test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp23dg657__test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp23dg657__test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp23dg657__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr);\
    \ j++ {\n            if arr[i] != arr[j] {\n                min = min(min, j-i+1)\n\
    \                break\n            }\n        }\n    }\n    return min\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpidr4fyea_test.go:20:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > min {\n      \
    \      min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpzyqkv085_test.go:45: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpzyqkv085_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpzyqkv085_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpzyqkv085_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpzyqkv085_test.go:45: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpzyqkv085_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return n\n    }\n    min += min\n    max -=\
    \ max\n    if min == max {\n        return min\n    }\n    min += min\n    max\
    \ -= max\n    if min == max {\n        return min\n    }\n    min += min\n   \
    \ max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return min\n    }\n    min += min\n\
    \    max -= max\n    if min == max {\n        return \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi7qjx4sp_test.go:137:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < min; i++ {\n        if arr[i] > arr[min] {\n      \
    \      min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpbj4ws_35_test.go:45: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpbj4ws_35_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpbj4ws_35_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpbj4ws_35_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length / 2\n    if\
    \ length%2 == 0 {\n        min = length / 2\n    }\n    for i := 0; i < min; i++\
    \ {\n        if arr[i] != arr[length-i-1] {\n            min = i\n        }\n\
    \    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps6b3qkxg_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps6b3qkxg_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps6b3qkxg_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps6b3qkxg_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmps6b3qkxg_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmps6b3qkxg_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps6b3qkxg_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n - 1\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n \
    \       }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min == max {\n        return 0\n    }\n    max -= min + 1\n    min +=\
    \ min + 1\n    if min > max {\n        return min\n    }\n    return max\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp6r158xuo_test.go:61: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp6r158xuo_test.go:61:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp6r158xuo_test.go:61: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp6r158xuo_test.go:61:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] != arr[n-i-1] {\n            min = i\n      \
    \      break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3_czbaa7_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3_czbaa7_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3_czbaa7_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3_czbaa7_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3_czbaa7_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3_czbaa7_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp3_czbaa7_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n - 1\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min =\
    \ i\n            max = i+1\n            break\n        }\n    }\n    if min ==\
    \ max {\n        return min\n    }\n    min += min\n    max -= max\n    min +=\
    \ min\n    max -= max\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:12] with capacity 8 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:12] with capacity 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpf131c3ln_test.go:36 +0xed\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpf131c3ln_test.go:46 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i-1\n            break\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i-1\n            break\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            min =\
    \ i\n            break\n        }\n    }\n    for i := 0; i < n; i++ {\n     \
    \   if arr[i] > arr[min] {\n            min = i\n        }\n    }\n    for i :=\
    \ n - 1; i >= 0; i-- {\n        if arr[i] > arr[max] {\n            max = i\n\
    \            break\n        }\n    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmplk_y1utj_test.go:34 +0x90\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmplk_y1utj_test.go:49 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i-1\n            break\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr);\
    \ j++ {\n            if arr[i] > arr[j] {\n                min = i\n         \
    \       break\n            }\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpt1_hi1g0_test.go:48: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpt1_hi1g0_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpt1_hi1g0_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpt1_hi1g0_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i] > arr[len(arr)-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpib9khfyy_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpib9khfyy_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpib9khfyy_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpib9khfyy_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpib9khfyy_test.go:46: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpib9khfyy_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpib9khfyy_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpib9khfyy_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    max\
    \ -= 1\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ < min {\n            min = arr[i]\n        }\n    }\n    if min == max {\n \
    \       return min + 1\n    }\n    if min > max {\n        return smallest_change(arr[:max])\n\
    \    }\n    return smallest_change(arr[min+1:])\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [3:2] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [3:2]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c4620?, 0xc0000c44a0?,\
    \ 0x4509d9?})\n\t/tmp/tmpuhqazwgk_test.go:39 +0xe8\ncommand-line-arguments_test.smallest_change({0xc0000c4600?,\
    \ 0x5648fb?, 0x3b?})\n\t/tmp/tmpuhqazwgk_test.go:39 +0xc5\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?,\
    \ 0x5e3ea0?, 0x37930?})\n\t/tmp/tmpuhqazwgk_test.go:39 +0xc5\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpuhqazwgk_test.go:49 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        max := i\n        for j := i; j < n; j++ {\n \
    \           if arr[j] > arr[j+1] {\n                max = j\n            }\n \
    \       }\n        if max != i {\n            min = max - i\n        }\n    }\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7km0ztl2_test.go:21:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            min = i\n         \
    \   break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[min] {\n     \
    \       min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp6qwnv6s2_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp6qwnv6s2_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp6qwnv6s2_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return -1\n    }\n    min += 1\n    max -=\
    \ 1\n    i := 0\n    j := n - 1\n    for i < max && j < min {\n        if arr[i]\
    \ > arr[j] {\n            i++\n        }\n        if arr[j] > arr[i] {\n     \
    \       j--\n        }\n    }\n    if i == j {\n        return -1\n    }\n   \
    \ return j - i + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpjb22k3cw_test.go:71: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpjb22k3cw_test.go:71:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpjb22k3cw_test.go:71: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpjb22k3cw_test.go:71:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpjb22k3cw_test.go:71: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpjb22k3cw_test.go:71:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpjb22k3cw_test.go:71: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075327
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Your code here\n\
    \    min := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < arr[len(arr)-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp6dxouv6j_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp6dxouv6j_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp6dxouv6j_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp6dxouv6j_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i] !=\
    \ arr[length-i-1] {\n            min = length-i\n            break\n        }\n\
    \    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpz3aavj3n_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpz3aavj3n_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] != arr[min] {\n            min = i\n        }\n   \
    \ }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    for\
    \ i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            max =\
    \ i\n        } else {\n            min = i\n        }\n    }\n    if min > max\
    \ {\n        return min\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4z9mr15k_test.go:55: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4z9mr15k_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp4z9mr15k_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp4z9mr15k_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp4z9mr15k_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp4z9mr15k_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        max := max\n        if arr[i] > arr[max] {\n \
    \           max = i\n        }\n    }\n    for i := 0; i < n; i++ {\n        if\
    \ arr[i] != arr[max] {\n            min += 1\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpzmic2oe1_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpzmic2oe1_test.go:43\
    \ +0x1b\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n - 1\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n \
    \       }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min > max {\n        return min\n    }\n    min += min\n    max -= max\n\
    \    for i := min; i <= max; i++ {\n        if arr[i] > max {\n            max\
    \ = i\n        }\n        if arr[i] < min {\n            min = i\n        }\n\
    \    }\n    return min + min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpyjg29n87_test.go:66: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpyjg29n87_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpyjg29n87_test.go:66: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpyjg29n87_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpyjg29n87_test.go:66: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    for\
    \ i := 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n       \
    \     min = length-i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            min = i\n         \
    \   break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp61vijoi9_test.go:50: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp61vijoi9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp61vijoi9_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp61vijoi9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp61vijoi9_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp61vijoi9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp61vijoi9_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min == max {\n        return n\n    }\n    max -= min\n    if max\
    \ < 2 {\n        return n\n    }\n    min -= max\n    if min < 2 {\n        return\
    \ n\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[min+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpyz3mh5d9_test.go:64: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpyz3mh5d9_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpyz3mh5d9_test.go:64: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpyz3mh5d9_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpyz3mh5d9_test.go:64: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpyz3mh5d9_test.go:64:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpyz3mh5d9_test.go:64: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpyz3mh5d9_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i-1\n            break\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    return min + n - max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8lkp6f_d_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp8lkp6f_d_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8lkp6f_d_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8lkp6f_d_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp8lkp6f_d_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp8lkp6f_d_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i\n            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            min = i\n         \
    \   break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp4bja7w65_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp4bja7w65_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n - 1\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[i+1] {\n            min =\
    \ i\n            max = i\n        } else {\n            max = i\n        }\n \
    \   }\n    if min == max {\n        return min\n    }\n    min += 1\n    max -=\
    \ 1\n    i := 0\n    j := n - 1\n    for i < max && j >= min {\n        if arr[i]\
    \ > arr[j] {\n            i++\n        } else {\n            j--\n        }\n\
    \    }\n    return j - i\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c35f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp7hsrqou7_test.go:23 +0xdb\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp7hsrqou7_test.go:54 +0xd5\ntesting.tRunner(0xc0001a0000, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return 0\n    }\n\n    min := length\n    max :=\
    \ length\n    min += length / 2\n    max -= length / 2\n\n    for i := 0; i <\
    \ max; i++ {\n        if arr[i] > arr[min] {\n            min = i\n        }\n\
    \    }\n\n    for i := 0; i < min; i++ {\n        if arr[i] < arr[max] {\n   \
    \         max = i\n        }\n    }\n\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [12] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [12] with length 8\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000bf5f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmptrm_sj77_test.go:27 +0xe5\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmptrm_sj77_test.go:48 +0xd5\ntesting.tRunner(0xc000103520, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min == max {\n        return min\n    }\n    max -= min\n    min\
    \ += min\n    if min < max {\n        return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[min+1:])\n    }\n    return min + smallest_change(arr[:min])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520348?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?,\
    \ 0x2?, 0x8?})\n\t/tmp/tmp614byzx7_test.go:15 +0x185 fp=0xc0201e0370 sp=0xc0201e0368\
    \ pc=0x4ef7e5\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmp614byzx7_test.go:38 +0x12f fp=0xc0201e03b0 sp=0xc0201e0370\
    \ pc=0x4ef78f\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmp614byzx7_test.go:38 +0x12f fp=0xc0201e03f0 sp=0xc0201e03b0\
    \ pc=0x4ef78f\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmp614byzx7_test.go:38 +0x12f fp=0xc0201e0430 sp=0xc0201e03f0\
    \ pc=0x4ef78f\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmp614byzx7_test.go:38 +0x12f fp=0xc0201e0470 sp=0xc0201e0430\
    \ pc=0x4ef78f\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmp614byzx7_test.go:38 +0x12f fp=0xc0201e04b0 sp=0xc0201e0470\
    \ pc=0x4ef78f\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmp614byzx7_test.go:38 +0x12f fp=0xc0201e04f0 sp=0xc0201e04b0\
    \ pc=0x4ef78f\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmp614byzx7_test.go:38 +0x12f fp=0xc0201e0530 sp=0xc0201e04f0\
    \ pc=0x4ef78f\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmp614byzx7_test.go:38 +0x12f fp=0xc0201e0570 sp=0xc0201e0530\
    \ pc=0x4ef78f\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmp614byzx7_test.go:38 +0x12f fp=0xc0201e05b0 sp=0xc0201e0570\
    \ pc=0x4ef78f\ncommand-line-arguments_test.smallest_change({0"
  timestamp: 1660075329
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        max := max\n        if arr[i] > arr[n-i] {\n \
    \           max = i\n        }\n        if arr[i] < arr[n-i] {\n            min\
    \ = i\n        }\n        if max > min {\n            break\n        }\n    }\n\
    \    return max-min+1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp1his0hd0_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp1his0hd0_test.go:44\
    \ +0x82c\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    max\
    \ -= 1\n    for i := 0; i < n; i++ {\n        if arr[i] > arr[max] {\n       \
    \     max = i\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ < arr[min] {\n            min = i\n        }\n    }\n    return min + 1 - max\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpitwava_t_test.go:29\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpitwava_t_test.go:43\
    \ +0xa99\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpu4rem01k_test.go:21\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpu4rem01k_test.go:42\
    \ +0x7a5\ntesting.tRunner(0xc000120340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < i; j++ {\n\
    \            if arr[i] > arr[j] {\n                min = i\n                break\n\
    \            }\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppwsp4ulr_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppwsp4ulr_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppwsp4ulr_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppwsp4ulr_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppwsp4ulr_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmppwsp4ulr_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    min\
    \ += min / 2\n    max += max / 2\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n  \
    \          min = arr[i]\n        }\n    }\n    if min > max {\n        return\
    \ 0\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [12:8] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [12:8]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0, 0x5e3ea0?,\
    \ 0x8})\n\t/tmp/tmpexuqzbca_test.go:35 +0x119\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpexuqzbca_test.go:45 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > min {\n      \
    \      min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpzyqkv085_test.go:45: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpzyqkv085_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpzyqkv085_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpzyqkv085_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpzyqkv085_test.go:45: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpzyqkv085_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    min := len(arr) - 1\n    \n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n\
    \    \n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpwbltkues_test.go:49: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpwbltkues_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpwbltkues_test.go:49: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpwbltkues_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    max := n\n    for\
    \ i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[i+1] {\n            min =\
    \ i\n            max = i+1\n            break\n        }\n    }\n    if min ==\
    \ max {\n        return min\n    }\n    min += 1\n    max -= 1\n    for i := min;\
    \ i <= max; i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n     \
    \       max = i+1\n            break\n        }\n    }\n    if min == max {\n\
    \        return min\n    }\n    min += 1\n    max -= 1\n    for i := min; i <=\
    \ max; i++ {\n        if arr[i] < arr[i+1] {\n            min = i\n          \
    \  max = i+1\n            break\n        }\n    }\n    if min == max {\n     \
    \   return min\n    }\n    min += 1\n    max -= 1\n    for i := min; i <= max;\
    \ i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n            max\
    \ = i+1\n            break\n        }\n    }\n    if min == max {\n        return\
    \ min\n    }\n    return n\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpygt_tc5f_test.go:23 +0x1dc\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpygt_tc5f_test.go:78 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return min\n    }\n    min -= 2\n    max +=\
    \ 2\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n \
    \       }\n    }\n    if min > max {\n        return min\n    }\n    return 0\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpn5qfxkys_test.go:69: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpn5qfxkys_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpn5qfxkys_test.go:69: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpn5qfxkys_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpn5qfxkys_test.go:69: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i\n            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp__a6l5x2_test.go:48: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp__a6l5x2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp__a6l5x2_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp__a6l5x2_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[n-i] {\n            min = i\n         \
    \   break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpkz_4ag3a_test.go:22\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpkz_4ag3a_test.go:44\
    \ +0x754\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n\
    \    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmptfr2uzzz_test.go:45: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmptfr2uzzz_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmptfr2uzzz_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmptfr2uzzz_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmptfr2uzzz_test.go:45: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmptfr2uzzz_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    for\
    \ i := 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n       \
    \     min = length-i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpg_o8qylg_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpg_o8qylg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] != arr[n-i-1] {\n            min = i\n      \
    \      break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp78212p19_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp78212p19_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp78212p19_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp78212p19_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp78212p19_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp78212p19_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i\n            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i-1\n            break\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    return min + smallest_change(arr[:max]) + smallest_change(arr[max:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:9] with capacity 8 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:9] with capacity 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp8u4xld39_test.go:30 +0x107\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp8u4xld39_test.go:40 +0xd5\ntesting.tRunner(0xc0001124e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n - 1\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n \
    \       }\n        if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    if min > max {\n        return 0\n    }\n    min += 1\n    max -= 1\n   \
    \ i := 0\n    for j := min; j < max; j++ {\n        if arr[j] != arr[j+i] {\n\
    \            i++\n        }\n    }\n    return i\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdmernmxc_test.go:64: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdmernmxc_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpdmernmxc_test.go:64: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpdmernmxc_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpdmernmxc_test.go:64: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return n\n    }\n    min := n\n    for i := 0; i < n;\
    \ i++ {\n        if arr[i] != arr[n - 1 - i] {\n            min = i\n        \
    \    break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnefezdeb_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpnefezdeb_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpnefezdeb_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpnefezdeb_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpnefezdeb_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpnefezdeb_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpnefezdeb_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpnefezdeb_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    max\
    \ := length\n    for i := 0; i < length/2; i++ {\n        if arr[i] > arr[max]\
    \ {\n            max = i\n        }\n        if arr[i] < arr[min] {\n        \
    \    min = i\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpwtm62ihr_test.go:23\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpwtm62ihr_test.go:40\
    \ +0x9d9\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if arr[i] != arr[n-i-1] {\n            min = i + 1\n  \
    \          break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4m6i6tyd_test.go:50: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4m6i6tyd_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp4m6i6tyd_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp4m6i6tyd_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp4m6i6tyd_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp4m6i6tyd_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp4m6i6tyd_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i] !=\
    \ arr[length-i-1] {\n            min = i\n            break\n        }\n    }\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpr97xg51a_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpr97xg51a_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpr97xg51a_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpr97xg51a_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpr97xg51a_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpr97xg51a_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpr97xg51a_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpr97xg51a_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i\n            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] != arr[min] {\n            min = i\n        }\n   \
    \ }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp3mws2agb_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp3mws2agb_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min > max {\n        return -1\n    }\n\
    \    min += 1\n    max -= 1\n    for i := min; i <= max; i++ {\n        if arr[i]\
    \ > arr[i-min] {\n            arr[i] = arr[i-min]\n        }\n    }\n    return\
    \ len(arr)\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0kn5pnrv_test.go:60: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0kn5pnrv_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0kn5pnrv_test.go:60: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0kn5pnrv_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0kn5pnrv_test.go:60: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0kn5pnrv_test.go:60:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp0kn5pnrv_test.go:60: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp0kn5pnrv_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    min := len(arr)\
    \ - 1\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[min] {\n     \
    \       min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp6qwnv6s2_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp6qwnv6s2_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp6qwnv6s2_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp6qwnv6s2_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i-1\n            break\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp8d7_qjz2_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp8d7_qjz2_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    for i := 0; i < n-1;\
    \ i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n            break\n\
    \        }\n    }\n    for i := n - 1; i > min; i-- {\n        if arr[i] > arr[i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp11kbo4nj_test.go:56: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp11kbo4nj_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp11kbo4nj_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp11kbo4nj_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp11kbo4nj_test.go:56: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp11kbo4nj_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := 0\n    max := n-1\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n     \
    \   }\n        if arr[i] < min {\n            min = i\n        }\n    }\n    if\
    \ min == max {\n        return n\n    }\n    min += 1\n    max -= 1\n    i :=\
    \ 0\n    j := n - 1\n    k := 0\n    min += 2\n    max -= 2\n    for i < max &&\
    \ j > min {\n        if arr[i] > arr[j] {\n            arr[k] = arr[i]\n     \
    \       i++\n            k++\n        } else {\n            arr[k] = arr[j]\n\
    \            j--\n            k++\n        }\n    }\n    for i < max {\n     \
    \   arr[k] = arr[i]\n        i++\n        k++\n    }\n    for j > min {\n    \
    \    arr[k] = arr[j]\n        j--\n        k++\n    }\n    return k\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdf0k516h_test.go:84: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdf0k516h_test.go:84:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpdf0k516h_test.go:84: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpdf0k516h_test.go:84:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpdf0k516h_test.go:84: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpdf0k516h_test.go:84:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n \
    \   }\n    if min > max {\n        return -1\n    }\n    min += 1\n    max -=\
    \ 1\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n \
    \       }\n    }\n    if min > max {\n        return -1\n    }\n    return min\
    \ + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpigo0cip5_test.go:69: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpigo0cip5_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpigo0cip5_test.go:69: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpigo0cip5_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpigo0cip5_test.go:69: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpigo0cip5_test.go:69:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min == max {\n        return n\n    }\n\
    \    min += 1\n    max -= 1\n    i := 0\n    j := n-1\n    for i < max && j >\
    \ min {\n        if arr[i] > arr[j] {\n            i++\n        } else {\n   \
    \         j--\n        }\n    }\n    return j - i\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpkp8eo15g_test.go:64: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpkp8eo15g_test.go:64:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpkp8eo15g_test.go:64: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    length := len(arr)\n    min := length\n    for i := 0; i < length/2;\
    \ i++ {\n        if arr[i] > arr[len(arr)-i-1] {\n            min = i\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpp82p_zus_test.go:47: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpp82p_zus_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpp82p_zus_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpp82p_zus_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpp82p_zus_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpp82p_zus_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpp82p_zus_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpp82p_zus_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-i]\
    \ {\n            min = i + 1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpwoa6ce7u_test.go:19\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpwoa6ce7u_test.go:40\
    \ +0x7e5\ntesting.tRunner(0xc000103860, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    max := 0\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            max\
    \ = i\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ < arr[min] {\n            min = i\n        }\n    }\n    if min == max {\n \
    \       return len(arr)\n    }\n    return min + smallest_change(arr[:min]) +\
    \ smallest_change(arr[min+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp3ib8rf34_test.go:22 +0x170\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp3ib8rf34_test.go:44 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length < 2 {\n        return length\n    }\n    min := length\n    max\
    \ := length\n    for i := 0; i < length/2; i++ {\n        if arr[i] > arr[max]\
    \ {\n            max = i\n        }\n        if arr[i] < arr[min] {\n        \
    \    min = i\n        }\n    }\n    if min > max {\n        return length\n  \
    \  }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[min+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpl_j82dgb_test.go:23 +0x175\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpl_j82dgb_test.go:43 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i\n            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4_ef97n_test.go:271:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpu4rem01k_test.go:21\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpu4rem01k_test.go:42\
    \ +0x7a5\ntesting.tRunner(0xc000120340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmps6tac3i5_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmps6tac3i5_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length\n    for i :=\
    \ 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min\
    \ = length-i\n            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp2w6rgkf9_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp2w6rgkf9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    length := len(arr)\n\
    \    if length == 0 {\n        return 0\n    }\n    min := length / 2\n    if\
    \ length%2 == 0 {\n        min = min + 1\n    }\n    for i := 0; i < min; i++\
    \ {\n        if arr[i] != arr[length-i-1] {\n            min = i\n           \
    \ break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4g0btn0z_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4g0btn0z_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp4g0btn0z_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp4g0btn0z_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp4g0btn0z_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp4g0btn0z_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp4g0btn0z_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := arr[0]\n    for i := 1; i\
    \ < n; i++ {\n        if arr[i] < min {\n            min = arr[i]\n        }\n\
    \    }\n    max := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n    }\n    if min == max {\n       \
    \ return n\n    }\n    max -= min\n    min += min\n    n -= 2\n    for i := 1;\
    \ i < n; i++ {\n        if arr[i] < min {\n            arr[i] += max\n       \
    \ }\n        if arr[i] > max {\n            arr[i] -= min\n        }\n    }\n\
    \    return n\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxxsr4fl8_test.go:69: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxxsr4fl8_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpxxsr4fl8_test.go:69: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpxxsr4fl8_test.go:69:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpxxsr4fl8_test.go:69: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpxxsr4fl8_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := 1; i < n; i++ {\n        if arr[i] > arr[max] {\n            max = i\n\
    \        }\n        if arr[i] < arr[min] {\n            min = i\n        }\n \
    \   }\n    return min + max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpewdsw_qp_test.go:23\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpewdsw_qp_test.go:40\
    \ +0x9d9\ntesting.tRunner(0xc0001a6340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n    min := len(arr) - 1\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n\
    \    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphw0cr2l2_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphw0cr2l2_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6])\
    \ == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1,\
    \ 2, 3, 2, 1]) == 0\nfunc smallest_change(arr []int) int {\n    n := len(arr)\n\
    \    if n < 2 {\n        return 0\n    }\n    min := n\n    max := n\n    for\
    \ i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[i+1] {\n            min =\
    \ i + 1\n            break\n        }\n    }\n    for i := 0; i < n; i++ {\n \
    \       if arr[i] > arr[min] {\n            max = min\n            break\n   \
    \     }\n    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0001d25f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmphalgxon__test.go:23 +0xa9\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmphalgxon__test.go:44 +0xd5\ntesting.tRunner(0xc000198ea0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075330
