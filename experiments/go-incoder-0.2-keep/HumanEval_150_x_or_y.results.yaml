language: go_test.go
name: HumanEval_150_x_or_y
results:
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 2 {\n        return x\n    }\n    if n%2 == 0 {\n       \
    \ return y\n    }\n    return x_or_y(n-1, x, y)\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpav8phmzi_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpav8phmzi_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=52)'\n    --- FAIL: TestX_Or_Y/test_num__4\
    \ (0.00s)\n        tmpav8phmzi_test.go:45: expected '%!s(int=-1)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n/2, x, y)\n    }\n   \
    \ return x_or_y(n/2, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpt383fnc1_test.go:48: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpt383fnc1_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=52)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmpt383fnc1_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpt383fnc1_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ if n % 3 == 0 {\n        return x_or_y(n-1, x, y_or_z(n-1, x, y))\n    }\n \
    \   return x_or_y(n-1, x_or_y(n-1, x, y), y_or_z(n-1, x, y))\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpspg7_pn5_test.go:24:31: undefined: y_or_z

    /tmp/tmpspg7_pn5_test.go:26:43: undefined: y_or_z

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073846
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 2 {\n        return x\n    }\n    if n == 1 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpxytmx0vb_test.go:48: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmpxytmx0vb_test.go:48: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5\
    \ (0.00s)\n        tmpxytmx0vb_test.go:48: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=1234)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%x == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpk9xao40k_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpk9xao40k_test.go:42: expected\
    \ '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n\
    \        tmpk9xao40k_test.go:42: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmpk9xao40k_test.go:42:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__7\
    \ (0.00s)\n        tmpk9xao40k_test.go:42: expected '%!s(int=1234)', got '%!s(int=34)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpk9xao40k_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpk9xao40k_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ if n % 3 == 0 {\n        return x_or_y(n-1, x, y_or_z(n-1, x, y))\n    }\n \
    \   return x_or_y(n-1, x_or_y(n-1, x, y), y_or_z(n-1, x, y))\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpspg7_pn5_test.go:24:31: undefined: y_or_z

    /tmp/tmpspg7_pn5_test.go:26:43: undefined: y_or_z

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073846
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%x == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpk9xao40k_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpk9xao40k_test.go:42: expected\
    \ '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n\
    \        tmpk9xao40k_test.go:42: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmpk9xao40k_test.go:42:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__7\
    \ (0.00s)\n        tmpk9xao40k_test.go:42: expected '%!s(int=1234)', got '%!s(int=34)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpk9xao40k_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpk9xao40k_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 2 {\n        return x\n    }\n    if n == 1 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpxytmx0vb_test.go:48: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmpxytmx0vb_test.go:48: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5\
    \ (0.00s)\n        tmpxytmx0vb_test.go:48: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=1234)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ if n % 3 == 0 {\n        return x_or_y(n-1, x, y_or_z(n-1, x, y))\n    }\n \
    \   return x_or_y(n-1, x_or_y(n-1, x, y), y_or_z(n-1, x, y))\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpspg7_pn5_test.go:24:31: undefined: y_or_z

    /tmp/tmpspg7_pn5_test.go:26:43: undefined: y_or_z

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073846
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n % 2 == 0 {\n     \
    \   return y\n    }\n    return x_or_y(n-1, x, y)\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp4ztw3opu_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmp4ztw3opu_test.go:45: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp4ztw3opu_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%x == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpk9xao40k_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpk9xao40k_test.go:42: expected\
    \ '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n\
    \        tmpk9xao40k_test.go:42: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmpk9xao40k_test.go:42:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__7\
    \ (0.00s)\n        tmpk9xao40k_test.go:42: expected '%!s(int=1234)', got '%!s(int=34)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpk9xao40k_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpk9xao40k_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n % 2 == 0 {\n     \
    \   return x_or_y(n-1, x, y)\n    }\n    return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp_zt661ma_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmp_zt661ma_test.go:45:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmp_zt661ma_test.go:45: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmp_zt661ma_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5\
    \ (0.00s)\n        tmp_zt661ma_test.go:45: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmp_zt661ma_test.go:45:\
    \ expected '%!s(int=1234)', got '%!s(int=34)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp_zt661ma_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ if n % 3 == 0 {\n        return x_or_y(n-1, x, y + 2)\n    }\n    return x_or_y(n-1,\
    \ x, y + 3)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp7x49xr1n_test.go:51: expected '%!s(int=34)', got '%!s(int=20)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmp7x49xr1n_test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=23)'\n    --- FAIL: TestX_Or_Y/test_num__2\
    \ (0.00s)\n        tmp7x49xr1n_test.go:51: expected '%!s(int=33)', got '%!s(int=5214)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmp7x49xr1n_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=1729)'\n    --- FAIL: TestX_Or_Y/test_num__4\
    \ (0.00s)\n        tmp7x49xr1n_test.go:51: expected '%!s(int=-1)', got '%!s(int=10569)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp7x49xr1n_test.go:51:\
    \ expected '%!s(int=583)', got '%!s(int=5393)'\n    --- FAIL: TestX_Or_Y/test_num__6\
    \ (0.00s)\n        tmp7x49xr1n_test.go:51: expected '%!s(int=129)', got '%!s(int=249)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmp7x49xr1n_test.go:51:\
    \ expected '%!s(int=1234)', got '%!s(int=1239)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp7x49xr1n_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp7x49xr1n_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 2 {\n        return x\n    }\n    if n == 1 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpxytmx0vb_test.go:48: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmpxytmx0vb_test.go:48: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5\
    \ (0.00s)\n        tmpxytmx0vb_test.go:48: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=1234)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n % 2 == 0 {\n     \
    \   return y\n    }\n    return x_or_y(n-1, x, y)\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp4ztw3opu_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmp4ztw3opu_test.go:45: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp4ztw3opu_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ if n % 3 == 0 {\n        return x_or_y(n-1, x, y_or_z(x, y))\n    }\n    return\
    \ x_or_y(n-1, x_or_y(n-1, x, y), y_or_z(x, y))\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4fu8j2q_test.go:24:31: undefined: y_or_z

    /tmp/tmpj4fu8j2q_test.go:26:43: undefined: y_or_z

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073846
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 2 {\n        return x\n    }\n    if n%2 == 0 {\n       \
    \ return y\n    }\n    return x_or_y(n-1, x, y)\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpav8phmzi_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpav8phmzi_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=52)'\n    --- FAIL: TestX_Or_Y/test_num__4\
    \ (0.00s)\n        tmpav8phmzi_test.go:45: expected '%!s(int=-1)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%x == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpk9xao40k_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpk9xao40k_test.go:42: expected\
    \ '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n\
    \        tmpk9xao40k_test.go:42: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmpk9xao40k_test.go:42:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__7\
    \ (0.00s)\n        tmpk9xao40k_test.go:42: expected '%!s(int=1234)', got '%!s(int=34)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpk9xao40k_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpk9xao40k_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%x == 0 && n%y == 0 {\n        return n\n    }\n    return y\n\
    }\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\npanic: runtime error: integer divide by zero\
    \ [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.x_or_y(...)\n\t/tmp/tmpuh5j_bcj_test.go:14\n\
    command-line-arguments_test.TestX_Or_Y(0x0?)\n\t/tmp/tmpuh5j_bcj_test.go:36 +0x12\n\
    testing.tRunner(0xc000103380, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%x == 0 && n%y == 0 {\n        return n\n    }\n    return y\n\
    }\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\npanic: runtime error: integer divide by zero\
    \ [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.x_or_y(...)\n\t/tmp/tmpuh5j_bcj_test.go:14\n\
    command-line-arguments_test.TestX_Or_Y(0x0?)\n\t/tmp/tmpuh5j_bcj_test.go:36 +0x12\n\
    testing.tRunner(0xc000103380, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%x == 0 && n%y == 0 {\n        return n\n    }\n    return y\n\
    }\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\npanic: runtime error: integer divide by zero\
    \ [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.x_or_y(...)\n\t/tmp/tmpuh5j_bcj_test.go:14\n\
    command-line-arguments_test.TestX_Or_Y(0x0?)\n\t/tmp/tmpuh5j_bcj_test.go:36 +0x12\n\
    testing.tRunner(0xc000103380, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n % 2 == 0 {\n     \
    \   return y\n    }\n    return x_or_y(n-1, x, y)\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp4ztw3opu_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmp4ztw3opu_test.go:45: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp4ztw3opu_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n/2, x, y)\n    }\n   \
    \ return x_or_y(n/2, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpt383fnc1_test.go:48: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpt383fnc1_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=52)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmpt383fnc1_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpt383fnc1_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 2 {\n        return x\n    }\n    if n == 1 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpxytmx0vb_test.go:48: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmpxytmx0vb_test.go:48: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5\
    \ (0.00s)\n        tmpxytmx0vb_test.go:48: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpxytmx0vb_test.go:48:\
    \ expected '%!s(int=1234)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n % 2 == 0 {\n     \
    \   return x_or_y(n-1, x, y)\n    }\n    return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp_zt661ma_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmp_zt661ma_test.go:45:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmp_zt661ma_test.go:45: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmp_zt661ma_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5\
    \ (0.00s)\n        tmp_zt661ma_test.go:45: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmp_zt661ma_test.go:45:\
    \ expected '%!s(int=1234)', got '%!s(int=34)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp_zt661ma_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n % 2 == 0 {\n     \
    \   return y\n    }\n    return x_or_y(n-1, x, y)\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp4ztw3opu_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmp4ztw3opu_test.go:45: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp4ztw3opu_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 2 {\n        return x\n    }\n    if n % 2 == 0 {\n     \
    \   return y\n    }\n    return x_or_y(n-1, x, y)\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpz2l_bseo_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpz2l_bseo_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=52)'\n    --- FAIL: TestX_Or_Y/test_num__4\
    \ (0.00s)\n        tmpz2l_bseo_test.go:45: expected '%!s(int=-1)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%x == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpk9xao40k_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpk9xao40k_test.go:42: expected\
    \ '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n\
    \        tmpk9xao40k_test.go:42: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmpk9xao40k_test.go:42:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__7\
    \ (0.00s)\n        tmpk9xao40k_test.go:42: expected '%!s(int=1234)', got '%!s(int=34)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpk9xao40k_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpk9xao40k_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n % 2 == 0 {\n     \
    \   return y\n    }\n    return x_or_y(n-1, x, y)\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp4ztw3opu_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmp4ztw3opu_test.go:45: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp4ztw3opu_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp4ztw3opu_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n/2, x, y)\n    }\n   \
    \ return x_or_y(n/2, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpt383fnc1_test.go:48: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpt383fnc1_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=52)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmpt383fnc1_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpt383fnc1_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n/2, x, y)\n    }\n   \
    \ return x_or_y(n/2, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpt383fnc1_test.go:48: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpt383fnc1_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=52)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmpt383fnc1_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpt383fnc1_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpo4wzjlrx_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpo4wzjlrx_test.go:43: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpo4wzjlrx_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpo4wzjlrx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp4i1b5_20_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp4i1b5_20_test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp4i1b5_20_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp4i1b5_20_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7,\
    \ 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 1 {\n        return x\n    }\n    if n == 2 {\n        return\
    \ y\n    }\n    if n % 2 == 0 {\n        return x_or_y(n-1, x, y)\n    }\n   \
    \ return x_or_y(n-1, y, x)\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp2zmc6u0y_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2zmc6u0y_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073847
