name: HumanEval_4_mean_absolute_deviation
language: go_test.go
prompt: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n    \"\
  fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
  // around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute\
  \ difference between each\n// element and a centerpoint (mean in this case):\n//\
  \ MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
  // 1.0\nfunc mean_absolute_deviation(numbers []float64) float64 {\n"
tests: "func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5\
  \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n\
  \     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n\
    \    for i := range diff {\n        diff[i] = numbers[i] - mean\n    }\n    return\
    \ mean(diff)\n}\n", "    mean := mean(numbers)\n    return mad(numbers, mean)\n\
    }\n", "    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    for _, number := range numbers {\n        mean += number\n    \
    \    sumOfSquares += number * number\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\
    \ - sumOfSquares / float64(len(numbers))\n}\n", "    mean := mean(numbers)\n \
    \   diff := make([]float64, len(numbers))\n    for i := range numbers {\n    \
    \    diff[i] = numbers[i] - mean\n    }\n    return mean(diff)\n}\n", "    mean\
    \ := mean(numbers)\n    diff := make([]float64, len(numbers))\n    for i := range\
    \ diff {\n        diff[i] = numbers[i] - mean\n    }\n    return average(diff)\n\
    }\n", "    var mean float64\n    var sum float64\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n  \
    \  return math.Abs(mean - mean_(numbers))\n}\n", "    mean := mean(numbers)\n\
    \    return mad(numbers, mean)\n}\n", "    mean := mean(numbers)\n    return mad(numbers,\
    \ mean)\n}\n", "    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n  \
    \  return mean(diff)\n}\n", "    var mean float64\n    var sumOfSquares float64\n\
    \    var sumOfSquareOfDifferences float64\n    for _, number := range numbers\
    \ {\n        mean += number\n        sumOfSquares += number * number\n       \
    \ sumOfSquareOfDifferences += (number - mean) * (number - mean)\n    }\n    return\
    \ sumOfSquareOfDifferences / float64(len(numbers))\n}\n", "    if len(numbers)\
    \ < 1 {\n        return 0.0\n    }\n    mean := mean(numbers)\n    diff := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        diff[i] = numbers[i] -\
    \ mean\n    }\n    return mean(diff)\n}\n", "    var mean float64\n    var sumOfSquares\
    \ float64\n    var sumOfSquareOfDifferences float64\n    for _, number := range\
    \ numbers {\n        mean += number\n        sumOfSquares += number * number\n\
    \        sumOfSquareOfDifferences += (number - mean) * (number - mean)\n    }\n\
    \    return sumOfSquareOfDifferences / float64(len(numbers))\n}\n", "    var mean\
    \ float64\n    var sum float64\n    for _, number := range numbers {\n       \
    \ sum += number\n    }\n    mean = sum / float64(len(numbers))\n    return math.Abs(mean\
    \ - mean(numbers))\n}\n", "    var mean float64\n    var sumOfSquares float64\n\
    \    for _, number := range numbers {\n        mean += number\n        sumOfSquares\
    \ += number * number\n    }\n    mean = mean / float64(len(numbers))\n    return\
    \ sumOfSquares / float64(len(numbers)) - mean * mean\n}\n", "    mean := mean(numbers)\n\
    \    diff := make([]float64, len(numbers))\n    for i := range numbers {\n   \
    \     diff[i] = numbers[i] - mean\n    }\n    return mean(diff)\n}\n", "    mean\
    \ := mean(numbers)\n    return average(numbers) - mean\n}\n", "    var mean float64\n\
    \    var sumOfSquares float64\n    var sumOfSquareOfDifferences float64\n    for\
    \ _, number := range numbers {\n        mean += number\n        sumOfSquares +=\
    \ number * number\n        sumOfSquareOfDifferences += (number - mean) * (number\
    \ - mean)\n    }\n    return sumOfSquareOfDifferences / float64(len(numbers))\n\
    }\n", "    mean := mean(numbers)\n    diff := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        diff[i] = numbers[i] - mean\n    }\n  \
    \  return mean(diff)\n}\n", "    mean := mean(numbers)\n    diff := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        diff[i] = numbers[i] -\
    \ mean\n    }\n    return mean(diff)\n}\n", "    mean := mean(numbers)\n    diff\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        diff[i]\
    \ = numbers[i] - mean\n    }\n    return mean(diff)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
