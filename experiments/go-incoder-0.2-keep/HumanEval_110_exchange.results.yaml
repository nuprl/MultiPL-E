language: go_test.go
name: HumanEval_110_exchange
results:
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfojko3o_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpw1g7skzv_test.go:46: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpw1g7skzv_test.go:46: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpw1g7skzv_test.go:46:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpw1g7skzv_test.go:46: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpw1g7skzv_test.go:46: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpw1g7skzv_test.go:46: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpw1g7skzv_test.go:46:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc4guehgd_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfojko3o_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfojko3o_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfojko3o_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfojko3o_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfojko3o_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpqho6xdgg_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpqho6xdgg_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpqho6xdgg_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpw1g7skzv_test.go:46: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpw1g7skzv_test.go:46: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpw1g7skzv_test.go:46:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpw1g7skzv_test.go:46: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpw1g7skzv_test.go:46: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpw1g7skzv_test.go:46: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpw1g7skzv_test.go:46:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfojko3o_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc4guehgd_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfojko3o_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpqho6xdgg_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpqho6xdgg_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpqho6xdgg_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qlilzh6_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qlilzh6_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc4guehgd_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc4guehgd_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfojko3o_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9pets7mk_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9pets7mk_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9pets7mk_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71ghl79t_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc4guehgd_test.go:275:6: expected ''('', found TestExchange

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpqho6xdgg_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpqho6xdgg_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpqho6xdgg_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpqho6xdgg_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpqho6xdgg_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpqho6xdgg_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpqho6xdgg_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dp4ctzu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    \n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpla02mfpz_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpla02mfpz_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpla02mfpz_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    \n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9aar7ihh_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9aar7ihh_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9aar7ihh_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
