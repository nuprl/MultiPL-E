name: HumanEval_94_skjkasdkd
language: go_test.go
prompt: "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You are given a list of integers.\n// You need to find the largest prime value\
  \ and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n//\
  \ For lst = [0,8,1,2,1,7] the output should be 7\nfunc skjkasdkd(lst []int) int\
  \ {\n"
tests: "func TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
  \ 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1,\
  \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n   \
  \  { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71,\
  \ 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0,\
  \ 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2,\
  \ 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n\
  \     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     {\
  \ actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    max := 0\n    prime := true\n    for _, v := range lst {\n    \
    \    if v == 0 {\n            continue\n        }\n        for i := 2; i <= v/2;\
    \ i++ {\n            if v%i == 0 {\n                prime = false\n          \
    \      break\n            }\n        }\n        if prime {\n            max +=\
    \ v\n        }\n        prime = true\n    }\n    return max\n}\n", "    max :=\
    \ 0\n    prime := 2\n    for _, v := range lst {\n        if v%prime == 0 {\n\
    \            max += v%prime\n        }\n        prime++\n    }\n    return max\n\
    }\n", "    max := 0\n    prime := 2\n    for _, v := range lst {\n        if v%prime\
    \ == 0 {\n            max += v%prime\n        }\n        prime++\n    }\n    return\
    \ max\n}\n", "    max := 0\n    prime := 2\n    for _, v := range lst {\n    \
    \    if v%prime == 0 {\n            max += v%prime\n        }\n        prime++\n\
    \    }\n    return max\n}\n", "    max := 0\n    prime := true\n    for _, v :=\
    \ range lst {\n        if v == 0 {\n            continue\n        }\n        for\
    \ i := 2; i <= v/2; i++ {\n            if v%i == 0 {\n                prime =\
    \ false\n                break\n            }\n        }\n        if prime {\n\
    \            max += v\n        }\n        prime = true\n    }\n    return max\n\
    }\n", "    max := 0\n    prime := 2\n    for _, v := range lst {\n        if v\
    \ > max {\n            max = v\n        }\n        if v%prime == 0 {\n       \
    \     prime++\n        }\n    }\n    return max\n}\n", "    var maxPrime int =\
    \ 0\n    var maxPrimeDigit int = 0\n    var maxPrimeDigitsCount int = 0\n    var\
    \ maxPrimeDigitsSumDigits int = 0\n    var maxPrimeDigitsSumDigitsCount int =\
    \ 0\n    var maxPrimeDigitsSumDigitsCount2 int = 0\n    var maxPrimeDigitsSumDigitsCount3\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount4 int = 0\n    var maxPrimeDigitsSumDigitsCount5\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount6 int = 0\n    var maxPrimeDigitsSumDigitsCount7\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount8 int = 0\n    var maxPrimeDigitsSumDigitsCount9\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount10 int = 0\n    var maxPrimeDigitsSumDigitsCount11\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount12 int = 0\n    var maxPrimeDigitsSumDigitsCount13\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount14 int = 0\n    var maxPrimeDigitsSumDigitsCount15\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount16 int = 0\n    var maxPrimeDigitsSumDigitsCount17\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount18 int = 0\n    var maxPrimeDigitsSumDigitsCount19\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount20 int = 0\n    var maxPrimeDigitsSumDigitsCount21\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount22 int = 0\n    var maxPrimeDigitsSumDigitsCount23\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount24 int = 0\n    var maxPrimeDigitsSumDigitsCount25\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount26 int = 0\n    var maxPrimeDigitsSumDigitsCount27\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount28 int = 0\n    var maxPrimeDigitsSumDigitsCount29\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount30 int = 0\n    var maxPrimeDigitsSumDigitsCount31\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount32 int = 0\n    var maxPrimeDigitsSumDigitsCount33\
    \ int = 0\n    var maxPrimeDigitsSumDigitsCount34 int", "    max := 0\n    prime\
    \ := 0\n    for _, v := range lst {\n        if v > max {\n            max = v\n\
    \            prime = 1\n        }\n        if v%2 == 0 {\n            prime =\
    \ 0\n        }\n        if prime == 1 {\n            prime = 2\n        }\n  \
    \  }\n    return max\n}\n", "    var maxPrime int\n    var maxPrimeIndex int\n\
    \    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == 0\
    \ {\n            continue\n        }\n        for j := i + 1; j < len(lst); j++\
    \ {\n            if lst[j] == 0 {\n                continue\n            }\n \
    \           if lst[i]*lst[j] > maxPrime {\n                maxPrime = lst[i]*lst[j]\n\
    \                maxPrimeIndex = i\n            }\n        }\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] == 0 {\n            continue\n\
    \        }\n        if lst[i]*maxPrime == maxPrime {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n", "    max := 0\n    max := lst[0]\n  \
    \  for _, v := range lst {\n        if v > max {\n            max = v\n      \
    \  }\n    }\n    sum := 0\n    for _, v := range lst {\n        if v%max == 0\
    \ {\n            sum += int(v / max)\n        }\n    }\n    return sum\n}\n",
  "    max := 0\n    sum := 0\n    for _, v := range lst {\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for _, v := range lst {\n        if\
    \ v%max == 0 {\n            sum += int(v / max)\n        }\n    }\n    return\
    \ sum\n}\n", "    max := 0\n    max := lst[0]\n    for _, v := range lst {\n \
    \       if v > max {\n            max = v\n        }\n    }\n    sum := 0\n  \
    \  for _, v := range lst {\n        if v == max {\n            sum += int(v)\n\
    \        }\n    }\n    return sum\n}\n", "    max := 0\n    max := lst[0]\n  \
    \  for _, v := range lst {\n        if v > max {\n            max = v\n      \
    \  }\n    }\n    sum := 0\n    for _, v := range lst {\n        if v == max {\n\
    \            sum += int(v)\n        }\n    }\n    return sum\n}\n", "    max :=\
    \ 0\n    prime := 2\n    for _, v := range lst {\n        if v%prime == 0 {\n\
    \            max += prime\n        }\n        prime++\n    }\n    return max\n\
    }\n", "    max := 0\n    prime := 0\n    sum := 0\n    for _, v := range lst {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    for _, v :=\
    \ range lst {\n        if v%max == 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n", "    max := 0\n    prime := true\n    for _, v := range\
    \ lst {\n        if v == 0 {\n            continue\n        }\n        if prime\
    \ {\n            if v%2 == 0 {\n                max = max * 2 + v\n          \
    \  } else {\n                max = max * 3 + v\n            }\n        } else\
    \ {\n            if v%2 == 0 {\n                max = max * 3 + v\n          \
    \  } else {\n                max = max * 3 + v\n            }\n        }\n   \
    \     prime = !prime\n    }\n    return max\n}\n", "    max := 0\n    max += lst[0]\n\
    \    for _, v := range lst[1:] {\n        if v > max {\n            max = v\n\
    \        }\n    }\n    return max\n}\n", "    max := 0\n    sum := 0\n    for\
    \ _, v := range lst {\n        if v > max {\n            max = v\n        }\n\
    \    }\n    for _, v := range lst {\n        if v%max == 0 {\n            sum\
    \ += int(v / max)\n        }\n    }\n    return sum\n}\n", "    max := 0\n   \
    \ max := lst[0]\n    for _, v := range lst {\n        if v > max {\n         \
    \   max = v\n        }\n    }\n    sum := 0\n    for _, v := range lst {\n   \
    \     if v == max {\n            sum += int(v)\n        }\n    }\n    return sum\n\
    }\n", "    max := 0\n    prime := 0\n    for _, v := range lst {\n        if v%2\
    \ == 0 {\n            max = v\n        } else {\n            prime = max\n   \
    \         max = v/2\n        }\n    }\n    return prime\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
