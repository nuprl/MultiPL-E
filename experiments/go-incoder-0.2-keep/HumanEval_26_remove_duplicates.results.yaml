language: go_test.go
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    seen := make(map[int]bool)\n    for _, number := range\
    \ numbers {\n        if seen[number] {\n            continue\n        }\n    \
    \    seen[number] = true\n        result = append(result, number)\n    }\n   \
    \ return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmptpuujqh0_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    var seen map[int]bool\n    for _, number := range numbers\
    \ {\n        if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmp5qf9bhl9_test.go:19\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmp5qf9bhl9_test.go:33\
    \ +0x105\ntesting.tRunner(0xc0000cc340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    var seen map[int]bool\n    for _, number := range numbers\
    \ {\n        if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmp5qf9bhl9_test.go:19\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmp5qf9bhl9_test.go:33\
    \ +0x105\ntesting.tRunner(0xc0000cc340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    seen := make(map[int]bool)\n    for _, number := range\
    \ numbers {\n        if _, ok := seen[number]; ok {\n            continue\n  \
    \      }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp13ngwtz__test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    var seen map[int]bool\n    for _, number := range numbers\
    \ {\n        if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmp5qf9bhl9_test.go:19\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmp5qf9bhl9_test.go:33\
    \ +0x105\ntesting.tRunner(0xc0000cc340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    seen := make(map[int]bool)\n    for _, number := range\
    \ numbers {\n        if seen[number] {\n            continue\n        }\n    \
    \    seen[number] = true\n        result = append(result, number)\n    }\n   \
    \ return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmptpuujqh0_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpw1ddba1k_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    seen := make(map[int]bool)\n    for _, n := range numbers\
    \ {\n        if seen[n] {\n            continue\n        }\n        seen[n] =\
    \ true\n        result = append(result, n)\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpmd1v91fk_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpw1ddba1k_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    seen := make(map[int]bool)\n    for _, n := range numbers\
    \ {\n        if seen[n] {\n            continue\n        }\n        seen[n] =\
    \ true\n        result = append(result, n)\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpmd1v91fk_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    seen := make(map[int]bool)\n    for _, number := range\
    \ numbers {\n        if seen[number] {\n            continue\n        }\n    \
    \    seen[number] = true\n        result = append(result, number)\n    }\n   \
    \ return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmptpuujqh0_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpw1ddba1k_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    seen := make(map[int]bool)\n    for _, number := range\
    \ numbers {\n        if seen[number] {\n            continue\n        }\n    \
    \    seen[number] = true\n        result = append(result, number)\n    }\n   \
    \ return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmptpuujqh0_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    var seen map[int]bool\n    for _, number := range numbers\
    \ {\n        if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmp5qf9bhl9_test.go:19\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmp5qf9bhl9_test.go:33\
    \ +0x105\ntesting.tRunner(0xc0000cc340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    var seen map[int]bool\n    for _, n := range numbers\
    \ {\n        if seen[n] {\n            continue\n        }\n        seen[n] =\
    \ true\n        result = append(result, n)\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmpjx64qykb_test.go:19\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmpjx64qykb_test.go:33\
    \ +0x105\ntesting.tRunner(0xc0000cc340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpw1ddba1k_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpw1ddba1k_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    var seen map[int]bool\n    for _, number := range numbers\
    \ {\n        if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmp5qf9bhl9_test.go:19\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmp5qf9bhl9_test.go:33\
    \ +0x105\ntesting.tRunner(0xc0000cc340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3ixnm8t6_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbmmyrhcn_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    var result []int\n    seen := make(map[int]bool)\n    for _, number := range\
    \ numbers {\n        if seen[number] {\n            continue\n        }\n    \
    \    seen[number] = true\n        result = append(result, number)\n    }\n   \
    \ return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmptpuujqh0_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunc remove_duplicates(numbers []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp_2ppovgl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073886
